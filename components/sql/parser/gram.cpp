/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Substitute the variable and function names.  */
#define yyparse base_yyparse
#define yylex base_yylex
#define yyerror base_yyerror
#define yydebug base_yydebug
#define yynerrs base_yynerrs

/* First part of user prologue.  */
#line 1 "gram.y"

/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 2006-2010, Greenplum inc
 * Portions Copyright (c) 2012-Present Pivotal Software, Inc.
 * Portions Copyright (c) 1996-2014, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET SQL_inheritance TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.  The handling of SQL_inheritance is
 *	  a good example.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "gramparse.h"
#include "guc.h"
#include "nodes/makefuncs.h"
#include "nodes/parsenodes.h"
#include "pg_functions.h"
#include <cstring>
#include <ctype.h>
#include <limits.h>

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N)                                                                                \
    do {                                                                                                               \
        if ((N) > 0)                                                                                                   \
            (Current) = (Rhs)[1];                                                                                      \
        else                                                                                                           \
            (Current) = (-1);                                                                                          \
    } while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE pfree

/* Private struct for the result of privilege_target production */
typedef struct PrivTarget {
    GrantTargetType targtype;
    GrantObjectType objtype;
    List* objs;
} PrivTarget;

/* ConstraintAttributeSpec yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE 0x01
#define CAS_DEFERRABLE 0x02
#define CAS_INITIALLY_IMMEDIATE 0x04
#define CAS_INITIALLY_DEFERRED 0x08
#define CAS_NOT_VALID 0x10
#define CAS_NO_INHERIT 0x20

#define parser_yyerror(msg) scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos) scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE* yylloc, core_yyscan_t yyscanner, const char* msg);
static Node* makeColumnRef(char* colname, List* indirection, int location, core_yyscan_t yyscanner);
static Node* makeTypeCast(Node* arg, TypeName* type, int location);
static Node* makeStringConst(char* str, int location);
static Node* makeStringConstCast(char* str, int location, TypeName* type);
static Node* makeIntConst(int val, int location);
static Node* makeFloatConst(char* str, int location);
static Node* makeBitStringConst(char* str, int location);
static Node* makeNullAConst(int location);
static Node* makeAConst(Value* v, int location);
static Node* makeBoolAConst(bool state, int location);
static void check_qualified_name(List* names, core_yyscan_t yyscanner);
static List* check_func_name(List* names, core_yyscan_t yyscanner);
static List* check_indirection(List* indirection, core_yyscan_t yyscanner);
static List* extractArgTypes(List* parameters);
static List* extractAggrArgTypes(List* aggrargs);
static List* makeOrderedSetArgs(List* directargs, List* orderedargs, core_yyscan_t yyscanner);
static void insertSelectOptions(SelectStmt* stmt,
                                List* sortClause,
                                List* lockingClause,
                                Node* limitOffset,
                                Node* limitCount,
                                WithClause* withClause,
                                core_yyscan_t yyscanner);
static Node* makeSetOp(SetOperation op, bool all, Node* larg, Node* rarg);
static Node* doNegate(Node* n, int location);
static void doNegateFloat(Value* v);
static Node* makeAArrayExpr(List* elements, int location);
static Node* makeXmlExpr(XmlExprOp op, char* name, List* named_args, List* args, int location);
static List* mergeTableFuncParameters(List* func_args, List* columns);
static TypeName* TableFuncTypeName(List* columns);
static RangeVar* makeRangeVarFromAnyName(List* names, int position, core_yyscan_t yyscanner);
static void
SplitColQualList(List* qualList, List** constraintList, CollateClause** collClause, core_yyscan_t yyscanner);
static void processCASbits(int cas_bits,
                           int location,
                           const char* constrType,
                           bool* deferrable,
                           bool* initdeferred,
                           bool* not_valid,
                           bool* no_inherit,
                           core_yyscan_t yyscanner);
static Node* makeRecursiveViewSelect(char* relname, List* aliases, Node* query);

static void checkWindowExclude(void);
static Node* makeIsNotDistinctFromNode(Node* expr, int position);
List* SystemFuncName(char* name);
TypeName* SystemTypeName(char* name);

#line 240 "gram.cpp"

#ifndef YY_CAST
#ifdef __cplusplus
#define YY_CAST(Type, Val) static_cast<Type>(Val)
#define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type>(Val)
#else
#define YY_CAST(Type, Val) ((Type)(Val))
#define YY_REINTERPRET_CAST(Type, Val) ((Type)(Val))
#endif
#endif
#ifndef YY_NULLPTR
#if defined __cplusplus
#if 201103L <= __cplusplus
#define YY_NULLPTR nullptr
#else
#define YY_NULLPTR 0
#endif
#else
#define YY_NULLPTR ((void*) 0)
#endif
#endif

#include "gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
    YYSYMBOL_YYEMPTY = -2,
    YYSYMBOL_YYEOF = 0,                                            /* "end of file"  */
    YYSYMBOL_YYerror = 1,                                          /* error  */
    YYSYMBOL_YYUNDEF = 2,                                          /* "invalid token"  */
    YYSYMBOL_IDENT = 3,                                            /* IDENT  */
    YYSYMBOL_FCONST = 4,                                           /* FCONST  */
    YYSYMBOL_SCONST = 5,                                           /* SCONST  */
    YYSYMBOL_BCONST = 6,                                           /* BCONST  */
    YYSYMBOL_XCONST = 7,                                           /* XCONST  */
    YYSYMBOL_Op = 8,                                               /* Op  */
    YYSYMBOL_ICONST = 9,                                           /* ICONST  */
    YYSYMBOL_PARAM = 10,                                           /* PARAM  */
    YYSYMBOL_TYPECAST = 11,                                        /* TYPECAST  */
    YYSYMBOL_DOT_DOT = 12,                                         /* DOT_DOT  */
    YYSYMBOL_COLON_EQUALS = 13,                                    /* COLON_EQUALS  */
    YYSYMBOL_ABORT_P = 14,                                         /* ABORT_P  */
    YYSYMBOL_ABSOLUTE_P = 15,                                      /* ABSOLUTE_P  */
    YYSYMBOL_ACCESS = 16,                                          /* ACCESS  */
    YYSYMBOL_ACTION = 17,                                          /* ACTION  */
    YYSYMBOL_ADD_P = 18,                                           /* ADD_P  */
    YYSYMBOL_ADMIN = 19,                                           /* ADMIN  */
    YYSYMBOL_AFTER = 20,                                           /* AFTER  */
    YYSYMBOL_AGGREGATE = 21,                                       /* AGGREGATE  */
    YYSYMBOL_ALL = 22,                                             /* ALL  */
    YYSYMBOL_ALSO = 23,                                            /* ALSO  */
    YYSYMBOL_ALTER = 24,                                           /* ALTER  */
    YYSYMBOL_ALWAYS = 25,                                          /* ALWAYS  */
    YYSYMBOL_ANALYSE = 26,                                         /* ANALYSE  */
    YYSYMBOL_ANALYZE = 27,                                         /* ANALYZE  */
    YYSYMBOL_AND = 28,                                             /* AND  */
    YYSYMBOL_ANY = 29,                                             /* ANY  */
    YYSYMBOL_ARRAY = 30,                                           /* ARRAY  */
    YYSYMBOL_AS = 31,                                              /* AS  */
    YYSYMBOL_ASC = 32,                                             /* ASC  */
    YYSYMBOL_ASSERTION = 33,                                       /* ASSERTION  */
    YYSYMBOL_ASSIGNMENT = 34,                                      /* ASSIGNMENT  */
    YYSYMBOL_ASYMMETRIC = 35,                                      /* ASYMMETRIC  */
    YYSYMBOL_AT = 36,                                              /* AT  */
    YYSYMBOL_ATTRIBUTE = 37,                                       /* ATTRIBUTE  */
    YYSYMBOL_AUTHORIZATION = 38,                                   /* AUTHORIZATION  */
    YYSYMBOL_BACKWARD = 39,                                        /* BACKWARD  */
    YYSYMBOL_BEFORE = 40,                                          /* BEFORE  */
    YYSYMBOL_BEGIN_P = 41,                                         /* BEGIN_P  */
    YYSYMBOL_BETWEEN = 42,                                         /* BETWEEN  */
    YYSYMBOL_BIGINT = 43,                                          /* BIGINT  */
    YYSYMBOL_BINARY = 44,                                          /* BINARY  */
    YYSYMBOL_BIT = 45,                                             /* BIT  */
    YYSYMBOL_BOOLEAN_P = 46,                                       /* BOOLEAN_P  */
    YYSYMBOL_BOTH = 47,                                            /* BOTH  */
    YYSYMBOL_BY = 48,                                              /* BY  */
    YYSYMBOL_CACHE = 49,                                           /* CACHE  */
    YYSYMBOL_CALLED = 50,                                          /* CALLED  */
    YYSYMBOL_CASCADE = 51,                                         /* CASCADE  */
    YYSYMBOL_CASCADED = 52,                                        /* CASCADED  */
    YYSYMBOL_CASE = 53,                                            /* CASE  */
    YYSYMBOL_CAST = 54,                                            /* CAST  */
    YYSYMBOL_CATALOG_P = 55,                                       /* CATALOG_P  */
    YYSYMBOL_CHAIN = 56,                                           /* CHAIN  */
    YYSYMBOL_CHAR_P = 57,                                          /* CHAR_P  */
    YYSYMBOL_CHARACTER = 58,                                       /* CHARACTER  */
    YYSYMBOL_CHARACTERISTICS = 59,                                 /* CHARACTERISTICS  */
    YYSYMBOL_CHECK = 60,                                           /* CHECK  */
    YYSYMBOL_CHECKPOINT = 61,                                      /* CHECKPOINT  */
    YYSYMBOL_CLASS = 62,                                           /* CLASS  */
    YYSYMBOL_CLOSE = 63,                                           /* CLOSE  */
    YYSYMBOL_CLUSTER = 64,                                         /* CLUSTER  */
    YYSYMBOL_COALESCE = 65,                                        /* COALESCE  */
    YYSYMBOL_COLLATE = 66,                                         /* COLLATE  */
    YYSYMBOL_COLLATION = 67,                                       /* COLLATION  */
    YYSYMBOL_COLUMN = 68,                                          /* COLUMN  */
    YYSYMBOL_COMMENT = 69,                                         /* COMMENT  */
    YYSYMBOL_COMMENTS = 70,                                        /* COMMENTS  */
    YYSYMBOL_COMMIT = 71,                                          /* COMMIT  */
    YYSYMBOL_COMMITTED = 72,                                       /* COMMITTED  */
    YYSYMBOL_CONCURRENCY = 73,                                     /* CONCURRENCY  */
    YYSYMBOL_CONCURRENTLY = 74,                                    /* CONCURRENTLY  */
    YYSYMBOL_CONFIGURATION = 75,                                   /* CONFIGURATION  */
    YYSYMBOL_CONNECTION = 76,                                      /* CONNECTION  */
    YYSYMBOL_CONSTRAINT = 77,                                      /* CONSTRAINT  */
    YYSYMBOL_CONSTRAINTS = 78,                                     /* CONSTRAINTS  */
    YYSYMBOL_CONTENT_P = 79,                                       /* CONTENT_P  */
    YYSYMBOL_CONTINUE_P = 80,                                      /* CONTINUE_P  */
    YYSYMBOL_CONVERSION_P = 81,                                    /* CONVERSION_P  */
    YYSYMBOL_COPY = 82,                                            /* COPY  */
    YYSYMBOL_COST = 83,                                            /* COST  */
    YYSYMBOL_CREATE = 84,                                          /* CREATE  */
    YYSYMBOL_CROSS = 85,                                           /* CROSS  */
    YYSYMBOL_CSV = 86,                                             /* CSV  */
    YYSYMBOL_CURRENT_P = 87,                                       /* CURRENT_P  */
    YYSYMBOL_CURRENT_CATALOG = 88,                                 /* CURRENT_CATALOG  */
    YYSYMBOL_CURRENT_DATE = 89,                                    /* CURRENT_DATE  */
    YYSYMBOL_CURRENT_ROLE = 90,                                    /* CURRENT_ROLE  */
    YYSYMBOL_CURRENT_SCHEMA = 91,                                  /* CURRENT_SCHEMA  */
    YYSYMBOL_CURRENT_TIME = 92,                                    /* CURRENT_TIME  */
    YYSYMBOL_CURRENT_TIMESTAMP = 93,                               /* CURRENT_TIMESTAMP  */
    YYSYMBOL_CURRENT_USER = 94,                                    /* CURRENT_USER  */
    YYSYMBOL_CURSOR = 95,                                          /* CURSOR  */
    YYSYMBOL_CYCLE = 96,                                           /* CYCLE  */
    YYSYMBOL_DATA_P = 97,                                          /* DATA_P  */
    YYSYMBOL_DATABASE = 98,                                        /* DATABASE  */
    YYSYMBOL_DAY_P = 99,                                           /* DAY_P  */
    YYSYMBOL_DEALLOCATE = 100,                                     /* DEALLOCATE  */
    YYSYMBOL_DEC = 101,                                            /* DEC  */
    YYSYMBOL_DECIMAL_P = 102,                                      /* DECIMAL_P  */
    YYSYMBOL_DECLARE = 103,                                        /* DECLARE  */
    YYSYMBOL_DEFAULT = 104,                                        /* DEFAULT  */
    YYSYMBOL_DEFAULTS = 105,                                       /* DEFAULTS  */
    YYSYMBOL_DEFERRABLE = 106,                                     /* DEFERRABLE  */
    YYSYMBOL_DEFERRED = 107,                                       /* DEFERRED  */
    YYSYMBOL_DEFINER = 108,                                        /* DEFINER  */
    YYSYMBOL_DELETE_P = 109,                                       /* DELETE_P  */
    YYSYMBOL_DELIMITER = 110,                                      /* DELIMITER  */
    YYSYMBOL_DELIMITERS = 111,                                     /* DELIMITERS  */
    YYSYMBOL_DESC = 112,                                           /* DESC  */
    YYSYMBOL_DICTIONARY = 113,                                     /* DICTIONARY  */
    YYSYMBOL_DISABLE_P = 114,                                      /* DISABLE_P  */
    YYSYMBOL_DISCARD = 115,                                        /* DISCARD  */
    YYSYMBOL_DISTINCT = 116,                                       /* DISTINCT  */
    YYSYMBOL_DO = 117,                                             /* DO  */
    YYSYMBOL_DOCUMENT_P = 118,                                     /* DOCUMENT_P  */
    YYSYMBOL_DOMAIN_P = 119,                                       /* DOMAIN_P  */
    YYSYMBOL_DOUBLE_P = 120,                                       /* DOUBLE_P  */
    YYSYMBOL_DROP = 121,                                           /* DROP  */
    YYSYMBOL_EACH = 122,                                           /* EACH  */
    YYSYMBOL_ELSE = 123,                                           /* ELSE  */
    YYSYMBOL_ENABLE_P = 124,                                       /* ENABLE_P  */
    YYSYMBOL_ENCODING = 125,                                       /* ENCODING  */
    YYSYMBOL_ENCRYPTED = 126,                                      /* ENCRYPTED  */
    YYSYMBOL_END_P = 127,                                          /* END_P  */
    YYSYMBOL_ENDPOINT = 128,                                       /* ENDPOINT  */
    YYSYMBOL_ENUM_P = 129,                                         /* ENUM_P  */
    YYSYMBOL_ESCAPE = 130,                                         /* ESCAPE  */
    YYSYMBOL_EVENT = 131,                                          /* EVENT  */
    YYSYMBOL_EXCEPT = 132,                                         /* EXCEPT  */
    YYSYMBOL_EXCLUDE = 133,                                        /* EXCLUDE  */
    YYSYMBOL_EXCLUDING = 134,                                      /* EXCLUDING  */
    YYSYMBOL_EXCLUSIVE = 135,                                      /* EXCLUSIVE  */
    YYSYMBOL_EXECUTE = 136,                                        /* EXECUTE  */
    YYSYMBOL_EXISTS = 137,                                         /* EXISTS  */
    YYSYMBOL_EXPLAIN = 138,                                        /* EXPLAIN  */
    YYSYMBOL_EXTENSION = 139,                                      /* EXTENSION  */
    YYSYMBOL_EXTERNAL = 140,                                       /* EXTERNAL  */
    YYSYMBOL_EXTRACT = 141,                                        /* EXTRACT  */
    YYSYMBOL_FALSE_P = 142,                                        /* FALSE_P  */
    YYSYMBOL_FAMILY = 143,                                         /* FAMILY  */
    YYSYMBOL_FETCH = 144,                                          /* FETCH  */
    YYSYMBOL_FILTER = 145,                                         /* FILTER  */
    YYSYMBOL_FIRST_P = 146,                                        /* FIRST_P  */
    YYSYMBOL_FLOAT_P = 147,                                        /* FLOAT_P  */
    YYSYMBOL_FOLLOWING = 148,                                      /* FOLLOWING  */
    YYSYMBOL_FOR = 149,                                            /* FOR  */
    YYSYMBOL_FORCE = 150,                                          /* FORCE  */
    YYSYMBOL_FOREIGN = 151,                                        /* FOREIGN  */
    YYSYMBOL_FORWARD = 152,                                        /* FORWARD  */
    YYSYMBOL_FREEZE = 153,                                         /* FREEZE  */
    YYSYMBOL_FROM = 154,                                           /* FROM  */
    YYSYMBOL_FULL = 155,                                           /* FULL  */
    YYSYMBOL_FUNCTION = 156,                                       /* FUNCTION  */
    YYSYMBOL_FUNCTIONS = 157,                                      /* FUNCTIONS  */
    YYSYMBOL_GLOBAL = 158,                                         /* GLOBAL  */
    YYSYMBOL_GRANT = 159,                                          /* GRANT  */
    YYSYMBOL_GRANTED = 160,                                        /* GRANTED  */
    YYSYMBOL_GREATEST = 161,                                       /* GREATEST  */
    YYSYMBOL_GROUP_P = 162,                                        /* GROUP_P  */
    YYSYMBOL_HANDLER = 163,                                        /* HANDLER  */
    YYSYMBOL_HAVING = 164,                                         /* HAVING  */
    YYSYMBOL_HEADER_P = 165,                                       /* HEADER_P  */
    YYSYMBOL_HOLD = 166,                                           /* HOLD  */
    YYSYMBOL_HOUR_P = 167,                                         /* HOUR_P  */
    YYSYMBOL_IDENTITY_P = 168,                                     /* IDENTITY_P  */
    YYSYMBOL_IF_P = 169,                                           /* IF_P  */
    YYSYMBOL_ILIKE = 170,                                          /* ILIKE  */
    YYSYMBOL_IMMEDIATE = 171,                                      /* IMMEDIATE  */
    YYSYMBOL_IMMUTABLE = 172,                                      /* IMMUTABLE  */
    YYSYMBOL_IMPLICIT_P = 173,                                     /* IMPLICIT_P  */
    YYSYMBOL_IN_P = 174,                                           /* IN_P  */
    YYSYMBOL_INCLUDING = 175,                                      /* INCLUDING  */
    YYSYMBOL_INCREMENT = 176,                                      /* INCREMENT  */
    YYSYMBOL_INDEX = 177,                                          /* INDEX  */
    YYSYMBOL_INDEXES = 178,                                        /* INDEXES  */
    YYSYMBOL_INHERIT = 179,                                        /* INHERIT  */
    YYSYMBOL_INHERITS = 180,                                       /* INHERITS  */
    YYSYMBOL_INITIALLY = 181,                                      /* INITIALLY  */
    YYSYMBOL_INLINE_P = 182,                                       /* INLINE_P  */
    YYSYMBOL_INNER_P = 183,                                        /* INNER_P  */
    YYSYMBOL_INOUT = 184,                                          /* INOUT  */
    YYSYMBOL_INPUT_P = 185,                                        /* INPUT_P  */
    YYSYMBOL_INSENSITIVE = 186,                                    /* INSENSITIVE  */
    YYSYMBOL_INSERT = 187,                                         /* INSERT  */
    YYSYMBOL_INSTEAD = 188,                                        /* INSTEAD  */
    YYSYMBOL_INT_P = 189,                                          /* INT_P  */
    YYSYMBOL_INTEGER = 190,                                        /* INTEGER  */
    YYSYMBOL_INTERSECT = 191,                                      /* INTERSECT  */
    YYSYMBOL_INTERVAL = 192,                                       /* INTERVAL  */
    YYSYMBOL_INTO = 193,                                           /* INTO  */
    YYSYMBOL_INVOKER = 194,                                        /* INVOKER  */
    YYSYMBOL_IS = 195,                                             /* IS  */
    YYSYMBOL_ISNULL = 196,                                         /* ISNULL  */
    YYSYMBOL_ISOLATION = 197,                                      /* ISOLATION  */
    YYSYMBOL_JOIN = 198,                                           /* JOIN  */
    YYSYMBOL_KEY = 199,                                            /* KEY  */
    YYSYMBOL_LABEL = 200,                                          /* LABEL  */
    YYSYMBOL_LANGUAGE = 201,                                       /* LANGUAGE  */
    YYSYMBOL_LARGE_P = 202,                                        /* LARGE_P  */
    YYSYMBOL_LAST_P = 203,                                         /* LAST_P  */
    YYSYMBOL_LATERAL_P = 204,                                      /* LATERAL_P  */
    YYSYMBOL_LC_COLLATE_P = 205,                                   /* LC_COLLATE_P  */
    YYSYMBOL_LC_CTYPE_P = 206,                                     /* LC_CTYPE_P  */
    YYSYMBOL_LEADING = 207,                                        /* LEADING  */
    YYSYMBOL_LEAKPROOF = 208,                                      /* LEAKPROOF  */
    YYSYMBOL_LEAST = 209,                                          /* LEAST  */
    YYSYMBOL_LEFT = 210,                                           /* LEFT  */
    YYSYMBOL_LEVEL = 211,                                          /* LEVEL  */
    YYSYMBOL_LIKE = 212,                                           /* LIKE  */
    YYSYMBOL_LIMIT = 213,                                          /* LIMIT  */
    YYSYMBOL_LISTEN = 214,                                         /* LISTEN  */
    YYSYMBOL_LOAD = 215,                                           /* LOAD  */
    YYSYMBOL_LOCAL = 216,                                          /* LOCAL  */
    YYSYMBOL_LOCALTIME = 217,                                      /* LOCALTIME  */
    YYSYMBOL_LOCALTIMESTAMP = 218,                                 /* LOCALTIMESTAMP  */
    YYSYMBOL_LOCATION = 219,                                       /* LOCATION  */
    YYSYMBOL_LOCK_P = 220,                                         /* LOCK_P  */
    YYSYMBOL_MAPPING = 221,                                        /* MAPPING  */
    YYSYMBOL_MATCH = 222,                                          /* MATCH  */
    YYSYMBOL_MATERIALIZED = 223,                                   /* MATERIALIZED  */
    YYSYMBOL_MAXVALUE = 224,                                       /* MAXVALUE  */
    YYSYMBOL_MEMORY_LIMIT = 225,                                   /* MEMORY_LIMIT  */
    YYSYMBOL_MEMORY_SHARED_QUOTA = 226,                            /* MEMORY_SHARED_QUOTA  */
    YYSYMBOL_MEMORY_SPILL_RATIO = 227,                             /* MEMORY_SPILL_RATIO  */
    YYSYMBOL_MINUTE_P = 228,                                       /* MINUTE_P  */
    YYSYMBOL_MINVALUE = 229,                                       /* MINVALUE  */
    YYSYMBOL_MODE = 230,                                           /* MODE  */
    YYSYMBOL_MONTH_P = 231,                                        /* MONTH_P  */
    YYSYMBOL_MOVE = 232,                                           /* MOVE  */
    YYSYMBOL_NAME_P = 233,                                         /* NAME_P  */
    YYSYMBOL_NAMES = 234,                                          /* NAMES  */
    YYSYMBOL_NATIONAL = 235,                                       /* NATIONAL  */
    YYSYMBOL_NATURAL = 236,                                        /* NATURAL  */
    YYSYMBOL_NCHAR = 237,                                          /* NCHAR  */
    YYSYMBOL_NEXT = 238,                                           /* NEXT  */
    YYSYMBOL_NO = 239,                                             /* NO  */
    YYSYMBOL_NONE = 240,                                           /* NONE  */
    YYSYMBOL_NOT = 241,                                            /* NOT  */
    YYSYMBOL_NOTHING = 242,                                        /* NOTHING  */
    YYSYMBOL_NOTIFY = 243,                                         /* NOTIFY  */
    YYSYMBOL_NOTNULL = 244,                                        /* NOTNULL  */
    YYSYMBOL_NOWAIT = 245,                                         /* NOWAIT  */
    YYSYMBOL_NULL_P = 246,                                         /* NULL_P  */
    YYSYMBOL_NULLIF = 247,                                         /* NULLIF  */
    YYSYMBOL_NULLS_P = 248,                                        /* NULLS_P  */
    YYSYMBOL_NUMERIC = 249,                                        /* NUMERIC  */
    YYSYMBOL_OBJECT_P = 250,                                       /* OBJECT_P  */
    YYSYMBOL_OF = 251,                                             /* OF  */
    YYSYMBOL_OFF = 252,                                            /* OFF  */
    YYSYMBOL_OFFSET = 253,                                         /* OFFSET  */
    YYSYMBOL_OIDS = 254,                                           /* OIDS  */
    YYSYMBOL_ON = 255,                                             /* ON  */
    YYSYMBOL_ONLY = 256,                                           /* ONLY  */
    YYSYMBOL_OPERATOR = 257,                                       /* OPERATOR  */
    YYSYMBOL_OPTION = 258,                                         /* OPTION  */
    YYSYMBOL_OPTIONS = 259,                                        /* OPTIONS  */
    YYSYMBOL_OR = 260,                                             /* OR  */
    YYSYMBOL_ORDER = 261,                                          /* ORDER  */
    YYSYMBOL_ORDINALITY = 262,                                     /* ORDINALITY  */
    YYSYMBOL_OUT_P = 263,                                          /* OUT_P  */
    YYSYMBOL_OUTER_P = 264,                                        /* OUTER_P  */
    YYSYMBOL_OVER = 265,                                           /* OVER  */
    YYSYMBOL_OVERLAPS = 266,                                       /* OVERLAPS  */
    YYSYMBOL_OVERLAY = 267,                                        /* OVERLAY  */
    YYSYMBOL_OWNED = 268,                                          /* OWNED  */
    YYSYMBOL_OWNER = 269,                                          /* OWNER  */
    YYSYMBOL_PARSER = 270,                                         /* PARSER  */
    YYSYMBOL_PARTIAL = 271,                                        /* PARTIAL  */
    YYSYMBOL_PARTITION = 272,                                      /* PARTITION  */
    YYSYMBOL_PASSING = 273,                                        /* PASSING  */
    YYSYMBOL_PASSWORD = 274,                                       /* PASSWORD  */
    YYSYMBOL_PLACING = 275,                                        /* PLACING  */
    YYSYMBOL_PLANS = 276,                                          /* PLANS  */
    YYSYMBOL_POSITION = 277,                                       /* POSITION  */
    YYSYMBOL_PRECEDING = 278,                                      /* PRECEDING  */
    YYSYMBOL_PRECISION = 279,                                      /* PRECISION  */
    YYSYMBOL_PRESERVE = 280,                                       /* PRESERVE  */
    YYSYMBOL_PREPARE = 281,                                        /* PREPARE  */
    YYSYMBOL_PREPARED = 282,                                       /* PREPARED  */
    YYSYMBOL_PRIMARY = 283,                                        /* PRIMARY  */
    YYSYMBOL_PRIOR = 284,                                          /* PRIOR  */
    YYSYMBOL_PRIVILEGES = 285,                                     /* PRIVILEGES  */
    YYSYMBOL_PROCEDURAL = 286,                                     /* PROCEDURAL  */
    YYSYMBOL_PROCEDURE = 287,                                      /* PROCEDURE  */
    YYSYMBOL_PROGRAM = 288,                                        /* PROGRAM  */
    YYSYMBOL_QUOTE = 289,                                          /* QUOTE  */
    YYSYMBOL_RANGE = 290,                                          /* RANGE  */
    YYSYMBOL_READ = 291,                                           /* READ  */
    YYSYMBOL_REAL = 292,                                           /* REAL  */
    YYSYMBOL_REASSIGN = 293,                                       /* REASSIGN  */
    YYSYMBOL_RECHECK = 294,                                        /* RECHECK  */
    YYSYMBOL_RECURSIVE = 295,                                      /* RECURSIVE  */
    YYSYMBOL_REF = 296,                                            /* REF  */
    YYSYMBOL_REFERENCES = 297,                                     /* REFERENCES  */
    YYSYMBOL_REFRESH = 298,                                        /* REFRESH  */
    YYSYMBOL_REINDEX = 299,                                        /* REINDEX  */
    YYSYMBOL_RELATIVE_P = 300,                                     /* RELATIVE_P  */
    YYSYMBOL_RELEASE = 301,                                        /* RELEASE  */
    YYSYMBOL_RENAME = 302,                                         /* RENAME  */
    YYSYMBOL_REPEATABLE = 303,                                     /* REPEATABLE  */
    YYSYMBOL_REPLACE = 304,                                        /* REPLACE  */
    YYSYMBOL_REPLICA = 305,                                        /* REPLICA  */
    YYSYMBOL_RESET = 306,                                          /* RESET  */
    YYSYMBOL_RESTART = 307,                                        /* RESTART  */
    YYSYMBOL_RESTRICT = 308,                                       /* RESTRICT  */
    YYSYMBOL_RETURNING = 309,                                      /* RETURNING  */
    YYSYMBOL_RETURNS = 310,                                        /* RETURNS  */
    YYSYMBOL_REVOKE = 311,                                         /* REVOKE  */
    YYSYMBOL_RIGHT = 312,                                          /* RIGHT  */
    YYSYMBOL_ROLE = 313,                                           /* ROLE  */
    YYSYMBOL_ROLLBACK = 314,                                       /* ROLLBACK  */
    YYSYMBOL_ROW = 315,                                            /* ROW  */
    YYSYMBOL_ROWS = 316,                                           /* ROWS  */
    YYSYMBOL_RULE = 317,                                           /* RULE  */
    YYSYMBOL_SAVEPOINT = 318,                                      /* SAVEPOINT  */
    YYSYMBOL_SCHEMA = 319,                                         /* SCHEMA  */
    YYSYMBOL_SCROLL = 320,                                         /* SCROLL  */
    YYSYMBOL_SEARCH = 321,                                         /* SEARCH  */
    YYSYMBOL_SECOND_P = 322,                                       /* SECOND_P  */
    YYSYMBOL_SECURITY = 323,                                       /* SECURITY  */
    YYSYMBOL_SELECT = 324,                                         /* SELECT  */
    YYSYMBOL_SEQUENCE = 325,                                       /* SEQUENCE  */
    YYSYMBOL_SEQUENCES = 326,                                      /* SEQUENCES  */
    YYSYMBOL_SERIALIZABLE = 327,                                   /* SERIALIZABLE  */
    YYSYMBOL_SERVER = 328,                                         /* SERVER  */
    YYSYMBOL_SESSION = 329,                                        /* SESSION  */
    YYSYMBOL_SESSION_USER = 330,                                   /* SESSION_USER  */
    YYSYMBOL_SET = 331,                                            /* SET  */
    YYSYMBOL_SETOF = 332,                                          /* SETOF  */
    YYSYMBOL_SHARE = 333,                                          /* SHARE  */
    YYSYMBOL_SHOW = 334,                                           /* SHOW  */
    YYSYMBOL_SIMILAR = 335,                                        /* SIMILAR  */
    YYSYMBOL_SIMPLE = 336,                                         /* SIMPLE  */
    YYSYMBOL_SMALLINT = 337,                                       /* SMALLINT  */
    YYSYMBOL_SNAPSHOT = 338,                                       /* SNAPSHOT  */
    YYSYMBOL_SOME = 339,                                           /* SOME  */
    YYSYMBOL_STABLE = 340,                                         /* STABLE  */
    YYSYMBOL_STANDALONE_P = 341,                                   /* STANDALONE_P  */
    YYSYMBOL_START = 342,                                          /* START  */
    YYSYMBOL_STATEMENT = 343,                                      /* STATEMENT  */
    YYSYMBOL_STATISTICS = 344,                                     /* STATISTICS  */
    YYSYMBOL_STDIN = 345,                                          /* STDIN  */
    YYSYMBOL_STDOUT = 346,                                         /* STDOUT  */
    YYSYMBOL_STORAGE = 347,                                        /* STORAGE  */
    YYSYMBOL_STRICT_P = 348,                                       /* STRICT_P  */
    YYSYMBOL_STRIP_P = 349,                                        /* STRIP_P  */
    YYSYMBOL_SUBSTRING = 350,                                      /* SUBSTRING  */
    YYSYMBOL_SYMMETRIC = 351,                                      /* SYMMETRIC  */
    YYSYMBOL_SYSID = 352,                                          /* SYSID  */
    YYSYMBOL_SYSTEM_P = 353,                                       /* SYSTEM_P  */
    YYSYMBOL_TABLE = 354,                                          /* TABLE  */
    YYSYMBOL_TABLES = 355,                                         /* TABLES  */
    YYSYMBOL_TABLESPACE = 356,                                     /* TABLESPACE  */
    YYSYMBOL_TEMP = 357,                                           /* TEMP  */
    YYSYMBOL_TEMPLATE = 358,                                       /* TEMPLATE  */
    YYSYMBOL_TEMPORARY = 359,                                      /* TEMPORARY  */
    YYSYMBOL_TEXT_P = 360,                                         /* TEXT_P  */
    YYSYMBOL_THEN = 361,                                           /* THEN  */
    YYSYMBOL_TIME = 362,                                           /* TIME  */
    YYSYMBOL_TIMESTAMP = 363,                                      /* TIMESTAMP  */
    YYSYMBOL_TO = 364,                                             /* TO  */
    YYSYMBOL_TRAILING = 365,                                       /* TRAILING  */
    YYSYMBOL_TRANSACTION = 366,                                    /* TRANSACTION  */
    YYSYMBOL_TREAT = 367,                                          /* TREAT  */
    YYSYMBOL_TRIGGER = 368,                                        /* TRIGGER  */
    YYSYMBOL_TRIM = 369,                                           /* TRIM  */
    YYSYMBOL_TRUE_P = 370,                                         /* TRUE_P  */
    YYSYMBOL_TRUNCATE = 371,                                       /* TRUNCATE  */
    YYSYMBOL_TRUSTED = 372,                                        /* TRUSTED  */
    YYSYMBOL_TYPE_P = 373,                                         /* TYPE_P  */
    YYSYMBOL_TYPES_P = 374,                                        /* TYPES_P  */
    YYSYMBOL_UNBOUNDED = 375,                                      /* UNBOUNDED  */
    YYSYMBOL_UNCOMMITTED = 376,                                    /* UNCOMMITTED  */
    YYSYMBOL_UNENCRYPTED = 377,                                    /* UNENCRYPTED  */
    YYSYMBOL_UNION = 378,                                          /* UNION  */
    YYSYMBOL_UNIQUE = 379,                                         /* UNIQUE  */
    YYSYMBOL_UNKNOWN = 380,                                        /* UNKNOWN  */
    YYSYMBOL_UNLISTEN = 381,                                       /* UNLISTEN  */
    YYSYMBOL_UNLOGGED = 382,                                       /* UNLOGGED  */
    YYSYMBOL_UNTIL = 383,                                          /* UNTIL  */
    YYSYMBOL_UPDATE = 384,                                         /* UPDATE  */
    YYSYMBOL_USER = 385,                                           /* USER  */
    YYSYMBOL_USING = 386,                                          /* USING  */
    YYSYMBOL_VACUUM = 387,                                         /* VACUUM  */
    YYSYMBOL_VALID = 388,                                          /* VALID  */
    YYSYMBOL_VALIDATE = 389,                                       /* VALIDATE  */
    YYSYMBOL_VALIDATOR = 390,                                      /* VALIDATOR  */
    YYSYMBOL_VALUE_P = 391,                                        /* VALUE_P  */
    YYSYMBOL_VALUES = 392,                                         /* VALUES  */
    YYSYMBOL_VARCHAR = 393,                                        /* VARCHAR  */
    YYSYMBOL_VARIADIC = 394,                                       /* VARIADIC  */
    YYSYMBOL_VARYING = 395,                                        /* VARYING  */
    YYSYMBOL_VERBOSE = 396,                                        /* VERBOSE  */
    YYSYMBOL_VERSION_P = 397,                                      /* VERSION_P  */
    YYSYMBOL_VIEW = 398,                                           /* VIEW  */
    YYSYMBOL_VIEWS = 399,                                          /* VIEWS  */
    YYSYMBOL_VOLATILE = 400,                                       /* VOLATILE  */
    YYSYMBOL_WHEN = 401,                                           /* WHEN  */
    YYSYMBOL_WHERE = 402,                                          /* WHERE  */
    YYSYMBOL_WHITESPACE_P = 403,                                   /* WHITESPACE_P  */
    YYSYMBOL_WINDOW = 404,                                         /* WINDOW  */
    YYSYMBOL_WITH = 405,                                           /* WITH  */
    YYSYMBOL_WITHIN = 406,                                         /* WITHIN  */
    YYSYMBOL_WITHOUT = 407,                                        /* WITHOUT  */
    YYSYMBOL_WORK = 408,                                           /* WORK  */
    YYSYMBOL_WRAPPER = 409,                                        /* WRAPPER  */
    YYSYMBOL_WRITE = 410,                                          /* WRITE  */
    YYSYMBOL_XML_P = 411,                                          /* XML_P  */
    YYSYMBOL_XMLATTRIBUTES = 412,                                  /* XMLATTRIBUTES  */
    YYSYMBOL_XMLCONCAT = 413,                                      /* XMLCONCAT  */
    YYSYMBOL_XMLELEMENT = 414,                                     /* XMLELEMENT  */
    YYSYMBOL_XMLEXISTS = 415,                                      /* XMLEXISTS  */
    YYSYMBOL_XMLFOREST = 416,                                      /* XMLFOREST  */
    YYSYMBOL_XMLPARSE = 417,                                       /* XMLPARSE  */
    YYSYMBOL_XMLPI = 418,                                          /* XMLPI  */
    YYSYMBOL_XMLROOT = 419,                                        /* XMLROOT  */
    YYSYMBOL_XMLSERIALIZE = 420,                                   /* XMLSERIALIZE  */
    YYSYMBOL_YEAR_P = 421,                                         /* YEAR_P  */
    YYSYMBOL_YES_P = 422,                                          /* YES_P  */
    YYSYMBOL_ZONE = 423,                                           /* ZONE  */
    YYSYMBOL_ACTIVE = 424,                                         /* ACTIVE  */
    YYSYMBOL_CONTAINS = 425,                                       /* CONTAINS  */
    YYSYMBOL_CPUSET = 426,                                         /* CPUSET  */
    YYSYMBOL_CPU_RATE_LIMIT = 427,                                 /* CPU_RATE_LIMIT  */
    YYSYMBOL_CREATEEXTTABLE = 428,                                 /* CREATEEXTTABLE  */
    YYSYMBOL_CUBE = 429,                                           /* CUBE  */
    YYSYMBOL_DECODE = 430,                                         /* DECODE  */
    YYSYMBOL_DENY = 431,                                           /* DENY  */
    YYSYMBOL_DISTRIBUTED = 432,                                    /* DISTRIBUTED  */
    YYSYMBOL_DXL = 433,                                            /* DXL  */
    YYSYMBOL_ERRORS = 434,                                         /* ERRORS  */
    YYSYMBOL_EVERY = 435,                                          /* EVERY  */
    YYSYMBOL_EXCHANGE = 436,                                       /* EXCHANGE  */
    YYSYMBOL_EXPAND = 437,                                         /* EXPAND  */
    YYSYMBOL_FIELDS = 438,                                         /* FIELDS  */
    YYSYMBOL_FILL = 439,                                           /* FILL  */
    YYSYMBOL_FORMAT = 440,                                         /* FORMAT  */
    YYSYMBOL_FULLSCAN = 441,                                       /* FULLSCAN  */
    YYSYMBOL_GROUP_ID = 442,                                       /* GROUP_ID  */
    YYSYMBOL_GROUPING = 443,                                       /* GROUPING  */
    YYSYMBOL_HASH = 444,                                           /* HASH  */
    YYSYMBOL_HOST = 445,                                           /* HOST  */
    YYSYMBOL_IGNORE_P = 446,                                       /* IGNORE_P  */
    YYSYMBOL_INCLUSIVE = 447,                                      /* INCLUSIVE  */
    YYSYMBOL_INITPLAN = 448,                                       /* INITPLAN  */
    YYSYMBOL_LIST = 449,                                           /* LIST  */
    YYSYMBOL_LOG_P = 450,                                          /* LOG_P  */
    YYSYMBOL_MASTER = 451,                                         /* MASTER  */
    YYSYMBOL_MEDIAN = 452,                                         /* MEDIAN  */
    YYSYMBOL_MISSING = 453,                                        /* MISSING  */
    YYSYMBOL_MODIFIES = 454,                                       /* MODIFIES  */
    YYSYMBOL_NEWLINE = 455,                                        /* NEWLINE  */
    YYSYMBOL_NOCREATEEXTTABLE = 456,                               /* NOCREATEEXTTABLE  */
    YYSYMBOL_NOOVERCOMMIT = 457,                                   /* NOOVERCOMMIT  */
    YYSYMBOL_ORDERED = 458,                                        /* ORDERED  */
    YYSYMBOL_OTHERS = 459,                                         /* OTHERS  */
    YYSYMBOL_OVERCOMMIT = 460,                                     /* OVERCOMMIT  */
    YYSYMBOL_PARALLEL = 461,                                       /* PARALLEL  */
    YYSYMBOL_RETRIEVE = 462,                                       /* RETRIEVE  */
    YYSYMBOL_PARTITIONS = 463,                                     /* PARTITIONS  */
    YYSYMBOL_PERCENT = 464,                                        /* PERCENT  */
    YYSYMBOL_PERSISTENTLY = 465,                                   /* PERSISTENTLY  */
    YYSYMBOL_PROTOCOL = 466,                                       /* PROTOCOL  */
    YYSYMBOL_QUEUE = 467,                                          /* QUEUE  */
    YYSYMBOL_RANDOMLY = 468,                                       /* RANDOMLY  */
    YYSYMBOL_READABLE = 469,                                       /* READABLE  */
    YYSYMBOL_READS = 470,                                          /* READS  */
    YYSYMBOL_REJECT_P = 471,                                       /* REJECT_P  */
    YYSYMBOL_REPLICATED = 472,                                     /* REPLICATED  */
    YYSYMBOL_RESOURCE = 473,                                       /* RESOURCE  */
    YYSYMBOL_ROLLUP = 474,                                         /* ROLLUP  */
    YYSYMBOL_ROOTPARTITION = 475,                                  /* ROOTPARTITION  */
    YYSYMBOL_SCATTER = 476,                                        /* SCATTER  */
    YYSYMBOL_SEGMENT = 477,                                        /* SEGMENT  */
    YYSYMBOL_SEGMENTS = 478,                                       /* SEGMENTS  */
    YYSYMBOL_SETS = 479,                                           /* SETS  */
    YYSYMBOL_SPLIT = 480,                                          /* SPLIT  */
    YYSYMBOL_SQL = 481,                                            /* SQL  */
    YYSYMBOL_SUBPARTITION = 482,                                   /* SUBPARTITION  */
    YYSYMBOL_THRESHOLD = 483,                                      /* THRESHOLD  */
    YYSYMBOL_TIES = 484,                                           /* TIES  */
    YYSYMBOL_VALIDATION = 485,                                     /* VALIDATION  */
    YYSYMBOL_WEB = 486,                                            /* WEB  */
    YYSYMBOL_WRITABLE = 487,                                       /* WRITABLE  */
    YYSYMBOL_YEZZEY = 488,                                         /* YEZZEY  */
    YYSYMBOL_NULLS_FIRST = 489,                                    /* NULLS_FIRST  */
    YYSYMBOL_NULLS_LAST = 490,                                     /* NULLS_LAST  */
    YYSYMBOL_WITH_ORDINALITY = 491,                                /* WITH_ORDINALITY  */
    YYSYMBOL_WITH_TIME = 492,                                      /* WITH_TIME  */
    YYSYMBOL_493_ = 493,                                           /* '='  */
    YYSYMBOL_494_ = 494,                                           /* '<'  */
    YYSYMBOL_495_ = 495,                                           /* '>'  */
    YYSYMBOL_POSTFIXOP = 496,                                      /* POSTFIXOP  */
    YYSYMBOL_497_ = 497,                                           /* '+'  */
    YYSYMBOL_498_ = 498,                                           /* '-'  */
    YYSYMBOL_499_ = 499,                                           /* '*'  */
    YYSYMBOL_500_ = 500,                                           /* '/'  */
    YYSYMBOL_501_ = 501,                                           /* '%'  */
    YYSYMBOL_502_ = 502,                                           /* '^'  */
    YYSYMBOL_UMINUS = 503,                                         /* UMINUS  */
    YYSYMBOL_504_ = 504,                                           /* '['  */
    YYSYMBOL_505_ = 505,                                           /* ']'  */
    YYSYMBOL_506_ = 506,                                           /* '('  */
    YYSYMBOL_507_ = 507,                                           /* ')'  */
    YYSYMBOL_508_ = 508,                                           /* '.'  */
    YYSYMBOL_509_ = 509,                                           /* ';'  */
    YYSYMBOL_510_ = 510,                                           /* ','  */
    YYSYMBOL_511_ = 511,                                           /* ':'  */
    YYSYMBOL_YYACCEPT = 512,                                       /* $accept  */
    YYSYMBOL_stmtblock = 513,                                      /* stmtblock  */
    YYSYMBOL_stmtmulti = 514,                                      /* stmtmulti  */
    YYSYMBOL_stmt = 515,                                           /* stmt  */
    YYSYMBOL_CreateQueueStmt = 516,                                /* CreateQueueStmt  */
    YYSYMBOL_OptQueueList = 517,                                   /* OptQueueList  */
    YYSYMBOL_OptQueueElem = 518,                                   /* OptQueueElem  */
    YYSYMBOL_AlterQueueStmt = 519,                                 /* AlterQueueStmt  */
    YYSYMBOL_DropQueueStmt = 520,                                  /* DropQueueStmt  */
    YYSYMBOL_CreateResourceGroupStmt = 521,                        /* CreateResourceGroupStmt  */
    YYSYMBOL_DropResourceGroupStmt = 522,                          /* DropResourceGroupStmt  */
    YYSYMBOL_AlterResourceGroupStmt = 523,                         /* AlterResourceGroupStmt  */
    YYSYMBOL_OptResourceGroupList = 524,                           /* OptResourceGroupList  */
    YYSYMBOL_OptResourceGroupElem = 525,                           /* OptResourceGroupElem  */
    YYSYMBOL_CreateRoleStmt = 526,                                 /* CreateRoleStmt  */
    YYSYMBOL_opt_with = 527,                                       /* opt_with  */
    YYSYMBOL_OptRoleList = 528,                                    /* OptRoleList  */
    YYSYMBOL_AlterOptRoleList = 529,                               /* AlterOptRoleList  */
    YYSYMBOL_AlterOnlyOptRoleElem = 530,                           /* AlterOnlyOptRoleElem  */
    YYSYMBOL_AlterOptRoleElem = 531,                               /* AlterOptRoleElem  */
    YYSYMBOL_CreateOptRoleElem = 532,                              /* CreateOptRoleElem  */
    YYSYMBOL_deny_login_role = 533,                                /* deny_login_role  */
    YYSYMBOL_deny_interval = 534,                                  /* deny_interval  */
    YYSYMBOL_deny_day_specifier = 535,                             /* deny_day_specifier  */
    YYSYMBOL_deny_point = 536,                                     /* deny_point  */
    YYSYMBOL_opt_time = 537,                                       /* opt_time  */
    YYSYMBOL_exttab_auth_list = 538,                               /* exttab_auth_list  */
    YYSYMBOL_keyvalue_list = 539,                                  /* keyvalue_list  */
    YYSYMBOL_keyvalue_pair = 540,                                  /* keyvalue_pair  */
    YYSYMBOL_CreateUserStmt = 541,                                 /* CreateUserStmt  */
    YYSYMBOL_AlterRoleStmt = 542,                                  /* AlterRoleStmt  */
    YYSYMBOL_opt_in_database = 543,                                /* opt_in_database  */
    YYSYMBOL_AlterRoleSetStmt = 544,                               /* AlterRoleSetStmt  */
    YYSYMBOL_AlterUserStmt = 545,                                  /* AlterUserStmt  */
    YYSYMBOL_AlterUserSetStmt = 546,                               /* AlterUserSetStmt  */
    YYSYMBOL_DropRoleStmt = 547,                                   /* DropRoleStmt  */
    YYSYMBOL_DropUserStmt = 548,                                   /* DropUserStmt  */
    YYSYMBOL_CreateGroupStmt = 549,                                /* CreateGroupStmt  */
    YYSYMBOL_AlterGroupStmt = 550,                                 /* AlterGroupStmt  */
    YYSYMBOL_add_drop = 551,                                       /* add_drop  */
    YYSYMBOL_DropGroupStmt = 552,                                  /* DropGroupStmt  */
    YYSYMBOL_CreateSchemaStmt = 553,                               /* CreateSchemaStmt  */
    YYSYMBOL_OptSchemaName = 554,                                  /* OptSchemaName  */
    YYSYMBOL_OptSchemaEltList = 555,                               /* OptSchemaEltList  */
    YYSYMBOL_schema_stmt = 556,                                    /* schema_stmt  */
    YYSYMBOL_VariableSetStmt = 557,                                /* VariableSetStmt  */
    YYSYMBOL_set_rest = 558,                                       /* set_rest  */
    YYSYMBOL_generic_set = 559,                                    /* generic_set  */
    YYSYMBOL_set_rest_more = 560,                                  /* set_rest_more  */
    YYSYMBOL_var_name = 561,                                       /* var_name  */
    YYSYMBOL_var_list = 562,                                       /* var_list  */
    YYSYMBOL_var_value = 563,                                      /* var_value  */
    YYSYMBOL_iso_level = 564,                                      /* iso_level  */
    YYSYMBOL_opt_boolean_or_string = 565,                          /* opt_boolean_or_string  */
    YYSYMBOL_zone_value = 566,                                     /* zone_value  */
    YYSYMBOL_opt_encoding = 567,                                   /* opt_encoding  */
    YYSYMBOL_NonReservedWord_or_Sconst = 568,                      /* NonReservedWord_or_Sconst  */
    YYSYMBOL_VariableResetStmt = 569,                              /* VariableResetStmt  */
    YYSYMBOL_reset_rest = 570,                                     /* reset_rest  */
    YYSYMBOL_generic_reset = 571,                                  /* generic_reset  */
    YYSYMBOL_SetResetClause = 572,                                 /* SetResetClause  */
    YYSYMBOL_FunctionSetResetClause = 573,                         /* FunctionSetResetClause  */
    YYSYMBOL_VariableShowStmt = 574,                               /* VariableShowStmt  */
    YYSYMBOL_ConstraintsSetStmt = 575,                             /* ConstraintsSetStmt  */
    YYSYMBOL_constraints_set_list = 576,                           /* constraints_set_list  */
    YYSYMBOL_constraints_set_mode = 577,                           /* constraints_set_mode  */
    YYSYMBOL_CheckPointStmt = 578,                                 /* CheckPointStmt  */
    YYSYMBOL_DiscardStmt = 579,                                    /* DiscardStmt  */
    YYSYMBOL_AlterTableStmt = 580,                                 /* AlterTableStmt  */
    YYSYMBOL_alter_table_cmds = 581,                               /* alter_table_cmds  */
    YYSYMBOL_alter_table_cmd = 582,                                /* alter_table_cmd  */
    YYSYMBOL_alter_column_default = 583,                           /* alter_column_default  */
    YYSYMBOL_opt_drop_behavior = 584,                              /* opt_drop_behavior  */
    YYSYMBOL_opt_collate_clause = 585,                             /* opt_collate_clause  */
    YYSYMBOL_alter_using = 586,                                    /* alter_using  */
    YYSYMBOL_replica_identity = 587,                               /* replica_identity  */
    YYSYMBOL_reloptions = 588,                                     /* reloptions  */
    YYSYMBOL_opt_reloptions = 589,                                 /* opt_reloptions  */
    YYSYMBOL_reloption_list = 590,                                 /* reloption_list  */
    YYSYMBOL_reloption_elem = 591,                                 /* reloption_elem  */
    YYSYMBOL_opt_table_partition_split_into = 592,                 /* opt_table_partition_split_into  */
    YYSYMBOL_opt_table_partition_exchange_validate = 593,          /* opt_table_partition_exchange_validate  */
    YYSYMBOL_alter_table_partition_id_spec = 594,                  /* alter_table_partition_id_spec  */
    YYSYMBOL_alter_table_partition_id_spec_with_opt_default = 595, /* alter_table_partition_id_spec_with_opt_default  */
    YYSYMBOL_alter_table_partition_cmd = 596,                      /* alter_table_partition_cmd  */
    YYSYMBOL_AlterCompositeTypeStmt = 597,                         /* AlterCompositeTypeStmt  */
    YYSYMBOL_alter_type_cmds = 598,                                /* alter_type_cmds  */
    YYSYMBOL_alter_type_cmd = 599,                                 /* alter_type_cmd  */
    YYSYMBOL_ClosePortalStmt = 600,                                /* ClosePortalStmt  */
    YYSYMBOL_CopyStmt = 601,                                       /* CopyStmt  */
    YYSYMBOL_copy_from = 602,                                      /* copy_from  */
    YYSYMBOL_opt_program = 603,                                    /* opt_program  */
    YYSYMBOL_skip_external_partition = 604,                        /* skip_external_partition  */
    YYSYMBOL_copy_file_name = 605,                                 /* copy_file_name  */
    YYSYMBOL_copy_options = 606,                                   /* copy_options  */
    YYSYMBOL_copy_opt_list = 607,                                  /* copy_opt_list  */
    YYSYMBOL_copy_opt_item = 608,                                  /* copy_opt_item  */
    YYSYMBOL_opt_binary = 609,                                     /* opt_binary  */
    YYSYMBOL_opt_oids = 610,                                       /* opt_oids  */
    YYSYMBOL_copy_delimiter = 611,                                 /* copy_delimiter  */
    YYSYMBOL_opt_using = 612,                                      /* opt_using  */
    YYSYMBOL_copy_generic_opt_list = 613,                          /* copy_generic_opt_list  */
    YYSYMBOL_copy_generic_opt_elem = 614,                          /* copy_generic_opt_elem  */
    YYSYMBOL_copy_generic_opt_arg = 615,                           /* copy_generic_opt_arg  */
    YYSYMBOL_copy_generic_opt_arg_list = 616,                      /* copy_generic_opt_arg_list  */
    YYSYMBOL_copy_generic_opt_arg_list_item = 617,                 /* copy_generic_opt_arg_list_item  */
    YYSYMBOL_CreateStmt = 618,                                     /* CreateStmt  */
    YYSYMBOL_OptTemp = 619,                                        /* OptTemp  */
    YYSYMBOL_OptTableElementList = 620,                            /* OptTableElementList  */
    YYSYMBOL_OptTypedTableElementList = 621,                       /* OptTypedTableElementList  */
    YYSYMBOL_TableElementList = 622,                               /* TableElementList  */
    YYSYMBOL_TypedTableElementList = 623,                          /* TypedTableElementList  */
    YYSYMBOL_TableElement = 624,                                   /* TableElement  */
    YYSYMBOL_TypedTableElement = 625,                              /* TypedTableElement  */
    YYSYMBOL_column_reference_storage_directive = 626,             /* column_reference_storage_directive  */
    YYSYMBOL_columnDef = 627,                                      /* columnDef  */
    YYSYMBOL_columnOptions = 628,                                  /* columnOptions  */
    YYSYMBOL_ColQualList = 629,                                    /* ColQualList  */
    YYSYMBOL_ColConstraint = 630,                                  /* ColConstraint  */
    YYSYMBOL_opt_storage_encoding = 631,                           /* opt_storage_encoding  */
    YYSYMBOL_ColConstraintElem = 632,                              /* ColConstraintElem  */
    YYSYMBOL_ConstraintAttr = 633,                                 /* ConstraintAttr  */
    YYSYMBOL_TableLikeClause = 634,                                /* TableLikeClause  */
    YYSYMBOL_TableLikeOptionList = 635,                            /* TableLikeOptionList  */
    YYSYMBOL_TableLikeOption = 636,                                /* TableLikeOption  */
    YYSYMBOL_TableConstraint = 637,                                /* TableConstraint  */
    YYSYMBOL_ConstraintElem = 638,                                 /* ConstraintElem  */
    YYSYMBOL_opt_no_inherit = 639,                                 /* opt_no_inherit  */
    YYSYMBOL_opt_column_list = 640,                                /* opt_column_list  */
    YYSYMBOL_columnList = 641,                                     /* columnList  */
    YYSYMBOL_columnElem = 642,                                     /* columnElem  */
    YYSYMBOL_distributed_by_list = 643,                            /* distributed_by_list  */
    YYSYMBOL_distributed_by_elem = 644,                            /* distributed_by_elem  */
    YYSYMBOL_key_match = 645,                                      /* key_match  */
    YYSYMBOL_ExclusionConstraintList = 646,                        /* ExclusionConstraintList  */
    YYSYMBOL_ExclusionConstraintElem = 647,                        /* ExclusionConstraintElem  */
    YYSYMBOL_ExclusionWhereClause = 648,                           /* ExclusionWhereClause  */
    YYSYMBOL_key_actions = 649,                                    /* key_actions  */
    YYSYMBOL_key_update = 650,                                     /* key_update  */
    YYSYMBOL_key_delete = 651,                                     /* key_delete  */
    YYSYMBOL_key_action = 652,                                     /* key_action  */
    YYSYMBOL_OptInherit = 653,                                     /* OptInherit  */
    YYSYMBOL_OptWith = 654,                                        /* OptWith  */
    YYSYMBOL_OnCommitOption = 655,                                 /* OnCommitOption  */
    YYSYMBOL_OptTableSpace = 656,                                  /* OptTableSpace  */
    YYSYMBOL_OptConsTableSpace = 657,                              /* OptConsTableSpace  */
    YYSYMBOL_ExistingIndex = 658,                                  /* ExistingIndex  */
    YYSYMBOL_optNumsegments = 659,                                 /* optNumsegments  */
    YYSYMBOL_DistributedBy = 660,                                  /* DistributedBy  */
    YYSYMBOL_OptDistributedBy = 661,                               /* OptDistributedBy  */
    YYSYMBOL_OptTabPartitionColumnEncList = 662,                   /* OptTabPartitionColumnEncList  */
    YYSYMBOL_TabPartitionColumnEncList = 663,                      /* TabPartitionColumnEncList  */
    YYSYMBOL_OptTabPartitionStorageAttr = 664,                     /* OptTabPartitionStorageAttr  */
    YYSYMBOL_OptTabPartitionSpec = 665,                            /* OptTabPartitionSpec  */
    YYSYMBOL_OptTabSubPartitionSpec = 666,                         /* OptTabSubPartitionSpec  */
    YYSYMBOL_TabPartitionElemList = 667,                           /* TabPartitionElemList  */
    YYSYMBOL_TabSubPartitionElemList = 668,                        /* TabSubPartitionElemList  */
    YYSYMBOL_tab_part_val_no_paran = 669,                          /* tab_part_val_no_paran  */
    YYSYMBOL_tab_part_val = 670,                                   /* tab_part_val  */
    YYSYMBOL_TabPartitionBoundarySpecValList = 671,                /* TabPartitionBoundarySpecValList  */
    YYSYMBOL_OptTabPartitionRangeInclusive = 672,                  /* OptTabPartitionRangeInclusive  */
    YYSYMBOL_TabPartitionBoundarySpecStart = 673,                  /* TabPartitionBoundarySpecStart  */
    YYSYMBOL_TabPartitionBoundarySpecEnd = 674,                    /* TabPartitionBoundarySpecEnd  */
    YYSYMBOL_OptTabPartitionBoundarySpecEvery = 675,               /* OptTabPartitionBoundarySpecEvery  */
    YYSYMBOL_OptTabPartitionBoundarySpecEnd = 676,                 /* OptTabPartitionBoundarySpecEnd  */
    YYSYMBOL_TabPartitionBoundarySpec = 677,                       /* TabPartitionBoundarySpec  */
    YYSYMBOL_OptTabPartitionBoundarySpec = 678,                    /* OptTabPartitionBoundarySpec  */
    YYSYMBOL_multi_spec_value_list = 679,                          /* multi_spec_value_list  */
    YYSYMBOL_part_values_single = 680,                             /* part_values_single  */
    YYSYMBOL_part_values_clause = 681,                             /* part_values_clause  */
    YYSYMBOL_part_values_or_spec_list = 682,                       /* part_values_or_spec_list  */
    YYSYMBOL_TabPartitionElem = 683,                               /* TabPartitionElem  */
    YYSYMBOL_TabSubPartitionElem = 684,                            /* TabSubPartitionElem  */
    YYSYMBOL_TabPartitionNameDecl = 685,                           /* TabPartitionNameDecl  */
    YYSYMBOL_TabPartitionDefaultNameDecl = 686,                    /* TabPartitionDefaultNameDecl  */
    YYSYMBOL_TabSubPartitionNameDecl = 687,                        /* TabSubPartitionNameDecl  */
    YYSYMBOL_TabSubPartitionDefaultNameDecl = 688,                 /* TabSubPartitionDefaultNameDecl  */
    YYSYMBOL_TabPartitionByType = 689,                             /* TabPartitionByType  */
    YYSYMBOL_OptTabPartitionBy = 690,                              /* OptTabPartitionBy  */
    YYSYMBOL_TabSubPartitionTemplate = 691,                        /* TabSubPartitionTemplate  */
    YYSYMBOL_opt_list_subparts = 692,                              /* opt_list_subparts  */
    YYSYMBOL_TabSubPartitionBy = 693,                              /* TabSubPartitionBy  */
    YYSYMBOL_TabSubPartition = 694,                                /* TabSubPartition  */
    YYSYMBOL_CreateAsStmt = 695,                                   /* CreateAsStmt  */
    YYSYMBOL_create_as_target = 696,                               /* create_as_target  */
    YYSYMBOL_opt_with_data = 697,                                  /* opt_with_data  */
    YYSYMBOL_CreateExternalStmt = 698,                             /* CreateExternalStmt  */
    YYSYMBOL_OptWritable = 699,                                    /* OptWritable  */
    YYSYMBOL_OptWeb = 700,                                         /* OptWeb  */
    YYSYMBOL_ExtTypedesc = 701,                                    /* ExtTypedesc  */
    YYSYMBOL_ext_on_clause_list = 702,                             /* ext_on_clause_list  */
    YYSYMBOL_ext_on_clause_item = 703,                             /* ext_on_clause_item  */
    YYSYMBOL_format_opt = 704,                                     /* format_opt  */
    YYSYMBOL_format_opt_list = 705,                                /* format_opt_list  */
    YYSYMBOL_format_def_list = 706,                                /* format_def_list  */
    YYSYMBOL_format_def_item = 707,                                /* format_def_item  */
    YYSYMBOL_format_opt_item = 708,                                /* format_opt_item  */
    YYSYMBOL_ext_options_opt = 709,                                /* ext_options_opt  */
    YYSYMBOL_ext_options = 710,                                    /* ext_options  */
    YYSYMBOL_ext_options_list = 711,                               /* ext_options_list  */
    YYSYMBOL_ext_options_item = 712,                               /* ext_options_item  */
    YYSYMBOL_OptExtTableElementList = 713,                         /* OptExtTableElementList  */
    YYSYMBOL_ExtTableElementList = 714,                            /* ExtTableElementList  */
    YYSYMBOL_ExtTableElement = 715,                                /* ExtTableElement  */
    YYSYMBOL_ExtcolumnDef = 716,                                   /* ExtcolumnDef  */
    YYSYMBOL_OptSingleRowErrorHandling = 717,                      /* OptSingleRowErrorHandling  */
    YYSYMBOL_OptLogErrorTable = 718,                               /* OptLogErrorTable  */
    YYSYMBOL_ExtSingleRowErrorHandling = 719,                      /* ExtSingleRowErrorHandling  */
    YYSYMBOL_ExtLogErrorTable = 720,                               /* ExtLogErrorTable  */
    YYSYMBOL_OptSrehLimitType = 721,                               /* OptSrehLimitType  */
    YYSYMBOL_ext_opt_encoding_list = 722,                          /* ext_opt_encoding_list  */
    YYSYMBOL_ext_opt_encoding_item = 723,                          /* ext_opt_encoding_item  */
    YYSYMBOL_CreateMatViewStmt = 724,                              /* CreateMatViewStmt  */
    YYSYMBOL_create_mv_target = 725,                               /* create_mv_target  */
    YYSYMBOL_OptNoLog = 726,                                       /* OptNoLog  */
    YYSYMBOL_RefreshMatViewStmt = 727,                             /* RefreshMatViewStmt  */
    YYSYMBOL_CreateSeqStmt = 728,                                  /* CreateSeqStmt  */
    YYSYMBOL_AlterSeqStmt = 729,                                   /* AlterSeqStmt  */
    YYSYMBOL_OptSeqOptList = 730,                                  /* OptSeqOptList  */
    YYSYMBOL_SeqOptList = 731,                                     /* SeqOptList  */
    YYSYMBOL_SeqOptElem = 732,                                     /* SeqOptElem  */
    YYSYMBOL_opt_by = 733,                                         /* opt_by  */
    YYSYMBOL_NumericOnly = 734,                                    /* NumericOnly  */
    YYSYMBOL_NumericOnly_list = 735,                               /* NumericOnly_list  */
    YYSYMBOL_CreatePLangStmt = 736,                                /* CreatePLangStmt  */
    YYSYMBOL_opt_trusted = 737,                                    /* opt_trusted  */
    YYSYMBOL_handler_name = 738,                                   /* handler_name  */
    YYSYMBOL_opt_inline_handler = 739,                             /* opt_inline_handler  */
    YYSYMBOL_validator_clause = 740,                               /* validator_clause  */
    YYSYMBOL_opt_validator = 741,                                  /* opt_validator  */
    YYSYMBOL_DropPLangStmt = 742,                                  /* DropPLangStmt  */
    YYSYMBOL_opt_procedural = 743,                                 /* opt_procedural  */
    YYSYMBOL_CreateTableSpaceStmt = 744,                           /* CreateTableSpaceStmt  */
    YYSYMBOL_OptTableSpaceOwner = 745,                             /* OptTableSpaceOwner  */
    YYSYMBOL_DropTableSpaceStmt = 746,                             /* DropTableSpaceStmt  */
    YYSYMBOL_CreateExtensionStmt = 747,                            /* CreateExtensionStmt  */
    YYSYMBOL_create_extension_opt_list = 748,                      /* create_extension_opt_list  */
    YYSYMBOL_create_extension_opt_item = 749,                      /* create_extension_opt_item  */
    YYSYMBOL_AlterExtensionStmt = 750,                             /* AlterExtensionStmt  */
    YYSYMBOL_alter_extension_opt_list = 751,                       /* alter_extension_opt_list  */
    YYSYMBOL_alter_extension_opt_item = 752,                       /* alter_extension_opt_item  */
    YYSYMBOL_AlterExtensionContentsStmt = 753,                     /* AlterExtensionContentsStmt  */
    YYSYMBOL_CreateFdwStmt = 754,                                  /* CreateFdwStmt  */
    YYSYMBOL_fdw_option = 755,                                     /* fdw_option  */
    YYSYMBOL_fdw_options = 756,                                    /* fdw_options  */
    YYSYMBOL_opt_fdw_options = 757,                                /* opt_fdw_options  */
    YYSYMBOL_DropFdwStmt = 758,                                    /* DropFdwStmt  */
    YYSYMBOL_AlterFdwStmt = 759,                                   /* AlterFdwStmt  */
    YYSYMBOL_create_generic_options = 760,                         /* create_generic_options  */
    YYSYMBOL_generic_option_list = 761,                            /* generic_option_list  */
    YYSYMBOL_alter_generic_options = 762,                          /* alter_generic_options  */
    YYSYMBOL_alter_generic_option_list = 763,                      /* alter_generic_option_list  */
    YYSYMBOL_alter_generic_option_elem = 764,                      /* alter_generic_option_elem  */
    YYSYMBOL_generic_option_elem = 765,                            /* generic_option_elem  */
    YYSYMBOL_generic_option_name = 766,                            /* generic_option_name  */
    YYSYMBOL_generic_option_arg = 767,                             /* generic_option_arg  */
    YYSYMBOL_CreateForeignServerStmt = 768,                        /* CreateForeignServerStmt  */
    YYSYMBOL_opt_type = 769,                                       /* opt_type  */
    YYSYMBOL_foreign_server_version = 770,                         /* foreign_server_version  */
    YYSYMBOL_opt_foreign_server_version = 771,                     /* opt_foreign_server_version  */
    YYSYMBOL_DropForeignServerStmt = 772,                          /* DropForeignServerStmt  */
    YYSYMBOL_AlterForeignServerStmt = 773,                         /* AlterForeignServerStmt  */
    YYSYMBOL_CreateForeignTableStmt = 774,                         /* CreateForeignTableStmt  */
    YYSYMBOL_AlterForeignTableStmt = 775,                          /* AlterForeignTableStmt  */
    YYSYMBOL_CreateUserMappingStmt = 776,                          /* CreateUserMappingStmt  */
    YYSYMBOL_auth_ident = 777,                                     /* auth_ident  */
    YYSYMBOL_DropUserMappingStmt = 778,                            /* DropUserMappingStmt  */
    YYSYMBOL_AlterUserMappingStmt = 779,                           /* AlterUserMappingStmt  */
    YYSYMBOL_CreateTrigStmt = 780,                                 /* CreateTrigStmt  */
    YYSYMBOL_TriggerActionTime = 781,                              /* TriggerActionTime  */
    YYSYMBOL_TriggerEvents = 782,                                  /* TriggerEvents  */
    YYSYMBOL_TriggerOneEvent = 783,                                /* TriggerOneEvent  */
    YYSYMBOL_TriggerForSpec = 784,                                 /* TriggerForSpec  */
    YYSYMBOL_TriggerForOptEach = 785,                              /* TriggerForOptEach  */
    YYSYMBOL_TriggerForType = 786,                                 /* TriggerForType  */
    YYSYMBOL_TriggerWhen = 787,                                    /* TriggerWhen  */
    YYSYMBOL_TriggerFuncArgs = 788,                                /* TriggerFuncArgs  */
    YYSYMBOL_TriggerFuncArg = 789,                                 /* TriggerFuncArg  */
    YYSYMBOL_OptConstrFromTable = 790,                             /* OptConstrFromTable  */
    YYSYMBOL_ConstraintAttributeSpec = 791,                        /* ConstraintAttributeSpec  */
    YYSYMBOL_ConstraintAttributeElem = 792,                        /* ConstraintAttributeElem  */
    YYSYMBOL_DropTrigStmt = 793,                                   /* DropTrigStmt  */
    YYSYMBOL_CreateEventTrigStmt = 794,                            /* CreateEventTrigStmt  */
    YYSYMBOL_event_trigger_when_list = 795,                        /* event_trigger_when_list  */
    YYSYMBOL_event_trigger_when_item = 796,                        /* event_trigger_when_item  */
    YYSYMBOL_event_trigger_value_list = 797,                       /* event_trigger_value_list  */
    YYSYMBOL_AlterEventTrigStmt = 798,                             /* AlterEventTrigStmt  */
    YYSYMBOL_enable_trigger = 799,                                 /* enable_trigger  */
    YYSYMBOL_CreateAssertStmt = 800,                               /* CreateAssertStmt  */
    YYSYMBOL_DropAssertStmt = 801,                                 /* DropAssertStmt  */
    YYSYMBOL_DefineStmt = 802,                                     /* DefineStmt  */
    YYSYMBOL_opt_ordered = 803,                                    /* opt_ordered  */
    YYSYMBOL_definition = 804,                                     /* definition  */
    YYSYMBOL_def_list = 805,                                       /* def_list  */
    YYSYMBOL_def_elem = 806,                                       /* def_elem  */
    YYSYMBOL_def_arg = 807,                                        /* def_arg  */
    YYSYMBOL_old_aggr_definition = 808,                            /* old_aggr_definition  */
    YYSYMBOL_old_aggr_list = 809,                                  /* old_aggr_list  */
    YYSYMBOL_old_aggr_elem = 810,                                  /* old_aggr_elem  */
    YYSYMBOL_opt_enum_val_list = 811,                              /* opt_enum_val_list  */
    YYSYMBOL_enum_val_list = 812,                                  /* enum_val_list  */
    YYSYMBOL_AlterEnumStmt = 813,                                  /* AlterEnumStmt  */
    YYSYMBOL_opt_if_not_exists = 814,                              /* opt_if_not_exists  */
    YYSYMBOL_CreateOpClassStmt = 815,                              /* CreateOpClassStmt  */
    YYSYMBOL_opclass_item_list = 816,                              /* opclass_item_list  */
    YYSYMBOL_opclass_item = 817,                                   /* opclass_item  */
    YYSYMBOL_opt_default = 818,                                    /* opt_default  */
    YYSYMBOL_opt_opfamily = 819,                                   /* opt_opfamily  */
    YYSYMBOL_opclass_purpose = 820,                                /* opclass_purpose  */
    YYSYMBOL_opt_recheck = 821,                                    /* opt_recheck  */
    YYSYMBOL_CreateOpFamilyStmt = 822,                             /* CreateOpFamilyStmt  */
    YYSYMBOL_AlterOpFamilyStmt = 823,                              /* AlterOpFamilyStmt  */
    YYSYMBOL_opclass_drop_list = 824,                              /* opclass_drop_list  */
    YYSYMBOL_opclass_drop = 825,                                   /* opclass_drop  */
    YYSYMBOL_DropOpClassStmt = 826,                                /* DropOpClassStmt  */
    YYSYMBOL_DropOpFamilyStmt = 827,                               /* DropOpFamilyStmt  */
    YYSYMBOL_DropOwnedStmt = 828,                                  /* DropOwnedStmt  */
    YYSYMBOL_ReassignOwnedStmt = 829,                              /* ReassignOwnedStmt  */
    YYSYMBOL_DropStmt = 830,                                       /* DropStmt  */
    YYSYMBOL_drop_type = 831,                                      /* drop_type  */
    YYSYMBOL_any_name_list = 832,                                  /* any_name_list  */
    YYSYMBOL_any_name = 833,                                       /* any_name  */
    YYSYMBOL_attrs = 834,                                          /* attrs  */
    YYSYMBOL_TruncateStmt = 835,                                   /* TruncateStmt  */
    YYSYMBOL_opt_restart_seqs = 836,                               /* opt_restart_seqs  */
    YYSYMBOL_CommentStmt = 837,                                    /* CommentStmt  */
    YYSYMBOL_comment_type = 838,                                   /* comment_type  */
    YYSYMBOL_comment_text = 839,                                   /* comment_text  */
    YYSYMBOL_SecLabelStmt = 840,                                   /* SecLabelStmt  */
    YYSYMBOL_opt_provider = 841,                                   /* opt_provider  */
    YYSYMBOL_security_label_type = 842,                            /* security_label_type  */
    YYSYMBOL_security_label = 843,                                 /* security_label  */
    YYSYMBOL_FetchStmt = 844,                                      /* FetchStmt  */
    YYSYMBOL_fetch_args = 845,                                     /* fetch_args  */
    YYSYMBOL_from_in = 846,                                        /* from_in  */
    YYSYMBOL_opt_from_in = 847,                                    /* opt_from_in  */
    YYSYMBOL_GrantStmt = 848,                                      /* GrantStmt  */
    YYSYMBOL_RevokeStmt = 849,                                     /* RevokeStmt  */
    YYSYMBOL_privileges = 850,                                     /* privileges  */
    YYSYMBOL_privilege_list = 851,                                 /* privilege_list  */
    YYSYMBOL_privilege = 852,                                      /* privilege  */
    YYSYMBOL_privilege_target = 853,                               /* privilege_target  */
    YYSYMBOL_grantee_list = 854,                                   /* grantee_list  */
    YYSYMBOL_grantee = 855,                                        /* grantee  */
    YYSYMBOL_opt_grant_grant_option = 856,                         /* opt_grant_grant_option  */
    YYSYMBOL_function_with_argtypes_list = 857,                    /* function_with_argtypes_list  */
    YYSYMBOL_function_with_argtypes = 858,                         /* function_with_argtypes  */
    YYSYMBOL_GrantRoleStmt = 859,                                  /* GrantRoleStmt  */
    YYSYMBOL_RevokeRoleStmt = 860,                                 /* RevokeRoleStmt  */
    YYSYMBOL_opt_grant_admin_option = 861,                         /* opt_grant_admin_option  */
    YYSYMBOL_opt_granted_by = 862,                                 /* opt_granted_by  */
    YYSYMBOL_AlterDefaultPrivilegesStmt = 863,                     /* AlterDefaultPrivilegesStmt  */
    YYSYMBOL_DefACLOptionList = 864,                               /* DefACLOptionList  */
    YYSYMBOL_DefACLOption = 865,                                   /* DefACLOption  */
    YYSYMBOL_DefACLAction = 866,                                   /* DefACLAction  */
    YYSYMBOL_defacl_privilege_target = 867,                        /* defacl_privilege_target  */
    YYSYMBOL_IndexStmt = 868,                                      /* IndexStmt  */
    YYSYMBOL_opt_unique = 869,                                     /* opt_unique  */
    YYSYMBOL_opt_concurrently = 870,                               /* opt_concurrently  */
    YYSYMBOL_opt_index_name = 871,                                 /* opt_index_name  */
    YYSYMBOL_access_method_clause = 872,                           /* access_method_clause  */
    YYSYMBOL_index_params = 873,                                   /* index_params  */
    YYSYMBOL_index_elem = 874,                                     /* index_elem  */
    YYSYMBOL_opt_collate = 875,                                    /* opt_collate  */
    YYSYMBOL_opt_class = 876,                                      /* opt_class  */
    YYSYMBOL_opt_asc_desc = 877,                                   /* opt_asc_desc  */
    YYSYMBOL_opt_nulls_order = 878,                                /* opt_nulls_order  */
    YYSYMBOL_CreateFunctionStmt = 879,                             /* CreateFunctionStmt  */
    YYSYMBOL_opt_or_replace = 880,                                 /* opt_or_replace  */
    YYSYMBOL_func_args = 881,                                      /* func_args  */
    YYSYMBOL_func_args_list = 882,                                 /* func_args_list  */
    YYSYMBOL_func_args_with_defaults = 883,                        /* func_args_with_defaults  */
    YYSYMBOL_func_args_with_defaults_list = 884,                   /* func_args_with_defaults_list  */
    YYSYMBOL_func_arg = 885,                                       /* func_arg  */
    YYSYMBOL_arg_class = 886,                                      /* arg_class  */
    YYSYMBOL_param_name = 887,                                     /* param_name  */
    YYSYMBOL_func_return = 888,                                    /* func_return  */
    YYSYMBOL_func_type = 889,                                      /* func_type  */
    YYSYMBOL_func_arg_with_default = 890,                          /* func_arg_with_default  */
    YYSYMBOL_aggr_arg = 891,                                       /* aggr_arg  */
    YYSYMBOL_aggr_args = 892,                                      /* aggr_args  */
    YYSYMBOL_aggr_args_list = 893,                                 /* aggr_args_list  */
    YYSYMBOL_createfunc_opt_list = 894,                            /* createfunc_opt_list  */
    YYSYMBOL_common_func_opt_item = 895,                           /* common_func_opt_item  */
    YYSYMBOL_createfunc_opt_item = 896,                            /* createfunc_opt_item  */
    YYSYMBOL_func_as = 897,                                        /* func_as  */
    YYSYMBOL_opt_definition = 898,                                 /* opt_definition  */
    YYSYMBOL_table_func_column = 899,                              /* table_func_column  */
    YYSYMBOL_table_func_column_list = 900,                         /* table_func_column_list  */
    YYSYMBOL_AlterFunctionStmt = 901,                              /* AlterFunctionStmt  */
    YYSYMBOL_alterfunc_opt_list = 902,                             /* alterfunc_opt_list  */
    YYSYMBOL_opt_restrict = 903,                                   /* opt_restrict  */
    YYSYMBOL_RemoveFuncStmt = 904,                                 /* RemoveFuncStmt  */
    YYSYMBOL_RemoveAggrStmt = 905,                                 /* RemoveAggrStmt  */
    YYSYMBOL_RemoveOperStmt = 906,                                 /* RemoveOperStmt  */
    YYSYMBOL_oper_argtypes = 907,                                  /* oper_argtypes  */
    YYSYMBOL_any_operator = 908,                                   /* any_operator  */
    YYSYMBOL_DoStmt = 909,                                         /* DoStmt  */
    YYSYMBOL_dostmt_opt_list = 910,                                /* dostmt_opt_list  */
    YYSYMBOL_dostmt_opt_item = 911,                                /* dostmt_opt_item  */
    YYSYMBOL_CreateCastStmt = 912,                                 /* CreateCastStmt  */
    YYSYMBOL_cast_context = 913,                                   /* cast_context  */
    YYSYMBOL_DropCastStmt = 914,                                   /* DropCastStmt  */
    YYSYMBOL_opt_if_exists = 915,                                  /* opt_if_exists  */
    YYSYMBOL_ReindexStmt = 916,                                    /* ReindexStmt  */
    YYSYMBOL_reindex_type = 917,                                   /* reindex_type  */
    YYSYMBOL_opt_force = 918,                                      /* opt_force  */
    YYSYMBOL_AlterTypeStmt = 919,                                  /* AlterTypeStmt  */
    YYSYMBOL_AlterTblSpcStmt = 920,                                /* AlterTblSpcStmt  */
    YYSYMBOL_RenameStmt = 921,                                     /* RenameStmt  */
    YYSYMBOL_opt_column = 922,                                     /* opt_column  */
    YYSYMBOL_opt_set_data = 923,                                   /* opt_set_data  */
    YYSYMBOL_AlterObjectSchemaStmt = 924,                          /* AlterObjectSchemaStmt  */
    YYSYMBOL_AlterOwnerStmt = 925,                                 /* AlterOwnerStmt  */
    YYSYMBOL_RuleStmt = 926,                                       /* RuleStmt  */
    YYSYMBOL_RuleActionList = 927,                                 /* RuleActionList  */
    YYSYMBOL_RuleActionMulti = 928,                                /* RuleActionMulti  */
    YYSYMBOL_RuleActionStmt = 929,                                 /* RuleActionStmt  */
    YYSYMBOL_RuleActionStmtOrEmpty = 930,                          /* RuleActionStmtOrEmpty  */
    YYSYMBOL_event = 931,                                          /* event  */
    YYSYMBOL_opt_instead = 932,                                    /* opt_instead  */
    YYSYMBOL_DropRuleStmt = 933,                                   /* DropRuleStmt  */
    YYSYMBOL_NotifyStmt = 934,                                     /* NotifyStmt  */
    YYSYMBOL_notify_payload = 935,                                 /* notify_payload  */
    YYSYMBOL_ListenStmt = 936,                                     /* ListenStmt  */
    YYSYMBOL_UnlistenStmt = 937,                                   /* UnlistenStmt  */
    YYSYMBOL_TransactionStmt = 938,                                /* TransactionStmt  */
    YYSYMBOL_opt_transaction = 939,                                /* opt_transaction  */
    YYSYMBOL_transaction_mode_item = 940,                          /* transaction_mode_item  */
    YYSYMBOL_transaction_mode_list = 941,                          /* transaction_mode_list  */
    YYSYMBOL_transaction_mode_list_or_empty = 942,                 /* transaction_mode_list_or_empty  */
    YYSYMBOL_ViewStmt = 943,                                       /* ViewStmt  */
    YYSYMBOL_opt_check_option = 944,                               /* opt_check_option  */
    YYSYMBOL_LoadStmt = 945,                                       /* LoadStmt  */
    YYSYMBOL_CreatedbStmt = 946,                                   /* CreatedbStmt  */
    YYSYMBOL_createdb_opt_list = 947,                              /* createdb_opt_list  */
    YYSYMBOL_createdb_opt_item = 948,                              /* createdb_opt_item  */
    YYSYMBOL_opt_equal = 949,                                      /* opt_equal  */
    YYSYMBOL_AlterDatabaseStmt = 950,                              /* AlterDatabaseStmt  */
    YYSYMBOL_AlterDatabaseSetStmt = 951,                           /* AlterDatabaseSetStmt  */
    YYSYMBOL_alterdb_opt_list = 952,                               /* alterdb_opt_list  */
    YYSYMBOL_alterdb_opt_item = 953,                               /* alterdb_opt_item  */
    YYSYMBOL_DropdbStmt = 954,                                     /* DropdbStmt  */
    YYSYMBOL_AlterSystemStmt = 955,                                /* AlterSystemStmt  */
    YYSYMBOL_CreateDomainStmt = 956,                               /* CreateDomainStmt  */
    YYSYMBOL_AlterDomainStmt = 957,                                /* AlterDomainStmt  */
    YYSYMBOL_opt_as = 958,                                         /* opt_as  */
    YYSYMBOL_AlterTSDictionaryStmt = 959,                          /* AlterTSDictionaryStmt  */
    YYSYMBOL_AlterTSConfigurationStmt = 960,                       /* AlterTSConfigurationStmt  */
    YYSYMBOL_CreateConversionStmt = 961,                           /* CreateConversionStmt  */
    YYSYMBOL_ClusterStmt = 962,                                    /* ClusterStmt  */
    YYSYMBOL_cluster_index_specification = 963,                    /* cluster_index_specification  */
    YYSYMBOL_VacuumStmt = 964,                                     /* VacuumStmt  */
    YYSYMBOL_vacuum_option_list = 965,                             /* vacuum_option_list  */
    YYSYMBOL_vacuum_option_elem = 966,                             /* vacuum_option_elem  */
    YYSYMBOL_AnalyzeStmt = 967,                                    /* AnalyzeStmt  */
    YYSYMBOL_analyze_keyword = 968,                                /* analyze_keyword  */
    YYSYMBOL_opt_verbose = 969,                                    /* opt_verbose  */
    YYSYMBOL_opt_rootonly_all = 970,                               /* opt_rootonly_all  */
    YYSYMBOL_opt_full = 971,                                       /* opt_full  */
    YYSYMBOL_opt_freeze = 972,                                     /* opt_freeze  */
    YYSYMBOL_opt_name_list = 973,                                  /* opt_name_list  */
    YYSYMBOL_ExplainStmt = 974,                                    /* ExplainStmt  */
    YYSYMBOL_ExplainableStmt = 975,                                /* ExplainableStmt  */
    YYSYMBOL_opt_dxl = 976,                                        /* opt_dxl  */
    YYSYMBOL_explain_option_list = 977,                            /* explain_option_list  */
    YYSYMBOL_explain_option_elem = 978,                            /* explain_option_elem  */
    YYSYMBOL_explain_option_name = 979,                            /* explain_option_name  */
    YYSYMBOL_explain_option_arg = 980,                             /* explain_option_arg  */
    YYSYMBOL_PrepareStmt = 981,                                    /* PrepareStmt  */
    YYSYMBOL_prep_type_clause = 982,                               /* prep_type_clause  */
    YYSYMBOL_PreparableStmt = 983,                                 /* PreparableStmt  */
    YYSYMBOL_ExecuteStmt = 984,                                    /* ExecuteStmt  */
    YYSYMBOL_execute_param_clause = 985,                           /* execute_param_clause  */
    YYSYMBOL_DeallocateStmt = 986,                                 /* DeallocateStmt  */
    YYSYMBOL_cdb_string_list = 987,                                /* cdb_string_list  */
    YYSYMBOL_cdb_string = 988,                                     /* cdb_string  */
    YYSYMBOL_InsertStmt = 989,                                     /* InsertStmt  */
    YYSYMBOL_insert_rest = 990,                                    /* insert_rest  */
    YYSYMBOL_insert_column_list = 991,                             /* insert_column_list  */
    YYSYMBOL_insert_column_item = 992,                             /* insert_column_item  */
    YYSYMBOL_returning_clause = 993,                               /* returning_clause  */
    YYSYMBOL_DeleteStmt = 994,                                     /* DeleteStmt  */
    YYSYMBOL_using_clause = 995,                                   /* using_clause  */
    YYSYMBOL_LockStmt = 996,                                       /* LockStmt  */
    YYSYMBOL_opt_lock = 997,                                       /* opt_lock  */
    YYSYMBOL_lock_type = 998,                                      /* lock_type  */
    YYSYMBOL_opt_nowait = 999,                                     /* opt_nowait  */
    YYSYMBOL_opt_masteronly = 1000,                                /* opt_masteronly  */
    YYSYMBOL_UpdateStmt = 1001,                                    /* UpdateStmt  */
    YYSYMBOL_set_clause_list = 1002,                               /* set_clause_list  */
    YYSYMBOL_set_clause = 1003,                                    /* set_clause  */
    YYSYMBOL_single_set_clause = 1004,                             /* single_set_clause  */
    YYSYMBOL_multiple_set_clause = 1005,                           /* multiple_set_clause  */
    YYSYMBOL_set_target = 1006,                                    /* set_target  */
    YYSYMBOL_set_target_list = 1007,                               /* set_target_list  */
    YYSYMBOL_DeclareCursorStmt = 1008,                             /* DeclareCursorStmt  */
    YYSYMBOL_cursor_name = 1009,                                   /* cursor_name  */
    YYSYMBOL_cursor_options = 1010,                                /* cursor_options  */
    YYSYMBOL_opt_hold = 1011,                                      /* opt_hold  */
    YYSYMBOL_SelectStmt = 1012,                                    /* SelectStmt  */
    YYSYMBOL_RetrieveStmt = 1013,                                  /* RetrieveStmt  */
    YYSYMBOL_select_with_parens = 1014,                            /* select_with_parens  */
    YYSYMBOL_select_no_parens = 1015,                              /* select_no_parens  */
    YYSYMBOL_select_clause = 1016,                                 /* select_clause  */
    YYSYMBOL_simple_select = 1017,                                 /* simple_select  */
    YYSYMBOL_with_clause = 1018,                                   /* with_clause  */
    YYSYMBOL_cte_list = 1019,                                      /* cte_list  */
    YYSYMBOL_common_table_expr = 1020,                             /* common_table_expr  */
    YYSYMBOL_opt_with_clause = 1021,                               /* opt_with_clause  */
    YYSYMBOL_into_clause = 1022,                                   /* into_clause  */
    YYSYMBOL_OptTempTableName = 1023,                              /* OptTempTableName  */
    YYSYMBOL_opt_table = 1024,                                     /* opt_table  */
    YYSYMBOL_opt_all = 1025,                                       /* opt_all  */
    YYSYMBOL_opt_distinct = 1026,                                  /* opt_distinct  */
    YYSYMBOL_opt_sort_clause = 1027,                               /* opt_sort_clause  */
    YYSYMBOL_sort_clause = 1028,                                   /* sort_clause  */
    YYSYMBOL_sortby_list = 1029,                                   /* sortby_list  */
    YYSYMBOL_sortby = 1030,                                        /* sortby  */
    YYSYMBOL_select_limit = 1031,                                  /* select_limit  */
    YYSYMBOL_opt_select_limit = 1032,                              /* opt_select_limit  */
    YYSYMBOL_limit_clause = 1033,                                  /* limit_clause  */
    YYSYMBOL_offset_clause = 1034,                                 /* offset_clause  */
    YYSYMBOL_select_limit_value = 1035,                            /* select_limit_value  */
    YYSYMBOL_select_offset_value = 1036,                           /* select_offset_value  */
    YYSYMBOL_select_fetch_first_value = 1037,                      /* select_fetch_first_value  */
    YYSYMBOL_I_or_F_const = 1038,                                  /* I_or_F_const  */
    YYSYMBOL_row_or_rows = 1039,                                   /* row_or_rows  */
    YYSYMBOL_first_or_next = 1040,                                 /* first_or_next  */
    YYSYMBOL_group_clause = 1041,                                  /* group_clause  */
    YYSYMBOL_group_elem_list = 1042,                               /* group_elem_list  */
    YYSYMBOL_group_elem = 1043,                                    /* group_elem  */
    YYSYMBOL_having_clause = 1044,                                 /* having_clause  */
    YYSYMBOL_for_locking_clause = 1045,                            /* for_locking_clause  */
    YYSYMBOL_opt_for_locking_clause = 1046,                        /* opt_for_locking_clause  */
    YYSYMBOL_for_locking_items = 1047,                             /* for_locking_items  */
    YYSYMBOL_for_locking_item = 1048,                              /* for_locking_item  */
    YYSYMBOL_for_locking_strength = 1049,                          /* for_locking_strength  */
    YYSYMBOL_locked_rels_list = 1050,                              /* locked_rels_list  */
    YYSYMBOL_values_clause = 1051,                                 /* values_clause  */
    YYSYMBOL_from_clause = 1052,                                   /* from_clause  */
    YYSYMBOL_from_list = 1053,                                     /* from_list  */
    YYSYMBOL_table_ref = 1054,                                     /* table_ref  */
    YYSYMBOL_joined_table = 1055,                                  /* joined_table  */
    YYSYMBOL_alias_clause = 1056,                                  /* alias_clause  */
    YYSYMBOL_opt_alias_clause = 1057,                              /* opt_alias_clause  */
    YYSYMBOL_func_alias_clause = 1058,                             /* func_alias_clause  */
    YYSYMBOL_join_type = 1059,                                     /* join_type  */
    YYSYMBOL_join_outer = 1060,                                    /* join_outer  */
    YYSYMBOL_join_qual = 1061,                                     /* join_qual  */
    YYSYMBOL_relation_expr = 1062,                                 /* relation_expr  */
    YYSYMBOL_relation_expr_list = 1063,                            /* relation_expr_list  */
    YYSYMBOL_relation_expr_opt_alias = 1064,                       /* relation_expr_opt_alias  */
    YYSYMBOL_func_table = 1065,                                    /* func_table  */
    YYSYMBOL_rowsfrom_item = 1066,                                 /* rowsfrom_item  */
    YYSYMBOL_rowsfrom_list = 1067,                                 /* rowsfrom_list  */
    YYSYMBOL_opt_col_def_list = 1068,                              /* opt_col_def_list  */
    YYSYMBOL_opt_ordinality = 1069,                                /* opt_ordinality  */
    YYSYMBOL_where_clause = 1070,                                  /* where_clause  */
    YYSYMBOL_where_or_current_clause = 1071,                       /* where_or_current_clause  */
    YYSYMBOL_OptTableFuncElementList = 1072,                       /* OptTableFuncElementList  */
    YYSYMBOL_TableFuncElementList = 1073,                          /* TableFuncElementList  */
    YYSYMBOL_TableFuncElement = 1074,                              /* TableFuncElement  */
    YYSYMBOL_Typename = 1075,                                      /* Typename  */
    YYSYMBOL_opt_array_bounds = 1076,                              /* opt_array_bounds  */
    YYSYMBOL_SimpleTypename = 1077,                                /* SimpleTypename  */
    YYSYMBOL_ConstTypename = 1078,                                 /* ConstTypename  */
    YYSYMBOL_GenericType = 1079,                                   /* GenericType  */
    YYSYMBOL_opt_type_modifiers = 1080,                            /* opt_type_modifiers  */
    YYSYMBOL_Numeric = 1081,                                       /* Numeric  */
    YYSYMBOL_opt_float = 1082,                                     /* opt_float  */
    YYSYMBOL_Bit = 1083,                                           /* Bit  */
    YYSYMBOL_ConstBit = 1084,                                      /* ConstBit  */
    YYSYMBOL_BitWithLength = 1085,                                 /* BitWithLength  */
    YYSYMBOL_BitWithoutLength = 1086,                              /* BitWithoutLength  */
    YYSYMBOL_Character = 1087,                                     /* Character  */
    YYSYMBOL_ConstCharacter = 1088,                                /* ConstCharacter  */
    YYSYMBOL_CharacterWithLength = 1089,                           /* CharacterWithLength  */
    YYSYMBOL_CharacterWithoutLength = 1090,                        /* CharacterWithoutLength  */
    YYSYMBOL_character = 1091,                                     /* character  */
    YYSYMBOL_opt_varying = 1092,                                   /* opt_varying  */
    YYSYMBOL_opt_charset = 1093,                                   /* opt_charset  */
    YYSYMBOL_ConstDatetime = 1094,                                 /* ConstDatetime  */
    YYSYMBOL_ConstInterval = 1095,                                 /* ConstInterval  */
    YYSYMBOL_opt_timezone = 1096,                                  /* opt_timezone  */
    YYSYMBOL_opt_interval = 1097,                                  /* opt_interval  */
    YYSYMBOL_interval_second = 1098,                               /* interval_second  */
    YYSYMBOL_a_expr = 1099,                                        /* a_expr  */
    YYSYMBOL_b_expr = 1100,                                        /* b_expr  */
    YYSYMBOL_c_expr = 1101,                                        /* c_expr  */
    YYSYMBOL_scatter_clause = 1102,                                /* scatter_clause  */
    YYSYMBOL_table_value_select_clause = 1103,                     /* table_value_select_clause  */
    YYSYMBOL_func_application = 1104,                              /* func_application  */
    YYSYMBOL_func_expr = 1105,                                     /* func_expr  */
    YYSYMBOL_func_expr_windowless = 1106,                          /* func_expr_windowless  */
    YYSYMBOL_func_expr_common_subexpr = 1107,                      /* func_expr_common_subexpr  */
    YYSYMBOL_xml_root_version = 1108,                              /* xml_root_version  */
    YYSYMBOL_opt_xml_root_standalone = 1109,                       /* opt_xml_root_standalone  */
    YYSYMBOL_xml_attributes = 1110,                                /* xml_attributes  */
    YYSYMBOL_xml_attribute_list = 1111,                            /* xml_attribute_list  */
    YYSYMBOL_xml_attribute_el = 1112,                              /* xml_attribute_el  */
    YYSYMBOL_document_or_content = 1113,                           /* document_or_content  */
    YYSYMBOL_xml_whitespace_option = 1114,                         /* xml_whitespace_option  */
    YYSYMBOL_xmlexists_argument = 1115,                            /* xmlexists_argument  */
    YYSYMBOL_within_group_clause = 1116,                           /* within_group_clause  */
    YYSYMBOL_filter_clause = 1117,                                 /* filter_clause  */
    YYSYMBOL_window_clause = 1118,                                 /* window_clause  */
    YYSYMBOL_window_definition_list = 1119,                        /* window_definition_list  */
    YYSYMBOL_window_definition = 1120,                             /* window_definition  */
    YYSYMBOL_over_clause = 1121,                                   /* over_clause  */
    YYSYMBOL_window_specification = 1122,                          /* window_specification  */
    YYSYMBOL_opt_existing_window_name = 1123,                      /* opt_existing_window_name  */
    YYSYMBOL_opt_partition_clause = 1124,                          /* opt_partition_clause  */
    YYSYMBOL_opt_frame_clause = 1125,                              /* opt_frame_clause  */
    YYSYMBOL_frame_extent = 1126,                                  /* frame_extent  */
    YYSYMBOL_frame_bound = 1127,                                   /* frame_bound  */
    YYSYMBOL_window_frame_exclusion = 1128,                        /* window_frame_exclusion  */
    YYSYMBOL_row = 1129,                                           /* row  */
    YYSYMBOL_sub_type = 1130,                                      /* sub_type  */
    YYSYMBOL_all_Op = 1131,                                        /* all_Op  */
    YYSYMBOL_MathOp = 1132,                                        /* MathOp  */
    YYSYMBOL_qual_Op = 1133,                                       /* qual_Op  */
    YYSYMBOL_qual_all_Op = 1134,                                   /* qual_all_Op  */
    YYSYMBOL_subquery_Op = 1135,                                   /* subquery_Op  */
    YYSYMBOL_expr_list = 1136,                                     /* expr_list  */
    YYSYMBOL_func_arg_list = 1137,                                 /* func_arg_list  */
    YYSYMBOL_func_arg_expr = 1138,                                 /* func_arg_expr  */
    YYSYMBOL_type_list = 1139,                                     /* type_list  */
    YYSYMBOL_array_expr = 1140,                                    /* array_expr  */
    YYSYMBOL_array_expr_list = 1141,                               /* array_expr_list  */
    YYSYMBOL_extract_list = 1142,                                  /* extract_list  */
    YYSYMBOL_extract_arg = 1143,                                   /* extract_arg  */
    YYSYMBOL_overlay_list = 1144,                                  /* overlay_list  */
    YYSYMBOL_overlay_placing = 1145,                               /* overlay_placing  */
    YYSYMBOL_position_list = 1146,                                 /* position_list  */
    YYSYMBOL_substr_list = 1147,                                   /* substr_list  */
    YYSYMBOL_substr_from = 1148,                                   /* substr_from  */
    YYSYMBOL_substr_for = 1149,                                    /* substr_for  */
    YYSYMBOL_trim_list = 1150,                                     /* trim_list  */
    YYSYMBOL_in_expr = 1151,                                       /* in_expr  */
    YYSYMBOL_case_expr = 1152,                                     /* case_expr  */
    YYSYMBOL_when_clause_list = 1153,                              /* when_clause_list  */
    YYSYMBOL_when_clause = 1154,                                   /* when_clause  */
    YYSYMBOL_when_operand = 1155,                                  /* when_operand  */
    YYSYMBOL_case_default = 1156,                                  /* case_default  */
    YYSYMBOL_case_arg = 1157,                                      /* case_arg  */
    YYSYMBOL_decode_expr = 1158,                                   /* decode_expr  */
    YYSYMBOL_search_result_list = 1159,                            /* search_result_list  */
    YYSYMBOL_search_result = 1160,                                 /* search_result  */
    YYSYMBOL_decode_default = 1161,                                /* decode_default  */
    YYSYMBOL_columnref = 1162,                                     /* columnref  */
    YYSYMBOL_indirection_el = 1163,                                /* indirection_el  */
    YYSYMBOL_indirection = 1164,                                   /* indirection  */
    YYSYMBOL_opt_indirection = 1165,                               /* opt_indirection  */
    YYSYMBOL_opt_asymmetric = 1166,                                /* opt_asymmetric  */
    YYSYMBOL_ctext_expr = 1167,                                    /* ctext_expr  */
    YYSYMBOL_ctext_expr_list = 1168,                               /* ctext_expr_list  */
    YYSYMBOL_ctext_row = 1169,                                     /* ctext_row  */
    YYSYMBOL_opt_target_list = 1170,                               /* opt_target_list  */
    YYSYMBOL_target_list = 1171,                                   /* target_list  */
    YYSYMBOL_target_el = 1172,                                     /* target_el  */
    YYSYMBOL_qualified_name_list = 1173,                           /* qualified_name_list  */
    YYSYMBOL_qualified_name = 1174,                                /* qualified_name  */
    YYSYMBOL_name_list = 1175,                                     /* name_list  */
    YYSYMBOL_name = 1176,                                          /* name  */
    YYSYMBOL_database_name = 1177,                                 /* database_name  */
    YYSYMBOL_access_method = 1178,                                 /* access_method  */
    YYSYMBOL_attr_name = 1179,                                     /* attr_name  */
    YYSYMBOL_index_name = 1180,                                    /* index_name  */
    YYSYMBOL_file_name = 1181,                                     /* file_name  */
    YYSYMBOL_func_name = 1182,                                     /* func_name  */
    YYSYMBOL_AexprConst = 1183,                                    /* AexprConst  */
    YYSYMBOL_Iconst = 1184,                                        /* Iconst  */
    YYSYMBOL_Sconst = 1185,                                        /* Sconst  */
    YYSYMBOL_RoleId = 1186,                                        /* RoleId  */
    YYSYMBOL_QueueId = 1187,                                       /* QueueId  */
    YYSYMBOL_role_list = 1188,                                     /* role_list  */
    YYSYMBOL_SignedIconst = 1189,                                  /* SignedIconst  */
    YYSYMBOL_ColId = 1190,                                         /* ColId  */
    YYSYMBOL_type_function_name = 1191,                            /* type_function_name  */
    YYSYMBOL_NonReservedWord = 1192,                               /* NonReservedWord  */
    YYSYMBOL_ColLabel = 1193,                                      /* ColLabel  */
    YYSYMBOL_unreserved_keyword = 1194,                            /* unreserved_keyword  */
    YYSYMBOL_ColLabelNoAs = 1195,                                  /* ColLabelNoAs  */
    YYSYMBOL_keywords_ok_in_alias_no_as = 1196,                    /* keywords_ok_in_alias_no_as  */
    YYSYMBOL_PartitionColId = 1197,                                /* PartitionColId  */
    YYSYMBOL_PartitionIdentKeyword = 1198,                         /* PartitionIdentKeyword  */
    YYSYMBOL_col_name_keyword = 1199,                              /* col_name_keyword  */
    YYSYMBOL_type_func_name_keyword = 1200,                        /* type_func_name_keyword  */
    YYSYMBOL_reserved_keyword = 1201                               /* reserved_keyword  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;

#ifdef short
#undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
#include <limits.h> /* INFRINGES ON USER NAME SPACE */
#if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#define YY_STDINT_H
#endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
#undef UINT_LEAST8_MAX
#undef UINT_LEAST16_MAX
#define UINT_LEAST8_MAX 255
#define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
#if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#define YYPTRDIFF_T __PTRDIFF_TYPE__
#define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
#elif defined PTRDIFF_MAX
#ifndef ptrdiff_t
#include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#endif
#define YYPTRDIFF_T ptrdiff_t
#define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
#else
#define YYPTRDIFF_T long
#define YYPTRDIFF_MAXIMUM LONG_MAX
#endif
#endif

#ifndef YYSIZE_T
#ifdef __SIZE_TYPE__
#define YYSIZE_T __SIZE_TYPE__
#elif defined size_t
#define YYSIZE_T size_t
#elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#define YYSIZE_T size_t
#else
#define YYSIZE_T unsigned
#endif
#endif

#define YYSIZE_MAXIMUM                                                                                                 \
    YY_CAST(YYPTRDIFF_T, (YYPTRDIFF_MAXIMUM < YY_CAST(YYSIZE_T, -1) ? YYPTRDIFF_MAXIMUM : YY_CAST(YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST(YYPTRDIFF_T, sizeof(X))

/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
#if defined YYENABLE_NLS && YYENABLE_NLS
#if ENABLE_NLS
#include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#define YY_(Msgid) dgettext("bison-runtime", Msgid)
#endif
#endif
#ifndef YY_
#define YY_(Msgid) Msgid
#endif
#endif

#ifndef YY_ATTRIBUTE_PURE
#if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#define YY_ATTRIBUTE_PURE __attribute__((__pure__))
#else
#define YY_ATTRIBUTE_PURE
#endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
#if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#define YY_ATTRIBUTE_UNUSED __attribute__((__unused__))
#else
#define YY_ATTRIBUTE_UNUSED
#endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if !defined lint || defined __GNUC__
#define YY_USE(E) ((void) (E))
#else
#define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && !defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
#if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                                                                            \
    _Pragma("GCC diagnostic push") _Pragma("GCC diagnostic ignored \"-Wuninitialized\"")
#else
#define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                                                                            \
    _Pragma("GCC diagnostic push") _Pragma("GCC diagnostic ignored \"-Wuninitialized\"")                               \
        _Pragma("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
#endif
#define YY_IGNORE_MAYBE_UNINITIALIZED_END _Pragma("GCC diagnostic pop")
#else
#define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
#define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
#define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
#define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && !defined __ICC && 6 <= __GNUC__
#define YY_IGNORE_USELESS_CAST_BEGIN _Pragma("GCC diagnostic push") _Pragma("GCC diagnostic ignored \"-Wuseless-cast\"")
#define YY_IGNORE_USELESS_CAST_END _Pragma("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
#define YY_IGNORE_USELESS_CAST_BEGIN
#define YY_IGNORE_USELESS_CAST_END
#endif

#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

#ifdef YYSTACK_USE_ALLOCA
#if YYSTACK_USE_ALLOCA
#ifdef __GNUC__
#define YYSTACK_ALLOC __builtin_alloca
#elif defined __BUILTIN_VA_ARG_INCR
#include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#elif defined _AIX
#define YYSTACK_ALLOC __alloca
#elif defined _MSC_VER
#include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#define alloca _alloca
#else
#define YYSTACK_ALLOC alloca
#if !defined _ALLOCA_H && !defined EXIT_SUCCESS
#include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
/* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#ifndef EXIT_SUCCESS
#define EXIT_SUCCESS 0
#endif
#endif
#endif
#endif
#endif

#ifdef YYSTACK_ALLOC
/* Pacify GCC's 'empty if-body' warning.  */
#define YYSTACK_FREE(Ptr)                                                                                              \
    do { /* empty */                                                                                                   \
        ;                                                                                                              \
    } while (0)
#ifndef YYSTACK_ALLOC_MAXIMUM
/* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#endif
#else
#define YYSTACK_ALLOC YYMALLOC
#define YYSTACK_FREE YYFREE
#ifndef YYSTACK_ALLOC_MAXIMUM
#define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#endif
#if (defined __cplusplus && !defined EXIT_SUCCESS &&                                                                   \
     !((defined YYMALLOC || defined malloc) && (defined YYFREE || defined free)))
#include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#ifndef EXIT_SUCCESS
#define EXIT_SUCCESS 0
#endif
#endif
#ifndef YYMALLOC
#define YYMALLOC malloc
#if !defined malloc && !defined EXIT_SUCCESS
void* malloc(YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#endif
#endif
#ifndef YYFREE
#define YYFREE free
#if !defined free && !defined EXIT_SUCCESS
void free(void*);       /* INFRINGES ON USER NAME SPACE */
#endif
#endif
#endif
#endif /* !defined yyoverflow */

#if (!defined yyoverflow && (!defined __cplusplus || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL &&              \
                                                      defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc {
    yy_state_t yyss_alloc;
    YYSTYPE yyvs_alloc;
    YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
#define YYSTACK_GAP_MAXIMUM (YYSIZEOF(union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
#define YYSTACK_BYTES(N)                                                                                               \
    ((N) * (YYSIZEOF(yy_state_t) + YYSIZEOF(YYSTYPE) + YYSIZEOF(YYLTYPE)) + 2 * YYSTACK_GAP_MAXIMUM)

#define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
#define YYSTACK_RELOCATE(Stack_alloc, Stack)                                                                           \
    do {                                                                                                               \
        YYPTRDIFF_T yynewbytes;                                                                                        \
        YYCOPY(&yyptr->Stack_alloc, Stack, yysize);                                                                    \
        Stack = &yyptr->Stack_alloc;                                                                                   \
        yynewbytes = yystacksize * YYSIZEOF(*Stack) + YYSTACK_GAP_MAXIMUM;                                             \
        yyptr += yynewbytes / YYSIZEOF(*yyptr);                                                                        \
    } while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
#ifndef YYCOPY
#if defined __GNUC__ && 1 < __GNUC__
#define YYCOPY(Dst, Src, Count) __builtin_memcpy(Dst, Src, YY_CAST(YYSIZE_T, (Count)) * sizeof(*(Src)))
#else
#define YYCOPY(Dst, Src, Count)                                                                                        \
    do {                                                                                                               \
        YYPTRDIFF_T yyi;                                                                                               \
        for (yyi = 0; yyi < (Count); yyi++) (Dst)[yyi] = (Src)[yyi];                                                   \
    } while (0)
#endif
#endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL 813
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST 106309

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS 512
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS 690
/* YYNRULES -- Number of rules.  */
#define YYNRULES 3042
/* YYNSTATES -- Number of states.  */
#define YYNSTATES 5650

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK 749

/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                                                                               \
    (0 <= (YYX) && (YYX) <= YYMAXUTOK ? YY_CAST(yysymbol_kind_t, yytranslate[YYX]) : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] = {
    0,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   501, 2,   2,   506, 507, 499, 497, 510, 498,
    508, 500, 2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   511, 509, 494, 493, 495, 2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   504,
    2,   505, 502, 2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,
    21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,
    44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,
    67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,
    90,  91,  92,  93,  94,  95,  96,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
    113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
    136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
    159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
    182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
    205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227,
    228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
    251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
    274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296,
    297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
    320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342,
    343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365,
    366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388,
    389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
    412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434,
    435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457,
    458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
    481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 496, 503};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] = {
    0,     1134,  1134,  1141,  1148,  1158,  1159,  1160,  1161,  1162,  1163,  1164,  1165,  1166,  1167,  1168,
    1169,  1170,  1171,  1172,  1173,  1174,  1175,  1176,  1177,  1178,  1179,  1180,  1181,  1182,  1183,  1184,
    1185,  1186,  1187,  1188,  1189,  1190,  1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  1199,  1200,
    1201,  1202,  1203,  1204,  1205,  1206,  1207,  1208,  1209,  1210,  1211,  1212,  1213,  1214,  1215,  1216,
    1217,  1218,  1219,  1220,  1221,  1222,  1223,  1224,  1225,  1226,  1227,  1228,  1229,  1230,  1231,  1232,
    1233,  1234,  1235,  1236,  1237,  1238,  1239,  1240,  1241,  1242,  1243,  1244,  1245,  1246,  1247,  1248,
    1249,  1250,  1251,  1252,  1253,  1254,  1255,  1256,  1257,  1258,  1259,  1260,  1261,  1262,  1263,  1264,
    1265,  1266,  1267,  1268,  1269,  1270,  1271,  1272,  1273,  1274,  1275,  1276,  1277,  1278,  1279,  1280,
    1281,  1282,  1284,  1294,  1304,  1320,  1321,  1325,  1330,  1335,  1340,  1345,  1359,  1366,  1380,  1394,
    1418,  1433,  1449,  1463,  1475,  1479,  1484,  1488,  1492,  1496,  1500,  1513,  1524,  1525,  1534,  1535,
    1539,  1540,  1550,  1551,  1555,  1560,  1564,  1569,  1574,  1578,  1582,  1586,  1590,  1594,  1598,  1603,
    1607,  1611,  1665,  1667,  1671,  1675,  1679,  1683,  1689,  1690,  1693,  1702,  1703,  1706,  1715,  1716,
    1720,  1721,  1725,  1726,  1730,  1744,  1762,  1773,  1774,  1778,  1786,  1804,  1816,  1824,  1845,  1852,
    1871,  1878,  1895,  1913,  1924,  1925,  1937,  1944,  1961,  1974,  1984,  2002,  2020,  2021,  2025,  2032,
    2040,  2041,  2042,  2043,  2044,  2045,  2059,  2065,  2071,  2080,  2088,  2096,  2100,  2108,  2116,  2123,
    2133,  2134,  2142,  2153,  2161,  2169,  2180,  2188,  2196,  2203,  2212,  2222,  2223,  2227,  2228,  2231,
    2233,  2237,  2238,  2239,  2240,  2244,  2245,  2246,  2252,  2264,  2268,  2272,  2287,  2310,  2311,  2312,
    2316,  2317,  2318,  2322,  2323,  2327,  2331,  2332,  2339,  2346,  2356,  2363,  2373,  2374,  2379,  2380,
    2385,  2391,  2397,  2403,  2409,  2419,  2429,  2430,  2434,  2435,  2443,  2458,  2464,  2470,  2476,  2482,
    2501,  2510,  2519,  2527,  2538,  2549,  2558,  2567,  2578,  2589,  2598,  2607,  2616,  2625,  2634,  2643,
    2654,  2668,  2669,  2674,  2682,  2690,  2702,  2710,  2718,  2727,  2736,  2745,  2754,  2764,  2777,  2792,
    2801,  2809,  2824,  2832,  2842,  2852,  2859,  2866,  2874,  2882,  2890,  2898,  2906,  2913,  2920,  2928,
    2935,  2942,  2950,  2958,  2966,  2974,  2982,  2991,  2999,  3007,  3014,  3019,  3026,  3033,  3043,  3050,
    3058,  3066,  3074,  3082,  3089,  3099,  3100,  3104,  3105,  3106,  3110,  3118,  3122,  3123,  3127,  3134,
    3141,  3148,  3158,  3161,  3162,  3166,  3167,  3172,  3186,  3199,  3204,  3211,  3223,  3227,  3228,  3229,
    3233,  3241,  3272,  3311,  3316,  3322,  3333,  3365,  3397,  3430,  3450,  3476,  3506,  3532,  3561,  3580,
    3595,  3658,  3673,  3695,  3717,  3753,  3766,  3767,  3772,  3781,  3791,  3801,  3827,  3833,  3863,  3915,
    3954,  3955,  3959,  3960,  3964,  3965,  3974,  3975,  3976,  3979,  3980,  3985,  3986,  3990,  3994,  3998,
    4002,  4006,  4010,  4014,  4018,  4022,  4026,  4030,  4034,  4038,  4042,  4046,  4050,  4054,  4063,  4067,
    4071,  4075,  4079,  4083,  4087,  4088,  4093,  4097,  4104,  4111,  4112,  4113,  4114,  4115,  4119,  4123,
    4131,  4142,  4161,  4181,  4201,  4234,  4235,  4236,  4237,  4238,  4245,  4252,  4253,  4257,  4258,  4262,
    4263,  4267,  4271,  4278,  4282,  4289,  4290,  4291,  4292,  4296,  4297,  4301,  4310,  4322,  4344,  4365,
    4366,  4370,  4378,  4379,  4380,  4395,  4396,  4415,  4422,  4429,  4440,  4451,  4461,  4470,  4503,  4510,
    4517,  4524,  4535,  4545,  4546,  4547,  4551,  4552,  4553,  4554,  4555,  4556,  4565,  4573,  4577,  4590,
    4605,  4619,  4634,  4648,  4666,  4687,  4688,  4692,  4693,  4697,  4698,  4701,  4708,  4709,  4729,  4740,
    4744,  4752,  4757,  4763,  4764,  4768,  4773,  4780,  4781,  4791,  4793,  4795,  4797,  4800,  4803,  4806,
    4810,  4811,  4812,  4813,  4814,  4817,  4818,  4823,  4824,  4825,  4826,  4829,  4830,  4831,  4832,  4835,
    4836,  4839,  4840,  4843,  4847,  4852,  4857,  4865,  4873,  4881,  4892,  4893,  4898,  4899,  4903,  4904,
    4910,  4920,  4930,  4940,  4943,  4951,  4955,  4963,  4967,  4968,  4972,  4973,  4977,  4978,  4982,  4986,
    4989,  4990,  4991,  4998,  4999,  5004,  5005,  5006,  5010,  5026,  5042,  5050,  5054,  5055,  5060,  5068,
    5081,  5096,  5097,  5100,  5110,  5122,  5126,  5133,  5137,  5143,  5144,  5149,  5167,  5183,  5199,  5206,
    5223,  5239,  5255,  5261,  5266,  5272,  5278,  5285,  5286,  5288,  5298,  5319,  5323,  5359,  5360,  5364,
    5381,  5389,  5390,  5396,  5418,  5441,  5455,  5456,  5457,  5467,  5527,  5528,  5529,  5532,  5533,  5537,
    5547,  5560,  5561,  5565,  5569,  5573,  5577,  5581,  5585,  5592,  5593,  5594,  5595,  5599,  5603,  5610,
    5614,  5621,  5625,  5632,  5636,  5640,  5644,  5648,  5652,  5656,  5660,  5664,  5668,  5672,  5679,  5680,
    5684,  5685,  5689,  5693,  5700,  5707,  5708,  5712,  5716,  5723,  5724,  5728,  5744,  5766,  5770,  5789,
    5790,  5793,  5815,  5819,  5820,  5824,  5825,  5826,  5833,  5834,  5838,  5842,  5856,  5873,  5886,  5887,
    5899,  5919,  5931,  5939,  5950,  5951,  5954,  5955,  5958,  5962,  5966,  5970,  5974,  5978,  5982,  5986,
    5990,  5994,  5998,  6002,  6008,  6009,  6013,  6014,  6015,  6020,  6023,  6024,  6036,  6048,  6063,  6064,
    6072,  6073,  6077,  6078,  6082,  6083,  6087,  6088,  6092,  6103,  6116,  6117,  6127,  6138,  6139,  6152,
    6159,  6176,  6184,  6195,  6198,  6202,  6206,  6210,  6222,  6232,  6235,  6239,  6252,  6262,  6272,  6281,
    6290,  6299,  6309,  6318,  6328,  6338,  6348,  6357,  6366,  6375,  6384,  6393,  6402,  6411,  6420,  6429,
    6438,  6447,  6456,  6465,  6483,  6494,  6495,  6496,  6497,  6501,  6502,  6506,  6507,  6517,  6528,  6548,
    6556,  6568,  6569,  6573,  6577,  6585,  6589,  6593,  6600,  6604,  6609,  6614,  6621,  6628,  6633,  6643,
    6657,  6658,  6663,  6664,  6668,  6669,  6679,  6690,  6710,  6719,  6727,  6744,  6759,  6784,  6793,  6811,
    6823,  6824,  6825,  6835,  6843,  6860,  6879,  6899,  6924,  6925,  6926,  6930,  6932,  6954,  6956,  6958,
    6960,  6962,  6967,  6972,  6982,  6983,  6987,  6988,  6992,  6993,  6997,  6998,  6999,  7003,  7009,  7010,
    7011,  7015,  7016,  7021,  7022,  7049,  7050,  7051,  7052,  7053,  7054,  7059,  7070,  7093,  7103,  7117,
    7119,  7124,  7129,  7131,  7136,  7146,  7147,  7148,  7149,  7161,  7181,  7204,  7214,  7225,  7235,  7245,
    7256,  7265,  7286,  7293,  7300,  7309,  7318,  7327,  7336,  7345,  7356,  7357,  7360,  7363,  7364,  7367,
    7381,  7388,  7390,  7391,  7392,  7393,  7394,  7401,  7404,  7407,  7408,  7416,  7423,  7424,  7427,  7429,
    7440,  7450,  7460,  7472,  7473,  7489,  7504,  7505,  7509,  7519,  7530,  7539,  7549,  7558,  7559,  7562,
    7563,  7566,  7567,  7568,  7571,  7585,  7590,  7600,  7609,  7621,  7622,  7626,  7634,  7646,  7657,  7671,
    7682,  7705,  7715,  7733,  7744,  7755,  7766,  7780,  7781,  7782,  7783,  7784,  7785,  7786,  7787,  7788,
    7789,  7790,  7791,  7792,  7793,  7794,  7795,  7796,  7797,  7798,  7799,  7803,  7804,  7807,  7808,  7811,
    7813,  7826,  7837,  7838,  7839,  7871,  7880,  7889,  7898,  7907,  7916,  7925,  7935,  7944,  7953,  7962,
    7971,  7980,  7992,  7993,  7994,  7995,  7996,  7997,  7998,  7999,  8000,  8001,  8002,  8003,  8004,  8005,
    8006,  8007,  8008,  8009,  8010,  8011,  8012,  8013,  8014,  8015,  8016,  8020,  8021,  8035,  8046,  8057,
    8068,  8079,  8092,  8093,  8097,  8098,  8099,  8100,  8101,  8102,  8103,  8104,  8105,  8106,  8107,  8108,
    8109,  8112,  8113,  8123,  8129,  8137,  8145,  8153,  8161,  8169,  8177,  8185,  8193,  8201,  8209,  8217,
    8225,  8233,  8241,  8249,  8257,  8267,  8268,  8271,  8272,  8282,  8298,  8312,  8338,  8340,  8342,  8344,
    8351,  8360,  8361,  8364,  8371,  8378,  8385,  8399,  8407,  8415,  8423,  8431,  8439,  8447,  8455,  8463,
    8471,  8479,  8487,  8495,  8503,  8511,  8519,  8527,  8539,  8540,  8543,  8553,  8567,  8568,  8572,  8573,
    8578,  8594,  8607,  8617,  8629,  8630,  8633,  8634,  8644,  8654,  8655,  8659,  8663,  8667,  8678,  8691,
    8705,  8722,  8723,  8724,  8725,  8737,  8773,  8774,  8778,  8779,  8783,  8784,  8788,  8789,  8792,  8793,
    8801,  8812,  8823,  8836,  8837,  8840,  8841,  8842,  8845,  8846,  8847,  8850,  8851,  8852,  8868,  8880,
    8893,  8908,  8909,  8912,  8913,  8917,  8918,  8926,  8927,  8931,  8932,  8947,  8956,  8965,  8974,  8983,
    8995,  8996,  8997,  8998,  8999,  9005,  9009,  9024,  9025,  9031,  9041,  9045,  9050,  9058,  9099,  9103,
    9107,  9111,  9119,  9120,  9125,  9126,  9133,  9137,  9141,  9145,  9149,  9153,  9157,  9161,  9165,  9169,
    9173,  9177,  9181,  9185,  9189,  9194,  9198,  9202,  9206,  9210,  9214,  9218,  9222,  9229,  9233,  9237,
    9241,  9247,  9248,  9255,  9256,  9259,  9271,  9275,  9290,  9301,  9302,  9307,  9308,  9323,  9334,  9348,
    9359,  9373,  9384,  9398,  9406,  9408,  9410,  9415,  9417,  9430,  9439,  9440,  9444,  9448,  9460,  9471,
    9482,  9495,  9496,  9497,  9501,  9514,  9515,  9529,  9537,  9547,  9560,  9561,  9564,  9565,  9573,  9590,
    9599,  9616,  9626,  9635,  9644,  9653,  9662,  9672,  9681,  9691,  9700,  9709,  9719,  9729,  9738,  9747,
    9757,  9767,  9777,  9787,  9797,  9807,  9817,  9827,  9837,  9847,  9857,  9867,  9878,  9889,  9900,  9911,
    9921,  9932,  9943,  9953,  9963,  9971,  9980,  9989,  9998,  10007, 10016, 10025, 10034, 10043, 10055, 10065,
    10066, 10069, 10070, 10080, 10090, 10099, 10108, 10117, 10126, 10136, 10146, 10156, 10166, 10175, 10184, 10193,
    10202, 10211, 10220, 10229, 10238, 10247, 10256, 10265, 10274, 10283, 10292, 10309, 10318, 10326, 10334, 10342,
    10350, 10359, 10367, 10375, 10384, 10393, 10402, 10410, 10418, 10426, 10434, 10442, 10450, 10458, 10466, 10483,
    10500, 10501, 10502, 10507, 10513, 10522, 10523, 10524, 10525, 10526, 10530, 10531, 10534, 10535, 10536, 10537,
    10541, 10542, 10543, 10548, 10559, 10581, 10591, 10592, 10595, 10604, 10610, 10629, 10636, 10643, 10650, 10657,
    10664, 10671, 10679, 10687, 10695, 10703, 10711, 10718, 10725, 10734, 10735, 10736, 10740, 10743, 10746, 10749,
    10752, 10759, 10761, 10763, 10768, 10770, 10782, 10795, 10808, 10826, 10847, 10848, 10849, 10850, 10860, 10876,
    10886, 10887, 10891, 10895, 10899, 10903, 10907, 10911, 10915, 10919, 10923, 10927, 10931, 10935, 10939, 10943,
    10947, 10951, 10961, 10962, 10973, 10980, 10991, 11002, 11003, 11007, 11021, 11028, 11046, 11052, 11068, 11081,
    11090, 11098, 11106, 11115, 11126, 11137, 11147, 11148, 11159, 11169, 11180, 11191, 11202, 11213, 11222, 11244,
    11267, 11275, 11284, 11295, 11296, 11308, 11324, 11340, 11354, 11374, 11399, 11400, 11404, 11405, 11406, 11407,
    11408, 11412, 11428, 11442, 11454, 11469, 11470, 11474, 11475, 11479, 11480, 11483, 11484, 11487, 11488, 11492,
    11493, 11506, 11513, 11526, 11536, 11546, 11547, 11548, 11549, 11550, 11551, 11552, 11553, 11554, 11555, 11564,
    11565, 11569, 11573, 11580, 11587, 11588, 11592, 11593, 11594, 11604, 11614, 11615, 11619, 11620, 11621, 11622,
    11632, 11639, 11657, 11658, 11668, 11674, 11680, 11686, 11702, 11703, 11716, 11730, 11740, 11746, 11752, 11761,
    11763, 11768, 11779, 11780, 11791, 11805, 11806, 11817, 11837, 11838, 11841, 11842, 11843, 11844, 11845, 11846,
    11847, 11848, 11851, 11852, 11855, 11856, 11866, 11884, 11885, 11889, 11890, 11894, 11902, 11930, 11941, 11942,
    11952, 11963, 11966, 11967, 11968, 11969, 11970, 11971, 11974, 11975, 11976, 12024, 12025, 12029, 12036, 12047,
    12048, 12063, 12064, 12071, 12079, 12087, 12095, 12103, 12111, 12122, 12123, 12150, 12165, 12166, 12185, 12189,
    12193, 12208, 12215, 12225, 12226, 12229, 12241, 12242, 12246, 12258, 12266, 12271, 12276, 12281, 12286, 12294,
    12302, 12307, 12312, 12319, 12320, 12323, 12324, 12325, 12332, 12333, 12334, 12335, 12339, 12340, 12344, 12348,
    12349, 12352, 12361, 12374, 12375, 12376, 12377, 12381, 12382, 12386, 12388, 12404, 12406, 12411, 12414, 12419,
    12420, 12428, 12448, 12449, 12451, 12456, 12457, 12461, 12462, 12465, 12466, 12471, 12472, 12476, 12477, 12481,
    12482, 12490, 12498, 12506, 12511, 12512, 12516, 12517, 12521, 12522, 12526, 12527, 12531, 12542, 12543, 12544,
    12545, 12549, 12550, 12555, 12561, 12579, 12580, 12584, 12585, 12591, 12596, 12603, 12611, 12646, 12671, 12675,
    12701, 12705, 12717, 12730, 12744, 12755, 12770, 12776, 12781, 12787, 12794, 12795, 12803, 12807, 12811, 12817,
    12824, 12829, 12830, 12831, 12832, 12836, 12837, 12849, 12850, 12855, 12862, 12869, 12876, 12887, 12888, 12901,
    12905, 12912, 12933, 12943, 12955, 12960, 12961, 12964, 12965, 12968, 12969, 12974, 12975, 12980, 12981, 12989,
    12994, 12995, 12999, 13003, 13009, 13039, 13044, 13051, 13056, 13062, 13067, 13076, 13078, 13081, 13085, 13086,
    13087, 13088, 13089, 13090, 13095, 13125, 13126, 13127, 13128, 13139, 13145, 13153, 13154, 13160, 13165, 13170,
    13175, 13180, 13185, 13190, 13195, 13201, 13207, 13213, 13220, 13242, 13251, 13255, 13263, 13267, 13275, 13287,
    13308, 13312, 13318, 13322, 13335, 13346, 13361, 13363, 13365, 13367, 13369, 13371, 13376, 13377, 13381, 13382,
    13389, 13398, 13406, 13415, 13426, 13434, 13435, 13436, 13440, 13442, 13444, 13446, 13448, 13450, 13452, 13457,
    13462, 13468, 13476, 13481, 13488, 13495, 13499, 13503, 13533, 13534, 13536, 13544, 13559, 13561, 13563, 13565,
    13567, 13569, 13571, 13573, 13575, 13577, 13579, 13582, 13584, 13586, 13589, 13591, 13593, 13596, 13598, 13605,
    13607, 13614, 13616, 13623, 13625, 13633, 13640, 13647, 13654, 13671, 13678, 13685, 13692, 13699, 13715, 13722,
    13729, 13736, 13743, 13750, 13757, 13761, 13769, 13773, 13783, 13790, 13797, 13810, 13823, 13842, 13863, 13873,
    13880, 13896, 13901, 13919, 13921, 13923, 13925, 13927, 13929, 13931, 13933, 13935, 13937, 13939, 13941, 13943,
    13945, 13947, 13949, 13951, 13955, 13960, 13964, 13968, 13973, 13990, 13991, 13992, 14007, 14019, 14021, 14023,
    14025, 14035, 14058, 14068, 14078, 14086, 14093, 14105, 14106, 14107, 14111, 14119, 14123, 14129, 14136, 14143,
    14156, 14163, 14191, 14226, 14237, 14238, 14245, 14251, 14277, 14287, 14300, 14308, 14321, 14331, 14344, 14354,
    14367, 14371, 14375, 14379, 14383, 14387, 14391, 14393, 14397, 14406, 14411, 14418, 14433, 14440, 14444, 14448,
    14452, 14456, 14463, 14471, 14479, 14486, 14491, 14519, 14533, 14537, 14541, 14545, 14549, 14553, 14567, 14580,
    14584, 14593, 14597, 14601, 14606, 14620, 14622, 14626, 14628, 14630, 14633, 14636, 14639, 14640, 14643, 14651,
    14661, 14662, 14665, 14666, 14667, 14672, 14676, 14680, 14684, 14695, 14696, 14700, 14701, 14709, 14710, 14714,
    14715, 14720, 14728, 14730, 14744, 14747, 14774, 14775, 14778, 14779, 14790, 14811, 14819, 14828, 14845, 14890,
    14898, 14906, 14914, 14922, 14932, 14933, 14934, 14935, 14936, 14950, 14951, 14952, 14955, 14956, 14957, 14960,
    14961, 14964, 14965, 14966, 14967, 14968, 14969, 14970, 14971, 14972, 14975, 14977, 14982, 14984, 14989, 14991,
    14993, 14995, 14997, 14999, 15011, 15015, 15022, 15026, 15032, 15036, 15047, 15048, 15051, 15055, 15059, 15065,
    15066, 15071, 15075, 15082, 15083, 15084, 15085, 15086, 15087, 15088, 15089, 15099, 15103, 15110, 15117, 15118,
    15134, 15138, 15143, 15147, 15162, 15167, 15171, 15174, 15177, 15178, 15179, 15182, 15189, 15199, 15213, 15214,
    15218, 15229, 15230, 15234, 15235, 15238, 15239, 15253, 15265, 15266, 15270, 15281, 15282, 15286, 15290, 15297,
    15301, 15305, 15312, 15322, 15323, 15327, 15328, 15331, 15332, 15343, 15344, 15353, 15354, 15362, 15372, 15373,
    15377, 15378, 15381, 15403, 15411, 15419, 15427, 15449, 15450, 15461, 15465, 15492, 15494, 15499, 15502, 15505,
    15507, 15509, 15511, 15521, 15523, 15534, 15538, 15542, 15546, 15550, 15559, 15566, 15598, 15602, 15608, 15625,
    15629, 15633, 15639, 15640, 15641, 15642, 15644, 15646, 15650, 15651, 15652, 15668, 15669, 15670, 15675, 15676,
    15677, 15682, 15683, 15684, 15685, 15691, 15692, 15693, 15694, 15695, 15715, 15716, 15717, 15718, 15719, 15720,
    15721, 15722, 15723, 15724, 15725, 15726, 15727, 15728, 15729, 15730, 15731, 15732, 15733, 15734, 15735, 15736,
    15737, 15738, 15739, 15740, 15741, 15742, 15743, 15744, 15745, 15746, 15747, 15748, 15749, 15750, 15751, 15752,
    15753, 15754, 15755, 15756, 15757, 15758, 15759, 15760, 15761, 15762, 15763, 15764, 15765, 15766, 15767, 15768,
    15769, 15770, 15771, 15772, 15773, 15774, 15775, 15776, 15777, 15778, 15779, 15780, 15781, 15782, 15783, 15784,
    15785, 15786, 15787, 15788, 15789, 15790, 15791, 15792, 15793, 15794, 15795, 15796, 15797, 15798, 15799, 15800,
    15801, 15802, 15803, 15804, 15805, 15806, 15807, 15808, 15809, 15810, 15811, 15812, 15813, 15814, 15815, 15816,
    15817, 15818, 15819, 15820, 15821, 15822, 15823, 15824, 15825, 15826, 15827, 15828, 15829, 15830, 15831, 15832,
    15833, 15834, 15835, 15836, 15837, 15838, 15839, 15840, 15841, 15842, 15843, 15844, 15845, 15846, 15847, 15848,
    15849, 15850, 15851, 15852, 15853, 15854, 15855, 15856, 15857, 15858, 15859, 15860, 15861, 15862, 15863, 15864,
    15865, 15866, 15867, 15868, 15869, 15870, 15871, 15872, 15873, 15874, 15875, 15876, 15877, 15878, 15879, 15880,
    15881, 15882, 15883, 15884, 15885, 15886, 15887, 15888, 15889, 15890, 15891, 15892, 15893, 15894, 15895, 15896,
    15897, 15898, 15899, 15900, 15901, 15902, 15903, 15904, 15905, 15906, 15907, 15908, 15909, 15910, 15911, 15912,
    15913, 15914, 15915, 15916, 15917, 15918, 15919, 15920, 15921, 15922, 15923, 15924, 15925, 15926, 15927, 15928,
    15929, 15930, 15931, 15932, 15933, 15934, 15935, 15936, 15937, 15938, 15939, 15940, 15941, 15942, 15943, 15944,
    15945, 15946, 15947, 15948, 15949, 15950, 15951, 15952, 15953, 15954, 15955, 15956, 15957, 15958, 15959, 15960,
    15961, 15962, 15963, 15964, 15965, 15966, 15967, 15968, 15969, 15970, 15971, 15972, 15973, 15974, 15975, 15976,
    15977, 15978, 15979, 15980, 15981, 15982, 15983, 15984, 15985, 15986, 15987, 15988, 15989, 15990, 15991, 15992,
    15993, 15994, 15995, 15996, 15997, 15998, 15999, 16000, 16001, 16002, 16003, 16004, 16005, 16006, 16007, 16008,
    16009, 16010, 16011, 16012, 16013, 16014, 16015, 16016, 16017, 16018, 16019, 16020, 16021, 16022, 16023, 16024,
    16025, 16026, 16027, 16028, 16029, 16030, 16044, 16047, 16048, 16049, 16050, 16051, 16054, 16055, 16058, 16059,
    16060, 16061, 16062, 16063, 16064, 16065, 16066, 16067, 16068, 16069, 16070, 16071, 16072, 16073, 16074, 16075,
    16076, 16077, 16078, 16079, 16080, 16081, 16082, 16083, 16084, 16085, 16086, 16087, 16088, 16089, 16090, 16091,
    16092, 16093, 16094, 16095, 16096, 16097, 16098, 16099, 16100, 16101, 16102, 16103, 16104, 16105, 16106, 16107,
    16108, 16109, 16110, 16111, 16112, 16113, 16114, 16115, 16116, 16117, 16118, 16119, 16120, 16121, 16122, 16123,
    16124, 16125, 16126, 16127, 16128, 16129, 16130, 16131, 16132, 16133, 16134, 16135, 16136, 16137, 16138, 16139,
    16140, 16141, 16142, 16143, 16144, 16145, 16146, 16147, 16148, 16149, 16150, 16151, 16152, 16153, 16154, 16155,
    16156, 16157, 16158, 16159, 16160, 16161, 16162, 16163, 16164, 16165, 16166, 16167, 16168, 16169, 16170, 16171,
    16172, 16173, 16174, 16175, 16176, 16177, 16178, 16179, 16180, 16181, 16182, 16183, 16184, 16185, 16186, 16187,
    16188, 16189, 16190, 16191, 16192, 16193, 16194, 16195, 16196, 16197, 16198, 16199, 16200, 16201, 16202, 16203,
    16204, 16205, 16206, 16207, 16208, 16209, 16210, 16211, 16212, 16213, 16214, 16215, 16216, 16217, 16218, 16219,
    16220, 16221, 16222, 16223, 16224, 16225, 16226, 16227, 16228, 16229, 16230, 16231, 16232, 16233, 16234, 16235,
    16236, 16237, 16238, 16239, 16240, 16241, 16242, 16243, 16244, 16245, 16246, 16247, 16248, 16249, 16250, 16251,
    16252, 16253, 16254, 16255, 16256, 16257, 16258, 16259, 16260, 16261, 16262, 16263, 16264, 16265, 16266, 16267,
    16268, 16269, 16270, 16271, 16272, 16273, 16274, 16275, 16276, 16277, 16278, 16279, 16280, 16281, 16282, 16283,
    16284, 16285, 16286, 16287, 16288, 16289, 16290, 16291, 16292, 16293, 16294, 16295, 16296, 16297, 16298, 16299,
    16300, 16301, 16302, 16303, 16304, 16305, 16306, 16307, 16308, 16309, 16310, 16311, 16312, 16313, 16314, 16315,
    16316, 16317, 16318, 16319, 16320, 16321, 16322, 16323, 16324, 16325, 16326, 16327, 16328, 16329, 16330, 16331,
    16332, 16333, 16334, 16335, 16349, 16350, 16351, 16352, 16353, 16354, 16355, 16356, 16357, 16358, 16359, 16360,
    16361, 16362, 16363, 16364, 16365, 16366, 16367, 16368, 16369, 16370, 16371, 16372, 16373, 16374, 16375, 16376,
    16377, 16378, 16379, 16380, 16381, 16382, 16383, 16384, 16385, 16386, 16387, 16388, 16389, 16390, 16391, 16392,
    16393, 16394, 16395, 16396, 16397, 16398, 16399, 16400, 16414, 16415, 16416, 16417, 16418, 16419, 16420, 16421,
    16422, 16423, 16424, 16425, 16426, 16427, 16428, 16429, 16430, 16431, 16432, 16433, 16434, 16435, 16445, 16446,
    16447, 16448, 16449, 16450, 16451, 16452, 16453, 16454, 16455, 16456, 16457, 16458, 16459, 16460, 16461, 16462,
    16463, 16464, 16465, 16466, 16467, 16468, 16469, 16470, 16471, 16472, 16473, 16474, 16475, 16476, 16477, 16478,
    16479, 16480, 16481, 16482, 16483, 16484, 16485, 16486, 16487, 16488, 16489, 16490, 16491, 16492, 16493, 16494,
    16495, 16496, 16497, 16498, 16499, 16500, 16501, 16502, 16503, 16504, 16505, 16506, 16507, 16508, 16509, 16510,
    16511, 16512, 16513, 16514, 16515, 16516, 16517, 16518, 16519, 16520, 16521, 16522, 16523, 16524, 16525, 16526,
    16527, 16528, 16529};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST(yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char* yysymbol_name(yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char* const yytname[] = {"\"end of file\"",
                                      "error",
                                      "\"invalid token\"",
                                      "IDENT",
                                      "FCONST",
                                      "SCONST",
                                      "BCONST",
                                      "XCONST",
                                      "Op",
                                      "ICONST",
                                      "PARAM",
                                      "TYPECAST",
                                      "DOT_DOT",
                                      "COLON_EQUALS",
                                      "ABORT_P",
                                      "ABSOLUTE_P",
                                      "ACCESS",
                                      "ACTION",
                                      "ADD_P",
                                      "ADMIN",
                                      "AFTER",
                                      "AGGREGATE",
                                      "ALL",
                                      "ALSO",
                                      "ALTER",
                                      "ALWAYS",
                                      "ANALYSE",
                                      "ANALYZE",
                                      "AND",
                                      "ANY",
                                      "ARRAY",
                                      "AS",
                                      "ASC",
                                      "ASSERTION",
                                      "ASSIGNMENT",
                                      "ASYMMETRIC",
                                      "AT",
                                      "ATTRIBUTE",
                                      "AUTHORIZATION",
                                      "BACKWARD",
                                      "BEFORE",
                                      "BEGIN_P",
                                      "BETWEEN",
                                      "BIGINT",
                                      "BINARY",
                                      "BIT",
                                      "BOOLEAN_P",
                                      "BOTH",
                                      "BY",
                                      "CACHE",
                                      "CALLED",
                                      "CASCADE",
                                      "CASCADED",
                                      "CASE",
                                      "CAST",
                                      "CATALOG_P",
                                      "CHAIN",
                                      "CHAR_P",
                                      "CHARACTER",
                                      "CHARACTERISTICS",
                                      "CHECK",
                                      "CHECKPOINT",
                                      "CLASS",
                                      "CLOSE",
                                      "CLUSTER",
                                      "COALESCE",
                                      "COLLATE",
                                      "COLLATION",
                                      "COLUMN",
                                      "COMMENT",
                                      "COMMENTS",
                                      "COMMIT",
                                      "COMMITTED",
                                      "CONCURRENCY",
                                      "CONCURRENTLY",
                                      "CONFIGURATION",
                                      "CONNECTION",
                                      "CONSTRAINT",
                                      "CONSTRAINTS",
                                      "CONTENT_P",
                                      "CONTINUE_P",
                                      "CONVERSION_P",
                                      "COPY",
                                      "COST",
                                      "CREATE",
                                      "CROSS",
                                      "CSV",
                                      "CURRENT_P",
                                      "CURRENT_CATALOG",
                                      "CURRENT_DATE",
                                      "CURRENT_ROLE",
                                      "CURRENT_SCHEMA",
                                      "CURRENT_TIME",
                                      "CURRENT_TIMESTAMP",
                                      "CURRENT_USER",
                                      "CURSOR",
                                      "CYCLE",
                                      "DATA_P",
                                      "DATABASE",
                                      "DAY_P",
                                      "DEALLOCATE",
                                      "DEC",
                                      "DECIMAL_P",
                                      "DECLARE",
                                      "DEFAULT",
                                      "DEFAULTS",
                                      "DEFERRABLE",
                                      "DEFERRED",
                                      "DEFINER",
                                      "DELETE_P",
                                      "DELIMITER",
                                      "DELIMITERS",
                                      "DESC",
                                      "DICTIONARY",
                                      "DISABLE_P",
                                      "DISCARD",
                                      "DISTINCT",
                                      "DO",
                                      "DOCUMENT_P",
                                      "DOMAIN_P",
                                      "DOUBLE_P",
                                      "DROP",
                                      "EACH",
                                      "ELSE",
                                      "ENABLE_P",
                                      "ENCODING",
                                      "ENCRYPTED",
                                      "END_P",
                                      "ENDPOINT",
                                      "ENUM_P",
                                      "ESCAPE",
                                      "EVENT",
                                      "EXCEPT",
                                      "EXCLUDE",
                                      "EXCLUDING",
                                      "EXCLUSIVE",
                                      "EXECUTE",
                                      "EXISTS",
                                      "EXPLAIN",
                                      "EXTENSION",
                                      "EXTERNAL",
                                      "EXTRACT",
                                      "FALSE_P",
                                      "FAMILY",
                                      "FETCH",
                                      "FILTER",
                                      "FIRST_P",
                                      "FLOAT_P",
                                      "FOLLOWING",
                                      "FOR",
                                      "FORCE",
                                      "FOREIGN",
                                      "FORWARD",
                                      "FREEZE",
                                      "FROM",
                                      "FULL",
                                      "FUNCTION",
                                      "FUNCTIONS",
                                      "GLOBAL",
                                      "GRANT",
                                      "GRANTED",
                                      "GREATEST",
                                      "GROUP_P",
                                      "HANDLER",
                                      "HAVING",
                                      "HEADER_P",
                                      "HOLD",
                                      "HOUR_P",
                                      "IDENTITY_P",
                                      "IF_P",
                                      "ILIKE",
                                      "IMMEDIATE",
                                      "IMMUTABLE",
                                      "IMPLICIT_P",
                                      "IN_P",
                                      "INCLUDING",
                                      "INCREMENT",
                                      "INDEX",
                                      "INDEXES",
                                      "INHERIT",
                                      "INHERITS",
                                      "INITIALLY",
                                      "INLINE_P",
                                      "INNER_P",
                                      "INOUT",
                                      "INPUT_P",
                                      "INSENSITIVE",
                                      "INSERT",
                                      "INSTEAD",
                                      "INT_P",
                                      "INTEGER",
                                      "INTERSECT",
                                      "INTERVAL",
                                      "INTO",
                                      "INVOKER",
                                      "IS",
                                      "ISNULL",
                                      "ISOLATION",
                                      "JOIN",
                                      "KEY",
                                      "LABEL",
                                      "LANGUAGE",
                                      "LARGE_P",
                                      "LAST_P",
                                      "LATERAL_P",
                                      "LC_COLLATE_P",
                                      "LC_CTYPE_P",
                                      "LEADING",
                                      "LEAKPROOF",
                                      "LEAST",
                                      "LEFT",
                                      "LEVEL",
                                      "LIKE",
                                      "LIMIT",
                                      "LISTEN",
                                      "LOAD",
                                      "LOCAL",
                                      "LOCALTIME",
                                      "LOCALTIMESTAMP",
                                      "LOCATION",
                                      "LOCK_P",
                                      "MAPPING",
                                      "MATCH",
                                      "MATERIALIZED",
                                      "MAXVALUE",
                                      "MEMORY_LIMIT",
                                      "MEMORY_SHARED_QUOTA",
                                      "MEMORY_SPILL_RATIO",
                                      "MINUTE_P",
                                      "MINVALUE",
                                      "MODE",
                                      "MONTH_P",
                                      "MOVE",
                                      "NAME_P",
                                      "NAMES",
                                      "NATIONAL",
                                      "NATURAL",
                                      "NCHAR",
                                      "NEXT",
                                      "NO",
                                      "NONE",
                                      "NOT",
                                      "NOTHING",
                                      "NOTIFY",
                                      "NOTNULL",
                                      "NOWAIT",
                                      "NULL_P",
                                      "NULLIF",
                                      "NULLS_P",
                                      "NUMERIC",
                                      "OBJECT_P",
                                      "OF",
                                      "OFF",
                                      "OFFSET",
                                      "OIDS",
                                      "ON",
                                      "ONLY",
                                      "OPERATOR",
                                      "OPTION",
                                      "OPTIONS",
                                      "OR",
                                      "ORDER",
                                      "ORDINALITY",
                                      "OUT_P",
                                      "OUTER_P",
                                      "OVER",
                                      "OVERLAPS",
                                      "OVERLAY",
                                      "OWNED",
                                      "OWNER",
                                      "PARSER",
                                      "PARTIAL",
                                      "PARTITION",
                                      "PASSING",
                                      "PASSWORD",
                                      "PLACING",
                                      "PLANS",
                                      "POSITION",
                                      "PRECEDING",
                                      "PRECISION",
                                      "PRESERVE",
                                      "PREPARE",
                                      "PREPARED",
                                      "PRIMARY",
                                      "PRIOR",
                                      "PRIVILEGES",
                                      "PROCEDURAL",
                                      "PROCEDURE",
                                      "PROGRAM",
                                      "QUOTE",
                                      "RANGE",
                                      "READ",
                                      "REAL",
                                      "REASSIGN",
                                      "RECHECK",
                                      "RECURSIVE",
                                      "REF",
                                      "REFERENCES",
                                      "REFRESH",
                                      "REINDEX",
                                      "RELATIVE_P",
                                      "RELEASE",
                                      "RENAME",
                                      "REPEATABLE",
                                      "REPLACE",
                                      "REPLICA",
                                      "RESET",
                                      "RESTART",
                                      "RESTRICT",
                                      "RETURNING",
                                      "RETURNS",
                                      "REVOKE",
                                      "RIGHT",
                                      "ROLE",
                                      "ROLLBACK",
                                      "ROW",
                                      "ROWS",
                                      "RULE",
                                      "SAVEPOINT",
                                      "SCHEMA",
                                      "SCROLL",
                                      "SEARCH",
                                      "SECOND_P",
                                      "SECURITY",
                                      "SELECT",
                                      "SEQUENCE",
                                      "SEQUENCES",
                                      "SERIALIZABLE",
                                      "SERVER",
                                      "SESSION",
                                      "SESSION_USER",
                                      "SET",
                                      "SETOF",
                                      "SHARE",
                                      "SHOW",
                                      "SIMILAR",
                                      "SIMPLE",
                                      "SMALLINT",
                                      "SNAPSHOT",
                                      "SOME",
                                      "STABLE",
                                      "STANDALONE_P",
                                      "START",
                                      "STATEMENT",
                                      "STATISTICS",
                                      "STDIN",
                                      "STDOUT",
                                      "STORAGE",
                                      "STRICT_P",
                                      "STRIP_P",
                                      "SUBSTRING",
                                      "SYMMETRIC",
                                      "SYSID",
                                      "SYSTEM_P",
                                      "TABLE",
                                      "TABLES",
                                      "TABLESPACE",
                                      "TEMP",
                                      "TEMPLATE",
                                      "TEMPORARY",
                                      "TEXT_P",
                                      "THEN",
                                      "TIME",
                                      "TIMESTAMP",
                                      "TO",
                                      "TRAILING",
                                      "TRANSACTION",
                                      "TREAT",
                                      "TRIGGER",
                                      "TRIM",
                                      "TRUE_P",
                                      "TRUNCATE",
                                      "TRUSTED",
                                      "TYPE_P",
                                      "TYPES_P",
                                      "UNBOUNDED",
                                      "UNCOMMITTED",
                                      "UNENCRYPTED",
                                      "UNION",
                                      "UNIQUE",
                                      "UNKNOWN",
                                      "UNLISTEN",
                                      "UNLOGGED",
                                      "UNTIL",
                                      "UPDATE",
                                      "USER",
                                      "USING",
                                      "VACUUM",
                                      "VALID",
                                      "VALIDATE",
                                      "VALIDATOR",
                                      "VALUE_P",
                                      "VALUES",
                                      "VARCHAR",
                                      "VARIADIC",
                                      "VARYING",
                                      "VERBOSE",
                                      "VERSION_P",
                                      "VIEW",
                                      "VIEWS",
                                      "VOLATILE",
                                      "WHEN",
                                      "WHERE",
                                      "WHITESPACE_P",
                                      "WINDOW",
                                      "WITH",
                                      "WITHIN",
                                      "WITHOUT",
                                      "WORK",
                                      "WRAPPER",
                                      "WRITE",
                                      "XML_P",
                                      "XMLATTRIBUTES",
                                      "XMLCONCAT",
                                      "XMLELEMENT",
                                      "XMLEXISTS",
                                      "XMLFOREST",
                                      "XMLPARSE",
                                      "XMLPI",
                                      "XMLROOT",
                                      "XMLSERIALIZE",
                                      "YEAR_P",
                                      "YES_P",
                                      "ZONE",
                                      "ACTIVE",
                                      "CONTAINS",
                                      "CPUSET",
                                      "CPU_RATE_LIMIT",
                                      "CREATEEXTTABLE",
                                      "CUBE",
                                      "DECODE",
                                      "DENY",
                                      "DISTRIBUTED",
                                      "DXL",
                                      "ERRORS",
                                      "EVERY",
                                      "EXCHANGE",
                                      "EXPAND",
                                      "FIELDS",
                                      "FILL",
                                      "FORMAT",
                                      "FULLSCAN",
                                      "GROUP_ID",
                                      "GROUPING",
                                      "HASH",
                                      "HOST",
                                      "IGNORE_P",
                                      "INCLUSIVE",
                                      "INITPLAN",
                                      "LIST",
                                      "LOG_P",
                                      "MASTER",
                                      "MEDIAN",
                                      "MISSING",
                                      "MODIFIES",
                                      "NEWLINE",
                                      "NOCREATEEXTTABLE",
                                      "NOOVERCOMMIT",
                                      "ORDERED",
                                      "OTHERS",
                                      "OVERCOMMIT",
                                      "PARALLEL",
                                      "RETRIEVE",
                                      "PARTITIONS",
                                      "PERCENT",
                                      "PERSISTENTLY",
                                      "PROTOCOL",
                                      "QUEUE",
                                      "RANDOMLY",
                                      "READABLE",
                                      "READS",
                                      "REJECT_P",
                                      "REPLICATED",
                                      "RESOURCE",
                                      "ROLLUP",
                                      "ROOTPARTITION",
                                      "SCATTER",
                                      "SEGMENT",
                                      "SEGMENTS",
                                      "SETS",
                                      "SPLIT",
                                      "SQL",
                                      "SUBPARTITION",
                                      "THRESHOLD",
                                      "TIES",
                                      "VALIDATION",
                                      "WEB",
                                      "WRITABLE",
                                      "YEZZEY",
                                      "NULLS_FIRST",
                                      "NULLS_LAST",
                                      "WITH_ORDINALITY",
                                      "WITH_TIME",
                                      "'='",
                                      "'<'",
                                      "'>'",
                                      "POSTFIXOP",
                                      "'+'",
                                      "'-'",
                                      "'*'",
                                      "'/'",
                                      "'%'",
                                      "'^'",
                                      "UMINUS",
                                      "'['",
                                      "']'",
                                      "'('",
                                      "')'",
                                      "'.'",
                                      "';'",
                                      "','",
                                      "':'",
                                      "$accept",
                                      "stmtblock",
                                      "stmtmulti",
                                      "stmt",
                                      "CreateQueueStmt",
                                      "OptQueueList",
                                      "OptQueueElem",
                                      "AlterQueueStmt",
                                      "DropQueueStmt",
                                      "CreateResourceGroupStmt",
                                      "DropResourceGroupStmt",
                                      "AlterResourceGroupStmt",
                                      "OptResourceGroupList",
                                      "OptResourceGroupElem",
                                      "CreateRoleStmt",
                                      "opt_with",
                                      "OptRoleList",
                                      "AlterOptRoleList",
                                      "AlterOnlyOptRoleElem",
                                      "AlterOptRoleElem",
                                      "CreateOptRoleElem",
                                      "deny_login_role",
                                      "deny_interval",
                                      "deny_day_specifier",
                                      "deny_point",
                                      "opt_time",
                                      "exttab_auth_list",
                                      "keyvalue_list",
                                      "keyvalue_pair",
                                      "CreateUserStmt",
                                      "AlterRoleStmt",
                                      "opt_in_database",
                                      "AlterRoleSetStmt",
                                      "AlterUserStmt",
                                      "AlterUserSetStmt",
                                      "DropRoleStmt",
                                      "DropUserStmt",
                                      "CreateGroupStmt",
                                      "AlterGroupStmt",
                                      "add_drop",
                                      "DropGroupStmt",
                                      "CreateSchemaStmt",
                                      "OptSchemaName",
                                      "OptSchemaEltList",
                                      "schema_stmt",
                                      "VariableSetStmt",
                                      "set_rest",
                                      "generic_set",
                                      "set_rest_more",
                                      "var_name",
                                      "var_list",
                                      "var_value",
                                      "iso_level",
                                      "opt_boolean_or_string",
                                      "zone_value",
                                      "opt_encoding",
                                      "NonReservedWord_or_Sconst",
                                      "VariableResetStmt",
                                      "reset_rest",
                                      "generic_reset",
                                      "SetResetClause",
                                      "FunctionSetResetClause",
                                      "VariableShowStmt",
                                      "ConstraintsSetStmt",
                                      "constraints_set_list",
                                      "constraints_set_mode",
                                      "CheckPointStmt",
                                      "DiscardStmt",
                                      "AlterTableStmt",
                                      "alter_table_cmds",
                                      "alter_table_cmd",
                                      "alter_column_default",
                                      "opt_drop_behavior",
                                      "opt_collate_clause",
                                      "alter_using",
                                      "replica_identity",
                                      "reloptions",
                                      "opt_reloptions",
                                      "reloption_list",
                                      "reloption_elem",
                                      "opt_table_partition_split_into",
                                      "opt_table_partition_exchange_validate",
                                      "alter_table_partition_id_spec",
                                      "alter_table_partition_id_spec_with_opt_default",
                                      "alter_table_partition_cmd",
                                      "AlterCompositeTypeStmt",
                                      "alter_type_cmds",
                                      "alter_type_cmd",
                                      "ClosePortalStmt",
                                      "CopyStmt",
                                      "copy_from",
                                      "opt_program",
                                      "skip_external_partition",
                                      "copy_file_name",
                                      "copy_options",
                                      "copy_opt_list",
                                      "copy_opt_item",
                                      "opt_binary",
                                      "opt_oids",
                                      "copy_delimiter",
                                      "opt_using",
                                      "copy_generic_opt_list",
                                      "copy_generic_opt_elem",
                                      "copy_generic_opt_arg",
                                      "copy_generic_opt_arg_list",
                                      "copy_generic_opt_arg_list_item",
                                      "CreateStmt",
                                      "OptTemp",
                                      "OptTableElementList",
                                      "OptTypedTableElementList",
                                      "TableElementList",
                                      "TypedTableElementList",
                                      "TableElement",
                                      "TypedTableElement",
                                      "column_reference_storage_directive",
                                      "columnDef",
                                      "columnOptions",
                                      "ColQualList",
                                      "ColConstraint",
                                      "opt_storage_encoding",
                                      "ColConstraintElem",
                                      "ConstraintAttr",
                                      "TableLikeClause",
                                      "TableLikeOptionList",
                                      "TableLikeOption",
                                      "TableConstraint",
                                      "ConstraintElem",
                                      "opt_no_inherit",
                                      "opt_column_list",
                                      "columnList",
                                      "columnElem",
                                      "distributed_by_list",
                                      "distributed_by_elem",
                                      "key_match",
                                      "ExclusionConstraintList",
                                      "ExclusionConstraintElem",
                                      "ExclusionWhereClause",
                                      "key_actions",
                                      "key_update",
                                      "key_delete",
                                      "key_action",
                                      "OptInherit",
                                      "OptWith",
                                      "OnCommitOption",
                                      "OptTableSpace",
                                      "OptConsTableSpace",
                                      "ExistingIndex",
                                      "optNumsegments",
                                      "DistributedBy",
                                      "OptDistributedBy",
                                      "OptTabPartitionColumnEncList",
                                      "TabPartitionColumnEncList",
                                      "OptTabPartitionStorageAttr",
                                      "OptTabPartitionSpec",
                                      "OptTabSubPartitionSpec",
                                      "TabPartitionElemList",
                                      "TabSubPartitionElemList",
                                      "tab_part_val_no_paran",
                                      "tab_part_val",
                                      "TabPartitionBoundarySpecValList",
                                      "OptTabPartitionRangeInclusive",
                                      "TabPartitionBoundarySpecStart",
                                      "TabPartitionBoundarySpecEnd",
                                      "OptTabPartitionBoundarySpecEvery",
                                      "OptTabPartitionBoundarySpecEnd",
                                      "TabPartitionBoundarySpec",
                                      "OptTabPartitionBoundarySpec",
                                      "multi_spec_value_list",
                                      "part_values_single",
                                      "part_values_clause",
                                      "part_values_or_spec_list",
                                      "TabPartitionElem",
                                      "TabSubPartitionElem",
                                      "TabPartitionNameDecl",
                                      "TabPartitionDefaultNameDecl",
                                      "TabSubPartitionNameDecl",
                                      "TabSubPartitionDefaultNameDecl",
                                      "TabPartitionByType",
                                      "OptTabPartitionBy",
                                      "TabSubPartitionTemplate",
                                      "opt_list_subparts",
                                      "TabSubPartitionBy",
                                      "TabSubPartition",
                                      "CreateAsStmt",
                                      "create_as_target",
                                      "opt_with_data",
                                      "CreateExternalStmt",
                                      "OptWritable",
                                      "OptWeb",
                                      "ExtTypedesc",
                                      "ext_on_clause_list",
                                      "ext_on_clause_item",
                                      "format_opt",
                                      "format_opt_list",
                                      "format_def_list",
                                      "format_def_item",
                                      "format_opt_item",
                                      "ext_options_opt",
                                      "ext_options",
                                      "ext_options_list",
                                      "ext_options_item",
                                      "OptExtTableElementList",
                                      "ExtTableElementList",
                                      "ExtTableElement",
                                      "ExtcolumnDef",
                                      "OptSingleRowErrorHandling",
                                      "OptLogErrorTable",
                                      "ExtSingleRowErrorHandling",
                                      "ExtLogErrorTable",
                                      "OptSrehLimitType",
                                      "ext_opt_encoding_list",
                                      "ext_opt_encoding_item",
                                      "CreateMatViewStmt",
                                      "create_mv_target",
                                      "OptNoLog",
                                      "RefreshMatViewStmt",
                                      "CreateSeqStmt",
                                      "AlterSeqStmt",
                                      "OptSeqOptList",
                                      "SeqOptList",
                                      "SeqOptElem",
                                      "opt_by",
                                      "NumericOnly",
                                      "NumericOnly_list",
                                      "CreatePLangStmt",
                                      "opt_trusted",
                                      "handler_name",
                                      "opt_inline_handler",
                                      "validator_clause",
                                      "opt_validator",
                                      "DropPLangStmt",
                                      "opt_procedural",
                                      "CreateTableSpaceStmt",
                                      "OptTableSpaceOwner",
                                      "DropTableSpaceStmt",
                                      "CreateExtensionStmt",
                                      "create_extension_opt_list",
                                      "create_extension_opt_item",
                                      "AlterExtensionStmt",
                                      "alter_extension_opt_list",
                                      "alter_extension_opt_item",
                                      "AlterExtensionContentsStmt",
                                      "CreateFdwStmt",
                                      "fdw_option",
                                      "fdw_options",
                                      "opt_fdw_options",
                                      "DropFdwStmt",
                                      "AlterFdwStmt",
                                      "create_generic_options",
                                      "generic_option_list",
                                      "alter_generic_options",
                                      "alter_generic_option_list",
                                      "alter_generic_option_elem",
                                      "generic_option_elem",
                                      "generic_option_name",
                                      "generic_option_arg",
                                      "CreateForeignServerStmt",
                                      "opt_type",
                                      "foreign_server_version",
                                      "opt_foreign_server_version",
                                      "DropForeignServerStmt",
                                      "AlterForeignServerStmt",
                                      "CreateForeignTableStmt",
                                      "AlterForeignTableStmt",
                                      "CreateUserMappingStmt",
                                      "auth_ident",
                                      "DropUserMappingStmt",
                                      "AlterUserMappingStmt",
                                      "CreateTrigStmt",
                                      "TriggerActionTime",
                                      "TriggerEvents",
                                      "TriggerOneEvent",
                                      "TriggerForSpec",
                                      "TriggerForOptEach",
                                      "TriggerForType",
                                      "TriggerWhen",
                                      "TriggerFuncArgs",
                                      "TriggerFuncArg",
                                      "OptConstrFromTable",
                                      "ConstraintAttributeSpec",
                                      "ConstraintAttributeElem",
                                      "DropTrigStmt",
                                      "CreateEventTrigStmt",
                                      "event_trigger_when_list",
                                      "event_trigger_when_item",
                                      "event_trigger_value_list",
                                      "AlterEventTrigStmt",
                                      "enable_trigger",
                                      "CreateAssertStmt",
                                      "DropAssertStmt",
                                      "DefineStmt",
                                      "opt_ordered",
                                      "definition",
                                      "def_list",
                                      "def_elem",
                                      "def_arg",
                                      "old_aggr_definition",
                                      "old_aggr_list",
                                      "old_aggr_elem",
                                      "opt_enum_val_list",
                                      "enum_val_list",
                                      "AlterEnumStmt",
                                      "opt_if_not_exists",
                                      "CreateOpClassStmt",
                                      "opclass_item_list",
                                      "opclass_item",
                                      "opt_default",
                                      "opt_opfamily",
                                      "opclass_purpose",
                                      "opt_recheck",
                                      "CreateOpFamilyStmt",
                                      "AlterOpFamilyStmt",
                                      "opclass_drop_list",
                                      "opclass_drop",
                                      "DropOpClassStmt",
                                      "DropOpFamilyStmt",
                                      "DropOwnedStmt",
                                      "ReassignOwnedStmt",
                                      "DropStmt",
                                      "drop_type",
                                      "any_name_list",
                                      "any_name",
                                      "attrs",
                                      "TruncateStmt",
                                      "opt_restart_seqs",
                                      "CommentStmt",
                                      "comment_type",
                                      "comment_text",
                                      "SecLabelStmt",
                                      "opt_provider",
                                      "security_label_type",
                                      "security_label",
                                      "FetchStmt",
                                      "fetch_args",
                                      "from_in",
                                      "opt_from_in",
                                      "GrantStmt",
                                      "RevokeStmt",
                                      "privileges",
                                      "privilege_list",
                                      "privilege",
                                      "privilege_target",
                                      "grantee_list",
                                      "grantee",
                                      "opt_grant_grant_option",
                                      "function_with_argtypes_list",
                                      "function_with_argtypes",
                                      "GrantRoleStmt",
                                      "RevokeRoleStmt",
                                      "opt_grant_admin_option",
                                      "opt_granted_by",
                                      "AlterDefaultPrivilegesStmt",
                                      "DefACLOptionList",
                                      "DefACLOption",
                                      "DefACLAction",
                                      "defacl_privilege_target",
                                      "IndexStmt",
                                      "opt_unique",
                                      "opt_concurrently",
                                      "opt_index_name",
                                      "access_method_clause",
                                      "index_params",
                                      "index_elem",
                                      "opt_collate",
                                      "opt_class",
                                      "opt_asc_desc",
                                      "opt_nulls_order",
                                      "CreateFunctionStmt",
                                      "opt_or_replace",
                                      "func_args",
                                      "func_args_list",
                                      "func_args_with_defaults",
                                      "func_args_with_defaults_list",
                                      "func_arg",
                                      "arg_class",
                                      "param_name",
                                      "func_return",
                                      "func_type",
                                      "func_arg_with_default",
                                      "aggr_arg",
                                      "aggr_args",
                                      "aggr_args_list",
                                      "createfunc_opt_list",
                                      "common_func_opt_item",
                                      "createfunc_opt_item",
                                      "func_as",
                                      "opt_definition",
                                      "table_func_column",
                                      "table_func_column_list",
                                      "AlterFunctionStmt",
                                      "alterfunc_opt_list",
                                      "opt_restrict",
                                      "RemoveFuncStmt",
                                      "RemoveAggrStmt",
                                      "RemoveOperStmt",
                                      "oper_argtypes",
                                      "any_operator",
                                      "DoStmt",
                                      "dostmt_opt_list",
                                      "dostmt_opt_item",
                                      "CreateCastStmt",
                                      "cast_context",
                                      "DropCastStmt",
                                      "opt_if_exists",
                                      "ReindexStmt",
                                      "reindex_type",
                                      "opt_force",
                                      "AlterTypeStmt",
                                      "AlterTblSpcStmt",
                                      "RenameStmt",
                                      "opt_column",
                                      "opt_set_data",
                                      "AlterObjectSchemaStmt",
                                      "AlterOwnerStmt",
                                      "RuleStmt",
                                      "RuleActionList",
                                      "RuleActionMulti",
                                      "RuleActionStmt",
                                      "RuleActionStmtOrEmpty",
                                      "event",
                                      "opt_instead",
                                      "DropRuleStmt",
                                      "NotifyStmt",
                                      "notify_payload",
                                      "ListenStmt",
                                      "UnlistenStmt",
                                      "TransactionStmt",
                                      "opt_transaction",
                                      "transaction_mode_item",
                                      "transaction_mode_list",
                                      "transaction_mode_list_or_empty",
                                      "ViewStmt",
                                      "opt_check_option",
                                      "LoadStmt",
                                      "CreatedbStmt",
                                      "createdb_opt_list",
                                      "createdb_opt_item",
                                      "opt_equal",
                                      "AlterDatabaseStmt",
                                      "AlterDatabaseSetStmt",
                                      "alterdb_opt_list",
                                      "alterdb_opt_item",
                                      "DropdbStmt",
                                      "AlterSystemStmt",
                                      "CreateDomainStmt",
                                      "AlterDomainStmt",
                                      "opt_as",
                                      "AlterTSDictionaryStmt",
                                      "AlterTSConfigurationStmt",
                                      "CreateConversionStmt",
                                      "ClusterStmt",
                                      "cluster_index_specification",
                                      "VacuumStmt",
                                      "vacuum_option_list",
                                      "vacuum_option_elem",
                                      "AnalyzeStmt",
                                      "analyze_keyword",
                                      "opt_verbose",
                                      "opt_rootonly_all",
                                      "opt_full",
                                      "opt_freeze",
                                      "opt_name_list",
                                      "ExplainStmt",
                                      "ExplainableStmt",
                                      "opt_dxl",
                                      "explain_option_list",
                                      "explain_option_elem",
                                      "explain_option_name",
                                      "explain_option_arg",
                                      "PrepareStmt",
                                      "prep_type_clause",
                                      "PreparableStmt",
                                      "ExecuteStmt",
                                      "execute_param_clause",
                                      "DeallocateStmt",
                                      "cdb_string_list",
                                      "cdb_string",
                                      "InsertStmt",
                                      "insert_rest",
                                      "insert_column_list",
                                      "insert_column_item",
                                      "returning_clause",
                                      "DeleteStmt",
                                      "using_clause",
                                      "LockStmt",
                                      "opt_lock",
                                      "lock_type",
                                      "opt_nowait",
                                      "opt_masteronly",
                                      "UpdateStmt",
                                      "set_clause_list",
                                      "set_clause",
                                      "single_set_clause",
                                      "multiple_set_clause",
                                      "set_target",
                                      "set_target_list",
                                      "DeclareCursorStmt",
                                      "cursor_name",
                                      "cursor_options",
                                      "opt_hold",
                                      "SelectStmt",
                                      "RetrieveStmt",
                                      "select_with_parens",
                                      "select_no_parens",
                                      "select_clause",
                                      "simple_select",
                                      "with_clause",
                                      "cte_list",
                                      "common_table_expr",
                                      "opt_with_clause",
                                      "into_clause",
                                      "OptTempTableName",
                                      "opt_table",
                                      "opt_all",
                                      "opt_distinct",
                                      "opt_sort_clause",
                                      "sort_clause",
                                      "sortby_list",
                                      "sortby",
                                      "select_limit",
                                      "opt_select_limit",
                                      "limit_clause",
                                      "offset_clause",
                                      "select_limit_value",
                                      "select_offset_value",
                                      "select_fetch_first_value",
                                      "I_or_F_const",
                                      "row_or_rows",
                                      "first_or_next",
                                      "group_clause",
                                      "group_elem_list",
                                      "group_elem",
                                      "having_clause",
                                      "for_locking_clause",
                                      "opt_for_locking_clause",
                                      "for_locking_items",
                                      "for_locking_item",
                                      "for_locking_strength",
                                      "locked_rels_list",
                                      "values_clause",
                                      "from_clause",
                                      "from_list",
                                      "table_ref",
                                      "joined_table",
                                      "alias_clause",
                                      "opt_alias_clause",
                                      "func_alias_clause",
                                      "join_type",
                                      "join_outer",
                                      "join_qual",
                                      "relation_expr",
                                      "relation_expr_list",
                                      "relation_expr_opt_alias",
                                      "func_table",
                                      "rowsfrom_item",
                                      "rowsfrom_list",
                                      "opt_col_def_list",
                                      "opt_ordinality",
                                      "where_clause",
                                      "where_or_current_clause",
                                      "OptTableFuncElementList",
                                      "TableFuncElementList",
                                      "TableFuncElement",
                                      "Typename",
                                      "opt_array_bounds",
                                      "SimpleTypename",
                                      "ConstTypename",
                                      "GenericType",
                                      "opt_type_modifiers",
                                      "Numeric",
                                      "opt_float",
                                      "Bit",
                                      "ConstBit",
                                      "BitWithLength",
                                      "BitWithoutLength",
                                      "Character",
                                      "ConstCharacter",
                                      "CharacterWithLength",
                                      "CharacterWithoutLength",
                                      "character",
                                      "opt_varying",
                                      "opt_charset",
                                      "ConstDatetime",
                                      "ConstInterval",
                                      "opt_timezone",
                                      "opt_interval",
                                      "interval_second",
                                      "a_expr",
                                      "b_expr",
                                      "c_expr",
                                      "scatter_clause",
                                      "table_value_select_clause",
                                      "func_application",
                                      "func_expr",
                                      "func_expr_windowless",
                                      "func_expr_common_subexpr",
                                      "xml_root_version",
                                      "opt_xml_root_standalone",
                                      "xml_attributes",
                                      "xml_attribute_list",
                                      "xml_attribute_el",
                                      "document_or_content",
                                      "xml_whitespace_option",
                                      "xmlexists_argument",
                                      "within_group_clause",
                                      "filter_clause",
                                      "window_clause",
                                      "window_definition_list",
                                      "window_definition",
                                      "over_clause",
                                      "window_specification",
                                      "opt_existing_window_name",
                                      "opt_partition_clause",
                                      "opt_frame_clause",
                                      "frame_extent",
                                      "frame_bound",
                                      "window_frame_exclusion",
                                      "row",
                                      "sub_type",
                                      "all_Op",
                                      "MathOp",
                                      "qual_Op",
                                      "qual_all_Op",
                                      "subquery_Op",
                                      "expr_list",
                                      "func_arg_list",
                                      "func_arg_expr",
                                      "type_list",
                                      "array_expr",
                                      "array_expr_list",
                                      "extract_list",
                                      "extract_arg",
                                      "overlay_list",
                                      "overlay_placing",
                                      "position_list",
                                      "substr_list",
                                      "substr_from",
                                      "substr_for",
                                      "trim_list",
                                      "in_expr",
                                      "case_expr",
                                      "when_clause_list",
                                      "when_clause",
                                      "when_operand",
                                      "case_default",
                                      "case_arg",
                                      "decode_expr",
                                      "search_result_list",
                                      "search_result",
                                      "decode_default",
                                      "columnref",
                                      "indirection_el",
                                      "indirection",
                                      "opt_indirection",
                                      "opt_asymmetric",
                                      "ctext_expr",
                                      "ctext_expr_list",
                                      "ctext_row",
                                      "opt_target_list",
                                      "target_list",
                                      "target_el",
                                      "qualified_name_list",
                                      "qualified_name",
                                      "name_list",
                                      "name",
                                      "database_name",
                                      "access_method",
                                      "attr_name",
                                      "index_name",
                                      "file_name",
                                      "func_name",
                                      "AexprConst",
                                      "Iconst",
                                      "Sconst",
                                      "RoleId",
                                      "QueueId",
                                      "role_list",
                                      "SignedIconst",
                                      "ColId",
                                      "type_function_name",
                                      "NonReservedWord",
                                      "ColLabel",
                                      "unreserved_keyword",
                                      "ColLabelNoAs",
                                      "keywords_ok_in_alias_no_as",
                                      "PartitionColId",
                                      "PartitionIdentKeyword",
                                      "col_name_keyword",
                                      "type_func_name_keyword",
                                      "reserved_keyword",
                                      YY_NULLPTR};

static const char* yysymbol_name(yysymbol_kind_t yysymbol) { return yytname[yysymbol]; }
#endif

#define YYPACT_NINF (-4823)

#define yypact_value_is_default(Yyn) ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-3012)

#define yytable_value_is_error(Yyn) ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] = {
    5755,   85,     13474,  -4823,  -4823,  85,     -4823,  72455, 78,     769,    1113,   283,    12938,  72941,
    83147,  1024,   371,    13644,  85,     83147,  1758,   55931, 69053,  83147,  1086,   760,    55931,  83147,
    83633,  1098,   1199,   1221,   84119,  73427,  68081,  1458,  83147,  1297,   961,    84605,  73913,  1286,
    74399,  760,    51557,  88,     1065,   85091,  344,    1505,  1777,   1300,   -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  78,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  2512,   -4823,  1388,
    2562,   76,     294,    1402,   -4823,  -4823,  -4823,  62735, 83147,  83147,  83147,  1714,   83147,  1656,
    83147,  1698,   222,    62735,  63221,  74885,  1787,   1696,  47082,  -4823,  60305,  83147,  83147,  85577,
    83147,  1204,   70511,  83147,  1754,   83147,  83147,  60791, 86063,  83147,  152,    1908,   1726,   -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  83147,  13970,  1086,
    -4823,  -4823,  83147,  1798,   83147,  1702,   83147,  1857,  83147,  -4823,  83147,  1871,   86549,  538,
    127,    63221,  1826,   47582,  1942,   63221,  87035,  83147, 83147,  -4823,  -4823,  1946,   83147,  83147,
    -4823,  2040,   63707,  -4823,  -4823,  161,    -4823,  1743,  2164,   2065,   2325,   2290,   2203,   968,
    -4823,  75371,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  61277,  371,    -4823,  -4823,
    64193,  83147,  2229,   -4823,  -4823,  87521,  -4823,  2037,  -4823,  622,    771,    64679,  65165,  2344,
    2028,   48082,  2418,   65651,  88007,  -4823,  -4823,  88493, -4823,  88979,  2156,   89465,  -4823,  66137,
    -4823,  -4823,  178,    2288,   89951,  -4823,  1990,   1877,  2068,   42638,  -4823,  -4823,  -4823,  -4823,
    78,     -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  358,    1991,   225,    209,    356,
    -4823,  -4823,  217,    218,    221,    358,    2501,   2501,  -4823,  83147,  -4823,  -4823,  1991,   53,
    2010,   2010,   2010,   2286,   564,    -4823,  2010,   -4823, -4823,  -4823,  -4823,  74399,  -4823,  2054,
    1086,   2064,   2526,   2181,   83147,  -4823,  83147,  -4823, 83147,  83147,  -4823,  -4823,  2537,   2170,
    2409,   2084,   -4823,  -4823,  -4823,  2341,   2342,   2358,  123,    1086,   2255,   -4823,  2474,   -4823,
    2383,   27642,  1086,   75857,  90437,  250,    61277,  1086,  76343,  2220,   1647,   2400,   -4823,  -4823,
    -4823,  150,    -4823,  2631,   2247,   2498,   2084,   1726,  44610,  -4823,  2208,   1252,   74399,  -4823,
    -4823,  -4823,  942,    2549,   28146,  -4823,  83147,  2230,  -4823,  2207,   2565,   2600,   2251,   2252,
    76,     -4823,  5755,   90923,  1326,   1326,   2716,   1326,  1447,   1830,   -4823,  2694,   -4823,  2614,
    2604,   74399,  1065,   241,    -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  2311,   1252,
    -4823,  246,    -4823,  1809,   2310,   2043,   1855,   -4823, -4823,  999,    83147,  2517,   253,    1026,
    74399,  2440,   76829,  3369,   2348,   -4823,  867,    -4823, -4823,  -4823,  -4823,  2684,   2726,   3157,
    313,    77315,  -4823,  83147,  83147,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    2365,   -4823,  -4823,  2356,   2702,   1645,   2632,   1640,  2763,   11077,  1978,   77801,  83147,  2729,
    2771,   6497,   1922,   857,    2665,   1308,   2702,   2772,  1900,   2787,   7130,   2627,   2667,   83147,
    63221,  83147,  -4823,  2738,   2851,   113,    -4823,  913,   -4823,  2576,   2703,   690,    62735,  2463,
    -4823,  -4823,  83147,  -4823,  -4823,  -4823,  2608,   -4823, 817,    62735,  -4823,  2731,   2587,   48582,
    -4823,  83147,  -4823,  -4823,  -4823,  -4823,  -4823,  2689,  83147,  -4823,  -4823,  390,    2790,   83147,
    -4823,  2010,   2725,   2959,   101089, 103,    83147,  2622,  2997,   83147,  2799,   2622,   2635,   91409,
    -4823,  -4823,  2622,   -4823,  -4823,  83147,  83147,  2540,  1248,   2622,   2811,   3015,   3020,   2695,
    2793,   1165,   1380,   236,    2918,   2622,   83147,  63221, 2682,   83147,  91895,  83147,  2589,   2683,
    62735,  83147,  3021,   62735,  83147,  -4823,  84,     -4823, -4823,  949,    -4823,  -4823,  -4823,  -4823,
    2964,   2311,   868,    2986,   2590,   2991,   -4823,  -4823, -4823,  2780,   2732,   -4823,  3008,   2348,
    3009,   -4823,  2646,   92381,  -4823,  92867,  93353,  3034,  2365,   63221,  3035,   2646,   3046,   2903,
    3061,   868,    3063,   -4823,  1385,   3066,   2950,   3069,  2052,   2646,   83147,  63221,  61763,  3071,
    339,    -4823,  31170,  -4823,  2855,   -4823,  2067,   1065,  -4823,  1774,   -4823,  55445,  -4823,  2068,
    1991,   -4823,  83147,  1991,   83147,  1991,   83147,  1991,  83147,  1991,   83147,  83147,  83147,  1991,
    -4823,  -4823,  -4823,  83147,  2708,   83147,  83147,  -4823, -4823,  -4823,  69539,  63221,  70025,  -4823,
    -4823,  112,    1086,   -4823,  -4823,  101089, 3184,   63221, 3021,   3068,   3068,   3068,   -4823,  -4823,
    -4823,  3005,   83147,  3070,   3073,   69539,  63221,  -4823, 93839,  61277,  2969,   2717,   -4823,  -4823,
    -4823,  -4823,  -4823,  1816,   3221,   264,    3222,   31170, 2722,   230,    230,    2727,   3083,   -4823,
    -4823,  -4823,  267,    2728,   2733,   -4823,  274,    274,   2956,   2736,   2740,   -4823,  276,    2742,
    3239,   3244,   277,    2744,   2745,   2746,   2029,   230,   31170,  -4823,  2747,   274,    2748,   2750,
    2751,   3253,   2753,   -4823,  3255,   2755,   2757,   384,   415,    2759,   2761,   -4823,  2736,   -4823,
    271,    2764,   2767,   2768,   2773,   2776,   2777,   2778,  2779,   2783,   2785,   2788,   2789,   31170,
    31170,  -4823,  26634,  1252,   1086,   -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  162,    -4823,
    284,    50582,  -4823,  2863,   -4823,  -4823,  3011,   31170, -4823,  -4823,  -4823,  3093,   2786,   -4823,
    297,    -4823,  -4823,  -4823,  1252,   -4823,  -4823,  1426,  2796,   -4823,  433,    -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  58847,  3266,   -4823,  342,    1086,  913,    376,    3211,   54473,  54959,  -4823,
    -4823,  3092,   -4823,  83147,  -4823,  -4823,  31170,  51071, -4823,  1252,   173,    -4823,  -4823,  -4823,
    -4823,  1806,   -4823,  -4823,  -4823,  78,     -4823,  11972, -4823,  1902,   2230,   83147,  83147,  3276,
    3185,   3191,   -4823,  -4823,  -4823,  83147,  78287,  -4823, 2207,   -4823,  -4823,  76,     76,     31170,
    76,     829,    1520,   28650,  31674,  3172,   3072,   292,   1437,   3174,   -4823,  3075,   1447,   1830,
    74399,  83147,  94325,  2993,   -4823,  53015,  2121,   1252,  2963,   2965,   3012,   56903,  2820,   2966,
    2970,   3013,   2971,   2974,   94811,  -4823,  -4823,  -4823, -4823,  1288,   273,    880,    2975,   215,
    244,    3263,   -4823,  1744,   3022,   -4823,  -4823,  -4823, 3856,   9169,   83147,  3205,   9322,   3096,
    313,    3097,   3024,   -4823,  -4823,  2867,   3151,   2998,  3000,   3115,   313,    1330,   95297,  -4823,
    -4823,  -4823,  2884,   2885,   2887,   -4823,  -4823,  -4823, 10139,  24656,  -4823,  3006,   2984,   3018,
    83147,  66623,  1588,   3116,   1609,   1733,   266,    83147, 3196,   3125,   83147,  2871,   3014,   216,
    3212,   2875,   1684,   1205,   3305,   1205,   154,    1209,  2873,   -4823,  -4823,  -4823,  -4823,  468,
    2027,   3117,   -4823,  3210,   3250,   10506,  3002,   3004,  100137, 1543,   49082,  3294,   1683,   3029,
    -4823,  1683,   83147,  3030,   3033,   83147,  313,    -4823, 3352,   313,    313,    1769,   3355,   775,
    418,    1976,   2622,   2873,   2968,   -4823,  3040,   3041,  338,    -4823,  3147,   -4823,  -4823,  1462,
    3051,   74399,  1079,   2204,   2873,   3045,   3047,   2875,  2875,   83147,  83147,  83147,  83147,  83147,
    226,    3375,   3378,   3053,   238,    245,    2908,   -4823, 1683,   59333,  3056,   -4823,  1683,   83147,
    816,    2209,   2873,   3057,   3064,   3094,   -4823,  -4823, 1728,   1811,   -4823,  -4823,  -4823,  1726,
    -4823,  83147,  -4823,  83147,  2311,   101089, 3175,   -4823, 3023,   -4823,  2348,   313,    -4823,  83147,
    83147,  2365,   801,    1416,   3176,   -4823,  -4823,  83147, 3232,   3028,   -4823,  304,    2923,   -4823,
    -4823,  3042,   -4823,  3042,   3042,   2929,   2929,   2935,  -4823,  -4823,  -4823,  2029,   3042,   2929,
    -4823,  102041, -4823,  1375,   1428,   -4823,  3411,   3413,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  891,    1880,   -4823,  83147,  56903, -4823,  3424,   -4823,  -4823,  101089, 3190,
    3309,   -4823,  83147,  3206,   2942,   -4823,  3346,   3065,  -4823,  -4823,  117,    -4823,  3317,   63221,
    363,    1086,   3059,   83147,  3238,   83147,  83147,  83147, 83147,  -4823,  -4823,  3209,   808,    133,
    -4823,  59333,  -4823,  3060,   -4823,  83147,  2968,   3220,  3433,   83,     2010,   -4823,  2011,   83147,
    2960,   3319,   -4823,  83147,  2972,   3438,   83147,  3269,  -4823,  2095,   -4823,  3152,   -4823,  3017,
    62735,  868,    -4823,  -4823,  -4823,  -4823,  101089, 83147, -4823,  95783,  62735,  868,    63221,  63221,
    3334,   339,    3339,   3095,   3343,   3098,   49082,  868,   367,    63221,  83147,  83147,  83147,  -4823,
    83147,  -4823,  -4823,  -4823,  -4823,  83147,  83147,  63221, 59333,  3345,   -4823,  -4823,  3348,   868,
    83147,  83147,  -4823,  11972,  1918,   -4823,  2067,   59819, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  2067,   83147,  -4823,  83147,  -4823,  83147,  -4823, 83147,  -4823,  83147,  -4823,  -4823,  -4823,
    83147,  -4823,  83147,  1960,   -4823,  -4823,  2004,   1150,  83147,  83147,  917,    62735,  83147,  3233,
    83147,  83147,  83147,  83147,  83147,  83147,  3123,   2796,  16,     -4823,  369,    74399,  3245,   -4823,
    -4823,  2019,   1505,   963,    83147,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  70025,  69053,  3335,
    164,    83147,  -4823,  -4823,  5298,   31170,  1252,   27138, -4823,  -4823,  -4823,  2988,   11972,  3091,
    31170,  -4823,  -4823,  31170,  2989,   2501,   2501,   31170, -4823,  -4823,  -4823,  -4823,  1845,   2501,
    -4823,  31170,  31170,  2501,   2501,   3042,   3042,   -4823, 4537,   31170,  -4823,  49082,  31170,  35202,
    23666,  31170,  1505,   3135,   3076,   2501,   -4823,  2501,  -4823,  31170,  26130,  -4823,  31170,  3265,
    31170,  31170,  376,    3267,   31170,  376,    31170,  2994,  31170,  31170,  3491,   3491,   44117,  2126,
    6638,   2996,   1252,   -4823,  3173,   2501,   -4823,  2501,  1548,   -4823,  279,    101089, -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, 31170,  56903,  -4823,  -4823,  3145,   -4823,
    -4823,  -4823,  -4823,  248,    -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  83147,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  31170,  -4823, -4823,  -4823,  3007,   -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  2401,   -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  31170, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    1184,   -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  3016,   -4823,  -4823,
    31170,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  3144,   -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  31170,
    31170,  31170,  31170,  31170,  31170,  31170,  31170,  31170, -4823,  37688,  495,    -4823,  -4823,  -4823,
    3349,   3365,   37,     2056,   78773,  3360,   27642,  22656, -4823,  255,    -4823,  -4823,  -4823,  83147,
    3266,   -4823,  -4823,  3154,   -4823,  -4823,  -4823,  -4823, -4823,  298,    -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  3025,   -4823,  -4823,  -4823,  -4823, 3025,   -4823,  3010,   2638,   -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, 3350,   3353,   868,    83147,  942,    70997,
    3145,   3016,   -4823,  28146,  -4823,  2025,   -4823,  3019,  83147,  83147,  2207,   -4823,  2207,   -4823,
    3332,   -4823,  3032,   -4823,  10056,  3332,   -4823,  -4823, 35700,  3197,   3325,   3275,   -4823,  -4823,
    -4823,  3037,   11972,  32178,  32178,  -4823,  2014,   11972, 2116,   -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  1455,   -4823,  83147,  3245,   3172,   1437,   3146,  837,    83147,  -4823,  45103,  3271,   -4823,
    3492,   -4823,  102041, -4823,  3036,   -4823,  101565, 99185, -4823,  -4823,  784,    -4823,  767,    3180,
    3181,   3230,   63221,  83147,  83147,  -4823,  56903,  63221, 83147,  83147,  63221,  83147,  83147,  -4823,
    3463,   1542,   69053,  3234,   68567,  -4823,  -4823,  3048,  83147,  3165,   3356,   3359,   556,    -4823,
    -4823,  96269,  -4823,  3306,   63221,  83147,  83147,  31170, 3313,   83147,  83147,  -4823,  388,    3200,
    3202,   -4823,  83147,  3203,   62735,  3054,   83147,  83147, 83147,  3193,   847,    62735,  3170,   49582,
    83147,  83147,  83147,  83147,  3248,   83147,  83147,  3370,  1205,   2873,   1494,   74399,  1081,   2395,
    2873,   3326,   -4823,  436,    1657,   -4823,  -4823,  63221, 83147,  3318,   -4823,  -4823,  -4823,  79259,
    3536,   3237,   -4823,  -4823,  3479,   3481,   -4823,  96755, -4823,  -4823,  -4823,  2030,   -4823,  63221,
    63221,  83147,  11151,  83147,  3308,   102993, -4823,  -4823, 101089, -4823,  83147,  3310,   103465, 9169,
    83147,  83147,  83147,  71483,  97241,  3311,   103937, 868,   97727,  1677,   1679,   83147,  71969,  -4823,
    83147,  -4823,  -4823,  57389,  63221,  83147,  3217,   305,   56903,  -4823,  83147,  659,    1257,   189,
    3226,   -4823,  -4823,  868,    83147,  3182,   3307,   -4823, 3314,   3553,   9169,   -4823,  -4823,  3227,
    3236,   83147,  1274,   2527,   2873,   83147,  83147,  3080,  2035,   3231,   3277,   -4823,  83147,  90437,
    -4823,  63221,  2066,   -4823,  3296,   63221,  83147,  12429, -4823,  -4823,  313,    -4823,  -4823,  -4823,
    -4823,  -4823,  83147,  83147,  313,    83147,  313,    1525,  -4823,  63221,  83147,  -4823,  -4823,  -4823,
    83147,  11979,  83147,  83147,  83147,  83147,  63221,  83147, -4823,  -4823,  1895,   835,    1753,   1775,
    3297,   83147,  3431,   83147,  98213,  63221,  83147,  83147, 3476,   83147,  1812,   -4823,  -4823,  -4823,
    3274,   -4823,  63221,  2066,   -4823,  12270,  83147,  83147, 83147,  63221,  838,    1345,   3241,   3242,
    240,    3312,   -4823,  -4823,  -4823,  -4823,  -4823,  -4823, 3412,   3578,   83147,  -4823,  3418,   3420,
    3240,   3243,   3421,   972,    83147,  -4823,  -4823,  -4823, -4823,  83147,  3422,   972,    3364,   833,
    -4823,  -4823,  2622,   -4823,  31170,  3590,   101089, 3118,  3119,   3260,   3264,   3278,   -4823,  3121,
    3279,   2501,   -4823,  -4823,  2210,   -4823,  -4823,  2039,  -4823,  3137,   808,    2458,   -4823,  56903,
    83147,  936,    892,    3498,   67109,  1767,   3495,   83147, 3254,   83147,  1767,   83147,  -4823,  2473,
    69053,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  3489,   -4823,  1086,   2540,
    2540,   2540,   2540,   -4823,  -4823,  -4823,  -4823,  3390,  1853,   -4823,  3148,   2540,   83147,  3323,
    1767,   2540,   899,    3150,   -4823,  2968,   3516,   201,   83147,  67109,  2120,   3252,   3304,   3628,
    2010,   53501,  -4823,  2540,   1086,   3405,   -4823,  25132, 5546,   3407,   2540,   61277,  3497,   3499,
    3515,   -4823,  -4823,  2311,   -4823,  3636,   -4823,  3531,  868,    2348,   -4823,  2646,   -4823,  83147,
    -4823,  83147,  83147,  83147,  83147,  2365,   -4823,  -4823, 2646,   3415,   868,    868,    -4823,  3417,
    868,    2646,   3354,   3524,   61277,  -4823,  339,    -4823, -4823,  31170,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  2097,   -4823,  83147, -4823,  3500,   3503,   3504,   3171,   3177,
    3282,   83147,  3183,   -4823,  3171,   313,    3171,   2796,  2796,   3171,   3177,   3171,   62249,  3665,
    3526,   943,    -4823,  1173,   137,    3464,   -4823,  -4823, 3247,   -4823,  101089, -4823,  -4823,  -4823,
    -4823,  -4823,  83147,  3290,   157,    3441,   3189,   62249, 3654,   868,    -4823,  62735,  -4823,  -4823,
    -4823,  3336,   3357,   62735,  3453,   3315,   -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  3505,
    83147,  2098,   -4823,  -4823,  1694,   -4823,  1831,   31170, 32682,  203,    -4823,  10659,  2108,   31170,
    3207,   3208,   2115,   -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  3213,   3556,   -4823,  3214,
    2125,   2130,   3216,   3218,   -4823,  -4823,  2087,   3219,  10732,  3223,   35202,  35202,  955,    -4823,
    -4823,  35202,  3224,   -4823,  2155,   10158,  3225,   3229,  3251,   3246,   3284,   -4823,  3249,   3256,
    10943,  29154,  31170,  29154,  29154,  11157,  3225,   3258,  2169,   56903,  5917,   3439,   11654,  2171,
    -4823,  31170,  56903,  6039,   31170,  6190,   -4823,  2177,  6685,   -4823,  31170,  83147,  3259,   3268,
    -4823,  -4823,  4537,   -4823,  3293,   -4823,  35202,  35202, -4823,  3603,   26634,  -4823,  -4823,  3564,
    -4823,  -4823,  1954,   -4823,  3228,   -4823,  -4823,  3772,  456,    31170,  3007,   31170,  3368,   49082,
    7461,   31170,  2609,   4152,   4152,   434,    434,    328,   328,    328,    437,    2056,   -4823,  -4823,
    -4823,  3261,   3270,   3272,   3454,   2753,   31170,  -4823, 2174,   2326,   83147,  4675,   5142,   5871,
    -4823,  -4823,  39178,  3322,   -4823,  31170,  31170,  31170, 3283,   -4823,  3715,   11972,  704,    -4823,
    3716,   -4823,  1726,   2501,   1548,   55445,  -4823,  -4823, 31170,  -4823,  -4823,  -4823,  2207,   -4823,
    -4823,  -4823,  -4823,  -4823,  83147,  1505,   -4823,  -4823, -4823,  -4823,  31170,  -4823,  -4823,  1176,
    1958,   662,    3482,   2333,   2333,   2014,   3483,   -4823, -4823,  3361,   -4823,  31170,  2140,   -4823,
    2236,   -4823,  -4823,  -4823,  -4823,  2796,   -4823,  -4823, -4823,  39178,  3338,   3351,   43624,  3440,
    -4823,  -4823,  83147,  167,    -4823,  -4823,  -4823,  3257,  -4823,  -4823,  99185,  1880,   -4823,  101565,
    -4823,  101565, -4823,  1880,   3703,   -4823,  99185,  1688,  63221,  83147,  83147,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  3539,  -4823,  63221,  63221,  3502,   83147,  3496,
    3507,   31170,  308,    83147,  3273,   3285,   976,    3581,  83147,  -4823,  3633,   868,    -4823,  -4823,
    3408,   -4823,  11972,  -4823,  -4823,  -4823,  -4823,  -4823, 63221,  83147,  -4823,  61277,  -4823,  2311,
    101089, -4823,  -4823,  -4823,  83147,  3362,   83147,  -4823, 83147,  83147,  83147,  2365,   -4823,  -4823,
    -4823,  -4823,  1425,   -4823,  -4823,  83147,  83147,  810,   3428,   3429,   83147,  -4823,  172,    3147,
    12691,  83147,  83147,  83147,  3597,   3324,   -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  3538,
    -4823,  -4823,  -4823,  -4823,  99185,  -4823,  2646,   1156,  1030,   2873,   -4823,  103465, -4823,  3289,
    3291,   -4823,  3295,   3298,   854,    3658,   3371,   -4823, 94,     -4823,  -4823,  -4823,  3537,   -4823,
    105353, -4823,  -4823,  1373,   -4823,  -4823,  -4823,  -4823, -4823,  3663,   868,    104409, 3666,   -4823,
    3668,   868,    83147,  83147,  83147,  83147,  -4823,  -4823, -4823,  -4823,  -4823,  56903,  56903,  56903,
    2190,   -4823,  -4823,  1086,   -4823,  -4823,  -4823,  3804,  -4823,  -4823,  -4823,  3632,   -4823,  2202,
    -4823,  -18,    -4823,  -4823,  3379,   -4823,  -4823,  3316,  -4823,  3340,   -4823,  3320,   -4823,  -4823,
    3456,   -4823,  104881, 3321,   -4823,  63221,  83147,  12950, 83147,  83147,  83147,  2148,   -4823,  1034,
    101089, -4823,  100613, 63221,  83147,  -4823,  -4823,  -4823, 3599,   3382,   3542,   -4823,  1008,   3543,
    63221,  3436,   3329,   407,    3329,   399,    -4823,  -4823, -4823,  3460,   -4823,  -4823,  1139,   2687,
    2873,   2968,   -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  1540,   1281,   2805,   2873,
    3461,   -4823,  3467,   -4823,  -4823,  -4823,  3607,   3611,  3615,   3473,   3477,   3521,   3485,   3488,
    3534,   -4823,  3490,   3540,   3493,   3544,   3501,   868,   101089, 3614,   1086,   3525,   3727,   868,
    -4823,  3506,   -4823,  2540,   -4823,  3829,   -4823,  83147, -4823,  1143,   2806,   2873,   -4823,  -4823,
    -4823,  -4823,  358,    358,    358,    358,    1086,   358,   -4823,  -4823,  3386,   2540,   2540,   3388,
    3391,   -4823,  -4823,  -4823,  63221,  83147,  -4823,  -4823, -4823,  972,    101089, 3680,   972,    972,
    83147,  83147,  972,    -4823,  -4823,  -4823,  3681,   3683,  972,    -4823,  -4823,  -4823,  -4823,  2725,
    3374,   6947,   3377,   3119,   3380,   2501,   210,    214,   1530,   3560,   2501,   3653,   3384,   -4823,
    -4823,  56903,  46582,  2112,   3676,   3400,   3400,   3400,  3400,   3400,   3400,   3400,   -4823,  2979,
    794,    2622,   61277,  83147,  61277,  -4823,  892,    3537,  83147,  83147,  3826,   83147,  3389,   3385,
    -4823,  -4823,  -4823,  -4823,  -4823,  63221,  748,    63221, 2501,   -4823,  -4823,  3527,   -4823,  83147,
    2010,   3859,   3020,   363,    3594,   1822,   3802,   3252,  -4823,  -4823,  -4823,  -4823,  83147,  83147,
    808,    1086,   -4823,  3394,   3393,   -4823,  83147,  -4823, 2540,   83147,  83147,  83147,  3290,   3398,
    3399,   101089, 738,    3651,   3652,   2875,   3877,   83147, 1505,   3252,   3419,   2213,   -4823,  -4823,
    3549,   83147,  -4823,  2221,   136,    -4823,  1086,   61277, 99661,  -4823,  7586,   -4823,  -4823,  849,
    -4823,  3753,   -4823,  -4823,  1505,   868,    101089, 83147, -4823,  868,    339,    3532,   868,    3533,
    868,    868,    83147,  -4823,  -4823,  83147,  -4823,  83147, 59333,  868,    -4823,  11972,  -4823,  -4823,
    3598,   3601,   3602,   83147,  3171,   62735,  -4823,  3414,  63221,  29,     -4823,  -4823,  3664,   -4823,
    -4823,  -4823,  -4823,  -4823,  3791,   3792,   -4823,  3672,  -4823,  -4823,  -4823,  290,    -4823,  63221,
    69539,  368,    63221,  -4823,  2311,   -4823,  -4823,  2348,  313,    -4823,  83147,  3734,   -4823,  -4823,
    -4823,  3426,   2227,   3690,   11972,  3571,   31170,  -4823, 3806,   101089, -4823,  7035,   -4823,  -4823,
    -4823,  -4823,  31170,  -4823,  -4823,  -4823,  -4823,  -4823, 31170,  -4823,  31170,  3781,   -4823,  3925,
    3925,   101089, 35202,  1431,   2748,   35202,  35202,  35202, 35202,  35202,  35202,  35202,  35202,  35202,
    38192,  643,    -4823,  -4823,  31170,  31170,  3790,   3781,  -4823,  202,    -4823,  -4823,  -4823,  3,
    3,      101089, 3434,   3225,   3437,   3442,   31170,  -4823, -4823,  2238,   31170,  36702,  3448,   56903,
    -4823,  31170,  10212,  2245,   3546,   11828,  31170,  3430,  -4823,  -4823,  -4823,  1252,   7214,   -4823,
    3889,   1086,   31170,  875,    1680,   31170,  2275,   31170, 3794,   -4823,  -4823,  -4823,  3452,   -4823,
    -4823,  101089, 31170,  35202,  35202,  4959,   -4823,  6323,  31170,  3457,   8115,   26634,  -4823,  3699,
    3567,   45596,  -4823,  760,    760,    760,    760,    -4823, 83147,  83147,  83147,  39671,  3812,   3465,
    38685,  79745,  3466,   2393,   -4823,  79745,  80231,  -4823, 3486,   -4823,  3468,   1252,   31170,  3811,
    710,    710,    3699,   -4823,  31170,  29658,  3471,   -4823, 913,    3472,   -4823,  -4823,  9936,   -4823,
    -4823,  3474,   -4823,  3480,   -4823,  1958,   -4823,  -4823, -4823,  -4823,  -4823,  3724,   -4823,  -4823,
    -4823,  3466,   33186,  3440,   -4823,  2279,   -4823,  -4823, 27642,  -4823,  -4823,  2280,   45103,  3338,
    28146,  1252,   2289,   1894,   -4823,  -4823,  99185,  -4823, 3609,   -4823,  -4823,  -4823,  3400,   2646,
    2646,   1029,   3171,   3836,   1029,   7560,   -4823,  -4823, 40164,  83147,  83147,  -4823,  83147,  2291,
    2062,   83147,  -4823,  83147,  -4823,  -4823,  -4823,  -4823, 3957,   -4823,  83147,  -4823,  -4823,  3604,
    3605,   -4823,  83147,  83147,  83147,  83147,  -4823,  -4823, 2310,   -4823,  -4823,  63221,  83147,  -4823,
    -4823,  -4823,  1295,   2840,   2873,   -4823,  3625,   -4823, -4823,  -4823,  3807,   -4823,  3949,   3642,
    83147,  854,    40657,  40657,  40657,  41153,  3295,   3298,  94,     -4823,  3371,   3494,   -4823,  83147,
    2540,   3508,   3509,   -4823,  2062,   -4823,  1363,   2875,  858,    -4823,  -4823,  3626,   83147,  -4823,
    3864,   103465, 83147,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  57389,  -4823,
    -4823,  -4823,  83147,  -4823,  56903,  46582,  56903,  -4823, 83147,  3993,   -4823,  509,    83147,  3658,
    41649,  -4823,  1570,   1450,   2861,   2873,   -4823,  3639,  -4823,  3640,   3641,   3687,   811,    1269,
    3644,   3646,   3694,   3510,   3511,   3514,   -4823,  -4823, 358,    3873,   1086,   -4823,  -4823,  1086,
    2646,   1086,   56903,  -4823,  3926,   1963,   -4823,  -4823, -4823,  83147,  83147,  83147,  83147,  83147,
    3976,   3670,   83147,  83147,  83147,  83147,  83147,  3878,  1167,   2063,   63221,  83147,  83147,  63221,
    83147,  83147,  83147,  83147,  83147,  83147,  83147,  -4823, 3962,   3893,   2257,   3934,   3659,   83147,
    -4823,  83147,  -4823,  3147,   83147,  83147,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  313,    3627,
    -4823,  313,    313,    -4823,  -4823,  -4823,  3529,   972,   -4823,  -4823,  3838,   3842,   -4823,  972,
    972,    -4823,  304,    56903,  -4823,  2940,   -4823,  2501,  2319,   3535,   -4823,  3545,   -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  3541,   -4823,  1548,   -4823, -4823,  3480,   -4823,  468,    2027,   -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  83147,  3400,   -4823, 1709,   969,    1479,   1595,   80717,  81203,
    81689,  3547,   83147,  83147,  35202,  -4823,  1438,   1219,  -4823,  3840,   83147,  3637,   -4823,  -4823,
    -4823,  3754,   83147,  -4823,  -4823,  -4823,  -4823,  -4823, 3548,   3918,   3919,   -4823,  3717,   67109,
    2646,   63221,  63221,  2646,   -4823,  101089, 3551,   3252,  63221,  363,    2011,   91895,  3638,   -4823,
    3550,   3900,   -4823,  3552,   3554,   -4823,  -4823,  83147, 3537,   -4823,  2296,   188,    1990,   3379,
    67595,  2120,   3871,   -4823,  -4823,  -4823,  3981,   3702,  -4823,  1505,   3555,   3290,   3702,   46582,
    -4823,  4052,   1086,   3165,   -4823,  99185,  31170,  31170, -4823,  3557,   -4823,  3559,   5898,   -4823,
    2540,   -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  3698,  83147,  -4823,  -4823,  3562,   868,    -4823,
    -4823,  83147,  -4823,  83147,  -4823,  -4823,  868,    868,   -4823,  3735,   -4823,  83147,  83147,  83147,
    3171,   -4823,  313,    -4823,  3914,   62249,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  3979,   164,
    3923,   -4823,  -4823,  3886,   3887,   3890,   3891,   1033,  -4823,  -4823,  3971,   31170,  11972,  -4823,
    3582,   -4823,  11972,  7984,   11972,  3790,   -4823,  1125,  3936,   -4823,  1432,   3585,   1125,   1633,
    1633,   452,    452,    211,    211,    211,    3925,   643,   11972,  11972,  -4823,  -4823,  31170,  -4823,
    -4823,  -4823,  3586,   -4823,  -4823,  -4823,  3225,   -4823, 33690,  8002,   3796,   4040,   -4823,  -4823,
    -4823,  3692,   3693,   3591,   -4823,  31170,  34194,  3589,  102041, 5241,   31170,  -4823,  3608,   -4823,
    -4823,  1548,   1929,   35202,  35202,  1015,   -4823,  1115,  31170,  101089, 2321,   1015,   1716,   1792,
    31170,  31170,  8557,   513,    31170,  8082,   3610,   31170, 98699,  -4823,  -4823,  83147,  83147,  83147,
    83147,  -4823,  -4823,  -4823,  79745,  80231,  3600,   31170, 24162,  2393,   3612,   83147,  -4823,  -4823,
    3606,   39178,  3910,   3845,   -4823,  39178,  3845,   2206,  3845,   3912,   -4823,  46089,  -4823,  -4823,
    3616,   -4823,  -4823,  22656,  1938,   11972,  4063,   3950,  31170,  3613,   3617,   3620,   11972,  31170,
    -4823,  1086,   1086,   -4823,  -4823,  49082,  -4823,  -4823, 3865,   11972,  -4823,  1505,   83147,  1252,
    2786,   3630,   83147,  -4823,  3440,   -4823,  -4823,  3745,  2329,   -4823,  358,    -4823,  -4823,  -4823,
    -4823,  3757,   69053,  3974,   -4823,  31170,  2330,   -4823, 3725,   4067,   401,    2335,   2337,   2062,
    -4823,  3637,   -4823,  1686,   3955,   219,    -4823,  868,   -4823,  101089, -4823,  83147,  83147,  -4823,
    -4823,  -4823,  -4823,  2820,   -4823,  -4823,  83147,  83147, 83147,  83147,  -4823,  63221,  83147,  -4823,
    94,     3623,   53987,  53987,  4124,   -4823,  2355,   300,   -4823,  2368,   302,    2374,   53987,  4124,
    2382,   2384,   3508,   -4823,  40657,  -4823,  3782,   558,   -4823,  56903,  2670,   3894,   -4823,  -4823,
    3895,   358,    83147,  -4823,  101089, 868,    868,    868,   868,    -4823,  -4823,  -4823,  -4823,  3655,
    2386,   -4823,  82175,  -4823,  184,    105825, -4823,  -4823, 2392,   94,     -4823,  854,    854,    2362,
    3944,   3298,   3629,   -4823,  3643,   4096,   3789,   83147, 83147,  83147,  83147,  63221,  83147,  83147,
    2501,   2501,   101089, 3645,   -4823,  2501,   2501,   3647,  -4823,  63221,  83147,  83147,  -4823,  -4823,
    -4823,  -4823,  3926,   -4823,  -4823,  -4823,  2402,   -4823, 3656,   4119,   3797,   -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  63221,  83147,  -4823,  3787,  -4823,  -4823,  -4823,  83147,  83147,  83147,
    83147,  4015,   -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  -4823,  -4823,  83147,
    -4823,  -4823,  1086,   1086,   101089, 868,    868,    -4823, -4823,  -4823,  -4823,  2540,   -4823,  -4823,
    3958,   -4823,  972,    972,    -4823,  -4823,  269,    2403,  -4823,  42145,  -4823,  -4823,  2997,   1086,
    2997,   2061,   -4823,  -4823,  2997,   -4823,  3679,   2997,  3705,   2997,   -4823,  2062,   3660,   1752,
    4005,   -4823,  -4823,  -4823,  -4823,  4010,   358,    -4823, -4823,  -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, 31170,  -4823,  1947,   1125,   -4823,  -4823,
    -4823,  -4823,  3637,   2010,   3780,   62735,  397,    -4823, 3994,   936,    67109,  2540,   2540,   323,
    83147,  -4823,  2646,   2646,   3783,   83147,  4136,   -4823, 624,    83147,  4048,   3770,   -4823,  1086,
    -4823,  -4823,  3252,   83147,  67109,  3290,   -4823,  3901,  2407,   -4823,  -4823,  -4823,  3767,   3652,
    3671,   2120,   293,    83147,  -4823,  3769,   82661,  3379,  -4823,  -4823,  3419,   -4823,  4022,   3677,
    -4823,  11972,  11972,  1086,   102517, 7586,   -4823,  83147, 4000,   868,    -4823,  868,    868,    -4823,
    -4823,  83147,  3171,   3171,   3171,   -4823,  3927,   -4823, -4823,  868,    62249,  1033,   1033,   1033,
    1033,   -4823,  -4823,  -4823,  4032,   11972,  -4823,  -4823, -4823,  35202,  4036,   -4823,  3685,   101089,
    3225,   -4823,  3686,   2408,   2412,   -4823,  37195,  3897,  -4823,  -4823,  -4823,  8507,   3805,   11972,
    3858,   3691,   3695,   -4823,  31170,  6412,   -4823,  -4823, 1061,   1061,   1115,   2421,   -4823,  35202,
    35202,  1015,   1015,   31170,  1015,   -4823,  -4823,  8704,  3928,   -4823,  -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  57875,  6537,   79745,  3697,   83147,  2393,  39178,  -4823,  -4823,  2574,   -4823,  39178,
    3999,   -4823,  39178,  83147,  3700,   83147,  704,    34698, 31170,  3808,   -4823,  -4823,  -4823,  3699,
    -4823,  1548,   3701,   83147,  -4823,  -4823,  1065,   -4823, -4823,  -4823,  -4823,  -4823,  62249,  3946,
    62249,  2062,   9077,   3637,   40164,  50082,  83147,  82175, 82175,  3916,   3637,   3780,   -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  3704,   -4823,  -4823,  -4823, 3850,   -4823,  -4823,  27,     3245,   3508,
    40657,  4124,   288,    101089, 138,    40657,  31170,  -4823, 31170,  138,    2423,   -4823,  3709,   -4823,
    53987,  -4823,  2428,   83147,  2436,   2438,   -4823,  2540,  -4823,  -4823,  -4823,  -4823,  -4823,  3962,
    -4823,  -4823,  -4823,  -4823,  46582,  3340,   83147,  83147, -4823,  -4823,  105825, -4823,  -4823,  558,
    372,    94,     94,     3732,   3736,   -4823,  3713,   -4823, 3944,   63221,  83147,  -4823,  3861,   -4823,
    -4823,  -4823,  -4823,  -4823,  43131,  49082,  -4823,  811,   3714,   3720,   1269,   -4823,  -4823,  -4823,
    -4823,  -4823,  56903,  1086,   3926,   1086,   -4823,  30,    3245,   83147,  962,    1132,   3817,   3171,
    4078,   -4823,  -4823,  -4823,  3962,   -4823,  -4823,  -4823, 972,    -4823,  -4823,  -4823,  2622,   4120,
    -4823,  56903,  -4823,  58361,  -4823,  -4823,  -4823,  1086,  -4823,  1086,   3984,   83147,  52043,  1086,
    -4823,  1086,   3798,   1086,   -4823,  62735,  4207,   4207,  83147,  -4823,  -4823,  9486,   3986,   -4823,
    3780,   4017,   4065,   -4823,  3740,   83147,  3960,   3743,  3744,   -4823,  -4823,  859,    859,    3537,
    83147,  2444,   1505,   363,    67109,  3537,   -4823,  1756,  3746,   4114,   -4823,  4222,   3398,   3749,
    -4823,  4209,   -4823,  -4823,  67595,  4001,   3702,   83147, 3652,   3942,   -4823,  3945,   -4823,  341,
    -4823,  -4823,  3756,   3755,   -4823,  -4823,  101089, -4823, 83147,  40164,  -4823,  101565, -4823,  2470,
    -4823,  -4823,  3322,   83147,  1054,   -4823,  -4823,  -4823, -4823,  -4823,  -4823,  368,    -4823,  -4823,
    -4823,  -4823,  31170,  751,    35202,  101089, 2485,   31170, -4823,  31170,  -4823,  4216,   -4823,  -4823,
    -4823,  907,    -4823,  -4823,  11972,  -4823,  1061,   1061,  1015,   -4823,  4228,   3699,   -4823,  2497,
    4246,   31170,  -4823,  83147,  2504,   -4823,  31170,  3773,  -4823,  -4823,  39178,  2574,   2505,   83147,
    2513,   101089, 3771,   3774,   519,    3775,   23161,  3776,  -4823,  11972,  11972,  83147,  -4823,  3777,
    -4823,  -4823,  -4823,  -4823,  29,     1029,   368,    4067,  3780,   -4823,  3779,   -4823,  -4823,  1523,
    1523,   83147,  3780,   -4823,  -4823,  83147,  3931,   -4823, -4823,  4252,   4277,   -4823,  -4823,  -4823,
    -4823,  -4823,  710,    710,    -4823,  -4823,  53987,  4124,  -4823,  -4823,  -4823,  -4823,  56903,  -4823,
    3903,   -4823,  -4823,  -4823,  -4823,  -4823,  -4823,  -4823, 3508,   372,    372,    372,    -4823,  -4823,
    1205,   -4823,  65,     3245,   83147,  101089, 2348,   125,   -4823,  101089, 101089, -4823,  -4823,  -4823,
    -4823,  -4823,  3935,   -4823,  -4823,  83147,  83147,  83147, 83147,  83147,  868,    -4823,  3374,   1086,
    -4823,  -4823,  2514,   -4823,  -4823,  -4823,  83147,  3550,  -4823,  3550,   -4823,  -4823,  -4823,  -4823,
    4207,   373,    -4823,  -4823,  -4823,  2414,   4051,   -4823, 1133,   4037,   3937,   3788,   -4823,  62735,
    4289,   3969,   -4823,  -4823,  -4823,  -4823,  -4823,  -4823, -4823,  -4823,  -4823,  4155,   3252,   3769,
    -4823,  -4823,  -4823,  -4823,  31170,  4013,   1505,   2120,  3871,   741,    -4823,  -4823,  3379,   2515,
    3702,   -4823,  -4823,  4242,   4045,   4244,   1470,   82661, -4823,  -4823,  2525,   -4823,  -4823,  5898,
    102517, 4188,   -4823,  3917,   83147,  -4823,  -4823,  -4823, 11972,  751,    2531,   -4823,  2541,   2547,
    4016,   3915,   -4823,  31170,  1478,   3486,   57875,  3809,  -4823,  9526,   2553,   -4823,  11972,  83147,
    -4823,  -4823,  -4823,  2559,   -4823,  -4823,  31170,  3810,  31170,  -4823,  34698,  3803,   -4823,  4283,
    -4823,  -4823,  4163,   -4823,  82175,  3922,   49082,  1958,  1958,   2010,   -4823,  2062,   -4823,  83147,
    101089, 101089, 3813,   3818,   2566,   -4823,  31170,  -4823, -4823,  -4823,  3508,   3508,   3819,   3963,
    -4823,  -4823,  2567,   -4823,  1500,   4024,   4178,   2572,  2577,   83147,  3177,   3930,   3177,   -4823,
    3171,   -4823,  1412,   -4823,  -4823,  58361,  3550,   -4823, -4823,  -4823,  4206,   4151,   -4823,  -4823,
    -4823,  -4823,  204,    -4823,  4076,   4077,   83147,  -4823, 3830,   -4823,  2579,   83147,  83147,  4306,
    4307,   -4823,  9579,   62735,  3769,   3652,   2120,   -4823, -4823,  3833,   2979,   3901,   -4823,  3379,
    4082,   -4823,  4083,   1086,   3837,   3904,   -4823,  3252,  40164,  7586,   -4823,  350,    -4823,  -4823,
    -4823,  -4823,  -4823,  -4823,  -4823,  3032,   30162,  30162, 3844,   -4823,  -4823,  83147,  -4823,  2581,
    -4823,  2605,   34698,  2606,   -4823,  83147,  3843,   62249, 1523,   3846,   -4823,  3849,   -4823,  -4823,
    4017,   2062,   3245,   3851,   -4823,  1086,   234,    -4823, 11972,  -4823,  -4823,  1205,   83147,  62735,
    4305,   -4823,  -4823,  -4823,  4024,   -4823,  -4823,  3245,  83147,  3929,   3911,   3882,   -4823,  4047,
    -4823,  991,    991,    4251,   -4823,  3982,   -4823,  -4823, 3860,   -4823,  4360,   3537,   -4823,  811,
    1505,   -4823,  3863,   -4823,  3702,   3652,   83147,  -4823, 3901,   -4823,  -4823,  -4823,  1086,   1086,
    3702,   -4823,  -4823,  -4823,  -4823,  1766,   36204,  4055,  249,    10348,  4238,   -4823,  4238,   -4823,
    2607,   -4823,  -4823,  2640,   -4823,  -4823,  -4823,  368,   1958,   31170,  2062,   -4823,  4037,   -4823,
    -4823,  -4823,  3866,   3245,   2348,   83147,  -4823,  -4823, -4823,  4179,   4234,   -4823,  3906,   3770,
    -4823,  4362,   -4823,  324,    -4823,  -4823,  -4823,  -4823, -4823,  3645,   3769,   56417,  3379,   3702,
    2641,   -4823,  4127,   2645,   -4823,  -4823,  3879,   3322,  -4823,  1598,   -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  -4823,  4355,   -4823,  -4823,  -4823,  -4823, -4823,  169,    -4823,  -4823,  -4823,  -4823,
    -4823,  -4823,  9663,   -4823,  -4823,  -4823,  -4823,  -4823, 83147,  3921,   4173,   4253,   -4823,  -4823,
    -4823,  -4823,  -4823,  2647,   -4823,  -4823,  -4823,  -4823, 3901,   3379,   3905,   220,    -4823,  -4823,
    1086,   21668,  4129,   -4823,  2271,   -4823,  -4823,  2304,  2252,   30666,  4079,   -4823,  3939,   -4823,
    -4823,  2062,   -4823,  -4823,  2501,   4112,   -4823,  56417, -4823,  3901,   4353,   3898,   3924,   -4823,
    -4823,  1086,   -4823,  2501,   -4823,  4127,   -4823,  3932,  301,    326,    1689,   3933,   331,    351,
    3954,   355,    -4823,  2853,   2656,   -4823,  -4823,  3938,  3902,   -4823,  -4823,  1598,   -4823,  -4823,
    -4823,  699,    62735,  -4823,  -4823,  741,    1395,   -4823, 282,    3905,   -4823,  -4823,  -4823,  1086,
    1086,   4157,   52529,  1086,   1086,   3973,   1086,   -4823, 2997,   2997,   1689,   -4823,  2997,   2997,
    3954,   2997,   -4823,  -4823,  -4823,  56903,  25626,  22162, -4823,  124,    -4823,  -4823,  -4823,  -4823,
    3908,   3909,   309,    105825, -4823,  2657,   94,     -4823, 854,    854,    3940,   -4823,  -4823,  -4823,
    83147,  -4823,  3550,   -4823,  -4823,  -4823,  -4823,  -4823, 83147,  -4823,  -4823,  2663,   -4823,  1086,
    3400,   3978,   -4823,  3379,   3941,   -4823,  56417,  83147, 105825, -4823,  -4823,  1395,   372,    94,
    94,     558,    3550,   2672,   -4823,  56903,  -4823,  1963,  393,    -4823,  3951,   2677,   2678,   -4823,
    -4823,  3508,   372,    372,    2692,   -4823,  -4823,  -4823, -4823,  -4823,  4203,   -4823,  -4823,  -4823,
    3508,   3508,   -4823,  2501,   -4823,  -4823,  699,    -4823};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] = {
    1687, 1467, 795,  1558, 1557, 1467, 298,  0,    1560, 0,    1467, 463,  1218, 0,    0,    0,    0,    795,  1467,
    0,    1687, 0,    0,    0,    0,    1700, 0,    0,    0,    0,    0,    0,    0,    0,    0,    1467, 0,    0,
    1707, 0,    0,    0,    0,    1700, 0,    1564, 0,    0,    0,    0,    0,    2,    4,    59,   20,   86,   60,
    87,   21,   67,   68,   23,   22,   34,   33,   92,   93,   53,   17,   81,   61,   126,  125,  127,  40,   36,
    75,   29,   30,   37,   41,   63,   42,   48,   54,   104,  62,   24,   58,   85,   64,   90,   47,   11,   12,
    49,   79,   13,   50,   80,   14,   51,   15,   69,   94,   32,   65,   91,   66,   5,    43,   77,   73,   10,
    55,   56,   57,   82,   83,   84,   109,  89,   121,  39,   118,  98,   99,   115,  100,  116,  8,    101,  52,
    16,   112,  111,  113,  76,   44,   78,   110,  31,   26,   114,  18,   19,   117,  88,   107,  103,  122,  120,
    128,  105,  70,   6,    7,    95,   25,   46,   9,    28,   27,   45,   38,   124,  35,   1560, 97,   108,  96,
    71,   102,  74,   106,  123,  72,   119,  129,  1660, 1659, 1709, 1665, 1686, 0,    1676, 1466, 1465, 1451, 0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    794,  0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1477, 2267, 2282, 2283, 2284, 2285,
    2287, 2288, 2289, 2290, 429,  2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2884, 2885, 2886, 2887,
    2301, 2302, 2303, 2304, 2305, 2306, 2307, 2888, 2889, 2308, 2309, 2310, 2311, 2312, 2890, 2313, 2314, 2315, 2316,
    2317, 2318, 2319, 2320, 2322, 2323, 2324, 2325, 2326, 2330, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2891, 2892,
    2339, 2340, 2341, 2342, 2343, 2344, 2345, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2355, 2356, 2357, 2358, 2359,
    2360, 2362, 2363, 2366, 2367, 2368, 2893, 2370, 2371, 2372, 2894, 2373, 2376, 2377, 2895, 2378, 2380, 2382, 2383,
    2384, 2385, 2896, 2386, 2388, 2389, 2391, 2392, 2393, 2395, 2396, 2397, 2398, 2400, 2401, 2402, 2403, 2404, 2406,
    2899, 2407, 2408, 2409, 2410, 2900, 2901, 2902, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2903,
    2421, 2423, 2424, 2425, 2426, 2427, 2429, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2440, 2442, 2443, 2444,
    2445, 2905, 2906, 2447, 2448, 2907, 2451, 2452, 2453, 2908, 2454, 2909, 2455, 2456, 2457, 2458, 2459, 2460, 2461,
    2463, 2910, 2465, 2911, 2467, 2468, 2470, 2471, 2473, 2474, 2477, 2912, 2913, 2480, 2478, 2479, 2481, 2482, 2483,
    2484, 2485, 2488, 2490, 2491, 2914, 2494, 2495, 2496, 2497, 2498, 2499, 2501, 2502, 2503, 2504, 2505, 2506, 2508,
    2510, 2511, 2513, 2514, 2515, 2516, 2916, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2528, 2529, 2530, 2531,
    2532, 2533, 2917, 2534, 2535, 2536, 2919, 2537, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2920,
    2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2921, 2922, 2561, 2923, 2562, 2924, 2563, 2564, 2565, 2566, 2567,
    2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2578, 2579, 2925, 2926, 2580, 2581, 2582, 2583, 2584, 2586,
    2587, 2588, 2589, 2590, 2592, 2593, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2594, 2595, 2597, 2286,
    2321, 2327, 2328, 2329, 2331, 2346, 2354, 2361, 2364, 2365, 2369, 2374, 2375, 2379, 2381, 2898, 2897, 2387, 2390,
    2394, 2399, 2405, 2422, 2428, 2430, 2904, 2439, 2441, 2446, 2449, 2450, 2462, 2464, 2466, 2469, 2512, 2472, 2475,
    2476, 2486, 2487, 2489, 2492, 2493, 2500, 2507, 2509, 2915, 2517, 2526, 2527, 2918, 2538, 2539, 2550, 2559, 2560,
    2577, 2585, 2591, 2596, 428,  1649, 2237, 2268, 2269, 1559, 1537, 795,  0,    1454, 462,  0,    0,    0,    0,
    0,    0,    0,    989,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    221,  0,    0,    486,  485,
    0,    0,    0,    1190, 491,  0,    954,  683,  0,    682,  0,    0,    0,    0,    0,    0,    783,  1606, 2478,
    1604, 1650, 299,  302,  303,  300,  301,  2259, 0,    1305, 1306, 1308, 0,    0,    1318, 1026, 1027, 0,    1025,
    0,    1029, 0,    0,    0,    0,    1021, 0,    0,    0,    0,    0,    1028, 1018, 0,    1015, 0,    0,    0,
    1024, 0,    1019, 1034, 0,    0,    0,    1455, 1603, 492,  1584, 0,    1582, 1578, 1579, 1580, 1560, 1569, 1581,
    1574, 1576, 1575, 1577, 1573, 2258, 2283, 1128, 1128, 1128, 1128, 1125, 1126, 1128, 1128, 1128, 2501, 0,    0,
    1107, 0,    1109, 2264, 1128, 1133, 552,  552,  552,  0,    1132, 1137, 552,  1448, 1486, 2242, 1699, 0,    1108,
    1447, 2561, 1595, 0,    0,    0,    1322, 0,    1323, 0,    2520, 1459, 283,  2532, 2921, 2561, 282,  277,  278,
    251,  2288, 0,    0,    1132, 0,    1456, 1457, 1091, 1706, 1704, 2223, 2306, 2320, 2425, 274,  2515, 2521, 2532,
    2921, 2561, 2593, 230,  240,  235,  0,    292,  2532, 2921, 2561, 288,  1477, 0,    1677, 1801, 2233, 0,    1450,
    1449, 1563, 0,    1566, 0,    1763, 2496, 1681, 1683, 1568, 0,    0,    1674, 0,    0,    1,    1687, 1562, 1703,
    1703, 0,    1703, 0,    1666, 1674, 1669, 1673, 0,    0,    0,    0,    2267, 2936, 2937, 2938, 2939, 2940, 2941,
    2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 0,    0,    2243,
    2268, 2272, 0,    1037, 0,    157,  2238, 1178, 0,    0,    0,    0,    2237, 0,    0,    0,    0,    0,    2273,
    0,    2260, 2274, 2275, 2276, 0,    2393, 0,    0,    0,    2127, 2310, 2373, 2137, 2135, 2136, 2129, 2130, 2131,
    2132, 2133, 2134, 0,    1303, 2128, 0,    199,  157,  0,    0,    2393, 0,    0,    0,    0,    0,    2393, 0,
    0,    0,    0,    0,    199,  2429, 157,  2393, 0,    0,    0,    0,    0,    0,    1471, 0,    0,    0,    1473,
    1476, 1452, 1540, 0,    2233, 0,    0,    1068, 1058, 0,    1069, 1059, 1064, 0,    1071, 0,    0,    1061, 0,
    0,    0,    1072, 0,    1060, 1062, 1074, 1063, 1070, 0,    0,    1065, 1066, 0,    0,    0,    1463, 552,  435,
    0,    0,    0,    0,    157,  1527, 0,    2393, 157,  0,    0,    490,  489,  157,  488,  487,  2310, 2373, 0,
    1217, 157,  2393, 0,    223,  865,  798,  0,    0,    943,  2429, 157,  0,    0,    0,    0,    0,    0,    686,
    0,    0,    0,    1193, 0,    0,    782,  795,  1607, 1605, 0,    1309, 276,  275,  1307, 2393, 0,    377,  0,
    0,    2393, 1514, 1023, 1016, 0,    0,    1022, 2393, 0,    2393, 2262, 214,  0,    1020, 2310, 2373, 2393, 0,
    0,    2393, 206,  2393, 0,    2393, 377,  2393, 799,  0,    2393, 0,    2393, 2429, 208,  0,    0,    0,    2393,
    377,  1035, 0,    1600, 0,    1583, 1687, 2925, 1589, 0,    1585, 1592, 1588, 1584, 1128, 1127, 0,    1128, 0,
    1128, 0,    1128, 0,    1128, 0,    0,    0,    1128, 2265, 2266, 1110, 0,    1134, 0,    0,    1141, 1140, 1139,
    0,    0,    0,    1142, 1805, 1625, 0,    1445, 1462, 0,    0,    0,    1193, 1325, 1325, 1325, 1458, 281,  279,
    0,    0,    0,    0,    0,    0,    1464, 0,    0,    0,    0,    2246, 2248, 2249, 2138, 2213, 0,    2885, 2886,
    2887, 2198, 0,    2888, 2889, 2890, 2938, 2036, 2023, 2032, 2037, 2024, 2026, 2033, 2891, 2892, 2352, 2893, 2894,
    2256, 2895, 2896, 2900, 2901, 2902, 2903, 2028, 2030, 2905, 2906, 0,    2257, 2908, 2909, 2459, 2911, 2912, 2914,
    2916, 2034, 2919, 2920, 0,    2921, 2922, 2923, 2924, 2255, 0,    2035, 2926, 2928, 2929, 2930, 2931, 2932, 2933,
    2934, 2935, 0,    2898, 2897, 2904, 0,    0,    2230, 0,    2000, 0,    1845, 1846, 1868, 1869, 1847, 1874, 1875,
    1887, 1848, 0,    2229, 1912, 2090, 1998, 2019, 2006, 0,    1997, 1999, 1993, 1689, 2222, 2224, 0,    1994, 2245,
    2247, 2205, 243,  294,  0,    295,  2231, 2532, 231,  273,  245,  272,  246,  244,  0,    2308, 232,  0,    0,
    233,  0,    0,    0,    0,    291,  289,  0,    1453, 0,    1803, 1802, 0,    0,    2211, 2234, 1044, 1550, 1551,
    1549, 1552, 0,    1546, 1548, 1565, 1560, 2218, 2217, 2219, 0,    1682, 0,    0,    0,    0,    0,    1664, 1663,
    3,    2381, 2517, 1553, 1568, 1701, 1702, 0,    0,    0,    0,    0,    0,    0,    0,    1753, 1717, 1718, 1720,
    1750, 1754, 1762, 0,    1670, 0,    0,    1807, 0,    1764, 0,    0,    2244, 0,    0,    0,    0,    1038, 0,
    0,    0,    0,    0,    0,    156,  1512, 285,  1510, 0,    0,    0,    0,    0,    0,    0,    1519, 0,    0,
    212,  213,  810,  795,  0,    0,    2393, 0,    0,    0,    0,    0,    1257, 1264, 0,    0,    0,    0,    0,
    0,    0,    0,    1258, 1256, 1259, 0,    0,    0,    287,  1268, 1289, 1292, 0,    1168, 0,    0,    0,    0,
    0,    1376, 0,    0,    1376, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    309,  321,  362,  372,  774,  0,    0,    0,    777,  0,    2393, 0,    0,    0,    0,    0,    0,
    0,    0,    0,    161,  0,    0,    0,    0,    0,    0,    761,  773,  0,    0,    0,    0,    0,    770,  0,
    157,  313,  754,  758,  0,    0,    0,    874,  873,  1517, 1516, 0,    0,    0,    1376, 0,    304,  0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    421,  422,  0,    0,    0,    161,
    0,    0,    0,    0,    315,  0,    0,    0,    134,  2261, 0,    0,    1472, 1469, 1470, 0,    1475, 0,    1536,
    0,    0,    0,    0,    1076, 0,    1073, 0,    0,    1067, 2310, 2373, 0,    0,    0,    0,    1082, 1081, 0,
    0,    465,  434,  0,    0,    2270, 1856, 1885, 1863, 1885, 1885, 1852, 1852, 1865, 1853, 1854, 1892, 0,    1885,
    1852, 1857, 0,    1855, 1895, 1895, 1880, 0,    1837, 1838, 1839, 1840, 1866, 1867, 1841, 1872, 1873, 1842, 1909,
    1852, 2271, 0,    0,    952,  0,    1489, 1526, 0,    0,    0,    804,  0,    2393, 0,    159,  990,  0,    941,
    491,  0,    159,  0,    0,    217,  0,    869,  0,    0,    0,    0,    0,    0,    889,  888,  0,    0,    0,
    942,  0,    159,  0,    134,  0,    757,  2393, 0,    552,  552,  685,  492,  0,    0,    0,    1192, 1195, 0,
    0,    0,    0,    1653, 1656, 1654, 0,    1652, 0,    0,    377,  375,  376,  938,  1317, 0,    0,    1017, 0,
    0,    377,  0,    0,    2393, 377,  2393, 0,    2393, 0,    0,    377,  377,  0,    0,    0,    0,    870,  0,
    1033, 1031, 1030, 1032, 0,    0,    0,    0,    0,    146,  144,  2393, 377,  0,    0,    1012, 2148, 0,    1571,
    1687, 0,    262,  263,  261,  1590, 264,  1591, 1587, 1687, 0,    1118, 0,    1122, 0,    1113, 0,    1119, 0,
    1114, 1111, 1112, 0,    1117, 0,    0,    553,  555,  0,    0,    2336, 2351, 0,    2382, 2415, 2416, 2521, 2528,
    0,    2554, 2565, 2486, 0,    1143, 1173, 1138, 0,    0,    1635, 1446, 2154, 0,    1687, 0,    0,    1324, 1321,
    1320, 1319, 280,  252,  0,    0,    0,    1175, 2520, 1461, 1090, 795,  0,    1995, 0,    2003, 2004, 1884, 1871,
    2197, 0,    0,    1879, 1878, 0,    0,    0,    0,    0,    1861, 1860, 1859, 2002, 2162, 0,    1858, 0,    0,
    0,    0,    1885, 1885, 1883, 1932, 0,    1862, 0,    0,    2175, 0,    2181, 0,    0,    0,    0,    1891, 0,
    1889, 0,    0,    1968, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1916, 1917, 0,
    2000, 2148, 0,    2001, 2252, 0,    0,    1877, 0,    1909, 2227, 2138, 0,    2606, 2607, 2608, 2609, 2601, 2611,
    2612, 2613, 2614, 2602, 0,    0,    2615, 2616, 2603, 2878, 2617, 2618, 2619, 2216, 2838, 2879, 2839, 2840, 2620,
    2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2841, 0,    2631, 2632, 2633, 2634, 2635, 2636, 2638,
    2639, 2640, 2641, 2645, 2646, 2647, 2648, 2649, 2843, 2844, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658,
    2659, 2660, 2661, 2662, 2663, 2664, 2665, 2667, 2668, 2671, 2672, 2673, 2845, 2674, 2675, 2846, 2678, 2847, 2679,
    2681, 2880, 2682, 2683, 2684, 2848, 2685, 2687, 2688, 2690, 2146, 2691, 2692, 2693, 0,    2694, 2696, 2697, 2698,
    2699, 2700, 2851, 2701, 2702, 2703, 2704, 2852, 2853, 2854, 2705, 0,    1946, 2706, 2707, 2708, 2709, 2710, 2855,
    2711, 2144, 2713, 2714, 2715, 2716, 2717, 2719, 2720, 2721, 2722, 2723, 2724, 2726, 2728, 2729, 2730, 2856, 2857,
    2732, 2733, 2858, 0,    2735, 2736, 1948, 2737, 2859, 2738, 2860, 2739, 2740, 2741, 2742, 2743, 2744, 0,    2861,
    2882, 2862, 2747, 2748, 2750, 2752, 2863, 2864, 2757, 2755, 2756, 2758, 2759, 2760, 2761, 2764, 2765, 2766, 2865,
    2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2777, 2778, 2779, 2780, 2781, 2782, 2867, 2783, 2784, 2785,
    2786, 2787, 2788, 2789, 2792, 2793, 2794, 2795, 2868, 2796, 2797, 0,    2798, 2870, 2801, 2802, 2803, 2804, 2805,
    2806, 2807, 2808, 2871, 2810, 2811, 2600, 2812, 2813, 2814, 2872, 2873, 2817, 2874, 2818, 2875, 2819, 2820, 2821,
    2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2833, 2876, 2877, 2883, 2831, 2832, 2834, 2835, 2836, 2837,
    2610, 2637, 2642, 2643, 2644, 2842, 2666, 2669, 2670, 2676, 2677, 2680, 2849, 2850, 2686, 2689, 2695, 2712, 2881,
    2718, 2725, 2727, 2731, 2734, 2745, 2746, 2749, 2751, 2753, 2754, 2762, 2763, 2776, 2866, 2790, 2791, 2869, 2799,
    2800, 2809, 2815, 2816, 2137, 2135, 2136, 2129, 2130, 2131, 2132, 2133, 2134, 2142, 1929, 0,    2228, 2598, 2599,
    0,    2092, 0,    1928, 0,    1766, 0,    0,    2250, 2206, 296,  297,  293,  0,    0,    248,  247,  0,    266,
    270,  271,  242,  269,  0,    265,  250,  2081, 2080, 249,  241,  238,  236,  253,  255,  256,  239,  237,  290,
    0,    0,    2277, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973,
    2974, 2975, 2976, 2977, 2978, 2979, 2980, 2982, 2983, 2984, 2985, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994,
    2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013,
    3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033,
    3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 2981, 2986, 3023, 2208, 2207, 2240, 2278, 2279, 2280, 2281,
    2212, 0,    0,    377,  1544, 0,    1541, 0,    0,    2221, 0,    1684, 0,    2235, 0,    0,    0,    1568, 1561,
    1568, 1554, 1680, 1679, 1710, 1711, 1210, 1678, 1737, 1738, 0,    0,    0,    0,    1759, 1757, 1728, 1721, 1727,
    0,    0,    1725, 0,    1729, 1912, 1752, 1668, 1715, 1716, 1719, 1667, 0,    1755, 0,    1635, 1753, 1720, 1622,
    0,    0,    1808, 0,    1232, 1234, 0,    1233, 0,    1236, 0,    1245, 0,    0,    1231, 1250, 0,    1239, 1237,
    0,    0,    0,    0,    0,    0,    1039, 0,    0,    0,    0,    0,    0,    2554, 284,  1508, 0,    0,    0,
    0,    1177, 1176, 0,    0,    1197, 0,    0,    0,    1522, 541,  0,    374,  0,    0,    0,    0,    0,    0,
    0,    0,    936,  933,  0,    0,    932,  0,    808,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    306,  844,  0,    1376, 0,    877,  0,    1266, 0,    0,
    1269, 1265, 0,    0,    0,    1267, 1262, 1263, 2521, 2532, 2561, 286,  1270, 0,    0,    1291, 0,    1290, 1288,
    1220, 0,    1221, 0,    0,    0,    0,    0,    0,    642,  323,  336,  0,    1375, 0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    413,  377,  0,    0,    0,    0,    0,    357,  0,    366,  365,  0,    0,    0,
    0,    0,    0,    370,  0,    0,    0,    0,    0,    369,  359,  377,  0,    0,    0,    363,  0,    0,    0,
    775,  776,  0,    0,    0,    1376, 0,    317,  0,    0,    0,    0,    0,    0,    1304, 0,    0,    202,  0,
    198,  201,  0,    0,    0,    0,    760,  772,  0,    764,  765,  762,  766,  767,  0,    0,    0,    0,    0,
    0,    759,  0,    0,    867,  866,  872,  0,    0,    0,    0,    0,    0,    0,    0,    1328, 1327, 0,    0,
    0,    0,    0,    0,    980,  0,    0,    0,    0,    0,    0,    0,    0,    205,  880,  881,  0,    882,  0,
    203,  204,  0,    0,    0,    0,    0,    0,    140,  0,    0,    0,    0,    260,  1468, 1474, 1539, 2241, 1538,
    0,    0,    0,    1075, 0,    0,    0,    0,    0,    0,    0,    1077, 1078, 1079, 1080, 0,    0,    0,    0,
    0,    439,  440,  157,  438,  0,    1837, 0,    1833, 1829, 1898, 1899, 1900, 1897, 1910, 1896, 0,    1843, 1901,
    1852, 1849, 953,  0,    957,  960,  0,    1487, 512,  0,    0,    801,  844,  0,    494,  210,  0,    0,    0,
    0,    155,  221,  223,  492,  0,    222,  224,  226,  227,  228,  225,  229,  864,  868,  0,    797,  0,    0,
    0,    0,    0,    890,  894,  893,  897,  895,  0,    891,  0,    0,    1825, 0,    197,  0,    131,  0,    753,
    756,  0,    0,    0,    494,  586,  388,  0,    0,    552,  0,    940,  0,    0,    0,    1194, 0,    0,    0,
    0,    0,    0,    0,    0,    1651, 1655, 0,    1295, 0,    1515, 2393, 377,  0,    1293, 215,  2263, 0,    1013,
    0,    0,    0,    0,    0,    1297, 1009, 207,  0,    377,  377,  800,  0,    377,  209,  0,    0,    0,    792,
    377,  1036, 1602, 0,    1572, 1586, 1570, 1115, 1124, 1123, 1121, 1120, 1116, 0,    1135, 0,    551,  0,    0,
    0,    1149, 1150, 0,    0,    1148, 1166, 1151, 0,    1153, 1145, 1144, 1154, 1156, 1155, 0,    0,    1175, 0,
    1632, 0,    1630, 0,    1806, 1634, 1637, 1594, 0,    1593, 1597, 1599, 1598, 1596, 0,    680,  0,    0,    1132,
    0,    0,    377,  1460, 0,    1092, 1093, 1099, 0,    0,    0,    0,    0,    1100, 1096, 1097, 1098, 1101, 1102,
    1103, 0,    0,    0,    2214, 2158, 0,    2159, 0,    0,    0,    2196, 2190, 0,    0,    0,    0,    0,    0,
    2163, 2166, 2167, 2168, 2165, 2169, 2164, 0,    0,    2170, 0,    0,    0,    0,    0,    1882, 1881, 0,    0,
    0,    0,    0,    0,    0,    1971, 2006, 0,    0,    2122, 0,    2148, 2180, 0,    2007, 0,    0,    1893, 0,
    0,    0,    0,    0,    0,    0,    2148, 2186, 0,    0,    0,    0,    1912, 2079, 0,    2076, 0,    0,    0,
    0,    0,    2053, 0,    0,    2213, 0,    0,    0,    0,    2253, 1913, 1930, 2226, 0,    2215, 0,    0,    1914,
    1937, 0,    2187, 1964, 0,    1969, 1952, 0,    1945, 0,    1950, 1954, 1933, 2216, 2147, 0,    2145, 0,    0,
    1931, 0,    1926, 1924, 1925, 1918, 1919, 1920, 1921, 1922, 1923, 1927, 2126, 2124, 2125, 0,    0,    0,    2100,
    0,    0,    1949, 2384, 2425, 0,    1700, 1700, 1700, 1688, 1698, 0,    1820, 2225, 0,    0,    0,    0,    2011,
    0,    2152, 1709, 2150, 2243, 2232, 0,    0,    1909, 0,    1804, 2209, 0,    1042, 1043, 1041, 1568, 1547, 1543,
    1542, 2220, 1567, 0,    1687, 1662, 1661, 1555, 1556, 0,    1208, 1209, 0,    1213, 2916, 2518, 0,    0,    0,
    0,    1730, 1760, 0,    1751, 0,    2246, 1731, 2245, 1732, 1735, 1736, 1726, 1761, 1756, 1672, 1671, 0,    1823,
    0,    0,    1619, 1612, 1809, 0,    1766, 1639, 1641, 1642, 0,    2213, 1235, 0,    1852, 1246, 0,    1230, 0,
    1229, 1852, 0,    1247, 0,    1852, 0,    0,    0,    1404, 1330, 1380, 1040, 1405, 1331, 1381, 1406, 1332, 1509,
    0,    1511, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    915,  2393, 377,
    1520, 1407, 0,    1333, 373,  1521, 1382, 1525, 935,  934,  0,    0,    1383, 0,    809,  0,    0,    814,  815,
    816,  0,    0,    0,    817,  0,    2310, 2373, 0,    822,  829,  834,  824,  0,    835,  830,  0,    0,    0,
    0,    0,    0,    841,  848,  0,    0,    0,    0,    0,    0,    0,    1273, 1275, 1274, 1260, 1261, 1408, 1336,
    0,    1384, 1272, 1271, 1219, 0,    1337, 211,  0,    0,    310,  324,  0,    2605, 0,    0,    2742, 2802, 2876,
    642,  637,  635,  641,  611,  638,  400,  2604, 850,  915,  405,  403,  409,  1378, 343,  356,  351,  352,  350,
    2393, 377,  405,  2690, 412,  2393, 377,  0,    0,    0,    0,    353,  348,  349,  345,  358,  2287, 2353, 2533,
    0,    854,  856,  0,    861,  367,  1351, 0,    384,  383,  382,  0,    371,  0,    389,  392,  368,  341,  361,
    344,  342,  0,    601,  597,  600,  0,    420,  338,  0,    364,  405,  0,    322,  0,    0,    0,    0,    0,
    0,    0,    2239, 0,    0,    1299, 0,    0,    0,    200,  1365, 177,  0,    0,    0,    168,  0,    0,    0,
    0,    193,  0,    193,  0,    160,  162,  176,  0,    1414, 1341, 0,    0,    314,  755,  763,  768,  1345, 771,
    1394, 769,  1421, 1342, 0,    1376, 0,    305,  0,    1343, 0,    1388, 1416, 1367, 0,    0,    0,    0,    0,
    0,    0,    0,    0,    1528, 0,    0,    0,    0,    0,    377,  0,    0,    0,    1378, 2393, 377,  1415, 0,
    1372, 0,    1402, 0,    423,  0,    1366, 0,    0,    316,  1347, 1396, 1374, 1417, 0,    0,    0,    0,    0,
    0,    147,  148,  0,    0,    0,    0,    0,    139,  138,  133,  0,    0,    258,  257,  259,  0,    0,    0,
    0,    0,    0,    0,    0,    1084, 1051, 1083, 0,    0,    0,    1045, 464,  432,  433,  435,  444,  0,    1834,
    1830, 0,    0,    0,    0,    0,    0,    0,    0,    0,    1850, 956,  0,    0,    0,    0,    1507, 1507, 1507,
    1507, 1507, 1507, 1507, 1488, 1518, 0,    157,  0,    0,    0,    803,  843,  850,  0,    0,    0,    0,    0,
    493,  497,  504,  501,  502,  503,  0,    0,    0,    0,    178,  158,  0,    998,  0,    552,  0,    223,  216,
    0,    0,    0,    388,  951,  949,  948,  950,  0,    0,    0,    973,  947,  0,    1824, 1826, 0,    145,  0,
    0,    0,    0,    680,  496,  0,    555,  0,    0,    590,  0,    0,    0,    0,    388,  2270, 0,    969,  939,
    0,    0,    1224, 0,    1242, 1225, 0,    0,    0,    1279, 1284, 1280, 1252, 0,    945,  780,  1657, 1658, 0,
    377,  0,    0,    845,  377,  377,  0,    377,  0,    377,  377,  0,    1443, 871,  0,    923,  0,    0,    377,
    1011, 2149, 1136, 554,  0,    0,    0,    0,    1147, 0,    778,  1152, 0,    1165, 1160, 1162, 0,    1169, 1633,
    1626, 1628, 1627, 0,    0,    1624, 0,    1623, 2155, 1010, 0,    752,  0,    0,    377,  0,    1170, 0,    1094,
    1095, 0,    0,    1104, 0,    0,    1705, 2156, 2157, 0,    0,    2946, 2193, 0,    0,    2191, 0,    0,    2049,
    0,    2025, 2027, 1851, 2039, 0,    1864, 2050, 2051, 2029, 2031, 0,    2139, 0,    0,    2040, 1973, 1974, 0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1986, 1985, 2041, 2121, 0,    0,    2178,
    2179, 2042, 0,    2010, 2005, 1894, 1895, 1895, 0,    0,    2185, 0,    0,    0,    2047, 2056, 0,    0,    0,
    0,    0,    2063, 0,    2084, 0,    0,    0,    0,    2204, 2200, 2052, 2054, 1996, 2149, 1886, 1887, 0,    0,
    0,    0,    0,    0,    0,    0,    1970, 1953, 1947, 0,    1951, 1955, 0,    0,    0,    0,    1939, 1965, 1935,
    0,    0,    1941, 0,    1966, 0,    0,    0,    2018, 1700, 1700, 1700, 1700, 1697, 0,    0,    0,    0,    2518,
    0,    0,    1787, 1765, 1767, 1774, 1787, 1792, 2020, 1818, 2021, 0,    2233, 0,    1740, 1709, 1709, 1709, 2017,
    0,    0,    0,    1708, 234,  0,    267,  254,  0,    1545, 2236, 0,    1712, 0,    2140, 1213, 1211, 1212, 1714,
    1734, 1733, 0,    1724, 1758, 1722, 1621, 0,    1619, 1614, 0,    1615, 2213, 0,    1611, 1646, 0,    0,    1823,
    0,    1645, 0,    1852, 1227, 1228, 0,    1251, 0,    1403, 1329, 1379, 1507, 1180, 1181, 0,    1179, 0,    0,
    0,    540,  1196, 0,    0,    0,    915,  0,    0,    544,  0,    1523, 0,    1422, 1364, 811,  812,  0,    823,
    0,    832,  831,  0,    0,    819,  0,    0,    0,    0,    818,  837,  784,  838,  840,  0,    0,    839,  842,
    847,  1376, 0,    878,  1353, 0,    1400, 1254, 1276, 0,    1222, 0,    0,    0,    642,  0,    0,    0,    0,
    0,    0,    611,  636,  635,  0,    640,  0,    0,    615,  0,    512,  337,  404,  0,    0,    0,    325,  335,
    0,    0,    340,  2690, 0,    0,    333,  354,  346,  355,  347,  858,  859,  857,  853,  0,    860,  862,  415,
    0,    386,  0,    0,    0,    360,  0,    0,    599,  0,    0,    0,    0,    1410, 0,    1376, 0,    318,  1349,
    0,    1398, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1411, 1385, 0,    0,    0,    165,
    164,  0,    175,  0,    0,    173,  0,    0,    184,  185,  174,  0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    424,
    379,  0,    976,  0,    0,    0,    426,  0,    1326, 0,    0,    0,    149,  153,  152,  154,  151,  150,  0,
    141,  142,  0,    0,    1409, 1338, 1046, 0,    0,    1047, 1055, 0,    0,    1048, 0,    0,    1057, 0,    0,
    431,  441,  915,  0,    0,    0,    1835, 0,    1903, 1904, 1905, 1906, 1907, 1908, 0,    1902, 1909, 958,  967,
    2459, 962,  2129, 2130, 965,  959,  961,  964,  966,  963,  0,    1507, 1506, 0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    526,  0,    0,    520,  0,    0,    1284, 511,  514,  515,  0,    0,    804,  807,
    805,  806,  836,  0,    0,    0,    533,  0,    0,    180,  0,    0,    181,  179,  0,    0,    388,  0,    219,
    492,  0,    0,    796,  896,  899,  892,  0,    972,  974,  944,  0,    850,  132,  0,    0,    1603, 603,  0,
    586,  582,  584,  583,  585,  0,    592,  387,  0,    0,    680,  592,  0,    968,  0,    0,    1197, 1223, 0,
    0,    0,    1277, 1281, 1278, 0,    0,    1238, 0,    1253, 1216, 1438, 1439, 1436, 1437, 0,    0,    1648, 1296,
    0,    377,  1294, 1014, 0,    1005, 0,    1007, 1298, 377,  377,  883,  0,    793,  0,    0,    0,    1146, 1167,
    0,    1163, 0,    0,    1129, 1172, 1631, 1629, 1636, 678,  0,    1175, 0,    1130, 1174, 0,    0,    0,    0,
    0,    2160, 1870, 0,    0,    2195, 2189, 0,    2022, 2161, 0,    2173, 2172, 1972, 2174, 0,    1991, 0,    0,
    1983, 1981, 1982, 1975, 1976, 1977, 1978, 1979, 1980, 1984, 2183, 2182, 2176, 2177, 0,    2008, 1890, 1888, 0,
    2044, 2045, 2046, 2184, 2057, 0,    0,    2301, 2085, 2061, 2078, 2077, 0,    0,    0,    2065, 0,    0,    2074,
    0,    0,    0,    2201, 0,    2123, 1876, 1909, 1915, 0,    0,    1938, 2188, 1956, 0,    0,    0,    1934, 0,
    0,    0,    0,    1943, 2139, 0,    0,    0,    0,    2103, 2098, 2099, 0,    0,    0,    0,    1691, 1690, 1696,
    1787, 1792, 0,    0,    1674, 0,    1774, 0,    1786, 1772, 1785, 0,    0,    1798, 1796, 0,    1798, 0,    1798,
    0,    1769, 0,    1788, 1770, 1785, 1817, 1810, 0,    2234, 1819, 0,    1749, 0,    0,    0,    0,    2153, 0,
    2151, 2012, 0,    2210, 1685, 0,    1713, 1723, 2332, 1821, 1620, 0,    0,    1617, 1618, 0,    0,    1640, 1619,
    1643, 1248, 0,    0,    1240, 0,    1186, 1187, 1185, 1188, 0,    0,    0,    915,  0,    0,    563,  0,    1204,
    1204, 0,    0,    546,  595,  1284, 918,  0,    0,    0,    916,  377,  1334, 0,    833,  0,    0,    828,  826,
    825,  827,  785,  1420, 1335, 0,    0,    0,    0,    1255, 0,    0,    1352, 611,  0,    0,    0,    624,  627,
    0,    0,    620,  0,    0,    0,    0,    645,  0,    0,    615,  639,  0,    610,  609,  0,    406,  0,    518,
    0,    330,  1377, 0,    0,    0,    329,  0,    377,  377,  377,  377,  855,  385,  390,  391,  394,  0,    556,
    1207, 596,  0,    0,    417,  658,  0,    611,  618,  642,  642,  399,  396,  2925, 649,  650,  0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    999,  982,  0,    0,    1000, 1001, 0,    0,    0,
    1301, 1302, 1300, 169,  0,    166,  167,  170,  0,    194,  0,    0,    191,  188,  187,  172,  171,  1362, 1346,
    1395, 0,    0,    1344, 0,    1389, 1359, 1355, 0,    0,    0,    0,    0,    1419, 1371, 1393, 1418, 1369, 1391,
    1368, 1390, 1370, 1392, 1363, 0,    1828, 979,  0,    0,    0,    377,  377,  885,  1348, 1397, 136,  0,    135,
    137,  0,    1049, 0,    0,    1050, 1052, 467,  0,    470,  477,  445,  450,  1527, 0,    1527, 0,    447,  451,
    1527, 446,  0,    1527, 0,    1527, 443,  937,  0,    0,    0,    1831, 1836, 1911, 1844, 914,  0,    1498, 1497,
    1496, 1500, 1499, 1502, 1501, 1493, 1492, 1505, 1504, 1491, 1490, 1495, 1494, 0,    516,  0,    524,  528,  529,
    527,  519,  1284, 552,  594,  0,    0,    927,  0,    802,  494,  0,    0,    530,  0,    498,  183,  182,  0,
    0,    0,    223,  0,    0,    901,  905,  946,  0,    1827, 879,  388,  0,    494,  680,  602,  667,  0,    499,
    505,  506,  0,    590,  0,    586,  0,    0,    677,  1485, 726,  603,  749,  971,  0,    970,  0,    0,    1226,
    1243, 1244, 0,    0,    1284, 1283, 0,    787,  377,  846,  377,  377,  1444, 924,  0,    1159, 1158, 1157, 779,
    0,    1161, 679,  377,  0,    0,    0,    0,    0,    1106, 1085, 1105, 0,    2192, 2038, 2048, 2171, 0,    0,
    1992, 0,    0,    2009, 2043, 2927, 0,    0,    2062, 0,    0,    2082, 2083, 2064, 0,    2448, 2069, 0,    0,
    0,    2055, 0,    2203, 2199, 2254, 1962, 1960, 1957, 0,    1958, 0,    0,    1940, 1936, 0,    1942, 1967, 2089,
    0,    2105, 2102, 1695, 1694, 1693, 1692, 1773, 1771, 0,    0,    1776, 1783, 0,    1768, 0,    1797, 1793, 0,
    1794, 0,    0,    1795, 0,    0,    1783, 0,    1709, 0,    0,    2094, 2015, 2016, 2013, 1709, 2251, 1909, 0,
    0,    1613, 1616, 0,    1647, 1638, 1241, 1249, 1513, 0,    0,    0,    542,  0,    1284, 0,    0,    0,    1207,
    1207, 0,    1284, 594,  920,  919,  922,  917,  921,  1524, 0,    820,  821,  1354, 0,    1401, 1360, 0,    1635,
    615,  0,    623,  0,    0,    631,  0,    0,    401,  0,    631,  0,    648,  0,    647,  0,    408,  0,    0,
    0,    0,    851,  0,    509,  326,  327,  328,  331,  379,  339,  411,  410,  332,  0,    597,  0,    0,    1205,
    558,  0,    661,  416,  0,    605,  611,  611,  0,    0,    414,  0,    418,  396,  0,    0,    1350, 0,    1399,
    1357, 1412, 1339, 1386, 0,    0,    988,  0,    0,    0,    0,    1413, 1340, 1387, 163,  192,  0,    0,    0,
    0,    189,  0,    1635, 0,    0,    0,    0,    1533, 0,    378,  978,  977,  379,  425,  1373, 143,  0,    1053,
    1054, 468,  157,  0,    442,  0,    475,  0,    473,  472,  474,  0,    458,  0,    0,    0,    0,    0,    461,
    0,    0,    0,    1832, 0,    1315, 1315, 0,    915,  1503, 0,    0,    513,  594,  562,  0,    521,  0,    0,
    0,    0,    0,    507,  508,  0,    0,    850,  0,    0,    0,    218,  494,  850,  900,  0,    0,    0,    975,
    0,    496,  0,    1601, 0,    676,  495,  0,    0,    592,  0,    590,  0,    587,  0,    591,  0,    1478, 730,
    0,    725,  727,  729,  0,    748,  0,    0,    1282, 0,    1286, 0,    1237, 1214, 1820, 0,    791,  1316, 1006,
    1008, 884,  1164, 1171, 377,  1086, 1087, 1088, 1089, 0,    1987, 0,    0,    0,    0,    2058, 0,    2059, 2087,
    2086, 2066, 2070, 0,    2067, 2068, 2202, 1959, 1963, 1961, 1944, 2091, 0,    1709, 1813, 0,    1816, 0,    1775,
    0,    0,    1777, 0,    0,    1779, 1781, 0,    0,    0,    0,    0,    2237, 0,    2331, 2897, 2915, 0,    1739,
    1741, 1743, 1748, 0,    1675, 0,    268,  2141, 1822, 1644, 1165, 0,    377,  1204, 594,  564,  2459, 565,  1203,
    1210, 1210, 0,    594,  915,  813,  0,    0,    311,  407,  0,    625,  622,  630,  629,  633,  628,  1709, 1709,
    632,  643,  0,    646,  634,  608,  614,  849,  0,    517,  381,  393,  598,  557,  1206, 662,  619,  606,  615,
    604,  605,  605,  397,  398,  0,    419,  0,    1635, 0,    0,    0,    995,  983,  0,    0,    1002, 195,  196,
    186,  190,  0,    307,  1356, 0,    0,    0,    0,    0,    377,  1056, 444,  0,    471,  480,  0,    478,  448,
    453,  0,    457,  455,  454,  449,  452,  459,  460,  1315, 0,    1312, 1311, 913,  0,    550,  522,  0,    573,
    0,    0,    928,  0,    0,    0,    539,  538,  535,  534,  536,  537,  532,  531,  875,  992,  388,  1485, 863,
    902,  903,  898,  0,    0,    0,    586,  582,  665,  500,  512,  603,  0,    592,  588,  589,  0,    0,    0,
    0,    0,    731,  1535, 0,    1198, 1285, 0,    0,    0,    786,  0,    0,    790,  781,  1131, 2194, 1988, 0,
    1989, 0,    0,    0,    2072, 2071, 0,    2108, 1818, 0,    0,    1812, 0,    0,    1784, 1800, 0,    1780, 1778,
    1789, 0,    1791, 2012, 0,    0,    0,    1747, 0,    2093, 2095, 0,    2014, 1182, 0,    1183, 1207, 568,  0,
    1213, 1213, 552,  915,  543,  1361, 0,    0,    0,    0,    0,    0,    852,  0,    334,  657,  607,  615,  615,
    0,    0,    319,  1358, 0,    986,  0,    997,  995,  0,    0,    0,    1529, 0,    1530, 1531, 1534, 427,  733,
    466,  476,  0,    456,  1310, 1314, 1313, 0,    0,    523,  559,  560,  561,  0,    525,  569,  570,  0,    925,
    0,    930,  0,    0,    0,    0,    0,    1479, 0,    0,    1485, 590,  586,  663,  664,  0,    510,  667,  581,
    603,  0,    1482, 0,    0,    0,    0,    728,  388,  0,    1284, 1287, 1442, 789,  788,  1990, 2075, 2060, 2088,
    2073, 2104, 0,    0,    0,    1811, 1814, 0,    1782, 0,    1790, 0,    0,    0,    1742, 0,    0,    0,    1210,
    0,    915,  0,    1201, 1200, 562,  545,  1635, 0,    626,  0,    0,    644,  380,  655,  656,  0,    0,    0,
    0,    993,  996,  984,  997,  1004, 1003, 1635, 0,    0,    437,  0,    479,  0,    549,  0,    0,    0,    571,
    0,    572,  593,  0,    929,  0,    850,  991,  0,    0,    904,  0,    1480, 592,  590,  0,    483,  667,  1483,
    1484, 690,  0,    0,    592,  1199, 1215, 1441, 1440, 1687, 2884, 2332, 0,    0,    2120, 2109, 2120, 2101, 0,
    1799, 1745, 0,    1744, 2096, 2097, 377,  1213, 0,    547,  566,  573,  312,  621,  402,  0,    1635, 0,    0,
    985,  308,  1532, 735,  0,    430,  0,    905,  578,  0,    577,  0,    575,  574,  926,  931,  876,  981,  1485,
    908,  603,  592,  0,    481,  688,  0,    1608, 1610, 700,  1820, 1424, 1687, 1423, 1425, 1433, 1430, 1432, 1431,
    1429, 0,    2113, 2112, 2111, 2115, 2114, 0,    2106, 2107, 1815, 1746, 1184, 1202, 0,    915,  395,  320,  987,
    994,  0,    0,    0,    0,    576,  580,  579,  1481, 910,  0,    906,  909,  911,  912,  667,  603,  670,  0,
    689,  690,  0,    0,    719,  1189, 0,    1434, 1428, 1674, 1659, 0,    0,    2117, 0,    2118, 567,  548,  734,
    436,  0,    0,    886,  0,    484,  667,  0,    613,  673,  669,  691,  693,  694,  0,    696,  687,  1609, 709,
    1527, 1527, 2378, 710,  1527, 1527, 2375, 1527, 699,  0,    0,    703,  701,  0,    0,    745,  1426, 1687, 2110,
    2116, 2119, 743,  0,    907,  482,  665,  0,    666,  0,    672,  674,  692,  695,  0,    0,    0,    0,    0,
    0,    0,    0,    709,  1527, 1527, 0,    710,  1527, 1527, 0,    1527, 697,  702,  698,  0,    0,    0,    718,
    738,  1427, 741,  742,  732,  0,    0,    0,    0,    654,  0,    611,  616,  642,  642,  0,    675,  707,  712,
    0,    715,  714,  708,  711,  716,  717,  704,  0,    705,  721,  0,    722,  0,    1507, 0,    739,  603,  0,
    744,  908,  0,    0,    659,  612,  0,    605,  611,  611,  0,    713,  0,    720,  0,    724,  0,    735,  681,
    0,    0,    0,    660,  617,  615,  605,  605,  0,    706,  723,  747,  746,  740,  0,    887,  671,  653,  615,
    615,  668,  0,    651,  652,  743,  737};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] = {
    -4823, -4823, -4823, 3622,  -4823, 2821,  -4823, -4823, -4823, -4823, -4823, -4823, -4823, -4823, -4823, -877,
    441,   2943,  -4823, -577,  -4823, -4823, -4823, -4823, -3700, -4823, 1171,  -4823, -377,  -4823, -4823, 1332,
    -4823, -4823, -4823, -4823, -4823, -4823, -4823, 3563,  -4823, -4823, 1785,  -2551, -4823, -4823, 148,   3522,
    -1204, 141,   3187,  1456,  -4823, -1065, -4823, -4823, -598,  158,   -4823, 3558,  836,   -4823, -4823, -4823,
    -4823, -4823, -4823, -4823, -4823, -787,  -957,  1267,  260,   -3340, -4823, -4823, -1328, -3336, -4823, 598,
    -341,  -4823, -2287, -1352, -4823, -4823, -4823, 1884,  -4823, -4823, -4823, 1084,  -4823, 497,   -618,  -4823,
    -4823, -4823, -4823, -4823, -4823, -4823, -382,  -4823, -4823, -777,  19,    45,    -2548, -433,  -4823, -4823,
    435,   -437,  -3739, -1220, -4823, -3680, -4823, -4823, -63,   -4823, -4367, -4823, -414,  -1311, 1389,  -4823,
    -667,  -1055, 1707,  -4823, -307,  -845,  -4823, -246,  -4823, -922,  -774,  -772,  -867,  -648,  -3885, -4375,
    -3931, -4405, 1399,  -293,  -3120, -4394, -4813, -4823, -3696, -4823, -4203, -4823, -4207, -3572, -2355, -3565,
    -268,  1253,  -2955, 670,   -4823, -3732, -3074, -4823, -4136, 626,   -4823, -1131, -292,  -4823, -4823, -4823,
    -4823, -1052, -3860, -4823, -4823, -4823, -3623, 165,   -4823, -3285, -4823, -4823, -4823, -4823, -991,  -4823,
    -4823, -4823, -4823, -1078, -1033, -4823, -4823, -4823, -1130, -4823, -4823, -641,  -4823, -4823, -1074, -4823,
    -4823, -1154, -4823, -4823, 171,   -4823, -4823, 180,   183,   -4823, -4823, -1426, -1348, -4823, -814,  -4823,
    -4823, -4823, -3039, -4823, -4823, -4823, -4823, 109,   -4823, -4823, -4823, -4823, 489,   -4823, -4823, -4823,
    -4823, -4823, -4823, -2804, 1863,  1865,  -4823, -4823, -3301, -4823, -852,  -4823, 666,   -3092, 1311,  -4823,
    -4823, -4823, 2919,  -4823, -4823, -4823, -4823, -4823, -4823, -1508, -4823, -4823, 185,   -4823, 1874,  1074,
    -4823, -4823, -4823, -898,  -1100, -988,  -4823, -3080, -4823, -4823, -4823, -4823, -355,  -4823, -4823, -4823,
    -4823, -4823, -4823, -4823, -844,  -4823, 1134,  -3731, -4823, -4823, 449,   -4823, -4823, -4823, -4823, -4823,
    -834,  -281,  2944,  -4823, -698,  -807,  -4823, -4823, -4823, -279,  -4823, -4823, -4823, -4823, -4823, -4823,
    -987,  74,    -1463, -4823, -4823, -4823, -4823, -2446, -4823, -4823, -4823, -2037, -4823, 4494,  2385,  1316,
    190,   -4823, -31,   89,    3423,  -1053, -2722, 417,   -460,  -4823, -1660, -4823, -4823, -4823, -2647, -4823,
    -4823, -4823, -4823, -3600, 192,   -4823, 3427,  -4823, 469,   -4823, -4651, -4095, -4467, -4656, -3585, -4823,
    -4823, -1026, -4823, -4823, -4823, -1315, 2205,  -1277, -4823, -2284, 470,   1489,  -954,  -2833, -3909, -645,
    -3359, -4823, -3864, -604,  -4823, -4823, -4823, -4823, -4823, -4823, -4823, -1024, -615,  -4823, -4823, 3883,
    -4823, -3819, -4823, -4823, -4823, -4823, 1320,  -4823, -4823, -4823, -1317, 1236,  -4823, -4823, -4823, -4823,
    -4823, -827,  -985,  -4823, -4823, -4823, 193,   -4823, -4823, -4823, -4823, 2503,  -870,  -699,  3752,  195,
    -4822, -4823, -4823, -4823, -4823, -3234, -4823, -4823, -4823, -4823, -4823, -4823, -4823, -4823, -951,  -4823,
    -4823, -4823, -4823, -4823, -4823, -4823, 2278,  2282,  72,    5,     -4823, -4823, -4823, -1182, -4823, -876,
    3469,  -4823, 2874,  -4823, -4823, -4823, -4823, 1563,  196,   507,   -4823, -4823, -921,  6,     -4823, -4823,
    286,   -3506, 7,     -4823, -4823, -4823, -4823, -2266, -4823, 14,    -4823, 834,   -4823, -4823, -2870, -4823,
    197,   23,    -4823, -4823, 1,     -4823, 15,    -47,   -19,   -10,   12,    3751,  3301,  -4823, -4823, -4823,
    -26,   2005,  -4823, -810,  -150,  -594,  1565,  -590,  2246,  3280,  3262,  -4823, 1560,  2284,  -2109, -2113,
    -4823, -4823, -726,  -607,  -4823, -582,  2260,  -4823, 3281,  -4823, -4823, -4823, 1564,  1568,  -3500, 925,
    -3499, -3469, 375,   360,   -1236, -371,  36,    3814,  3288,  933,   -559,  -4823, -4823, -557,  -4688, 878,
    -4823, -4473, -2428, -473,  2000,  -1481, -4823, -4823, -1070, 6658,  -4823, -4823, -4823, 11535, 12041, -4823,
    -4823, 14082, 14628, -4823, -933,  985,   15040, -610,  -1107, -1749, -1113, 14270, -1518, -1224, -4823, -4823,
    -2725, -4823, -3614, -2660, -4823, -4823, -4823, -319,  1004,  765,   -4823, -4823, -4823, -4823, -4823, -4823,
    -679,  -4823, -674,  -4823, -4823, -4823, -660,  -3840, -748,  -1618, -4823, -186,  -4823, 16233, 1634,  -4823,
    -965,  -2840, -2823, -3455, -1641, -4823, -4823, -4823, -4823, -4823, -4823, -4823, -3113, -3385, -725,  1706,
    -4823, -4823, 1808,  -4823, -4823, -4823, -4823, -4823, 1014,  -4823, -4823, -1210, -819,  -2714, 1715,  -2142,
    -4823, -806,  -4823, 916,   2506,  -762,  97,    -1195, 13803, -503,  -2423, -1157, -1429, -4823, -149,  -3584,
    -21,   9,     -72,   863,   -647,  -5,    4201,  3857,  -646,  -983,  8175,  -4823, -4823, -4229, 3425,  11188,
    11927, -3290};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] = {
    0,    50,   51,   52,   53,   2573, 3335, 54,   55,   56,   57,   58,   3326, 3327, 59,   1336, 2637, 2508, 3254,
    3411, 3412, 3256, 3884, 4420, 3885, 4808, 3881, 4416, 4417, 60,   61,   1426, 62,   63,   64,   65,   66,   67,
    68,   1352, 69,   70,   991,  1582, 2647, 71,   2351, 783,  784,  785,  2159, 2160, 2579, 2161, 2149, 1245, 1678,
    1377, 758,  759,  1338, 1378, 73,   74,   1239, 2140, 75,   76,   77,   1408, 1409, 1346, 1628, 4452, 5201, 3204,
    2479, 3450, 3205, 3206, 4781, 4779, 3813, 2470, 1410, 78,   1476, 1477, 79,   80,   3359, 1523, 5401, 2606, 3952,
    3953, 4490, 604,  2603, 4828, 4829, 4473, 4474, 4835, 5070, 5071, 696,  1578, 3444, 4047, 3401, 4558, 3402, 4559,
    3403, 3404, 4560, 3387, 4002, 4754, 4003, 4004, 3405, 4535, 5104, 3406, 2366, 5234, 1099, 1700, 1698, 4368, 4369,
    5091, 4290, 4291, 5302, 5239, 5240, 5241, 5408, 4565, 3448, 4053, 4568, 4861, 3075, 3846, 2480, 4557, 5034, 5035,
    3809, 5537, 4348, 5577, 4376, 4330, 4331, 4332, 5012, 3155, 3156, 3806, 3804, 3157, 3158, 4340, 4341, 3159, 4386,
    5579, 4378, 5580, 5581, 4379, 4380, 5259, 4888, 5539, 5499, 5500, 5501, 697,  1604, 3526, 83,   638,  1608, 5269,
    5420, 5472, 5476, 5519, 5520, 5521, 5522, 5525, 5566, 5597, 5598, 4902, 4903, 4904, 4905, 5330, 5331, 5603, 5604,
    5571, 5567, 5605, 698,  2687, 639,  699,  2649, 87,   2678, 1446, 1447, 2516, 3975, 3507, 88,   1014, 3773, 4918,
    5143, 5144, 89,   221,  90,   1586, 91,   92,   2633, 3393, 93,   2383, 3092, 94,   95,   3119, 3120, 3121, 96,
    97,   3811, 4751, 1411, 3192, 3193, 3194, 3195, 3835, 98,   1584, 1452, 2656, 99,   100,  101,  102,  103,  2562,
    104,  105,  2650, 1594, 2668, 2669, 4547, 4879, 5113, 4881, 5463, 5464, 4853, 3752, 4304, 107,  108,  4528, 4529,
    5246, 109,  2381, 110,  111,  112,  640,  1562, 2625, 2626, 3976, 2690, 3455, 3456, 4035, 4036, 113,  3300, 114,
    4399, 4400, 641,  5249, 5213, 5323, 115,  116,  4403, 4404, 117,  118,  119,  120,  121,  690,  1064, 1065, 1328,
    122,  2264, 123,  965,  3350, 124,  1130, 2814, 4608, 125,  722,  1079, 1080, 2651, 127,  731,  2792, 733,  1714,
    3509, 3510, 4108, 2760, 871,  128,  129,  2772, 2795, 130,  1339, 2357, 2358, 4285, 2652, 642,  1613, 2693, 3070,
    5134, 4292, 4711, 4769, 2996, 3704, 132,  643,  1382, 2433, 2696, 3461, 2329, 2330, 2964, 4072, 2332, 3463, 2333,
    1322, 2334, 3468, 3469, 3470, 4068, 4076, 4912, 4913, 133,  1380, 2431, 134,  135,  136,  1423, 896,  137,  655,
    656,  138,  5084, 139,  1026, 140,  750,  1728, 141,  142,  143,  2450, 3819, 144,  145,  146,  5428, 5478, 5479,
    5480, 4081, 5367, 147,  5430, 1109, 149,  150,  151,  188,  930,  931,  932,  2653, 4900, 153,  154,  2629, 3386,
    3984, 155,  156,  2352, 3060, 157,  158,  159,  160,  5543, 161,  162,  163,  164,  1500, 165,  1275, 1276, 166,
    167,  599,  1295, 801,  1279, 1287, 168,  701,  1070, 1073, 1074, 1075, 1680, 169,  1112, 2783, 702,  1067, 171,
    5421, 5422, 703,  3023, 3715, 3716, 3719, 704,  3020, 174,  1720, 2777, 2780, 3522, 705,  3027, 3028, 3029, 3030,
    3031, 3721, 706,  724,  1017, 2702, 707,  178,  1207, 180,  181,  182,  812,  805,  806,  184,  2133, 2954, 739,
    1299, 771,  820,  3689, 2284, 2285, 2309, 2310, 1308, 1309, 2297, 2301, 2302, 3009, 3002, 2290, 4249, 4977, 4978,
    4685, 2305, 2306, 1311, 1312, 1313, 2314, 185,  2957, 3670, 3671, 3672, 4226, 4227, 4241, 4237, 4672, 4964, 3673,
    1107, 1319, 3674, 4954, 4955, 5160, 4244, 3681, 3713, 3433, 3434, 3435, 2335, 2612, 1547, 1208, 1548, 2623, 1209,
    1764, 1550, 1210, 1211, 1212, 1553, 1213, 1214, 1215, 1216, 1747, 1812, 1217, 1218, 1784, 2620, 2621, 1669, 2854,
    1220, 3594, 2865, 1221, 1222, 3676, 1223, 4179, 4635, 4623, 2883, 2884, 2156, 4175, 3610, 2129, 2944, 4982, 5177,
    5178, 3656, 4209, 4656, 4953, 5286, 5372, 5373, 5442, 1224, 2941, 2122, 898,  1225, 3978, 2124, 2876, 2966, 2967,
    1723, 1745, 2820, 2838, 2839, 2851, 3567, 2858, 2863, 3590, 3591, 2877, 2910, 1226, 2823, 2824, 3547, 3550, 1749,
    1227, 3619, 3620, 4184, 1228, 1268, 1269, 1742, 2905, 1282, 1283, 803,  1229, 1230, 1231, 1715, 794,  4960, 2274,
    860,  3231, 2255, 934,  736,  1232, 1233, 1234, 1235, 1037, 1490, 1038, 1416, 595,  854,  875,  3196, 596,  2125,
    2126, 3160, 3161, 597,  856,  2260};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] = {
    725,   177,   811,   763,   987,   725,   172,   173,   1020,  1635,  1677,  1240,  183,   1314,  175,   179,
    726,   796,   897,   81,    1645,  726,   1320,  1566,  1428,  657,   605,   725,   1047,  2365,  593,   821,
    183,   737,   1323,  179,   2449,  647,   1059,  2457,  852,   1481,  1697,  809,   2331,  2761,  3038,  3040,
    3016,  1076,  872,   2481,  1639,  2483,  1451,  2487,  1018,  637,   1044,  2261,  2609,  1498,  1100,  1101,
    810,   2898,  2434,  1105,  1415,  1625,  2581,  3529,  1735,  2473,  2458,  3233,  2443,  1786,  793,   3779,
    3802,  1254,  2304,  3812,  1758,  1759,  3980,  4031,  3400,  2673,  3843,  2273,  700,   3419,  4011,  2622,
    1564,  3830,  2528,  3832,  1569,  1670,  2819,  1774,  2331,  1573,  4342,  973,   4375,  4075,  4366,  732,
    1579,  2261,  2281,  4377,  4262,  4058,  1445,  3682,  3683,  3297,  1598,  764,   1460,  3513,  689,   4572,
    874,   2984,  1020,  4350,  4293,  1486,  901,   2542,  2543,  4526,  3684,  4747,  4750,  2538,  4287,  1576,
    4771,  918,   3985,  3986,  3987,  3988,  3989,  3990,  2732,  1596,  3154,  3355,  3720,  4045,  72,    2856,
    1028,  3165,  4563,  4583,  823,   82,    2424,  2442,  4223,  3165,  2343,  84,    815,   824,   757,   4240,
    2679,  4907,  1247,  3623,  85,    790,   4419,  86,    2694,  106,   4196,  782,   4892,  3014,  126,   3011,
    131,   148,   1671,  152,   170,   176,   822,   4712,  3803,  3726,  4742,  4901,  4238,  4154,  4968,  4266,
    4970,  -2377, 1751,  1752,  4334,  4334,  4334,  4334,  3414,  -2417, -2447, 708,   1810,  -2481, 3571,  5204,
    5205,  -2298, 1379,  4339,  5139,  708,   1307,  3675,  4335,  4337,  708,   -1885, 1771,  3213,  1310,  653,
    4066,  1807,  5502,  799,   4997,  4998,  -2270, 1081,  911,   5600,  4156,  -2271, 4014,  2262,  -2270, 653,
    5484,  1560,  5135,  -2271, -2244, 1679,  2670,  2549,  857,   859,   4334,  1595,  863,   -1885, 865,   1349,
    -2941, 5010,  5212,  2554,  -1880, 1126,  1491,  -1852, -2941, -1865, -1892, 2903,  2256,  4384,  1718,  5251,
    -1885, 653,   915,   2459,  2371,  921,   3675,  3484,  3677,  3486,  881,   4735,  1521,  -2127, 653,   653,
    1256,  653,   905,   653,   -2127, 653,   5001,  3527,  3338,  5335,  923,   920,   3780,  1412,  3725,  869,
    2447,  2956,  708,   1000,  2794,  4719,  3548,  603,   4573,  -1880, 5535,  5485,  1565,  2359,  2682,  3114,
    1513,  3441,  1096,  1817,  1060,  5187,  5188,  653,   2256,  2146,  1412,  653,   2373,  2556,  2360,  708,
    2945,  708,   1244,  1491,  -2380, 1565,  5004,  3677,  1557,  5056,  1565,  714,   2268,  708,   808,   708,
    2359,  1495,  205,   714,   714,   5365,  1350,  714,   653,   4014,  1085,  714,   -469,  3960,  1565,  715,
    1498,  2773,  1565,  4113,  1808,  -1895, 1626,  715,   715,   5127,  1854,  715,   5207,  5437,  1646,  715,
    38,    5128,  4895,  825,   -2445, 3214,  2361,  5230,  5486,  3200,  1781,  3115,  2640,  3086,  4896,  1491,
    1020,  2137,  1626,  1626,  -1895, 2771,  -157,  2671,  2362,  4863,  2484,  -157,  5459,  1020,  42,    -843,
    5351,  897,   4106,  4715,  1303,  1786,  2150,  4553,  3397,  2361,  3961,  2162,  2162,  1817,  2147,  2645,
    1817,  3882,  3807,  186,   3518,  5089,  4135,  2154,  1716,  4869,  3127,  2362,  3201,  1758,  1759,  3571,
    1665,  3128,  1725,  4710,  46,    1774,  2268,  1249,  2489,  2268,  598,   3841,  3398,  708,   4155,  1736,
    2263,  826,   2588,  1020,  980,   2374,  981,   897,   2448,  2592,  3842,  2903,  2142,  187,   2155,  1782,
    5169,  1546,  4870,  3808,  1854,  1557,  4280,  1854,  2774,  1305,  3883,  2756,  2485,  1023,  714,   2762,
    2947,  2764,  1257,  2641,  2767,  2938,  2769,  5124,  1035,  3519,  2646,  1496,  2939,  38,    1637,  5438,
    5006,  4114,  715,   1739,  2816,  4864,  1536,  -2143, 2617,  1637,  5366,  4107,  1637,  5031,  -2143, 2946,
    2410,  982,   5231,  3202,  2584,  989,   1616,  3980,  1517,  2855,  2418,  42,    2363,  5129,  2148,  1097,
    999,   3887,  3118,  2375,  2557,  2524,  2403,  2526,  2881,  2408,  5460,  2460,  654,   4897,  5601,  1637,
    870,   3397,  2627,  2372,  2469,  5608,  49,    2461,  2531,  5011,  5454,  5185,  5336,  2683,  3780,  2363,
    5461,  46,    800,   5190,  1751,  1752,  2261,  2904,  2533,  -736,  2555,  1020,  2822,  1771,  47,    4720,
    4375,  1561,  966,   1020,  1020,  4372,  -2445, 4377,  3339,  2550,  -2127, 924,   2514,  5363,  1719,  2517,
    2518,  1746,  3397,  2580,  1001,  4067,  4731,  1422,  2496,  1104,  2462,  978,   3149,  1351,  1722,  2672,
    5582,  2749,  2151,  1258,  5384,  1061,  3745,  1627,  811,   2604,  2605,  2144,  2364,  5487,  3571,  4827,
    2691,  3215,  1122,  1746,  4858,  3216,  4372,  1019,  657,   5503,  4770,  1104,  1811,  4297,  4157,  5504,
    2856,  1315,  1637,  1627,  1627,  3722,  827,   2736,  4894,  4774,  971,   1719,  2775,  3149,  974,   2364,
    725,   4542,  725,   3203,  725,   3087,  4554,  2589,  933,   5505,  725,   1092,  1093,  967,   2776,  997,
    1078,  1077,  1083,  49,    1087,  964,   810,   1557,  4802,  3583,  1091,  3958,  2757,  5300,  -2377, 4915,
    4240,  4326,  720,   721,   2315,  2768,  -2417, -2447, 5261,  4669,  -2481, 3101,  2316,  4673,  -2298, 2430,
    -1885, 5477,  1068,  4551,  4645,  5391,  1561,  -2445, 4334,  4334,  1094,  -2270, 4500,  4662,  4614,  1110,
    -2271, 3728,  4334,  3729,  4733,  4734,  -2445, 1266,  4334,  -2244, 3571,  1267,  4901,  897,   4339,  1072,
    4698,  3980,  -1885, 1557,  4571,  -2941, 1127,  1106,  2815,  -1880, 2818,  4748,  1757,  1237,  1763,  -1892,
    1246,  1019,  1248,  1502,  2826,  49,    1813,  1781,  2830,  823,   -2344, 5008,  2740,  -1852, 1508,  5629,
    2842,  2843,  824,   2135,  2971,  2742,  4738,  3643,  4740,  2503,  1413,  1414,  1557,  2860,  2862,  177,
    5376,  5642,  5643,  -2362, 172,   173,   1781,  1335,  -3011, 2878,  183,   822,   175,   179,   2121,  5202,
    1106,  81,    2940,  2891,  2846,  2847,  3573,  1413,  1414,  720,   721,   4992,  -2488, 2609,  2901,  1117,
    -2446, 1667,  5000,  3800,  -2143, 720,   721,   720,   721,   1518,  5637,  1610,  3795,  725,   1614,  1318,
    4256,  -2380, 3888,  4027,  1032,  5356,  1241,  -1852, 1277,  3045,  4491,  2682,  1782,  1637,  4107,  2447,
    5352,  5098,  5198,  1135,  3129,  1349,  3571,  3130,  3707,  1264,  1783,  3011,  979,   1557,  4382,  3939,
    5184,  4278,  3942,  3943,  3800,  3801,  3946,  4189,  1353,  1266,  1356,  1782,  3949,  1267,  4019,  3320,
    1296,  3209,  1506,  -157,  -157,  2664,  -1735, 1626,  2447,  1785,  1243,  3944,  3945,  4556,  1251,  2261,
    1103,  5099,  4005,  1557,  1465,  2118,  2119,  2120,  2121,  5100,  2684,  2685,  3675,  3021,  3073,  3675,
    3099,  -2241, -3012, 2765,  2766,  2500,  3801,  3580,  3581,  3582,  3583,  4353,  1557,  2367,  4077,  1420,
    1421,  5122,  2373,  1135,  5101,  818,   3571,  4396,  3,     4,     1466,  818,   72,    3775,  653,   2288,
    1030,  653,   5417,  82,    1419,  3149,  3328,  769,   2368,  84,    1808,  3357,  1350,  2713,  2613,  4373,
    4049,  1618,  85,    2665,  2593,  86,    5173,  106,   2724,  5315,  5316,  4269,  126,   3677,  131,   148,
    3677,  152,   170,   176,   2731,  653,   2758,  5569,  4374,  1340,  1337,  926,   1557,  3675,  5468,  1816,
    600,   1800,  1817,  1076,  -1852, 2721,  2585,  5257,  5085,  5027,  4375,  5033,  4078,  5102,  653,   1520,
    4373,  4377,  5404,  4586,  1619,  3042,  648,   2448,  757,   1455,  4956,  2268,  3862,  3037,  725,   3114,
    2594,  1837,  2614,  1574,  1575,  4020,  3074,  3321,  3322,  3323,  3003,  2289,  4397,  1135,  3573,  1019,
    3571,  4504,  1104,  5497,  1572,  770,   3514,  5036,  5037,  1854,  183,   1611,  1019,  179,   3677,  3263,
    2448,  3124,  3390,  653,   3977,  2630,  4293,  1271,  2990,  1272,  2991,  4354,  1602,  1605,  1606,  1683,
    3288,  1685,  5054,  1687,  1031,  1689,  927,   1691,  1692,  1693,  738,   1641,  1643,  1721,  1695,  2615,
    1341,  2369,  2616,  1617,  1011,  1033,  1817,  1467,  2708,  3572,  4876,  3115,  3574,  1135,  2447,  1620,
    3571,  3289,  1019,  2523,  3578,  3579,  3580,  3581,  3582,  3583,  5153,  2445,  4334,  2445,  3573,  2268,
    1744,  4334,  928,   3863,  2536,  2707,  4398,  811,   2849,  38,    4334,  5570,  4934,  1561,  3290,  4958,
    1778,  1383,  4961,  1507,  1761,  4079,  5019,  4965,  1627,  3229,  4967,  2666,  2568,  1854,  4073,  2447,
    884,   2447,  4281,  3052,  1621,  1914,  5258,  42,    2667,  5263,  1266,  4006,  3800,  3358,  1267,  1241,
    3776,  3100,  4355,  1789,  929,   4356,  5103,  1557,  4705,  5623,  1930,  1931,  3574,  2617,  3687,  1468,
    4883,  1809,  3349,  3146,  4250,  1805,  1241,  3692,  4075,  2424,  2920,  1814,  5273,  46,    5405,  725,
    5255,  4080,  2856,  2856,  725,   725,   897,   2856,  1587,  2136,  47,    2447,  2472,  2759,  3801,  2447,
    3578,  3579,  3580,  3581,  3582,  3583,  3875,  3391,  3573,  4752,  1019,  1963,  -1852, 2152,  2153,  5229,
    3324,  3325,  1019,  1019,  1342,  1622,  4886,  -1852, 2269,  1757,  -1852, 1327,  3515,  -1852, 1588,  4607,
    2282,  2283,  3118,  2287,  2267,  1012,  2856,  2856,  5235,  824,   824,   3043,  824,   5141,  3044,  4293,
    5203,  5033,  5033,  5406,  649,   1343,  2448,  3864,  3438,  4775,  4776,  2753,  3516,  2447,  -3012, 1651,
    2618,  2486,  822,   822,   4436,  822,   3574,  746,   3573,  3211,  5407,  3331,  1668,  4522,  1470,  2788,
    -1037, 5154,  1344,  2528,  1471,  3392,  3569,  3570,  3865,  725,   1273,  3585,  1013,  1561,  2445,  3022,
    2899,  3332,  5609,  725,   1297,  2445,  650,   2448,  1318,  2448,  2921,  4282,  3333,  -1037, 2922,  3334,
    2166,  2256,  3073,  2445,  2472,  3866,  744,   5059,  3575,  3576,  3577,  5353,  3578,  3579,  3580,  3581,
    3582,  3583,  2447,  5627,  3462,  651,   3574,  652,   4283,  2447,  3629,  3630,  1345,  5182,  2278,  2280,
    1092,  1093,  3794,  601,   2923,  2619,  747,   2447,  1591,  5355,  4697,  4284,  5236,  4682,  616,   2563,
    5632,  5364,  1623,  2448,  2331,  725,   2318,  2448,  725,   725,   2331,  5026,  1592,  5416,  745,   1497,
    3792,  4401,  5641,  4256,  3328,  1472,  1274,  5425,  4689,  3699,  4334,  1589,  5060,  2353,  2419,  5646,
    5647,  5260,  1298,  2537,  5142,  3123,  4339,  2354,  3575,  3576,  3577,  4556,  3578,  3579,  3580,  3581,
    3582,  3583,  897,   2532,  1653,  2401,  2355,  3397,  618,   4523,  5166,  2368,  4601,  5237,  2466,  4437,
    2986,  1637,  3980,  2705,  2754,  2448,  5148,  186,   5064,  2448,  3748,  2438,  653,   2711,  5469,  3793,
    725,   3207,  2463,  2595,  3166,  2535,  3814,  4467,  5419,  768,   1654,  5574,  3768,  4470,  4471,  3890,
    3675,  2755,  3517,  3924,  3675,  2644,  907,   3212,  2116,  2117,  2118,  2119,  2120,  2121,  2445,  2924,
    816,   187,   3149,  1590,  2420,  2563,  4402,  2510,  5435,  2596,  2513,  3224,  2607,  2138,  1327,  908,
    4361,  5061,  3769,  2544,  2545,  2546,  2547,  -492,  4956,  4520,  2448,  4138,  4616,  4139,  4617,  3015,
    3373,  2448,  2447,  2993,  872,   3977,  3578,  3579,  3580,  3581,  3582,  3583,  3504,  2714,  2548,  2448,
    1593,  3677,  5106,  802,   3727,  3677,  748,   749,   5110,  1473,  3045,  817,   2567,  1303,  4275,  4506,
    1337,  2590,  2591,  1337,  2563,  897,   5210,  1303,  2654,  2600,  5215,  5216,  1304,  2139,  2583,  2356,
    653,   2648,  5304,  5305,  4351,  625,   5267,  626,   5496,  4521,  1474,  4550,  2116,  2117,  2118,  2119,
    2120,  2121,  3575,  3576,  3577,  2519,  3578,  3579,  3580,  3581,  3582,  3583,  2855,  2855,  1577,  3210,
    1397,  2855,  2624,  2994,  1337,  5534,  3228,  1475,  1337,  1135,  2986,  5528,  3571,  3894,  -492,  2613,
    3388,  818,   1305,  3145,  791,   2686,  2291,  1655,  2445,  3114,  4293,  4318,  1305,  2659,  2660,  2661,
    2662,  2446,  4589,  5575,  4590,  887,   888,   889,   4140,  890,   891,   892,   893,   894,   895,   3815,
    2855,  2855,  4141,  4618,  183,   3481,  2597,  179,   1135,  5268,  1306,  3571,  2447,  183,   2292,  3770,
    179,   3487,  2677,  4508,  1306,  3291,  3264,  2791,  3816,  2743,  2688,  2744,  4190,  2745,  3267,  2746,
    3269,  2747,  653,   2614,  1557,  2748,  708,   2291,  1557,  1557,  2448,  2726,  1135,  2787,  3262,  3571,
    3482,  3360,  2784,  2785,  2730,  3115,  2828,  2829,  183,   3800,  2786,  179,   765,   2737,  2841,  1656,
    4647,  1072,  2844,  2845,  3275,  2520,  3329,  3477,  3330,  926,   2521,  2778,  1266,  2331,  3963,  2292,
    1267,  5320,  2868,  3116,  2869,  3131,  819,   2331,  5284,  3331,  3241,  2840,  5250,  5087,  2598,  3977,
    2615,  813,   3105,  2616,  3315,  2864,  1781,  3771,  3,     4,     3407,  3801,  2294,  3142,  2896,  3332,
    2897,  4716,  5285,  179,   3117,  5576,  3695,  5447,  1135,  2445,  3333,  3571,  5578,  3334,  1241,  1241,
    3892,  814,   2454,  2293,  2501,  4501,  4389,  3424,  3425,  3426,  3427,  1425,  4648,  5321,  2790,  2789,
    186,   3791,  1257,  3432,  3573,  38,    3309,  3437,  926,   5595,  1557,  1781,  1471,  2455,  4387,  2295,
    793,   27,    693,   3242,  927,   4103,  3057,  3457,  2831,  2813,  653,   3132,  2617,  2294,  3472,  3061,
    3544,  4717,  2377,  42,    2448,  14,    5329,  2331,  1600,  2519,  187,   1782,  2378,  3740,  2617,  3893,
    5576,  5033,  2502,  3573,  4375,  5540,  5140,  5578,  4925,  1783,  5612,  4377,  3118,  2706,  4723,  4724,
    928,   -736,  3574,  5033,  5033,  3244,  19,    2712,  3607,  46,    5014,  2716,  5015,  4388,  4124,  3615,
    2295,  2722,  2723,  3601,  4849,  1431,  47,    3573,  828,   3282,  4075,  2528,  5583,  5630,  5631,  3283,
    1782,  5191,  38,    927,   1663,  2735,  2452,  3062,  2906,  2909,  5545,  3255,  5199,  1472,  1785,  5362,
    4850,  3574,  929,   3675,  1817,  3408,  1432,  3632,  2832,  3675,  3245,  1427,  2464,  3506,  3675,  -199,
    42,    3675,  2856,  1258,  3895,  2856,  2856,  2856,  2856,  2856,  2856,  2856,  2856,  2856,  2856,  928,
    653,   2618,  1122,  3162,  708,   3574,  -1708, 3373,  -199,  2453,  5546,  -1708, 4988,  1807,  4990,  3675,
    4866,  1253,  4097,  3573,  3255,  33,    46,    2856,  4875,  2520,  3180,  1854,  3182,  2574,  2521,  862,
    1557,  3239,  4556,  47,    3677,  2456,  4885,  3991,  5426,  27,    3677,  49,    2833,  2379,  2505,  3677,
    3284,  929,   3677,  3751,  2642,  3453,  4825,  4826,  864,   2856,  2856,  1082,  1084,  1086,  2575,  2490,
    1088,  1089,  1090,  616,   708,   882,   1002,  2674,  2474,  3246,  1095,  -1708, 5412,  3181,  2380,  3183,
    3677,  3574,  1335,  3994,  868,   1020,  4137,  3292,  30,    4142,  4143,  4144,  4145,  4146,  4147,  4148,
    4149,  4150,  4151,  1817,  1003,  3241,  3634,  5111,  3635,  2834,  1425,  913,   2835,  3294,  1324,  1557,
    3409,  3767,  38,    -1708, 3293,  1557,  1769,  1770,  1020,  2475,  38,    2476,  2268,  618,   883,   1816,
    3636,  1004,  1817,  5112,  -751,  3473,  2576,  5277,  49,    -1435, 3295,  -1435, 3429,  925,   5307,  1325,
    42,    3430,  2577,  1828,  2477,  1002,  4050,  3410,  42,    4054,  1854,  2268,  1332,  4198,  4199,  -3012,
    -3012, 1837,  3578,  3579,  3580,  3581,  3582,  3583,  3495,  3364,  2578,  3759,  1326,  1005,  3242,  4556,
    3247,  714,   3600,  1003,  3602,  3603,  46,    693,   3248,  1854,  694,   3249,  3688,  1333,  46,    2162,
    2972,  33,    968,   47,    3285,  715,   2478,  2836,  4300,  616,   14,    47,    1557,  3575,  3576,  3577,
    4029,  3578,  3579,  3580,  3581,  3582,  3583,  983,   3675,  984,   1334,  3243,  4856,  3732,  2472,  1461,
    3244,  3998,  1757,  3250,  2344,  3286,  3251,  3541,  3637,  1660,  1480,  19,    2739,  3638,  -199,  897,
    970,   3575,  3576,  3577,  4438,  3578,  3579,  3580,  3581,  3582,  3583,  4498,  1005,  1661,  5386,  3252,
    1462,  972,   3287,  618,   1463,  2955,  3999,  -199,  4439,  1429,  625,   3093,  626,   1397,  2969,  975,
    3253,  3675,  872,   4301,  4000,  3245,  988,   1448,  1478,  3677,  1482,  1930,  1931,  1464,  3962,  3964,
    3965,  1910,  -1674, 631,   1335,  1914,  2506,  -750,  695,   2509,  2837,  995,   3049,  3781,  -1674, 3690,
    5427,  3053,  3980,  -1674, 3056,  4454,  3010,  3010,  1449,  1672,  1930,  1931,  1673,  3575,  3576,  3577,
    1007,  3578,  3579,  3580,  3581,  3582,  3583,  2525,  4556,  4455,  3079,  1939,  1963,  4302,  4840,  4303,
    1006,  1335,  3677,  4841,  4102,  3523,  3649,  4315,  1329,  2265,  2559,  3818,  2266,  -1674, 2566,  3024,
    1743,  4298,  49,    3063,  3639,  3066,  4001,  1020,  1960,  3012,  3013,  1963,  2474,  179,   3640,  3784,
    3542,  3705,  1277,  -1674, 3246,  3543,  708,   3133,  2269,  1330,  1008,  1974,  2855,  4556,  4842,  2855,
    2855,  2855,  2855,  2855,  2855,  2855,  2855,  2855,  2855,  4231,  2980,  3141,  2983,  30,    5621,  3981,
    625,   5489,  626,   1009,  3430,  4032,  1331,  1450,  2856,  5007,  5065,  -1674, 1010,  2475,  5013,  2476,
    4042,  4169,  1757,  -1674, 1327,  4232,  2337,  38,    2627,  1577,  1682,  4277,  3197,  1684,  1025,  1686,
    1757,  1688,  2344,  1690,  4675,  1029,  723,   1694,  2477,  2270,  1241,  723,   2271,  2816,  3737,  3738,
    4234,  3859,  1039,  2855,  2855,  42,    2025,  2338,  1557,  2738,  1040,  1557,  2739,  1557,  1248,  -1730,
    -1730, 3675,  1557,  3240,  1729,  1730,  4641,  3258,  3855,  3122,  1266,  3247,  -2244, 1020,  1267,  3702,
    3703,  5107,  3860,  3248,  2339,  2331,  3249,  -1734, -1734, 3270,  2478,  46,    3095,  3096,  3097,  3922,
    5005,  4319,  1045,  2750,  3280,  3107,  2751,  3109,  47,    3111,  3112,  4116,  4519,  1054,  4230,  3861,
    3977,  3304,  2472,  4556,  1557,  3933,  3934,  4352,  4357,  1062,  4158,  4159,  3312,  3758,  3250,  725,
    1066,  3251,  3677,  3319,  2700,  1069,  2701,  725,   -1674, 725,   5613,  5614,  222,   4120,  708,   2752,
    4007,  602,   2751,  2816,  1098,  2911,  4236,  2912,  4300,  691,   3252,  2539,  2979,  3446,  2781,  3447,
    2569,  2782,  1557,  3657,  2985,  3658,  3378,  2986,  4390,  3139,  766,   3253,  3140,  1102,  3235,  2913,
    5057,  3236,  3374,  3675,  4231,  3375,  609,   -1733, -1733, 2116,  2117,  2118,  2119,  2120,  2121,  2885,
    2474,  3188,  2888,  5232,  1108,  2474,  4926,  4927,  4928,  4929,  1111,  2856,  2856,  49,    1113,  1119,
    4232,  5383,  4119,  1114,  2113,  2114,  2115,  3379,  2116,  2117,  2118,  2119,  2120,  2121,  3227,  4233,
    1122,  1120,  4041,  4301,  3265,  3564,  3372,  1123,  1124,  3878,  3351,  4234,  3498,  3540,  1121,  2751,
    2739,  2475,  3351,  2476,  3677,  1125,  2475,  3552,  2476,  1816,  2739,  1128,  1817,  3760,  3556,  1129,
    1557,  2739,  1557,  5136,  4171,  4235,  1266,  616,   3560,  1290,  1267,  2739,  2477,  3561,  1131,  4164,
    2739,  2477,  2914,  1252,  -1674, 2268,  1816,  2915,  3532,  1817,  -1191, 1837,  2916,  4302,  3535,  4303,
    -1674, 3373,  1255,  4230,  3343,  -1674, 3587,  3380,  3381,  2739,  1828,  3423,  3352,  1259,  1260,  4642,
    4643,  3353,  2268,  1854,  3606,  3382,  3612,  2739,  1837,  3613,  3442,  3659,  3621,  3660,  2478,  2739,
    1557,  618,   3421,  2478,  4295,  4296,  -1673, 1261,  179,   3833,  3511,  4636,  3834,  3458,  1278,  -1674,
    1854,  4236,  -1673, 1265,  1019,  3839,  2472,  -1673, 3840,  1286,  3125,  2472,  1757,  3177,  2344,  1288,
    4060,  3511,  4121,  4061,  4493,  -1674, 4494,  3383,  4064,  4231,  3991,  4065,  1557,  3420,  4125,  4561,
    3992,  2739,  3416,  897,   1285,  3218,  725,   1019,  1020,  4165,  1020,  3993,  4166,  4025,  3462,  2474,
    4176,  -1673, 1289,  4177,  3443,  4232,  1290,  1291,  4018,  3867,  4021,  3869,  1301,  -1674, 1557,  4777,
    1316,  4778,  2855,  2917,  4233,  -1674, 3994,  -1673, 3995,  5208,  5526,  1910,  5527,  2918,  4192,  1914,
    4234,  2739,  4267,  4271,  2331,  4268,  4272,  3483,  4008,  3485,  4010,  4753,  4276,  1317,  4299,  3044,
    2475,  2751,  2476,  4552,  1930,  1931,  2751,  3678,  1910,  3700,  4235,  1290,  1914,  -1660, 3384,  -1673,
    3385,  1321,  1327,  1020,  1498,  1939,  1300,  -1673, 1302,  3914,  816,   2477,  4646,  4962,  625,   2782,
    626,   1930,  1931,  1557,  4700,  4707,  -1709, 3044,  4708,  628,   4713,  -1709, 4714,  2751,  3230,  2751,
    1348,  1354,  1939,  3996,  630,   1963,  1381,  1577,  1557,  3207,  1385,  4367,  4246,  811,   4736,  1386,
    1424,  4737,  2269,  4070,  1557,  3940,  3678,  1422,  4251,  4252,  4253,  4739,  1425,  2478,  4737,  1960,
    4115,  4741,  1963,  2474,  4737,  817,   4236,  1430,  3539,  4743,  -1674, 4745,  4744,  4765,  4746,  2269,
    4766,  4418,  1974,  4772,  1433,  2472,  4773,  1456,  4594,  4595,  4596,  -1709, 1457,  4803,  4830,  3997,
    4804,  4831,  4889,  4936,  3998,  4890,  4937,  4938,  1469,  1479,  2739,  1805,  1483,  3662,  3663,  3664,
    4947,  1487,  5017,  2782,  2475,  4746,  2476,  5020,  1488,  2909,  4737,  5551,  -1673, 1557,  4984,  5022,
    2025,  5023,  4773,  -1709, 5024,  1493,  3691,  5108,  725,   3999,  2751,  818,   3652,  1494,  1501,  2477,
    4963,  1557,  1499,  5552,  4346,  2855,  2855,  4000,  4475,  1503,  3480,  3669,  3162,  2025,  3733,  811,
    1505,  5137,  3706,  3706,  5138,  1509,  1019,  5553,  4476,  1510,  3489,  3490,  2787,  1557,  3492,  1519,
    5149,  2784,  2785,  2782,  3496,  2856,  4674,  183,   4677,  2786,  179,   5554,  5157,  4085,  3891,  5158,
    2856,  2478,  1515,  5163,  5168,  1522,  2986,  4039,  3756,  1434,  5555,  1524,  5170,  5226,  5262,  4039,
    5227,  2141,  4477,  1335,  1565,  2856,  2856,  1557,  5271,  2472,  3669,  5272,  2261,  810,   5278,  3991,
    1568,  2782,  5389,  2474,  1570,  3992,  1561,  3661,  5279,  4001,  4478,  3613,  1580,  1581,  5280,  3531,
    3993,  2739,  -220,  2816,  5290,  5397,  1585,  2986,  1435,  4479,  5292,  1597,  1583,  4039,  4480,  4459,
    819,   5313,  5319,  1607,  4746,  2782,  4130,  5325,  1601,  1609,  2782,  3994,  5326,  3995,  5343,  2782,
    5377,  5344,  4481,  2986,  2475,  4482,  2476,  1612,  1630,  4931,  4136,  5556,  1019,  1624,  2113,  2114,
    2115,  4483,  2116,  2117,  2118,  2119,  2120,  2121,  5378,  5380,  5444,  2739,  2739,  4039,  4462,  2477,
    1557,  4464,  4465,  1629,  3896,  3925,  4160,  5451,  1631,  4948,  4949,  2113,  2114,  2115,  1632,  2116,
    2117,  2118,  2119,  2120,  2121,  1633,  5557,  2975,  1436,  1634,  1636,  5445,  5470,  2976,  5176,  2751,
    5473,  3851,  5494,  5474,  1637,  5495,  1649,  4320,  3996,  2474,  2474,  5562,  5610,  3870,  5563,  5611,
    1722,  2478,  5618,  1644,  1647,  5619,  3763,  1387,  3764,  3765,  3766,  5633,  4391,  1388,  2751,  1648,
    5639,  5640,  4484,  5495,  2751,  5082,  3700,  4620,  1437,  2472,  4485,  4486,  2474,  1438,  1650,  5644,
    1652,  4624,  4773,  1657,  3836,  1658,  1659,  2527,  1666,  1004,  2475,  2475,  2476,  2476,  1696,  1724,
    1731,  2474,  1727,  1733,  3997,  1389,  1734,  1741,  1740,  3998,  -1856, -1863, 1750,  4487,  4584,  1557,
    1754,  1753,  1755,  1760,  1440,  2477,  2477,  1756,  4812,  4813,  49,    4815,  -1853, 2475,  1762,  2476,
    1765,  -1854, 1766,  1767,  1768,  1773,  1775,  3876,  1776,  1777,  -1857, 1778,  -1855, 1779,  3999,  1780,
    3937,  1787,  2475,  1788,  2476,  2128,  1790,  1390,  2477,  1791,  1792,  1442,  4000,  2130,  1391,  1793,
    3977,  1392,  1794,  1795,  1796,  1797,  2132,  2478,  2478,  1798,  4597,  1799,  5558,  2477,  1800,  1801,
    2134,  2145,  2157,  725,   725,   725,   725,   2165,  725,   4911,  2141,  2275,  5559,  3916,  1444,  2472,
    2472,  2276,  2856,  3926,  3927,  3928,  3929,  2277,  3931,  1304,  2478,  2311,  2321,  1306,  2313,  2340,
    2344,  2341,  2345,  2342,  2347,  3930,  2346,  2348,  1393,  3754,  2349,  2370,  2376,  2382,  2405,  2478,
    3957,  3959,  2472,  2412,  2413,  3966,  3351,  2409,  2411,  3351,  3351,  725,   872,   3351,  4001,  2414,
    5560,  2417,  2415,  3351,  2416,  2425,  2426,  2472,  2427,  2436,  2435,  2451,  4538,  4539,  2437,  2464,
    2465,  2467,  2468,  4488,  2471,  2472,  2482,  2488,  2492,  3979,  2491,  2493,  2497,  4022,  2498,  2855,
    2504,  2507,  2511,  4489,  1394,  2512,  1395,  1019,  2515,  1019,  4939,  2522,  2529,  2530,  1397,  2534,
    1396,  2540,  4834,  2541,  2551,  1557,  5147,  2552,  1397,  2553,  2558,  1357,  2564,  2570,  2563,  2855,
    2855,  2572,  1398,  2601,  2571,  2608,  2586,  2599,  2587,  2602,  3821,  1757,  4105,  1746,  2648,  3825,
    4037,  1763,  2610,  2611,  2628,  2631,  2632,  2635,  2636,  1557,  611,   2639,  1358,  4057,  2643,  1557,
    1450,  2658,  4118,  1399,  2663,  2680,  1400,  1401,  2681,  2675,  2689,  179,   2692,  2697,  2699,  2715,
    2703,  4069,  1019,  1323,  2717,  4083,  2695,  2704,  2719,  2718,  2733,  2763,  2720,  2734,  4873,  2770,
    1402,  2793,  2779,  179,   2822,  4012,  2821,  2827,  4015,  2866,  2879,  2867,  2886,  2890,  1817,  4206,
    2895,  1359,  2894,  2902,  2927,  1360,  2943,  2942,  4024,  2908,  2956,  725,   3678,  2974,  2977,  3678,
    2970,  2978,  2925,  817,   3005,  2987,  4033,  4837,  1403,  4839,  3004,  3006,  3019,  4843,  3033,  2973,
    4845,  4043,  4847,  3059,  3034,  1361,  2992,  3036,  3046,  3047,  1404,  3007,  4056,  3048,  4540,  3069,
    3078,  3064,  3067,  3071,  4063,  3913,  3072,  3083,  3094,  3098,  4094,  3920,  3088,  4095,  3089,  3091,
    3102,  3110,  1557,  3113,  3126,  3135,  1249,  1253,  3137,  1362,  3138,  4561,  3147,  3199,  3164,  3175,
    3217,  1557,  3222,  3220,  3221,  3223,  3234,  3225,  3226,  1405,  1406,  3237,  3238,  3678,  3257,  3296,
    3299,  3307,  3311,  3340,  811,   3336,  3337,  3341,  1363,  3342,  1364,  1816,  4122,  3344,  1817,  3345,
    3348,  3354,  3356,  4823,  3362,  811,   3365,  3366,  3367,  1241,  3346,  3370,  3368,  3347,  3376,  4211,
    4212,  4213,  4214,  3396,  4187,  1407,  1365,  2268,  3422,  3428,  3369,  3371,  3413,  1837,  4692,  4333,
    4336,  4333,  4333,  3436,  3415,  3440,  3431,  3700,  3439,  3449,  3451,  3452,  3459,  4836,  3471,  3474,
    3476,  3475,  1805,  3478,  3479,  1854,  3488,  1366,  3491,  3494,  3500,  33,    4729,  3501,  3502,  1367,
    4218,  2986,  3493,  4222,  3512,  1368,  2794,  1667,  5206,  4867,  4868,  3503,  1369,  3505,  3520,  3525,
    3528,  1557,  3521,  1104,  1370,  4333,  3530,  3536,  3533,  4316,  3538,  3596,  2855,  1371,  3558,  3534,
    3609,  3537,  3554,  3555,  3628,  1372,  3633,  3655,  3557,  3559,  1722,  3562,  3680,  3563,  3565,  3593,
    3686,  -1237, 3568,  3586,  3648,  3631,  3641,  2739,  3592,  4084,  -1736, 3708,  3712,  4087,  4088,  3714,
    4090,  3709,  4092,  4093,  1557,  3718,  3724,  3730,  3736,  3595,  3741,  4098,  3597,  3739,  3750,  4215,
    4216,  4217,  3742,  3598,  5162,  3605,  3626,  3651,  5069,  1373,  3753,  3762,  3755,  -3012, 5162,  3627,
    3653,  1914,  3654,  3746,  1816,  4809,  3788,  1817,  3790,  3149,  5075,  5077,  1557,  4117,  3685,  3747,
    3777,  3778,  1374,  3796,  3810,  3797,  1930,  1931,  3820,  3798,  3789,  3823,  3799,  3824,  3805,  3837,
    2268,  3838,  3848,  2477,  3872,  3873,  1837,  -3012, 3874,  3877,  3845,  3879,  725,   4418,  3844,  1375,
    3889,  3897,  3847,  3850,  3899,  1020,  4440,  3898,  3900,  4443,  4722,  3880,  3901,  3902,  1854,  1376,
    3904,  3903,  4311,  4312,  4313,  4314,  1557,  1963,  4475,  3905,  3979,  725,   3906,  3907,  3908,  3915,
    3917,  3910,  4859,  3909,  2269,  4911,  4421,  3911,  3919,  3912,  2549,  4411,  5222,  3932,  3921,  3935,
    4972,  3700,  3936,  3941,  3947,  2384,  3948,  4983,  3951,  3955,  2617,  4413,  3967,  4759,  4414,  3956,
    4415,  3982,  4987,  3968,  4422,  3983,  4014,  4017,  4016,  4026,  4028,  4030,  4023,  4038,  3642,  4039,
    4046,  4051,  4048,  4052,  4055,  5025,  2385,  725,   4059,  4062,  725,   725,   4082,  4099,  4089,  4091,
    4100,  4101,  4109,  2386,  4104,  4794,  4110,  4111,  4112,  4123,  1743,  4126,  4127,  4129,  4492,  3589,
    3571,  2387,  -3012, 3588,  4182,  4161,  -3012, 4178,  4162,  4381,  1914,  1810,  4194,  4163,  3351,  5066,
    1092,  1093,  4543,  4170,  3351,  3351,  4195,  2607,  818,   4423,  4424,  4502,  4203,  5392,  4220,  1930,
    1931,  4207,  5291,  4221,  5151,  4248,  4245,  2388,  4229,  4243,  4257,  4258,  4263,  4260,  4279,  4820,
    -3012, 4286,  4261,  2389,  4307,  4321,  4309,  4310,  4322,  4503,  4505,  4507,  4509,  4323,  4324,  4358,
    4344,  4360,  4371,  4392,  4393,  4394,  4395,  2390,  4405,  1557,  4406,  1807,  2391,  4407,  4347,  4349,
    1963,  4408,  4409,  5228,  5211,  4410,  4412,  5214,  4428,  3883,  4429,  4435,  4451,  2269,  4453,  4353,
    4456,  4468,  4463,  3511,  4466,  4469,  725,   4524,  4495,  4527,  4074,  4533,  4534,  4536,  2648,  4545,
    4497,  4546,  4496,  4564,  4566,  4516,  4532,  4574,  4569,  4541,  4567,  4548,  2751,  4570,  4585,  4593,
    4549,  4582,  4517,  4581,  3979,  4587,  179,   4576,  5218,  4598,  5220,  897,   4600,  4602,  4499,  2392,
    3678,  4603,  4604,  725,   3678,  4605,  4606,  4610,  4627,  4612,  4615,  4619,  4626,  4621,  4995,  4628,
    4629,  4525,  4630,  4634,  2116,  2117,  2118,  2119,  2120,  2121,  4664,  -3012, 4670,  4671,  4678,  4683,
    4668,  2393,  4684,  4640,  4693,  4654,  4699,  4666,  4686,  4702,  4681,  4696,  4687,  1557,  4544,  4688,
    4704,  4732,  4709,  5123,  4609,  4710,  4718,  4735,  5042,  4780,  4749,  4737,  4755,  4756,  205,   5156,
    4783,  4784,  1722,  4806,  4764,  4805,  4782,  4811,  4816,  4824,  1557,  4795,  4844,  4798,  4846,  4807,
    1816,  4851,  5069,  1817,  4852,  4848,  4860,  4874,  4865,  4872,  4878,  4880,  4891,  4887,  4899,  2394,
    4908,  4893,  5047,  4333,  4333,  2395,  4917,  4909,  2396,  4923,  4930,  1020,  2268,  4333,  4932,  4933,
    4935,  4940,  1837,  4333,  4942,  4966,  4944,  4943,  4952,  4989,  4945,  4959,  5196,  5197,  4969,  5293,
    4985,  5295,  2397,  5002,  4981,  4999,  5003,  5018,  2398,  5038,  1854,  5040,  5049,  5039,  5062,  734,
    735,   5044,  5050,  5063,  741,   2399,  5074,  5067,  4523,  752,   760,   734,   5080,  767,   5083,  5090,
    760,   760,   5092,  795,   3669,  798,   5093,  5095,  3669,  5096,  5115,  5097,  5114,  5116,  2400,  4703,
    5118,  5119,  5125,  725,   5121,  5126,  5009,  5130,  5152,  5131,  4690,  4691,  4694,  2116,  2117,  2118,
    2119,  2120,  2121,  4701,  5155,  5159,  5171,  5165,  5172,  5174,  179,   5194,  5180,  5186,  5176,  5193,
    5195,  5200,  5233,  5217,  5238,  5242,  5245,  5243,  1557,  5247,  5248,  5418,  5253,  1557,  5264,  5265,
    5266,  5275,  5282,  5276,  4658,  4659,  4660,  4661,  5281,  5297,  5298,  5289,  5294,  5299,  5322,  5318,
    5311,  4789,  1910,  1557,  5301,  5312,  1914,  5212,  5333,  5317,  5334,  5337,  5339,  4799,  725,   5328,
    5342,  5347,  5348,  5354,  5357,  5358,  2136,  5360,  5361,  2136,  4588,  1930,  1931,  4208,  4757,  5375,
    5385,  5395,  4591,  4592,  5387,  5400,  5390,  5402,  5335,  1557,  5403,  5399,  1939,  5411,  5336,  5410,
    5452,  5415,  5436,  5441,  5454,  5450,  5455,  4792,  4793,  5456,  4862,  5458,  4796,  4797,  5471,  5483,
    5491,  5475,  5492,  5498,  5524,  5493,  853,   858,   858,   861,   5529,  858,   1963,  867,   5530,  5532,
    853,   5535,  795,   5586,  5536,  899,   5538,  5549,  5565,  2269,  795,   5591,  5622,  795,   5606,  5607,
    5645,  858,   5624,  795,   867,   2676,  5638,  3886,  2565,  -2330, -2388, 5052,  3417,  3693,  1454,  5564,
    5467,  5132,  3817,  1557,  1292,  1384,  4365,  1557,  1557,  5041,  3310,  3950,  4768,  2164,  5615,  4472,
    5224,  5068,  5332,  5117,  4537,  5120,  725,   4857,  5105,  3744,  3499,  5029,  1722,  5388,  4993,  4818,
    4819,  1453,  5449,  5340,  5338,  5409,  5256,  3749,  5028,  5016,  4343,  3849,  4385,  3351,  3351,  725,
    5628,  5032,  5507,  5573,  1019,  5593,  5561,  2025,  4838,  5634,  5270,  5588,  5523,  5602,  5649,  4854,
    4531,  3394,  3914,  3395,  4363,  3831,  3377,  2655,  4034,  5457,  5625,  5533,  5094,  3969,  4575,  4814,
    5467,  5413,  5048,  3678,  5324,  5396,  2638,  5051,  740,   3678,  5306,  897,   4599,  4817,  3678,  1717,
    5181,  3678,  3511,  5616,  4577,  3731,  5274,  4578,  3039,  3918,  1021,  5617,  5429,  1726,  5568,  1262,
    2981,  1816,  1681,  2741,  1817,  2982,  3697,  4555,  5626,  5508,  4695,  1284,  4273,  3698,  4882,  3678,
    5544,  5283,  3018,  5547,  5548,  4721,  5550,  3710,  5379,  5296,  2307,  5303,  1722,  2268,  3001,  3017,
    1722,  1722,  3700,  1837,  5523,  1020,  5599,  4333,  1557,  1557,  2272,  3711,  4333,  2308,  4910,  3723,
    2312,  4224,  4663,  4676,  5167,  4333,  4219,  5288,  5287,  4274,  5544,  1854,  2317,  5547,  5548,  897,
    5550,  3363,  1270,  4186,  4609,  4609,  4609,  4609,  5150,  4172,  5381,  4760,  4761,  4762,  4763,  5467,
    5382,  5374,  5443,  4884,  3646,  3701,  3511,  3549,  3511,  4183,  4270,  3644,  5599,  0,     0,     0,
    2958,  0,     0,     5046,  2127,  0,     -3012, -3012, 0,     2116,  2117,  2118,  2119,  2120,  2121,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     -2555, 0,     0,     0,     0,     0,     0,     4916,  0,     0,     3669,  0,     0,
    0,     0,     3669,  0,     0,     3669,  0,     0,     0,     0,     0,     0,     872,   0,     0,     0,
    0,     0,     0,     1910,  0,     0,     0,     1914,  0,     0,     0,     0,     4986,  4821,  4822,  0,
    0,     5309,  5310,  0,     0,     0,     0,     0,     0,     0,     0,     0,     1930,  1931,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     725,   0,     0,     0,     0,     0,     1939,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     -2555, 3678,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     3979,  0,     0,     0,     0,     1960,  0,     0,     1963,  0,     0,
    4996,  4768,  4768,  0,     0,     0,     0,     0,     0,     0,     2269,  0,     0,     0,     0,     0,
    935,   0,     0,     0,     0,     795,   0,     -2555, 0,     858,   0,     861,   0,     858,   5053,  0,
    5055,  3678,  0,     -2555, 899,   0,     0,     992,   -2555, 0,     0,     1558,  0,     -2555, 858,   0,
    0,     3351,  -2555, 0,     0,     -2555, 0,     -2555, 0,     5030,  1019,  0,     0,     0,     5072,  4919,
    5073,  4920,  4921,  0,     5078,  0,     5079,  0,     5081,  0,     0,     853,   0,     4924,  0,     0,
    861,   0,     -2555, 0,     0,     4333,  853,   0,     2025,  0,     899,   5109,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     -2555, 179,   0,     858,   0,     0,     2648,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -2555, 811,   0,     0,     0,     0,     0,     0,     -2555, 0,     0,     0,     795,   0,     0,     0,
    0,     0,     5244,  -2555, 0,     5086,  0,     795,   1118,  0,     1557,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1816,  1558,  0,     1817,  0,     1236,  0,     795,   760,
    0,     0,     0,     760,   0,     3669,  5133,  0,     -2555, 0,     0,     0,     0,     0,     1241,  1805,
    0,     795,   0,     2268,  0,     795,   0,     0,     897,   1837,  0,     1236,  0,     0,     0,     0,
    0,     3678,  0,     0,     0,     0,     0,     0,     795,   0,     0,     0,     0,     0,     0,     0,
    0,     1854,  0,     0,     795,   738,   2113,  2114,  2115,  0,     2116,  2117,  2118,  2119,  2120,  2121,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     -2555, 0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     795,   0,     795,
    0,     0,     0,     0,     5225,  -2555, 0,     -2555, -2555, 0,     0,     0,     795,   0,     858,   858,
    0,     4200,  0,     0,     0,     0,     0,     0,     5189,  0,     0,     0,     0,     0,     0,     0,
    5350,  0,     0,     -2555, 760,   760,   0,     0,     0,     0,     0,     0,     0,     5254,  0,     0,
    0,     0,     0,     3678,  0,     0,     0,     0,     0,     -3012, 0,     179,   0,     1914,  5219,  0,
    5221,  853,   0,     0,     0,     0,     -2557, 0,     0,     0,     0,     0,     853,   0,     0,     -2555,
    899,   0,     1930,  1931,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     858,   0,
    0,     0,     5394,  -3012, 0,     0,     0,     0,     0,     0,     2336,  -2555, 795,   0,     -2555, -2555,
    -2555, 5145,  858,   858,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1963,  795,   795,   795,   0,     0,     853,   858,   0,     853,   0,     0,     0,
    2269,  0,     0,     0,     0,     0,     0,     0,     0,     0,     -2557, 3511,  0,     0,     0,     0,
    0,     0,     0,     0,     1019,  0,     2336,  0,     858,   0,     858,   858,   0,     0,     0,     0,
    0,     1816,  5183,  0,     1817,  0,     0,     0,     0,     0,     4768,  0,     0,     0,     0,     0,
    0,     0,     0,     1236,  0,     1828,  0,     0,     0,     0,     -2557, 0,     5359,  2268,  0,     1558,
    0,     0,     0,     1837,  0,     0,     -2557, 0,     0,     0,     0,     -2557, 0,     0,     -3012, 0,
    -2557, 0,     1699,  1699,  0,     -2557, 0,     795,   -2557, 734,   -2557, 1854,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     2797,  4690,  4690,  5346,  1732,  5223,  0,     795,   0,
    0,     1738,  0,     0,     0,     -2557, 0,     0,     0,     0,     0,     0,     0,     0,     1236,  0,
    0,     0,     0,     0,     0,     5414,  0,     0,     0,     0,     0,     -2557, 0,     0,     0,     0,
    1558,  0,     0,     179,   0,     0,     2798,  0,     5434,  5423,  5424,  1236,  0,     5431,  5432,  0,
    0,     0,     3700,  183,   5482,  5433,  179,   5572,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     5465,  -2557, 2799,  0,     1558,  0,     0,     0,     5398,  -2557, 1236,  1236,  0,     1236,
    0,     0,     0,     1910,  0,     0,     -2557, 1914,  0,     2800,  0,     0,     0,     0,     0,     1558,
    5466,  0,     1236,  0,     5434,  2801,  0,     0,     0,     5431,  5432,  0,     1930,  1931,  0,     183,
    0,     5433,  5481,  0,     0,     0,     0,     0,     0,     2802,  5506,  -2557, 0,     1939,  2803,  0,
    2116,  2117,  2118,  2119,  2120,  2121,  0,     0,     795,   0,     0,     1236,  0,     5453,  0,     5531,
    0,     0,     5465,  0,     0,     0,     0,     0,     0,     0,     1960,  5423,  5542,  1963,  0,     1558,
    0,     0,     0,     0,     0,     0,     795,   795,   738,   0,     2269,  0,     2804,  1974,  1236,  0,
    5466,  0,     1236,  1236,  0,     0,     0,     0,     5541,  0,     0,     0,     0,     795,   795,   2320,
    -2557, 2805,  0,     0,     0,     0,     0,     0,     5434,  0,     0,     0,     0,     5431,  5432,  760,
    0,     0,     0,     183,   0,     5433,  179,   725,   -2557, 0,     -2557, -2557, 0,     0,     0,     5490,
    5584,  5585,  0,     0,     5589,  5590,  0,     5592,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     760,   0,     3979,  -2557, 0,     2025,  3464,  0,     0,     0,     0,     0,     0,
    205,   5465,  0,     795,   2444,  0,     0,     0,     0,     0,     795,   0,     1357,  858,   0,     0,
    5635,  0,     0,     0,     0,     0,     0,     0,     5620,  0,     0,     2806,  0,     0,     0,     5466,
    0,     2807,  -2557, 0,     0,     0,     0,     2808,  5648,  899,   0,     0,     0,     1358,  5636,  795,
    0,     0,     795,   0,     0,     0,     0,     0,     0,     0,     0,     5446,  0,     0,     -2557, 0,
    0,     -2557, -2557, -2557, 2809,  0,     2810,  0,     0,     0,     795,   0,     0,     0,     0,     0,
    0,     0,     858,   858,   858,   858,   795,   2811,  0,     0,     1558,  0,     0,     0,     0,     0,
    0,     0,     1359,  0,     795,   0,     1360,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    2812,  0,     0,     0,     2582,  0,     795,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    858,   858,   0,     0,     0,     0,     1361,  0,     858,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     2113,  2114,  2115,  0,     2116,  2117,  2118,  2119,  2120,  2121,
    0,     0,     0,     3465,  4637,  0,     0,     4638,  0,     0,     1362,  -130,  0,     0,     0,     0,
    0,     858,   0,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     2,     0,     3,     4,     0,     0,     1363,  0,     1364,  858,   858,   858,   858,
    0,     0,     0,     0,     5,     0,     0,     0,     0,     0,     795,   0,     0,     0,     0,     0,
    0,     0,     795,   0,     0,     0,     2582,  0,     6,     0,     7,     8,     0,     0,     0,     0,
    9,     853,   10,    0,     0,     0,     0,     0,     861,   0,     0,     853,   0,     11,    0,     12,
    0,     0,     0,     0,     0,     899,   0,     0,     0,     0,     858,   0,     33,    0,     0,     13,
    3466,  0,     14,    858,   0,     0,     1368,  0,     0,     0,     0,     858,   858,   1369,  15,    -2571,
    16,    0,     0,     0,     17,    2429,  0,     0,     0,     0,     18,    0,     0,     0,     1371,  0,
    0,     0,     0,     19,    0,     20,    1372,  0,     0,     1699,  0,     21,    0,     0,     0,     0,
    858,   0,     853,   0,     0,     0,     795,   795,   0,     858,   22,    0,     0,     0,     0,     0,
    795,   0,     0,     0,     0,     1816,  0,     795,   1817,  3464,  0,     0,     0,     0,     734,   734,
    0,     0,     2796,  0,     0,     0,     1236,  0,     1236,  1828,  1373,  0,     1357,  0,     3467,  1236,
    0,     2268,  1236,  -2571, 0,     0,     1236,  1837,  0,     0,     0,     0,     0,     0,     1236,  1236,
    0,     23,    24,    1374,  0,     0,     1236,  25,    899,   1236,  1236,  1236,  1236,  1358,  0,     1854,
    0,     0,     0,     26,    1236,  1236,  0,     1236,  2968,  1236,  1236,  0,     0,     1236,  27,    1236,
    1375,  1236,  1236,  -2571, 0,     795,   0,     0,     0,     0,     0,     0,     0,     0,     0,     -2571,
    1376,  0,     0,     0,     -2571, 0,     0,     0,     0,     -2571, 0,     0,     0,     1236,  -2571, 0,
    0,     -2571, 1359,  -2571, 28,    0,     1360,  0,     0,     0,     0,     0,     0,     0,     0,     1816,
    29,    0,     1817,  0,     0,     30,    31,    858,   32,    0,     0,     0,     0,     33,    -2571, 0,
    0,     0,     34,    1828,  0,     35,    1361,  0,     0,     36,    0,     2268,  0,     0,     37,    38,
    0,     1837,  0,     0,     -2571, 0,     39,    1910,  0,     40,    0,     1914,  0,     0,     0,     0,
    0,     41,    0,     3465,  0,     0,     0,     0,     0,     1854,  1362,  0,     0,     42,    0,     1236,
    1930,  1931,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     -2571, 0,     43,    0,
    0,     1939,  0,     0,     -2571, 0,     0,     0,     44,    1363,  0,     1364,  1236,  0,     45,    -2571,
    0,     0,     0,     46,    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1960,  0,
    47,    1963,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2269,  1236,
    0,     1974,  0,     0,     -2571, 0,     0,     3035,  0,     0,     0,     2336,  3041,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     1816,  0,     0,     1817,  0,     0,     33,    0,     0,     0,
    1367,  1910,  0,     0,     0,     1914,  1368,  0,     0,     48,    1828,  0,     0,     1369,  0,     0,
    0,     738,   2268,  0,     0,     2429,  0,     0,     1837,  0,     1930,  1931,  0,     0,     1371,  0,
    0,     0,     0,     0,     0,     0,     1372,  0,     0,     -2571, 0,     1939,  2025,  0,     0,     0,
    1854,  0,     0,     0,     0,     49,    0,     0,     -130,  0,     0,     0,     0,     0,     0,     0,
    0,     -2571, 0,     -2571, -2571, 0,     0,     0,     1960,  0,     0,     1963,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     2269,  0,     1373,  1974,  0,     1558,  3467,  -2571,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1236,  1236,  1236,  1236,  1236,  1236,
    1236,  1236,  1236,  1374,  1236,  0,     0,     0,     0,     0,     0,     1816,  0,     795,   1817,  1236,
    1236,  0,     0,     0,     0,     0,     795,   0,     0,     0,     0,     -2571, 0,     0,     0,     0,
    1375,  0,     0,     0,     0,     0,     0,     2268,  1910,  0,     0,     0,     1914,  1837,  0,     0,
    1376,  0,     0,     0,     0,     0,     2025,  -2571, 0,     0,     -2571, -2571, -2571, 0,     0,     0,
    0,     1930,  1931,  0,     0,     1854,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1939,  0,     0,     0,     0,     0,     0,     0,     2113,  2114,  2115,  0,     2116,  2117,
    2118,  2119,  2120,  2121,  1816,  0,     0,     1817,  0,     0,     0,     3608,  0,     0,     0,     1960,
    0,     0,     1963,  0,     0,     0,     0,     0,     1828,  0,     0,     0,     0,     0,     0,     2269,
    2268,  0,     1974,  0,     0,     4201,  1837,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     795,   1558,  795,   0,     0,     0,     1236,  0,     0,     0,     0,     0,     1854,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1236,  0,     -3012, 0,     0,
    0,     1914,  0,     0,     1236,  1236,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     795,   1387,  0,     0,     1930,  1931,  3025,  1388,  3032,  0,     0,     2025,  0,     0,
    0,     0,     0,     0,     2113,  2114,  2115,  -3012, 2116,  2117,  2118,  2119,  2120,  2121,  0,     0,
    0,     1816,  2336,  0,     1817,  3616,  861,   0,     2336,  0,     0,     734,   0,     734,   0,     0,
    0,     1389,  0,     0,     0,     1828,  0,     1963,  0,     0,     0,     0,     0,     2268,  1236,  0,
    0,     0,     0,     1837,  2269,  0,     1910,  0,     0,     853,   1914,  858,   858,   858,   0,     0,
    853,   0,     899,   0,     858,   0,     858,   0,     858,   858,   0,     1854,  0,     0,     795,   1930,
    1931,  0,     0,     1390,  0,     0,     0,     0,     0,     0,     1391,  0,     0,     1392,  0,     0,
    1939,  0,     0,     0,     0,     0,     760,   0,     0,     0,     0,     0,     0,     0,     0,     1558,
    2444,  0,     0,     0,     0,     0,     1816,  0,     0,     1817,  0,     3167,  0,     1960,  0,     0,
    1963,  0,     -3012, 3179,  0,     0,     0,     0,     0,     795,   1828,  0,     0,     2269,  0,     0,
    1974,  0,     2268,  0,     1393,  0,     0,     0,     1837,  0,     0,     2113,  2114,  2115,  0,     2116,
    2117,  2118,  2119,  2120,  2121,  1816,  795,   0,     1817,  0,     3232,  3232,  3618,  0,     0,     0,
    1854,  861,   760,   1910,  0,     0,     0,     1914,  0,     1828,  0,     0,     0,     0,     0,     0,
    0,     2268,  0,     858,   0,     0,     0,     1837,  0,     0,     0,     0,     1930,  1931,  0,     0,
    1394,  0,     1395,  0,     0,     0,     0,     0,     0,     0,     0,     2025,  1396,  1939,  3298,  1854,
    3301,  3303,  0,     0,     1397,  0,     0,     0,     0,     0,     0,     0,     0,     0,     1398,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1960,  0,     0,     1963,  0,     0,
    0,     0,     0,     858,   0,     0,     0,     0,     0,     0,     2269,  858,   0,     1974,  0,     1458,
    858,   0,     1400,  1401,  0,     0,     0,     0,     1910,  1236,  0,     0,     1914,  0,     0,     0,
    2968,  2968,  2968,  0,     2116,  2117,  2118,  2119,  2120,  2121,  0,     0,     1459,  0,     0,     0,
    0,     1930,  1931,  0,     0,     2444,  0,     0,     3232,  0,     795,   0,     3418,  0,     0,     734,
    0,     0,     1939,  0,     0,     0,     0,     1910,  0,     0,     0,     1914,  0,     0,     0,     0,
    0,     0,     0,     0,     1403,  0,     0,     0,     2025,  3298,  0,     0,     0,     0,     0,     1960,
    1930,  1931,  1963,  858,   3445,  0,     1404,  0,     0,     0,     0,     2336,  0,     0,     3041,  2269,
    3041,  1939,  1974,  0,     0,     2336,  0,     0,     0,     2113,  2114,  2115,  0,     2116,  2117,  2118,
    2119,  2120,  2121,  0,     858,   0,     858,   3232,  858,   3232,  4638,  0,     0,     0,     1960,  0,
    0,     1963,  0,     0,     0,     1405,  1406,  0,     0,     0,     0,     0,     1236,  0,     2269,  0,
    0,     1974,  0,     0,     0,     0,     0,     1558,  1699,  0,     0,     1816,  0,     0,     1817,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2025,  0,     1828,
    0,     1407,  0,     0,     0,     0,     0,     2268,  0,     0,     0,     0,     0,     1837,  0,     0,
    0,     0,     0,     0,     0,     2336,  853,   0,     0,     0,     0,     0,     853,   0,     0,     0,
    0,     0,     0,     0,     0,     1854,  0,     858,   0,     0,     0,     0,     2025,  0,     1236,  1236,
    0,     0,     0,     0,     1236,  0,     2113,  2114,  2115,  0,     2116,  2117,  2118,  2119,  2120,  2121,
    0,     0,     0,     1816,  0,     0,     1817,  4957,  0,     0,     0,     0,     0,     1236,  1236,  0,
    0,     0,     1236,  0,     0,     0,     0,     1828,  0,     0,     0,     0,     0,     0,     0,     2268,
    1236,  1236,  1236,  1236,  0,     1837,  0,     0,     0,     0,     0,     0,     0,     0,     1236,  0,
    0,     1236,  0,     1558,  0,     1558,  0,     1236,  3625,  0,     0,     0,     0,     1854,  0,     0,
    0,     1236,  1236,  0,     0,     1236,  0,     0,     0,     0,     0,     0,     0,     1910,  0,     0,
    0,     1914,  1236,  0,     1236,  0,     899,   0,     1236,  0,     0,     2113,  2114,  2115,  0,     2116,
    2117,  2118,  2119,  2120,  2121,  0,     1930,  1931,  0,     2893,  0,     1236,  1387,  0,     0,     795,
    0,     0,     1388,  1558,  0,     3679,  0,     1939,  1236,  1236,  1236,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1236,  2113,  2114,  2115,  0,     2116,  2117,
    2118,  2119,  2120,  2121,  1960,  0,     0,     1963,  3622,  1236,  1389,  0,     0,     0,     0,     1558,
    0,     0,     0,     0,     2269,  1910,  0,     1974,  1236,  1914,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     3679,  0,     1816,  3717,  0,     1817,  0,     3032,  0,     0,     1930,  1931,
    0,     3041,  0,     0,     0,     0,     0,     0,     0,     0,     1828,  0,     1390,  0,     0,     1939,
    0,     0,     2268,  1391,  0,     0,     1392,  0,     1837,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1236,  0,     3232,  0,     0,     0,     0,     1699,  1960,  0,     0,     1963,
    1854,  0,     2025,  0,     0,     0,     0,     0,     0,     0,     0,     0,     2269,  0,     0,     1974,
    0,     0,     0,     0,     0,     858,   1558,  858,   858,   858,   0,     0,     0,     1393,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3041,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1558,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1394,  2025,  1395,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     1396,  0,     0,     1910,  0,     0,     0,     1914,  1397,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     1398,  0,     0,     0,     0,     0,     0,     0,     0,
    1558,  1930,  1931,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1939,  0,     1558,  0,     0,     0,     1484,  0,     0,     1400,  1401,  0,     0,     0,
    2113,  2114,  2115,  0,     2116,  2117,  2118,  2119,  2120,  2121,  0,     0,     0,     0,     3954,  1960,
    1558,  0,     1963,  0,     0,     1485,  0,     0,     0,     0,     0,     0,     0,     1816,  0,     2269,
    1817,  0,     1974,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1828,  0,     0,     0,     0,     0,     0,     0,     2268,  1558,  0,     0,     1403,  0,     1837,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1404,
    0,     0,     0,     0,     0,     0,     0,     1854,  2113,  2114,  2115,  0,     2116,  2117,  2118,  2119,
    2120,  2121,  0,     0,     0,     0,     4131,  0,     2968,  0,     0,     3232,  3232,  2025,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1405,  1406,
    1816,  0,     0,     1817,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     2336,  1828,  0,     0,     0,     0,     0,     0,     0,     2268,  795,   4013,  0,
    795,   0,     1837,  0,     0,     0,     0,     0,     0,     0,     1407,  0,     0,     0,     0,     0,
    795,   3464,  0,     0,     0,     0,     0,     0,     0,     0,     1854,  0,     1549,  1699,  795,   1910,
    0,     0,     0,     1914,  1357,  0,     0,     0,     1699,  795,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     795,   0,     0,     0,     1930,  1931,  0,     0,     795,   0,     0,     0,
    0,     0,     0,     0,     0,     1358,  0,     0,     0,     1939,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     858,   0,     0,     858,   0,     0,     0,
    0,     0,     3041,  0,     0,     0,     1960,  0,     0,     1963,  853,   2113,  2114,  2115,  0,     2116,
    2117,  2118,  2119,  2120,  2121,  0,     2269,  0,     0,     4185,  1359,  0,     0,     0,     1360,  0,
    0,     795,   1910,  0,     0,     0,     1914,  0,     0,     0,     0,     858,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     1236,  0,     0,     0,     0,     0,     1930,  1931,  0,     1361,  1236,
    0,     0,     0,     0,     0,     1236,  0,     1236,  0,     1549,  0,     0,     1939,  1236,  0,     0,
    1236,  1236,  1236,  1236,  1236,  1236,  1236,  1236,  1236,  1236,  0,     3465,  0,     1236,  1236,  0,
    0,     0,     1362,  0,     2025,  0,     0,     0,     0,     1960,  0,     0,     1963,  1236,  0,     0,
    0,     1236,  1236,  0,     0,     0,     1236,  0,     0,     2269,  0,     1236,  1974,  0,     0,     0,
    0,     1363,  0,     1364,  0,     1236,  0,     0,     1236,  0,     1236,  0,     0,     0,     0,     0,
    0,     0,     0,     1236,  1236,  1236,  0,     0,     0,     1236,  0,     0,     1236,  0,     0,     0,
    4210,  0,     0,     0,     0,     0,     0,     795,   795,   795,   853,   0,     0,     3679,  4228,  0,
    0,     0,     4228,  4242,  0,     0,     0,     0,     1558,  1236,  0,     0,     0,     0,     0,     1236,
    1236,  0,     0,     0,     33,    0,     0,     2025,  1367,  0,     0,     0,     0,     0,     1368,  0,
    0,     0,     0,     0,     0,     1369,  0,     0,     0,     1236,  0,     0,     3041,  2429,  0,     1236,
    0,     0,     2336,  3032,  0,     1236,  1371,  0,     0,     0,     0,     0,     0,     0,     1372,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     4294,  1699,  1699,  0,     2582,
    0,     0,     2113,  2114,  2115,  0,     2116,  2117,  2118,  2119,  2120,  2121,  0,     0,     0,     0,
    0,     858,   858,   858,   858,   0,     0,     0,     0,     0,     0,     1549,  0,     0,     0,     0,
    0,     0,     1373,  0,     0,     0,     3467,  4074,  1816,  0,     0,     1817,  0,     853,   853,   853,
    853,   0,     0,     0,     0,     0,     0,     0,     0,     0,     1816,  1374,  1828,  1817,  0,     0,
    0,     0,     0,     0,     2268,  0,     0,     0,     0,     4362,  1837,  0,     0,     0,     1828,  0,
    0,     0,     0,     0,     0,     1558,  2268,  1549,  1375,  0,     0,     0,     1837,  4370,  0,     0,
    0,     795,   1854,  853,   1558,  2113,  2114,  2115,  1376,  2116,  2117,  2118,  2119,  2120,  2121,  0,
    0,     0,     0,     4288,  1854,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1549,  0,     0,     0,     0,     0,     0,     0,     858,   858,   1816,  0,     0,     1817,  0,     0,
    0,     0,     0,     0,     0,     0,     2968,  0,     0,     0,     0,     2968,  0,     0,     1828,  0,
    2968,  0,     0,     0,     0,     0,     2268,  0,     4457,  0,     0,     1816,  1837,  0,     1817,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1854,  0,     0,     2268,  0,     0,     1910,  0,     0,     1837,  1914,  0,
    0,     1549,  0,     0,     1558,  0,     0,     0,     0,     0,     0,     0,     1910,  0,     0,     0,
    1914,  0,     0,     1930,  1931,  1854,  795,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     858,   0,     1236,  1939,  1930,  1931,  1549,  0,     795,   0,     0,     0,     0,     0,     4530,
    0,     0,     0,     0,     0,     0,     1939,  1558,  0,     0,     2444,  0,     0,     0,     0,     0,
    1549,  1960,  0,     0,     1963,  0,     795,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    3298,  2269,  0,     1960,  1974,  4204,  1963,  4562,  0,     0,     0,     0,     1910,  0,     0,     1558,
    1914,  0,     0,     2269,  0,     0,     1974,  0,     0,     0,     0,     1236,  1236,  0,     0,     0,
    0,     0,     0,     0,     0,     1930,  1931,  0,     0,     0,     0,     0,     0,     -3012, 0,     0,
    1549,  1914,  3232,  0,     3232,  0,     1939,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1930,  1931,  0,     1558,  0,     0,     0,     0,     0,     2025,
    0,     0,     0,     1960,  0,     0,     1963,  -3012, 1236,  0,     0,     0,     0,     0,     0,     0,
    0,     2025,  0,     2269,  0,     0,     1974,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1236,  0,     1963,  0,     0,     0,     0,     855,   0,     0,     1236,
    0,     0,     0,     0,     2269,  0,     855,   876,   0,     0,     1236,  1236,  0,     876,   0,     1236,
    0,     0,     0,     0,     0,     0,     1236,  1236,  876,   0,     0,     1236,  0,     0,     0,     0,
    0,     1236,  1236,  0,     0,     1236,  0,     0,     1236,  4657,  0,     0,     795,   795,   795,   795,
    0,     2025,  0,     4228,  4242,  0,     1236,  4228,  0,     0,     4667,  0,     0,     0,     3679,  0,
    0,     0,     3679,  0,     0,     0,     0,     4914,  4680,  0,     0,     0,     0,     0,     1236,  0,
    0,     0,     -3012, 1236,  0,     0,     0,     0,     1236,  0,     0,     0,     0,     0,     899,   0,
    0,     0,     0,     0,     0,     3717,  0,     0,     0,     3032,  0,     1549,  1558,  2113,  2114,  2115,
    0,     2116,  2117,  2118,  2119,  2120,  2121,  734,   0,     0,     1236,  4613,  0,     0,     0,     2113,
    2114,  2115,  0,     2116,  2117,  2118,  2119,  2120,  2121,  0,     0,     0,     0,     4625,  3232,  3232,
    0,     0,     0,     1816,  0,     0,     1817,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     853,   853,   0,     0,     0,     0,     1828,  0,     0,     0,     853,   0,     0,     0,     2268,
    0,     853,   0,     0,     0,     1837,  0,     0,     0,     0,     0,     0,     0,     4758,  0,     0,
    0,     0,     0,     0,     0,     1816,  0,     0,     1817,  0,     0,     858,   0,     1854,  0,     2113,
    2114,  2115,  0,     2116,  2117,  2118,  2119,  2120,  2121,  0,     0,     0,     0,     4653,  0,     0,
    1558,  2268,  0,     2968,  0,     2968,  0,     1837,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     2116,  2117,  2118,  2119,  2120,  2121,  0,     0,     0,     3041,  0,     1854,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     858,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     858,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1910,  0,     0,     0,     1914,  0,     0,     0,     0,     0,     4651,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1930,  1931,
    0,     0,     0,     0,     0,     0,     0,     0,     1816,  0,     0,     1817,  0,     1236,  0,     1939,
    0,     0,     0,     0,     0,     0,     0,     -3012, 853,   0,     0,     1914,  1828,  2444,  0,     0,
    0,     0,     0,     0,     2268,  0,     1699,  0,     0,     0,     1837,  0,     1960,  0,     0,     1963,
    1930,  1931,  858,   2444,  0,     0,     0,     0,     0,     0,     0,     1558,  2269,  0,     0,     1974,
    3041,  -3012, 1854,  4906,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     795,   0,     0,     0,     1558,  0,     876,   0,     0,     0,     876,   0,     0,     0,
    0,     1963,  0,     0,     0,     0,     0,     876,   0,     0,     0,     0,     0,     0,     2269,  0,
    1236,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1236,  1558,  876,   0,     0,
    0,     855,   0,     0,     0,     0,     0,     1236,  0,     0,     2025,  0,     855,   876,   0,     0,
    1236,  1236,  876,   0,     1236,  0,     0,     0,     0,     0,     0,     0,     876,   0,     0,     0,
    0,     853,   0,     4228,  0,     0,     876,   3679,  0,     0,     1910,  0,     3679,  0,     1914,  3679,
    3298,  0,     4971,  0,     1236,  1236,  0,     0,     0,     0,     0,     0,     -3012, 0,     0,     0,
    0,     0,     0,     1930,  1931,  0,     1558,  0,     0,     0,     1558,  1558,  0,     4294,  899,   858,
    858,   858,   0,     0,     1939,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     853,   0,     0,     0,     0,     853,   1236,  0,     1236,  0,     0,
    0,     1960,  855,   853,   1963,  0,     0,     876,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     2269,  0,     0,     1974,  0,     0,     4370,  858,   0,     0,     0,     0,     0,     0,     0,
    0,     855,   0,     0,     0,     0,     0,     0,     1549,  0,     0,     0,     1549,  1549,  0,     0,
    0,     853,   899,   4914,  0,     0,     0,     0,     2113,  2114,  2115,  0,     2116,  2117,  2118,  2119,
    2120,  2121,  0,     0,     0,     0,     4941,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2025,
    0,     0,     1699,  1699,  0,     0,     0,     0,     0,     0,     853,   1558,  1558,  795,   2116,  2117,
    2118,  2119,  2120,  2121,  0,     0,     0,     0,     4530,  0,     0,     0,     0,     0,     0,     0,
    0,     3232,  0,     0,     0,     2444,  0,     0,     0,     0,     0,     0,     0,     1816,  0,     0,
    1817,  0,     0,     4562,  0,     0,     795,   0,     0,     0,     0,     876,   0,     0,     1549,  0,
    0,     1828,  0,     0,     0,     858,   4294,  855,   0,     2268,  0,     0,     0,     0,     0,     1837,
    0,     0,     855,   0,     0,     0,     0,     0,     0,     0,     0,     1236,  0,     1236,  0,     0,
    1236,  0,     1236,  0,     0,     0,     0,     1854,  0,     1559,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1236,  0,     0,     0,     0,     1236,  0,     0,     0,     3679,
    0,     0,     4971,  0,     0,     0,     0,     0,     876,   1236,  0,     0,     0,     0,     5179,  855,
    0,     0,     855,   1387,  0,     0,     0,     0,     0,     1388,  0,     0,     0,     2113,  2114,  2115,
    795,   2116,  2117,  2118,  2119,  2120,  2121,  0,     0,     0,     0,     4951,  0,     0,     0,     0,
    0,     0,     0,     853,   876,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1389,  0,     0,     876,   876,   0,     0,     0,     855,   0,     0,     0,     0,     0,     1910,
    0,     0,     876,   1914,  0,     0,     0,     0,     0,     0,     0,     0,     858,   858,   858,   858,
    0,     0,     0,     0,     1549,  0,     0,     0,     1930,  1931,  0,     1699,  0,     0,     876,   0,
    0,     0,     0,     1390,  0,     0,     1559,  0,     876,   1939,  1391,  0,     0,     1392,  0,     0,
    853,   0,     0,     0,     0,     876,   0,     0,     876,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1236,  855,   0,     1960,  0,     0,     1963,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     4906,  0,     2269,  0,     0,     1974,  0,     0,     1387,  0,     0,     0,
    0,     855,   1388,  1549,  1393,  0,     0,     0,     0,     1549,  0,     0,     1236,  0,     0,     853,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1236,  0,     1236,
    0,     1236,  855,   855,   0,     855,   0,     0,     0,     858,   1389,  899,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     855,   1236,  0,     0,     0,     0,     0,     0,
    1394,  0,     1395,  0,     2025,  0,     0,     0,     0,     0,     0,     0,     1396,  3041,  0,     0,
    876,   0,     0,     0,     1397,  0,     0,     0,     876,   876,   0,     0,     1390,  0,     1398,  0,
    1549,  855,   2257,  1391,  0,     0,     1392,  0,     0,     858,   0,     0,     0,     0,     853,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2402,
    0,     4294,  1400,  1401,  855,   0,     0,     0,     855,   855,   0,     0,     0,     1236,  1236,  0,
    0,     0,     3298,  0,     0,     0,     1816,  1236,  1559,  1817,  5179,  0,     1402,  1393,  2257,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1828,  0,     0,     0,     0,     0,
    853,   0,     2268,  0,     0,     0,     0,     0,     1837,  858,   0,     0,     0,     0,     1816,  0,
    0,     1817,  0,     0,     1403,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1854,  0,     1828,  1699,  1559,  0,     1404,  0,     0,     1394,  2268,  1395,  0,     0,     0,     0,
    1837,  1236,  2113,  2114,  2115,  1396,  2116,  2117,  2118,  2119,  2120,  2121,  0,     1397,  0,     0,
    4991,  0,     1236,  1816,  0,     0,     1817,  1398,  1854,  0,     0,     0,     858,   1559,  0,     0,
    0,     0,     0,     0,     0,     1405,  1406,  1828,  0,     0,     0,     0,     0,     0,     0,     2268,
    0,     0,     0,     0,     0,     1837,  0,     0,     2406,  0,     0,     1400,  1401,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1854,  0,     0,
    0,     1407,  0,     0,     0,     2407,  876,   795,   1910,  0,     0,     0,     1914,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1816,  0,     0,     1817,  0,     0,     0,     1559,  0,
    0,     1930,  1931,  0,     1236,  0,     0,     0,     0,     0,     0,     1828,  1549,  1403,  0,     1549,
    1910,  1549,  1939,  2268,  1914,  0,     1549,  0,     0,     1837,  0,     0,     0,     0,     0,     1404,
    0,     0,     0,     0,     1559,  0,     0,     0,     0,     1930,  1931,  0,     0,     0,     0,     1960,
    0,     1854,  1963,  0,     0,     853,   0,     0,     2257,  0,     1939,  0,     0,     1559,  0,     2269,
    0,     0,     1974,  1699,  0,     1910,  0,     0,     1549,  1914,  0,     0,     876,   0,     1405,  1406,
    0,     0,     0,     0,     0,     0,     0,     1960,  0,     0,     1963,  0,     876,   0,     1930,  1931,
    0,     0,     0,     0,     0,     0,     0,     2269,  0,     0,     1974,  1699,  0,     0,     0,     1939,
    0,     0,     0,     1699,  0,     0,     1549,  855,   0,     0,     1407,  0,     0,     1559,  0,     0,
    1699,  855,   0,     876,   876,   0,     0,     0,     0,     0,     0,     0,     1960,  2025,  876,   1963,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1910,  876,   876,   2269,  1914,  0,     1974,
    0,     0,     0,     0,     0,     0,     0,     0,     876,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     1930,  1931,  0,     2025,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1939,  0,     0,     0,     0,     855,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1549,  0,     1549,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    1960,  0,     0,     1963,  0,     0,     0,     0,     0,     0,     2025,  0,     855,   0,     855,   0,
    2269,  0,     0,     1974,  0,     855,   0,     0,     855,   0,     0,     0,     855,   0,     0,     0,
    0,     0,     0,     0,     855,   855,   0,     0,     1816,  0,     0,     1817,  855,   0,     0,     855,
    855,   855,   855,   0,     1549,  0,     0,     0,     0,     0,     855,   855,   1828,  855,   0,     855,
    855,   0,     0,     855,   2268,  855,   0,     855,   855,   0,     1837,  2113,  2114,  2115,  0,     2116,
    2117,  2118,  2119,  2120,  2121,  0,     0,     0,     1559,  5088,  0,     0,     0,     0,     2025,  0,
    1549,  0,     1854,  855,   2257,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     2113,  2114,  2115,  0,     2116,  2117,  2118,  2119,  2120,  2121,  0,     0,     0,
    0,     4637,  1549,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1816,  0,     0,     1817,  0,     0,     0,     0,     2113,  2114,  2115,  0,     2116,  2117,  2118,  2119,
    2120,  2121,  0,     0,     1828,  855,   5349,  0,     2993,  0,     0,     0,     2268,  0,     0,     0,
    0,     0,     1837,  0,     0,     0,     0,     1549,  0,     0,     1910,  0,     0,     0,     1914,  0,
    0,     0,     855,   0,     0,     0,     0,     0,     0,     0,     1854,  0,     1549,  0,     0,     0,
    0,     0,     0,     1930,  1931,  0,     0,     0,     1549,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1939,  855,   0,     0,     0,     0,     0,     0,     2113,  2114,  2115,  0,
    2116,  2117,  2118,  2119,  2120,  2121,  1816,  0,     2994,  1817,  5488,  0,     0,     0,     0,     0,
    0,     1960,  0,     0,     1963,  0,     0,     0,     0,     0,     1828,  0,     0,     1357,  0,     0,
    0,     2269,  2268,  0,     1974,  0,     0,     0,     1837,  0,     0,     0,     0,     0,     0,     0,
    0,     1549,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1816,  0,     1358,  1817,
    1854,  0,     1910,  0,     0,     1549,  1914,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    1828,  0,     0,     0,     0,     0,     0,     0,     2268,  0,     0,     1930,  1931,  0,     1837,  0,
    0,     1549,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1939,  0,     0,     2025,
    0,     0,     0,     1359,  0,     0,     1854,  1360,  0,     0,     0,     0,     0,     0,     0,     0,
    855,   855,   855,   855,   855,   855,   855,   855,   855,   1960,  855,   1549,  1963,  0,     0,     0,
    0,     0,     0,     3588,  0,     855,   855,   1361,  3589,  2269,  0,     0,     1974,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1910,  0,     0,     0,     1914,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1362,  0,     0,     0,     0,
    0,     1930,  1931,  0,     1816,  0,     0,     1817,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1939,  0,     0,     0,     0,     0,     1828,  0,     1363,  0,     1364,  0,     1910,  0,
    2268,  0,     1914,  0,     1549,  0,     1837,  2025,  0,     0,     0,     0,     0,     0,     0,     1960,
    0,     0,     1963,  0,     0,     0,     0,     1930,  1931,  0,     0,     0,     0,     0,     1854,  2269,
    0,     0,     1974,  0,     0,     0,     0,     0,     1939,  0,     0,     0,     0,     2113,  2114,  2115,
    0,     2116,  2117,  2118,  2119,  2120,  2121,  0,     0,     4259,  2995,  0,     0,     33,    855,   2428,
    0,     1367,  0,     0,     0,     1960,  0,     1368,  1963,  0,     0,     0,     0,     0,     1369,  0,
    0,     855,   0,     0,     0,     2269,  2429,  0,     1974,  0,     855,   855,   0,     0,     0,     1371,
    0,     0,     0,     0,     0,     0,     0,     1372,  0,     0,     0,     0,     4173,  2025,  0,     0,
    5439,  0,     0,     1549,  0,     1559,  0,     0,     0,     1559,  1559,  0,     0,     0,     0,     0,
    0,     0,     0,     876,   0,     0,     1910,  2257,  876,   0,     1914,  876,   1387,  0,     0,     0,
    0,     0,     1388,  0,     0,     0,     0,     0,     0,     0,     0,     1373,  0,     0,     0,     1930,
    1931,  876,   0,     2025,  855,   2113,  2114,  2115,  0,     2116,  2117,  2118,  2119,  2120,  2121,  855,
    1939,  4174,  0,     0,     1374,  0,     855,   0,     0,     0,     1389,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1960,  876,   0,
    1963,  1375,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2269,  0,     0,
    1974,  1376,  876,   876,   0,     0,     0,     0,     0,     0,     0,     1559,  1390,  0,     0,     0,
    0,     0,     5440,  1391,  0,     0,     1392,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     2257,  876,   0,     0,     0,     2257,  0,     0,     0,     2113,  2114,  2115,  0,     2116,
    2117,  2118,  2119,  2120,  2121,  0,     0,     0,     0,     0,     0,     1816,  0,     0,     1817,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1549,  876,   2025,  0,     1393,  876,   1828,
    0,     0,     3551,  0,     0,     0,     0,     2268,  0,     0,     0,     0,     0,     1837,  0,     0,
    876,   2113,  2114,  2115,  0,     2116,  2117,  2118,  2119,  2120,  2121,  876,   0,     1549,  0,     0,
    0,     0,     0,     1549,  0,     1854,  0,     0,     876,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     876,   1816,  0,     0,     1817,  0,     1394,  876,   1395,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     1396,  0,     0,     1828,  0,     0,     0,     0,     1397,  0,     0,
    2268,  0,     0,     0,     0,     0,     1837,  1398,  0,     0,     0,     0,     0,     0,     0,     855,
    0,     1559,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1854,  0,
    0,     0,     0,     0,     0,     0,     2257,  0,     2494,  0,     0,     1400,  1401,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1910,  0,     0,
    0,     1914,  0,     0,     0,     2495,  1549,  0,     0,     2113,  2114,  2115,  0,     2116,  2117,  2118,
    2119,  2120,  2121,  0,     0,     1549,  1930,  1931,  0,     0,     0,     0,     0,     0,     0,     0,
    1559,  0,     0,     0,     0,     0,     1559,  1939,  0,     0,     876,   0,     0,     1403,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1404,
    0,     0,     0,     0,     1960,  0,     1910,  1963,  0,     0,     1914,  0,     0,     876,   0,     0,
    0,     0,     855,   0,     2269,  0,     0,     1974,  0,     0,     0,     0,     0,     0,     0,     1930,
    1931,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1405,  1406,
    1939,  876,   0,     0,     0,     0,     0,     1816,  0,     0,     1817,  0,     0,     1559,  0,     0,
    0,     0,     0,     0,     0,     1549,  0,     0,     876,   0,     0,     1828,  855,   1960,  3599,  0,
    1963,  0,     855,   2268,  0,     0,     0,     0,     0,     1837,  1407,  0,     0,     2269,  0,     0,
    1974,  0,     2025,  0,     855,   855,   0,     0,     0,     0,     855,   0,     0,     0,     0,     3566,
    0,     1854,  0,     0,     0,     0,     0,     0,     1549,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     855,   855,   0,     0,     0,     855,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     855,   855,   855,   855,   0,     0,     0,     0,     2257,  0,
    1549,  0,     0,     0,     855,   2257,  0,     855,   0,     0,     0,     2025,  0,     855,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     855,   855,   0,     0,     855,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1387,  855,   0,     855,   0,     0,     1388,  855,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1910,  1549,  0,     0,     1914,  0,     0,
    0,     855,   0,     0,     0,     0,     1434,  0,     0,     0,     0,     855,   0,     0,     855,   855,
    855,   0,     1930,  1931,  0,     1389,  0,     0,     0,     0,     0,     0,     876,   0,     0,     855,
    2113,  2114,  2115,  1939,  2116,  2117,  2118,  2119,  2120,  2121,  0,     0,     0,     1816,  0,     855,
    1817,  1387,  0,     0,     0,     1435,  0,     1388,  0,     0,     0,     0,     0,     0,     855,   0,
    1960,  1828,  0,     1963,  0,     0,     0,     1390,  0,     2268,  855,   0,     0,     0,     1391,  1837,
    2269,  1392,  0,     1974,  0,     0,     0,     0,     0,     1559,  0,     0,     1559,  0,     1559,  1389,
    0,     0,     0,     1559,  0,     876,   0,     1854,  0,     2113,  2114,  2115,  0,     2116,  2117,  2118,
    2119,  2120,  2121,  0,     876,   876,   0,     0,     0,     0,     855,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1436,  0,     0,     1393,  0,     0,     0,     0,     0,     0,     876,
    0,     1390,  876,   0,     0,     1559,  0,     0,     1391,  0,     0,     1392,  0,     1549,  2025,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1437,  0,     0,     0,     0,     1438,  0,     0,     0,     0,     3604,
    0,     0,     0,     1559,  1439,  0,     1395,  0,     0,     0,     0,     0,     0,     0,     0,     1910,
    1396,  0,     1393,  1914,  0,     0,     0,     0,     1397,  0,     0,     0,     0,     0,     0,     0,
    0,     1440,  1398,  0,     0,     0,     0,     0,     1930,  1931,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     2257,  2257,  2257,  0,     0,     1939,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     1441,  0,     0,     1400,  1401,  1442,  0,     0,     0,     877,   0,     1394,  0,
    1395,  1549,  877,   0,     0,     0,     1960,  0,     876,   1963,  1396,  0,     0,     877,   0,     0,
    1443,  1559,  1397,  1559,  876,   0,     2269,  0,     0,     1974,  0,     1444,  1398,  0,     1549,  876,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2113,  2114,  2115,  0,
    2116,  2117,  2118,  2119,  2120,  2121,  0,     0,     1403,  0,     0,     0,     0,     3144,  0,     0,
    1400,  1401,  0,     0,     0,     0,     0,     0,     0,     0,     1404,  0,     0,     0,     0,     0,
    0,     1559,  0,     0,     0,     0,     0,     0,     0,     0,     1402,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     2025,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     876,   0,     1405,  1406,  0,     0,     1559,  0,     0,
    0,     0,     1403,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1404,  0,     0,     0,     0,     0,     0,     0,     0,     0,     2257,  1559,
    0,     0,     0,     0,     0,     1407,  0,     0,     0,     0,     0,     0,     1549,  876,   0,     876,
    0,     1549,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     876,   0,
    876,   0,     0,     1405,  1406,  0,     0,     1549,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1559,  0,     0,     0,     0,     0,     0,     0,     0,     1549,  0,     1407,
    0,     0,     0,     0,     0,     0,     0,     0,     876,   1559,  0,     0,     0,     0,     0,     0,
    0,     0,     2113,  2114,  2115,  1559,  2116,  2117,  2118,  2119,  2120,  2121,  0,     0,     1816,  0,
    0,     1817,  0,     0,     0,     876,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    855,   0,     1828,  876,   0,     3611,  0,     0,     0,     0,     2268,  0,     0,     0,     0,     0,
    1837,  0,     0,     0,     0,     0,     876,   1549,  0,     876,   0,     1549,  1549,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1854,  0,     0,     855,   0,     0,     1559,  0,
    0,     0,     0,     0,     0,     855,   0,     0,     0,     0,     0,     855,   0,     855,   0,     0,
    0,     0,     1559,  855,   0,     0,     855,   855,   855,   855,   855,   855,   855,   855,   855,   855,
    0,     0,     0,     855,   855,   0,     0,     0,     0,     0,     0,     0,     0,     0,     1559,  0,
    0,     0,     0,     855,   0,     0,     0,     855,   855,   0,     2257,  0,     855,   0,     0,     0,
    0,     855,   0,     0,     0,     0,     0,     0,     0,     0,     0,     855,   0,     877,   855,   0,
    855,   877,   0,     0,     0,     0,     0,     0,     1559,  855,   855,   855,   877,   0,     0,     855,
    1910,  0,     855,   0,     1914,  0,     0,     0,     0,     0,     0,     0,     1816,  0,     0,     1817,
    855,   0,     877,   855,   0,     0,     0,     0,     0,     1930,  1931,  0,     1549,  1549,  0,     855,
    1828,  0,     877,   4180,  0,     855,   855,   877,   2268,  0,     1939,  0,     0,     0,     1837,  0,
    0,     877,   0,     0,     0,     0,     0,     0,     0,     0,     0,     877,   0,     0,     0,     855,
    0,     0,     0,     0,     0,     855,   1854,  1960,  0,     0,     1963,  855,   0,     0,     0,     0,
    0,     1559,  0,     0,     0,     0,     0,     2269,  0,     0,     1974,  0,     0,     0,     0,     0,
    0,     855,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    876,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     877,   0,     0,     0,
    0,     0,     0,     855,   855,   855,   855,   0,     0,     0,     0,     0,     1816,  0,     0,     1817,
    0,     0,     0,     0,     0,     2025,  0,     0,     0,     0,     0,     0,     0,     1387,  1910,  0,
    1828,  0,     1914,  1388,  0,     0,     0,     0,     2268,  2257,  0,     0,     0,     0,     1837,  2257,
    1559,  2257,  0,     0,     0,     0,     0,     1930,  1931,  855,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1854,  0,     1939,  0,     0,     1389,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     2257,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1960,  0,     0,     1963,  0,     0,     0,     0,     876,   0,     0,
    876,   0,     0,     0,     0,     2269,  0,     0,     1974,  0,     0,     0,     0,     1390,  0,     0,
    0,     0,     0,     0,     1391,  0,     0,     1392,  0,     0,     0,     0,     0,     0,     0,     0,
    877,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2257,  878,
    0,     0,     0,     0,     0,     878,   0,     0,     0,     0,     0,     0,     0,     0,     1910,  0,
    878,   0,     1914,  2113,  2114,  2115,  0,     2116,  2117,  2118,  2119,  2120,  2121,  0,     1393,  0,
    0,     0,     0,     2025,  0,     0,     0,     1930,  1931,  855,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1939,  0,     0,     0,     0,     877,   0,     0,
    0,     0,     876,   876,   0,     0,     1559,  0,     0,     876,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1960,  0,     0,     1963,  0,     1394,  0,     1395,  0,     1549,  0,
    0,     0,     0,     0,     0,     2269,  1396,  0,     1974,  877,   1559,  0,     0,     0,     1397,  0,
    1559,  855,   855,   0,     0,     0,     0,     0,     1398,  877,   877,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     877,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     3273,  876,   0,     1400,  1401,  0,     0,
    1387,  0,     0,     877,   0,     0,     1388,  0,     0,     0,     0,     0,     0,     877,   855,   0,
    0,     0,     0,     2025,  0,     0,     3274,  0,     0,     0,     877,   0,     0,     877,   0,     0,
    0,     2113,  2114,  2115,  0,     2116,  2117,  2118,  2119,  2120,  2121,  855,   0,     0,     1389,  0,
    0,     0,     0,     0,     0,     855,   0,     0,     0,     0,     0,     0,     0,     0,     1403,  0,
    855,   855,   0,     1559,  0,     855,   0,     0,     0,     0,     0,     0,     855,   855,   0,     0,
    1404,  855,   1559,  0,     0,     0,     0,     855,   855,   0,     0,     855,   0,     0,     855,   0,
    1390,  0,     0,     0,     0,     0,     0,     1391,  0,     0,     1392,  0,     855,   0,     0,     0,
    0,     0,     0,     0,     855,   0,     0,     0,     855,   0,     0,     0,     0,     0,     0,     1405,
    1406,  0,     0,     0,     855,   0,     0,     0,     0,     855,   0,     0,     0,     0,     855,   0,
    0,     0,     0,     0,     0,     877,   0,     0,     0,     0,     0,     0,     0,     877,   877,   1387,
    0,     1393,  0,     0,     0,     1388,  0,     2258,  0,     0,     0,     1407,  0,     0,     0,     0,
    855,   2113,  2114,  2115,  0,     2116,  2117,  2118,  2119,  2120,  2121,  0,     0,     0,     1434,  0,
    0,     0,     1559,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1389,  0,     0,
    0,     0,     876,   0,     0,     0,     0,     855,   855,   1551,  0,     0,     0,     1394,  0,     1395,
    0,     855,   0,     2258,  0,     0,     0,     855,   0,     1396,  0,     0,     2257,  1435,  0,     0,
    0,     1397,  0,     0,     0,     1559,  0,     0,     0,     0,     0,     1398,  0,     0,     0,     1390,
    878,   0,     0,     0,     878,   0,     1391,  0,     0,     1392,  0,     0,     0,     0,     0,     878,
    0,     0,     0,     0,     0,     0,     0,     0,     876,   0,     0,     0,     3313,  1559,  0,     1400,
    1401,  0,     0,     0,     876,   878,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     878,   0,     0,     0,     3314,  878,   876,   0,     1436,  0,     0,
    1393,  0,     0,     0,     878,   0,     0,     0,     0,     0,     0,     0,     0,     0,     878,   0,
    0,     0,     0,     0,     0,     0,     0,     1559,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     1403,  0,     0,     0,     0,     1551,  0,     0,     0,     876,   0,     0,     1437,  0,     0,
    0,     0,     1438,  1404,  0,     0,     0,     0,     0,     0,     0,     877,   1439,  0,     1395,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     1396,  0,     0,     0,     0,     0,     0,     0,
    1397,  0,     0,     855,   0,     0,     0,     0,     0,     1440,  1398,  0,     0,     0,     855,   878,
    0,     0,     1405,  1406,  0,     1387,  0,     0,     0,     0,     0,     1388,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3260,  0,     0,     1400,  1401,
    1442,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2258,  1407,  0,
    0,     0,     0,     1389,  0,     1559,  0,     0,     3261,  0,     0,     0,     0,     0,     0,     0,
    0,     877,   0,     1444,  0,     0,     0,     0,     0,     876,   0,     0,     0,     0,     0,     0,
    0,     877,   0,     0,     0,     0,     855,   0,     0,     0,     1559,  0,     0,     0,     0,     0,
    1403,  855,   0,     0,     0,     1390,  0,     0,     0,     0,     0,     0,     1391,  855,   0,     1392,
    0,     0,     1404,  0,     0,     0,     855,   855,   877,   877,   855,   0,     0,     0,     0,     0,
    0,     0,     0,     877,   0,     0,     0,     855,   0,     0,     0,     0,     0,     855,   0,     877,
    877,   0,     855,   878,   0,     855,   0,     0,     1551,  0,     855,   855,   0,     877,   0,     0,
    0,     1405,  1406,  0,     0,     0,     1393,  0,     0,     0,     0,     0,     0,     876,   0,     876,
    0,     0,     0,     855,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     855,   0,     1407,  1559,  0,
    855,   855,   0,     855,   1551,  0,     0,     0,     0,     855,   0,     0,     0,     0,     0,     0,
    878,   0,     1394,  0,     1395,  0,     0,     0,     0,     0,     0,     1559,  0,     0,     1396,  0,
    0,     0,     0,     0,     0,     0,     1397,  0,     0,     0,     0,     0,     0,     1551,  876,   -955,
    1398,  0,     0,     0,     0,     0,     0,     855,   1387,  0,     0,     606,   878,   0,     1388,  0,
    0,     0,     0,     2257,  0,     0,     0,     0,     0,     0,     0,     0,     878,   878,   0,     0,
    607,   3782,  0,     0,     1400,  1401,  0,     0,     0,     0,     878,   0,     0,     608,   2257,  0,
    876,   0,     0,     1552,  0,     0,     1389,  609,   0,     2258,  0,     -990,  0,     0,     3783,  0,
    855,   0,     0,     0,     0,     0,     878,   0,     0,     0,     0,     0,     610,   0,     1551,  0,
    878,   0,     611,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     878,   0,     0,
    878,   612,   0,     0,     0,     0,     1403,  0,     1390,  0,     0,     0,     0,     613,   0,     1391,
    0,     0,     1392,  0,     1551,  614,   -684,  0,     1404,  1559,  0,     0,     855,   0,     1559,  0,
    0,     615,   0,     0,     0,     0,     0,     0,     616,   0,     0,     0,     617,   1551,  0,     0,
    0,     855,   0,     855,   1559,  0,     855,   0,     855,   0,     0,     -1191, 0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1405,  1406,  1393,  0,     0,     855,   0,     0,     0,
    0,     855,   0,     0,     0,     855,   0,     0,     0,     0,     1559,  0,     0,     0,     0,     855,
    1552,  0,     618,   0,     0,     0,     0,     0,     0,     -751,  0,     0,     0,     1551,  0,     0,
    0,     0,     0,     1407,  0,     0,     0,     0,     878,   0,     0,     0,     0,     0,     0,     0,
    878,   878,   0,     0,     0,     1394,  0,     1395,  0,     855,   2259,  619,   0,     0,     620,   2257,
    0,     1396,  0,     0,     0,     0,     0,     0,     0,     1397,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     1398,  1559,  0,     0,     0,     1559,  1559,  0,     0,     0,     0,     0,     0,
    0,     -492,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     621,   3853,  0,     2259,  1400,  1401,  622,   0,     0,     0,     0,     0,     -492,
    0,     0,     623,   0,     0,     0,     855,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     3854,  0,     0,     0,     0,     0,     0,     0,     855,   0,     0,     -492,  0,     624,   625,
    0,     626,   627,   0,     0,     0,     0,     0,     0,     0,     628,   0,     0,     0,     0,     629,
    0,     1559,  0,     0,     0,     630,   0,     0,     631,   1403,  0,     632,   0,     0,     0,     0,
    0,     0,     855,   0,     0,     855,   0,     0,     -492,  0,     0,     1404,  0,     0,     0,     0,
    0,     0,     0,     855,   0,     855,   0,     855,   1551,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     1552,  0,     0,     0,     0,     0,     0,     1559,  1559,  0,     0,     0,     0,     855,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1405,  1406,  0,     0,     0,     0,
    0,     0,     0,     0,     633,   0,     0,     0,     0,     0,     876,   0,     0,     0,     878,   634,
    0,     0,     0,     635,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1552,  0,
    0,     636,   0,     0,     855,   0,     1407,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     855,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     855,   855,   0,     0,     1552,  0,     0,     0,     0,     0,     855,   0,     0,
    0,     0,     876,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2259,  0,     0,     0,     0,     0,     855,   189,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     878,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     878,   0,     0,     0,     877,   0,     0,     0,     2258,  877,   0,     0,
    877,   0,     0,     0,     0,     190,   0,     855,   1552,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     191,   0,     0,     877,   0,     855,   0,     0,     878,   878,   0,     0,     0,
    0,     0,     0,     0,     192,   0,     878,   0,     0,     0,     193,   0,     0,     0,     1552,  0,
    0,     0,     878,   878,   0,     0,     2257,  0,     0,     194,   0,     0,     0,     0,     0,     0,
    878,   0,     0,     877,   0,     195,   0,     1552,  0,     0,     0,     0,     0,     196,   197,   0,
    0,     0,     0,     0,     0,     0,     0,     877,   877,   198,   0,     0,     0,     0,     199,   0,
    0,     0,     0,     0,     200,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     2257,  201,   0,     0,     0,     2258,  877,   0,     855,   0,     2258,  0,     0,     0,
    0,     658,   0,     0,     0,     0,     2257,  1552,  0,     0,     0,     0,     202,   659,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     877,
    0,     203,   660,   877,   0,     0,     0,     0,     0,     0,     0,     855,   0,     0,     0,     661,
    0,     0,     0,     0,     0,     877,   0,     0,     0,     0,     0,     0,     0,     662,   0,     0,
    877,   0,     0,     204,   0,     0,     0,     0,     0,     0,     2257,  1559,  2257,  877,   663,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     877,   0,     0,     0,     2259,  0,     0,     877,
    205,   0,     0,     664,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     665,
    0,     0,     0,     0,     0,     2257,  0,     666,   667,   0,     0,     206,   0,     0,     0,     207,
    0,     208,   2257,  668,   0,     0,     0,     209,   669,   0,     210,   0,     0,     0,     670,   0,
    0,     0,     594,   0,     0,     0,     0,     0,     646,   594,   0,     2258,  0,     671,   692,   0,
    594,   0,     0,     211,   212,   594,   213,   743,   0,     0,     214,   0,     0,     0,     0,     0,
    0,     0,     215,   0,     0,     0,     0,     216,   0,     0,     807,   0,     0,     0,     0,     0,
    0,     0,     1552,  217,   0,     1551,  0,     0,     0,     1551,  1551,  672,   0,     0,     0,     0,
    218,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     877,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     673,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     674,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     877,   0,     0,     0,     0,     0,     0,     0,     205,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     219,   0,     0,     0,     0,     0,     0,     220,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     675,   877,   0,     0,     676,   0,     677,   0,     0,     0,     0,
    0,     678,   0,     0,     679,   0,     0,     0,     0,     0,     0,     1551,  0,     877,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     936,   0,     0,     0,     0,     0,     0,     680,   866,
    681,   0,     0,     0,     682,   0,     0,     0,     0,     0,     902,   903,   683,   906,   0,     0,
    912,   684,   914,   0,     0,     0,     922,   0,     937,   0,     0,     0,     0,     685,   0,     0,
    0,     0,     0,     0,     0,     938,   939,   0,     0,     0,     686,   0,     0,     0,     0,     940,
    0,     0,     0,     941,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     2258,  942,   0,     0,     0,     0,     0,     2258,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     943,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     944,   0,     0,     0,     0,     0,     0,     0,     945,   687,   0,
    0,     0,     0,     0,     0,     688,   0,     0,     0,     946,   0,     0,     0,     0,     947,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1551,  0,     948,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     877,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     949,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     950,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1551,  0,     0,     951,   0,     0,     1551,  0,     0,     0,     877,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     877,   877,   0,     0,     0,     0,     0,
    205,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     878,   0,     0,     0,     2259,
    878,   0,     0,     878,   877,   0,     0,     877,   0,     0,     0,     952,   0,     0,     0,     953,
    0,     954,   0,     0,     0,     0,     0,     955,   0,     878,   956,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1551,  0,     0,
    0,     0,     0,     0,     957,   0,     958,   0,     0,     0,     959,   0,     0,     0,     0,     0,
    0,     0,     960,   0,     0,     0,     878,   961,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     878,   878,   0,     0,     0,     1552,
    962,   0,     0,     1552,  1552,  0,     0,     0,     0,     2258,  2258,  2258,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2259,  878,   0,     0,     0,     2259,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     969,   0,     0,     0,     877,   0,     0,
    0,     977,   0,     0,     0,     0,     0,     0,     0,     877,   993,   994,   0,     0,     0,     996,
    0,     0,     878,   0,     877,   0,     878,   0,     0,     0,     0,     963,   0,     0,     0,     0,
    1016,  0,     0,     0,     0,     0,     0,     0,     878,   0,     0,     0,     0,     0,     1024,  0,
    0,     0,     0,     878,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1049,
    878,   0,     1051,  0,     1053,  1552,  1056,  0,     0,     0,     0,     878,   0,     0,     0,     0,
    0,     0,     878,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     877,   0,     594,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1115,  0,     1116,  0,     0,     0,     0,     0,     0,     2259,  0,
    0,     0,     0,     2258,  0,     0,     0,     0,     0,     1551,  0,     0,     1551,  0,     1551,  0,
    0,     0,     877,   1551,  877,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     877,   0,     877,   0,     0,     0,     0,     0,     0,     0,     0,     0,     807,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     878,   0,     0,     1551,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1552,  0,     877,   0,     0,
    0,     0,     0,     0,     0,     878,   0,     0,     0,     0,     0,     1347,  0,     0,     0,     0,
    0,     0,     0,     1551,  0,     0,     0,     0,     0,     0,     877,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     877,   878,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     877,   0,     0,     877,   0,
    878,   0,     0,     0,     0,     0,     1489,  0,     1492,  0,     1552,  0,     0,     0,     0,     0,
    1552,  0,     0,     0,     0,     0,     0,     1504,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1514,  0,     0,     0,     0,     0,     0,     1516,  0,     0,     0,     0,
    0,     1551,  0,     1551,  0,     0,     0,     1563,  0,     0,     1567,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2258,
    0,     0,     0,     1599,  0,     0,     2259,  0,     0,     0,     0,     0,     0,     2259,  0,     1615,
    0,     0,     0,     0,     0,     0,     0,     1552,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     1551,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1662,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1551,  0,     0,
    0,     0,     0,     594,   0,     594,   0,     594,   0,     594,   0,     594,   594,   594,   0,     0,
    0,     0,     594,   0,     878,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1551,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     877,   0,     0,     0,     0,     0,     0,     0,     878,   0,     0,
    0,     0,     0,     0,     1551,  0,     0,     0,     0,     0,     0,     0,     878,   878,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1551,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1551,  0,     878,   0,     0,     878,   0,     0,     0,     2258,  0,
    0,     0,     0,     0,     2258,  0,     2258,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1219,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1554,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2258,  0,     0,     0,
    1281,  0,     0,     1552,  0,     0,     1552,  0,     1552,  0,     0,     0,     0,     1552,  1551,  0,
    807,   0,     877,   0,     0,     877,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1551,  0,     0,     0,     0,     0,     0,     0,     0,     0,     2259,  2259,  2259,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1551,  1552,
    0,     0,     0,     2258,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    878,   0,     0,     0,     0,     2404,  0,     0,     0,     0,     0,     0,     878,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     878,   1551,  0,     0,     0,     0,     1552,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1554,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     877,   877,   0,     0,     0,     0,     0,     877,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     878,
    0,     1551,  0,     0,     0,     0,     0,     0,     0,     0,     0,     1552,  0,     1552,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     877,
    0,     0,     0,     0,     0,     0,     2259,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     878,   0,     878,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     878,   0,     878,   0,     0,     1552,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2634,  0,     0,
    1551,  0,     0,     0,     0,     0,     0,     1552,  0,     0,     0,     0,     2657,  0,     0,     0,
    878,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1554,  0,     0,     0,     0,
    0,     0,     0,     1748,  0,     0,     0,     0,     0,     1552,  0,     2698,  0,     878,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     878,   2710,  0,     0,     0,
    1772,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2725,  0,     2727,  878,   2728,
    0,     878,   0,     0,     2729,  0,     0,     1554,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     1802,  1803,  0,     1806,  0,     0,     0,     0,     0,     0,     0,     0,     594,   1552,  594,
    0,     594,   0,     594,   0,     594,   0,     2131,  0,     594,   0,     0,     0,     0,     0,     0,
    1554,  0,     0,     1552,  0,     0,     0,     877,   0,     0,     0,     0,     0,     0,     0,     1552,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2167,  2258,  2259,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1551,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     2286,  0,     0,     0,     2298,  2303,  0,     0,     0,     0,     877,   0,     0,
    0,     1554,  0,     0,     0,     0,     0,     0,     1552,  877,   1551,  0,     0,     0,     1555,  0,
    1551,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1552,  0,     0,     0,
    877,   0,     0,     0,     0,     0,     0,     1554,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1552,  0,     0,     0,     0,     0,     0,     0,
    1554,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     877,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1552,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     878,   0,     0,     0,     0,     0,     0,     0,
    1554,  0,     0,     1551,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1551,  0,     0,     0,     0,     0,     0,     0,     0,     1555,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     2259,  0,     0,     0,     0,     0,     2259,  0,     2259,  0,     1552,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     877,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2259,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     878,   0,     0,     878,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     1551,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     2259,  0,     0,     0,     1552,  0,     0,     0,     0,     0,
    0,     0,     877,   0,     877,   1551,  0,     0,     0,     0,     0,     1554,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1551,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     878,   878,   0,     1555,  0,     0,
    0,     878,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     877,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1551,  2258,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1555,  1556,  0,     0,     0,     0,     0,
    0,     0,     0,     2258,  2825,  877,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     878,   0,     0,     0,     0,     0,     0,     0,     0,     2848,  0,     0,     2850,  0,
    0,     2861,  1555,  0,     0,     0,     0,     0,     0,     2870,  2875,  0,     0,     0,     2880,  2882,
    1552,  0,     2887,  0,     2889,  0,     0,     2892,  0,     0,     0,     0,     0,     0,     0,     2988,
    2989,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     2900,  0,     1552,  0,     0,     0,     0,     0,     1552,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1555,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3050,  3051,  0,     0,     0,     3054,  3055,  1556,  0,     3058,  1551,  0,     0,     0,     0,     0,
    0,     0,     0,     3068,  0,     0,     0,     0,     0,     1555,  3077,  0,     0,     0,     3080,  3081,
    0,     0,     3084,  3085,  2907,  0,     0,     0,     0,     3090,  0,     0,     0,     0,     0,     0,
    0,     0,     1555,  0,     0,     3106,  0,     3108,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     2919,  0,     0,     2258,  0,     0,     0,     0,     0,     0,     3134,  0,     1552,  0,     0,
    3136,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1552,  0,     0,     0,
    3143,  0,     0,     0,     2926,  0,     0,     0,     0,     3163,  878,   0,     0,     0,     3168,  3169,
    3172,  3174,  1555,  0,     0,     0,     0,     0,     3184,  3187,  0,     0,     0,     0,     1551,  0,
    3198,  0,     0,     0,     2259,  3208,  0,     0,     0,     0,     0,     0,     0,     3219,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1551,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3259,  0,     0,     0,     0,
    878,   0,     0,     0,     0,     0,     3266,  0,     3268,  0,     0,     0,     878,   3271,  0,     0,
    0,     3272,  0,     3276,  3277,  3278,  3279,  0,     3281,  0,     0,     0,     1552,  0,     0,     0,
    0,     0,     0,     878,   0,     3305,  3306,  0,     3308,  1556,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     3316,  3317,  3318,  0,     0,     0,     0,     0,     0,     0,     0,     0,     2928,
    2929,  2930,  2931,  2932,  2933,  2934,  2935,  2936,  0,     2937,  0,     0,     0,     0,     0,     1552,
    0,     0,     878,   0,     1219,  2965,  0,     0,     1554,  0,     0,     0,     1554,  1554,  0,     877,
    0,     0,     0,     0,     0,     1556,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     3389,  0,     0,     0,     1552,  0,     1551,  0,     0,     0,     1555,  1551,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1556,  0,
    0,     0,     0,     0,     1551,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     877,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     1552,  0,     0,     0,     0,     0,     0,     0,     0,     1551,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1554,  0,
    0,     878,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1281,  0,     1556,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1802,  1803,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     1551,  1556,  0,     0,     1551,  1551,  0,     0,     0,     0,     0,     3524,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2258,  0,     0,     1556,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     878,   0,     878,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     3082,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1552,  0,     0,     2258,  0,     0,     0,     0,     0,     0,     1556,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2258,  0,     0,     0,     0,
    0,     0,     0,     0,     1554,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     878,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1551,  1551,  2259,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2258,
    0,     2258,  0,     0,     0,     0,     2259,  0,     878,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1554,  0,     0,     0,     0,     1552,  1554,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     3696,  0,     0,     0,     0,     2258,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1552,  0,     2258,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     3734,  3735,  0,     0,     0,     0,     0,     1556,  0,     0,     0,     0,     0,     0,
    1554,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3361,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3757,  0,     0,     0,
    0,     0,     0,     0,     0,     3761,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     3772,  3774,  0,     0,     0,     3774,  0,     0,     0,     0,     3785,  3786,
    3787,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1552,  0,     0,     0,     2259,  1552,  0,     1555,  0,     0,     0,     1555,  1555,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1552,  0,
    0,     0,     0,     0,     0,     0,     0,     3826,  3827,  3828,  3829,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     3497,  0,     0,     1552,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     3852,  0,     3856,  3857,  3858,  0,     0,     0,     0,     0,     0,
    0,     3871,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1555,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1552,  0,
    0,     0,     1552,  1552,  3546,  0,     0,     0,     0,     3553,  0,     1551,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3923,  0,     1554,  0,     0,     1554,
    0,     1554,  0,     0,     0,     0,     1554,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     3938,  2875,  0,     2875,  2875,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     878,   3614,  0,     0,     3617,  0,     0,     0,     0,     0,     3624,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1554,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     3645,  0,     3647,  4009,  0,     0,     3650,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1554,  0,     0,     0,     878,   0,     0,     2965,  2965,  2965,
    0,     0,     0,     1552,  1552,  0,     1555,  4040,  0,     0,     0,     0,     4044,  0,     3694,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2286,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2303,  0,     0,
    0,     0,     4086,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4096,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1554,  1555,  1554,  0,     0,     0,     0,     1555,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     3743,  0,     0,     0,     0,     2259,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1556,  0,     0,     0,     1556,  1556,  0,     0,     0,     0,
    0,     0,     0,     0,     1554,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2259,  0,     0,     0,     0,     0,
    0,     0,     1555,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2259,  0,
    1554,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2123,  0,     0,     0,
    0,     0,     1554,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1556,  0,     0,     0,
    0,     0,     2259,  0,     2259,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2123,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1554,  0,     0,     0,     0,     0,     2259,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2259,  0,     1554,  0,     0,     0,
    0,     0,     0,     0,     4305,  0,     4306,  0,     1554,  0,     0,     0,     0,     4308,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     4317,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     4325,  0,     0,
    0,     0,     0,     0,     0,     1552,  0,     0,     0,     0,     4345,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     4359,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     1554,  0,     0,     0,     0,     0,     0,     0,     4364,  0,     0,     0,     0,     0,     0,
    0,     0,     1556,  0,     0,     1554,  0,     0,     0,     0,     0,     0,     0,     0,     1555,  0,
    0,     1555,  0,     1555,  0,     0,     0,     0,     1555,  0,     0,     0,     0,     0,     0,     0,
    0,     1554,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     4425,  4426,  4427,  0,
    0,     4430,  4431,  4432,  4433,  4434,  0,     0,     0,     0,     4441,  4442,  0,     4444,  4445,  4446,
    4447,  4448,  4449,  4450,  0,     0,     0,     0,     0,     0,     1555,  1554,  4458,  0,     0,     4460,
    4461,  1556,  0,     0,     0,     0,     0,     1556,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1555,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     4511,
    4513,  4515,  0,     0,     4518,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1554,  0,     0,     0,     0,     0,     4128,  0,     0,     0,     1556,  0,
    0,     0,     0,     0,     4132,  0,     0,     0,     0,     0,     4133,  0,     4134,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     4152,  4153,  0,     0,     1555,  0,     1555,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     4167,  0,     0,     0,     0,     2882,  0,     3774,  0,     0,
    4181,  0,     0,     0,     0,     0,     0,     0,     0,     0,     4188,  0,     0,     4191,  2123,  4193,
    0,     0,     0,     0,     0,     0,     0,     0,     4197,  0,     0,     0,     0,     0,     4202,  0,
    0,     4205,  0,     1554,  0,     0,     1555,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     4247,  0,
    0,     0,     0,     0,     4254,  2965,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1555,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2123,  4265,  0,
    0,     0,     0,     0,     1219,  0,     0,     0,     0,     0,     1281,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     1555,  2123,  0,     0,     0,     0,     2857,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     2123,  2123,  0,     0,     2123,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1555,  1556,  0,     0,     1556,  0,     1556,
    0,     0,     0,     0,     1556,  0,     0,     0,     0,     0,     0,     0,     0,     0,     1555,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1554,  1555,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     4725,  4726,  4727,  4728,  0,     0,     4730,
    0,     0,     0,     0,     0,     0,     1556,  0,     0,     0,     0,     0,     0,     1554,  0,     0,
    0,     0,     0,     1554,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1555,  1556,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4785,  4786,  4787,  4788,  0,     4790,  4791,  1555,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     4800,  4801,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1555,  0,     0,     0,     0,     4810,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     1554,  0,     0,     0,     0,     0,     0,     1555,  0,     0,
    0,     0,     1556,  0,     1556,  1554,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4579,  4580,  1556,  4871,  0,     0,     0,     0,     0,     0,     0,     0,     4877,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     1555,  0,     0,     0,     0,     0,     2123,  0,     0,     0,
    0,     0,     4898,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1556,  0,
    0,     0,     0,     0,     0,     1554,  0,     0,     0,     0,     0,     0,     4922,  4611,  0,     0,
    2123,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1556,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1554,  0,     0,     0,     0,     0,     0,     4631,
    4633,  0,     0,     0,     4639,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4644,  0,     0,     0,     0,     1555,  4649,  4650,  0,     0,     4652,  0,     0,     4655,  0,     0,
    1554,  0,     0,     0,     0,     1556,  0,     0,     0,     0,     0,     4665,  0,     0,     0,     0,
    594,   0,     0,     0,     0,     0,     0,     0,     0,     0,     1556,  0,     0,     0,     0,     0,
    0,     0,     0,     2965,  0,     0,     1556,  2123,  2965,  0,     0,     0,     0,     2965,  0,     0,
    0,     0,     0,     2123,  0,     0,     0,     0,     2123,  0,     1554,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     5021,  0,     0,     0,     0,     0,     0,     4706,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     5043,  0,     0,     0,     1556,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1556,  0,     0,     5058,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1556,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1555,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1556,  0,     0,     0,     0,     0,     1555,
    0,     0,     0,     0,     0,     1555,  0,     0,     0,     0,     0,     0,     0,     1554,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3774,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1556,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     4855,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     5192,  0,     1555,  0,     0,     0,     0,     0,     0,     0,
    0,     1554,  0,     0,     0,     0,     0,     1555,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1554,  5209,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1556,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     4946,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     4950,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1555,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     3774,  0,     0,     0,     0,     0,     0,     0,     4979,  4980,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1555,  0,     1554,  0,     0,     0,
    0,     1554,  0,     0,     5308,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2965,  0,     2965,  0,     0,     0,     0,     1554,  0,     0,     0,     0,     5327,  0,     0,     0,
    0,     0,     1555,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     5341,  0,     0,     0,     0,     5345,  0,     0,     1554,  0,     0,
    0,     0,     2123,  0,     0,     0,     0,     1556,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     2123,  0,     2123,  1555,  2857,  2857,  3584,
    0,     0,     2857,  0,     0,     0,     2123,  0,     0,     0,     0,     1556,  0,     0,     0,     2123,
    0,     1556,  0,     0,     2123,  0,     0,     0,     0,     2123,  0,     2123,  0,     0,     0,     0,
    2123,  5393,  2123,  0,     0,     2123,  0,     1554,  0,     0,     0,     1554,  1554,  2123,  0,     0,
    0,     2857,  2857,  0,     2123,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2123,  0,     0,     0,     0,     0,     0,     2123,  0,     2123,  2123,  2123,  2123,  2123,  2123,  2123,
    2123,  2123,  2123,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2123,  0,
    5146,  0,     0,     0,     0,     2882,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     1556,  0,     0,     0,     0,     0,     0,     5161,  0,     0,     0,     0,
    5164,  0,     0,     1556,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1806,  1555,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1554,  1554,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     2123,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1556,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     1555,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     5252,  0,     0,     0,     0,     0,     0,     0,
    1555,  0,     0,     0,     0,     0,     1556,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     2286,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1556,  0,
    0,     0,     0,     0,     0,     0,     4979,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     5314,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1556,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1555,  0,
    0,     0,     0,     1555,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     5371,  5371,  0,     0,     0,     0,     0,     1555,  0,     0,     4979,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2123,  0,     0,     0,     0,     1555,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     5371,  0,     0,     0,     0,     0,     0,     0,     1554,  0,
    0,     0,     0,     0,     0,     0,     0,     5448,  0,     0,     0,     1556,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1555,  0,     0,     0,     1555,  1555,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     2123,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     5371,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1556,
    0,     0,     0,     2123,  0,     0,     0,     0,     0,     0,     2123,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3584,  3584,  1556,  2857,  0,     0,
    2857,  2857,  2857,  2857,  2857,  2857,  2857,  2857,  2857,  2857,  3584,  0,     0,     0,     1555,  1555,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     2123,  0,     0,     2123,  0,     0,     0,     0,     0,
    0,     2123,  0,     0,     0,     0,     3584,  3584,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     2857,  2857,  2123,  0,     2123,  0,     0,     2123,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     2123,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1556,  0,     0,     0,     0,     1556,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1556,  0,     0,     2123,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1556,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1556,  0,     0,     0,     1556,  1556,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1555,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     2857,  0,     0,     0,     0,     0,     0,     1556,  1556,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     2123,  0,     0,     0,     2123,  2123,  2123,
    0,     0,     3584,  0,     0,     0,     0,     3584,  3584,  3584,  3584,  3584,  3584,  3584,  3584,  3584,
    3584,  2123,  2123,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2123,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2123,  0,
    0,     0,     0,     0,     0,     2123,  2857,  2857,  2123,  0,     2123,  0,     0,     0,     2123,  3584,
    3584,  0,     0,     2123,  0,     0,     2123,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2123,  0,     0,     0,     0,     0,     0,     2123,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     2123,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1556,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3584,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2123,  2123,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2123,  0,     0,     0,
    2857,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2123,  0,     2123,  0,     0,     0,     0,     0,     2123,  0,     0,     3584,  3584,  2123,  0,     0,
    2857,  2857,  2123,  2123,  0,     2123,  0,     0,     2123,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     2123,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2123,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2123,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3584,  2857,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2123,  0,     3584,  3584,  2123,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2123,  2123,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     2123,  3584,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     2123,  0,     0,     2123,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2123,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2123,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     2123,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     2168,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     2123,  224,   225,   226,   227,   228,   229,   230,   231,   2169,  233,   234,   235,   2170,  2171,
    2172,  2173,  2174,  2175,  2176,  236,   237,   2177,  238,   239,   830,   240,   241,   242,   243,   244,
    831,   245,   246,   2178,  247,   248,   249,   250,   251,   2179,  2180,  252,   253,   254,   255,   256,
    2181,  257,   258,   259,   260,   261,   2182,  832,   2183,  262,   263,   264,   265,   266,   833,   267,
    268,   2184,  269,   270,   271,   272,   273,   274,   2185,  834,   5509,  276,   2186,  2187,  2188,  835,
    2189,  2190,  2191,  277,   278,   279,   280,   281,   282,   283,   284,   285,   2192,  286,   2193,  287,
    288,   289,   5510,  291,   2194,  292,   293,   294,   2195,  2196,  295,   296,   297,   298,   299,   2197,
    300,   301,   302,   2198,  303,   304,   5511,  306,   2199,  2200,  307,   308,   309,   310,   311,   312,
    313,   314,   2201,  315,   2202,  316,   317,   318,   2203,  2204,  5512,  2205,  320,   836,   2206,  837,
    321,   322,   323,   2207,  324,   325,   2208,  326,   2209,  5513,  328,   329,   330,   331,   838,   332,
    333,   334,   2210,  335,   336,   337,   338,   339,   340,   2211,  341,   839,   342,   343,   344,   345,
    346,   347,   348,   2212,  349,   2213,  350,   840,   841,   351,   842,   352,   353,   354,   355,   356,
    2214,  357,   358,   2215,  359,   360,   843,   361,   844,   2216,  362,   363,   364,   2217,  2218,  365,
    366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
    845,   382,   383,   384,   385,   2219,  386,   387,   846,   388,   5514,  389,   390,   391,   392,   393,
    394,   2221,  395,   2222,  2223,  396,   397,   398,   2224,  2225,  399,   400,   847,   401,   848,   402,
    403,   404,   405,   406,   2226,  407,   408,   2227,  409,   410,   2228,  411,   412,   413,   414,   2229,
    415,   416,   417,   418,   419,   5515,  421,   422,   423,   424,   425,   426,   427,   2230,  428,   429,
    430,   431,   432,   433,   434,   435,   436,   437,   438,   2231,  439,   440,   849,   441,   442,   443,
    444,   445,   446,   447,   448,   449,   450,   451,   2232,  452,   453,   454,   455,   456,   2233,  457,
    458,   459,   460,   850,   461,   462,   463,   2234,  464,   465,   466,   467,   468,   469,   470,   471,
    472,   473,   474,   2235,  475,   476,   2236,  477,   478,   479,   480,   481,   482,   2237,  483,   484,
    2238,  2239,  485,   486,   487,   488,   2240,  489,   490,   491,   492,   2241,  493,   494,   2242,  2243,
    495,   496,   497,   498,   499,   2244,  2245,  500,   501,   502,   503,   504,   505,   506,   2246,  507,
    851,   508,   509,   510,   511,   2247,  2248,  512,   2249,  2250,  513,   514,   515,   516,   517,   518,
    519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
    535,   536,   2251,  537,   2252,  538,   539,   540,   541,   542,   543,   5516,  545,   546,   547,   548,
    549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   5517,  561,   562,   563,   564,
    565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,
    2253,  581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,
    0,     0,     0,     0,     0,     2168,  0,     0,     0,     0,     0,     0,     0,     0,     0,     5518,
    224,   225,   226,   227,   228,   229,   230,   231,   2169,  233,   234,   235,   2170,  2171,  2172,  2173,
    2174,  2175,  2176,  236,   237,   2177,  238,   239,   830,   240,   241,   242,   243,   244,   831,   245,
    246,   2178,  247,   248,   249,   250,   251,   2179,  2180,  252,   253,   254,   255,   256,   2181,  257,
    258,   259,   260,   261,   2182,  832,   2183,  262,   263,   264,   265,   266,   833,   267,   268,   2184,
    269,   270,   271,   272,   273,   274,   2185,  834,   275,   276,   2186,  2187,  2188,  835,   2189,  2190,
    2191,  277,   278,   279,   280,   281,   282,   283,   284,   285,   2192,  286,   2193,  287,   288,   289,
    290,   291,   2194,  292,   293,   294,   2195,  2196,  295,   296,   297,   298,   299,   2197,  300,   301,
    302,   2198,  303,   304,   305,   306,   2199,  2200,  307,   308,   309,   310,   311,   312,   313,   314,
    2201,  315,   2202,  316,   317,   318,   2203,  2204,  319,   2205,  320,   836,   2206,  837,   321,   322,
    323,   2207,  324,   325,   2208,  326,   2209,  327,   328,   329,   330,   331,   838,   332,   333,   334,
    2210,  335,   336,   337,   338,   339,   340,   2211,  341,   839,   342,   343,   344,   345,   346,   347,
    348,   2212,  349,   2213,  350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   2214,  357,
    358,   2215,  359,   360,   843,   361,   844,   2216,  362,   363,   364,   2217,  2218,  365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   845,   382,
    383,   384,   385,   2219,  386,   387,   846,   388,   2220,  389,   390,   391,   392,   393,   394,   2221,
    395,   2222,  2223,  396,   397,   398,   2224,  2225,  399,   400,   847,   401,   848,   402,   403,   404,
    405,   406,   2226,  407,   408,   2227,  409,   410,   2228,  411,   412,   413,   414,   2229,  415,   416,
    417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   2230,  428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   2231,  439,   440,   849,   441,   442,   443,   444,   445,
    446,   447,   448,   449,   450,   451,   2232,  452,   453,   454,   455,   456,   2233,  457,   458,   459,
    460,   850,   461,   462,   463,   2234,  464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
    474,   2235,  475,   476,   2236,  477,   478,   479,   480,   481,   482,   2237,  483,   484,   2238,  2239,
    485,   486,   487,   488,   2240,  489,   490,   491,   492,   2241,  493,   494,   2242,  2243,  495,   496,
    497,   498,   499,   2244,  2245,  500,   501,   502,   503,   504,   505,   506,   2246,  507,   851,   508,
    509,   510,   511,   2247,  2248,  512,   2249,  2250,  513,   514,   515,   516,   517,   518,   519,   520,
    521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    2251,  537,   2252,  538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,
    551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
    567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   2253,  581,
    582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,
    0,     0,     0,     829,   1132,  653,   1133,  1134,  1135,  708,   1136,  0,     0,     5596,  224,   225,
    226,   227,   228,   229,   230,   231,   2959,  233,   234,   235,   0,     0,     0,     0,     1137,  0,
    0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,  831,   1139,  1140,  0,
    247,   248,   249,   250,   251,   1141,  1142,  252,   253,   1143,  1144,  256,   0,     257,   258,   259,
    260,   1145,  0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,
    271,   272,   273,   274,   0,     834,   275,   276,   1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,
    278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,   290,   291,
    0,     292,   293,   294,   2960,  0,     295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   0,     0,     307,   308,   309,   1157,  311,   312,   313,   1158,  1159,  315,
    0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,
    324,   1161,  0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   0,     335,
    336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,  1163,  0,
    1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,
    359,   1165,  843,   361,   844,   0,     362,   363,   364,   1166,  1167,  365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,  383,   384,
    385,   1170,  386,   387,   846,   388,   1171,  1172,  390,   1173,  392,   393,   394,   0,     395,   0,
    0,     1174,  397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,  403,   404,   405,   406,
    0,     407,   408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,     415,   416,   417,   418,
    419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   1178,  444,   445,   446,   447,
    448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   1179,  457,   458,   459,   460,   850,
    461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   1181,  0,
    475,   476,   1182,  477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,     485,   1185,
    487,   1186,  1187,  489,   490,   491,   492,   0,     493,   494,   0,     1188,  495,   496,   497,   498,
    499,   1189,  0,     500,   501,   502,   503,   504,   505,   1190,  2961,  507,   851,   508,   509,   510,
    511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   1191,  1192,  1193,
    1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,   535,   536,   1199,  537,
    0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,  549,   550,   551,   552,
    553,   554,   555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
    569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,
    584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,     0,     0,
    0,     1203,  1204,  2962,  0,     0,     0,     0,     0,     0,     1206,  2963,  829,   1132,  653,   1133,
    1134,  1135,  708,   1136,  0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,
    233,   234,   235,   0,     0,     0,     0,     1137,  0,     0,     236,   237,   0,     238,   239,   830,
    240,   241,   242,   243,   1138,  831,   1139,  1140,  0,     247,   248,   249,   250,   251,   1141,  1142,
    252,   253,   1143,  1144,  256,   0,     257,   258,   259,   260,   1145,  0,     1146,  0,     262,   263,
    264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,
    276,   1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,   280,   281,   282,   1154,  1155,
    285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,
    296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,
    308,   309,   1157,  311,   312,   313,   1158,  1159,  315,   0,     316,   317,   1160,  0,     0,     319,
    0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   1161,  0,     326,   0,     327,   328,
    329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    839,   342,   343,   344,   345,   346,   1162,  1163,  0,     1164,  0,     350,   840,   841,   351,   842,
    352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   1165,  843,   361,   844,   0,     362,
    363,   364,   1166,  1167,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   379,   380,   1168,  845,   1169,  383,   384,   385,   1170,  386,   387,   846,   388,   1171,
    1172,  390,   1173,  392,   393,   394,   0,     395,   0,     0,     1174,  397,   398,   0,     0,     399,
    400,   847,   401,   848,   1175,  403,   404,   405,   406,   0,     407,   408,   0,     409,   1176,  0,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1177,  424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   849,   441,   442,   1178,  444,   445,   446,   447,   448,   449,   450,   451,   38,    452,   453,
    454,   455,   456,   1179,  457,   458,   459,   460,   850,   461,   1180,  463,   0,     464,   465,   466,
    467,   468,   469,   470,   471,   472,   473,   1181,  0,     475,   476,   1804,  477,   478,   479,   480,
    481,   482,   0,     1183,  1184,  0,     0,     485,   1185,  487,   1186,  1187,  489,   490,   491,   492,
    0,     493,   494,   0,     1188,  495,   496,   497,   498,   499,   1189,  0,     500,   501,   502,   503,
    504,   1071,  1190,  0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     47,    513,
    514,   515,   516,   517,   518,   519,   1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,
    530,   531,   532,   533,   534,   535,   536,   1199,  537,   0,     538,   539,   540,   541,   542,   543,
    544,   545,   546,   1200,  1201,  549,   550,   551,   552,   553,   554,   555,   556,   1202,  558,   559,
    560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
    576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
    591,   592,   0,     0,     0,     0,     0,     0,     0,     0,     1203,  1204,  0,     0,     0,     0,
    0,     0,     0,     1206,  5175,  829,   1132,  653,   1133,  1134,  1135,  708,   1136,  0,     0,     0,
    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,
    1137,  0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,  831,   1139,
    1140,  0,     247,   248,   249,   250,   251,   1141,  1142,  252,   253,   1143,  1144,  256,   0,     257,
    258,   259,   260,   1145,  0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,   268,   0,
    269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   1147,  1148,  1149,  1150,  1151,  1152,
    1153,  277,   278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,
    290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   1157,  311,   312,   313,   1158,
    1159,  315,   0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,
    323,   0,     324,   1161,  0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,
    1163,  0,     1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,
    358,   0,     359,   1165,  843,   361,   844,   0,     362,   363,   364,   1166,  1167,  365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,
    383,   384,   385,   1170,  386,   387,   846,   388,   1171,  1172,  390,   1173,  392,   393,   394,   0,
    395,   0,     0,     1174,  397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,  403,   404,
    405,   406,   0,     407,   408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   1178,  444,   445,
    446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   1179,  457,   458,   459,
    460,   850,   461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
    1181,  0,     475,   476,   1182,  477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,
    485,   1185,  487,   1186,  1187,  489,   490,   491,   492,   0,     493,   494,   0,     1188,  495,   496,
    497,   498,   499,   1189,  0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,   851,   508,
    509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   1191,
    1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,   535,   536,
    1199,  537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,  549,   550,
    551,   552,   553,   554,   555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,   565,   566,
    567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,
    582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,
    0,     0,     0,     1203,  1204,  223,   0,     0,     0,     0,     0,     0,     1206,  2859,  0,     0,
    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,
    0,     4225,  0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,
    246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,
    258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,
    269,   270,   271,   272,   273,   274,   0,     -1787, 275,   276,   0,     0,     0,     0,     0,     0,
    0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,
    290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,
    0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     -1787, 321,   322,
    323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   -1787, 342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   0,     0,     351,   -1787, 352,   353,   354,   355,   356,   0,     357,
    358,   0,     359,   360,   -1787, 361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   -1787, 382,
    383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,
    395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,
    405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   -1787, 441,   442,   443,   444,   445,
    446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,
    460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
    474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,
    485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,
    497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,
    509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,
    521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,
    551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
    567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,
    582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,
    0,     0,     0,     1525,  0,     0,     0,     0,     0,     0,     0,     0,     0,     1290,  224,   225,
    226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,
    0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   0,     1526,  831,   1527,  1528,  0,
    247,   248,   249,   250,   251,   0,     0,     252,   253,   1529,  1530,  256,   0,     257,   258,   259,
    260,   0,     0,     832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,
    271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,     277,
    278,   279,   280,   281,   282,   1531,  1532,  285,   0,     286,   0,     287,   288,   289,   290,   291,
    0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,
    303,   304,   305,   306,   0,     0,     307,   308,   309,   0,     311,   312,   313,   0,     0,     315,
    0,     316,   317,   1533,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,
    324,   0,     0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   2322,  335,
    336,   337,   338,   339,   340,   0,     341,   839,   2323,  343,   344,   345,   346,   1534,  1535,  0,
    1536,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,
    359,   0,     843,   361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1537,  845,   1538,  383,   384,
    0,     0,     386,   387,   846,   388,   0,     0,     390,   1539,  392,   393,   394,   0,     395,   0,
    0,     396,   397,   398,   0,     0,     399,   2325,  847,   401,   848,   0,     403,   404,   405,   406,
    0,     407,   408,   0,     409,   0,     0,     0,     412,   413,   414,   0,     415,   416,   417,   418,
    419,   420,   421,   422,   1540,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   0,     444,   445,   446,   447,
    448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   2326,  459,   460,   850,
    461,   1542,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   0,     0,
    475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     1543,  1544,  0,     0,     485,   0,
    487,   0,     0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,
    499,   0,     0,     500,   501,   502,   503,   504,   0,     1545,  2327,  507,   851,   508,   509,   510,
    511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,
    0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   0,     0,     549,   550,   551,   552,
    553,   554,   555,   556,   0,     558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
    569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   0,     580,   0,     581,   582,   1525,
    584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     224,   225,   226,   227,   228,   229,
    230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     2432,  0,     236,   237,   0,
    238,   239,   830,   240,   241,   242,   0,     1526,  831,   1527,  1528,  0,     247,   248,   249,   250,
    251,   0,     0,     252,   253,   1529,  1530,  256,   0,     257,   258,   259,   260,   0,     0,     832,
    0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,
    0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,     277,   278,   279,   280,   281,
    282,   1531,  1532,  285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,
    0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    0,     0,     307,   308,   309,   0,     311,   312,   313,   0,     0,     315,   0,     316,   317,   1533,
    0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   0,     0,     326,
    0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   2322,  335,   336,   337,   338,   339,
    340,   0,     341,   839,   2323,  343,   344,   345,   346,   1534,  1535,  0,     1536,  0,     350,   840,
    841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   0,     843,   361,
    844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   378,   379,   380,   1537,  845,   1538,  383,   384,   0,     0,     386,   387,
    846,   388,   0,     0,     390,   1539,  392,   393,   394,   0,     395,   0,     0,     396,   397,   398,
    0,     0,     399,   2325,  847,   401,   848,   0,     403,   404,   405,   406,   0,     407,   408,   0,
    409,   0,     0,     0,     412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,
    1540,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
    438,   0,     439,   440,   849,   441,   442,   0,     444,   445,   446,   447,   448,   449,   450,   451,
    0,     452,   453,   454,   455,   456,   0,     457,   2326,  459,   460,   850,   461,   1542,  463,   0,
    464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   0,     0,     475,   476,   0,     477,
    478,   479,   480,   481,   482,   0,     1543,  1544,  0,     0,     485,   0,     487,   0,     0,     489,
    490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,
    501,   502,   503,   504,   0,     1545,  2327,  507,   851,   508,   509,   510,   511,   0,     0,     512,
    0,     0,     513,   514,   515,   516,   517,   518,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,
    541,   542,   543,   544,   545,   546,   0,     0,     549,   550,   551,   552,   553,   554,   555,   556,
    0,     558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,
    573,   574,   575,   576,   577,   578,   0,     580,   0,     581,   582,   0,     584,   585,   586,   587,
    588,   589,   590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     0,     1525,  1412,  653,
    0,     0,     884,   708,   0,     0,     0,     3460,  224,   225,   226,   227,   228,   229,   230,   231,
    2169,  233,   234,   235,   2170,  2171,  2172,  2173,  2174,  2175,  2176,  236,   237,   2177,  238,   239,
    830,   240,   241,   242,   0,     1526,  831,   1527,  1528,  2178,  247,   248,   249,   250,   251,   2179,
    2180,  252,   253,   1529,  1530,  256,   2181,  257,   258,   259,   260,   0,     2182,  832,   2183,  262,
    263,   264,   265,   266,   833,   267,   268,   2184,  269,   270,   271,   272,   273,   274,   2185,  834,
    275,   276,   2186,  2187,  2188,  835,   2189,  2190,  2191,  277,   278,   279,   280,   281,   282,   1531,
    1532,  285,   2192,  286,   2193,  287,   288,   289,   290,   291,   2194,  292,   293,   294,   2195,  2196,
    295,   296,   1156,  298,   299,   2197,  300,   301,   302,   2198,  303,   304,   305,   306,   2199,  2200,
    307,   308,   309,   0,     311,   312,   313,   0,     2201,  315,   2202,  316,   317,   1533,  2203,  2204,
    319,   2205,  320,   836,   2206,  837,   321,   322,   323,   2207,  324,   0,     2208,  326,   2209,  327,
    328,   329,   330,   331,   838,   332,   333,   334,   2210,  335,   336,   337,   338,   339,   340,   2211,
    341,   839,   0,     343,   344,   345,   346,   1534,  1535,  2212,  1536,  2213,  350,   840,   841,   351,
    842,   352,   353,   354,   355,   356,   2214,  357,   358,   2215,  359,   0,     843,   361,   844,   2216,
    362,   363,   364,   2217,  2218,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   379,   380,   1537,  845,   1538,  383,   384,   3970,  2219,  386,   387,   846,   388,
    2220,  0,     390,   1539,  392,   393,   394,   2221,  395,   2222,  2223,  3971,  397,   398,   2224,  2225,
    399,   0,     847,   401,   848,   0,     403,   404,   405,   406,   2226,  407,   408,   2227,  409,   0,
    2228,  0,     412,   413,   414,   2229,  415,   416,   417,   418,   419,   420,   421,   422,   1540,  424,
    425,   426,   427,   2230,  428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   2231,
    439,   440,   849,   441,   442,   3972,  444,   445,   446,   447,   448,   449,   450,   451,   2232,  452,
    453,   454,   455,   456,   2233,  457,   2326,  459,   460,   850,   461,   1542,  463,   2234,  464,   465,
    466,   467,   468,   469,   470,   471,   472,   473,   0,     2235,  475,   476,   2236,  477,   478,   479,
    480,   481,   482,   2237,  1543,  1544,  2238,  2239,  485,   0,     487,   0,     2240,  489,   490,   491,
    492,   2241,  493,   494,   2242,  2243,  495,   496,   497,   498,   499,   2244,  2245,  500,   501,   502,
    503,   504,   0,     1545,  2246,  507,   851,   508,   509,   510,   511,   2247,  2248,  512,   2249,  2250,
    513,   514,   515,   516,   517,   518,   0,     0,     0,     0,     0,     0,     0,     0,     0,     528,
    529,   530,   531,   532,   533,   534,   535,   536,   2251,  537,   2252,  538,   539,   540,   541,   542,
    543,   544,   545,   546,   0,     0,     549,   550,   551,   552,   553,   554,   555,   556,   0,     558,
    559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
    575,   576,   577,   578,   0,     580,   2253,  581,   582,   0,     584,   585,   586,   587,   588,   589,
    590,   591,   592,   0,     0,     0,     0,     887,   888,   889,   0,     3973,  3974,  892,   893,   894,
    895,   0,     0,     0,     5594,  829,   1132,  653,   1133,  1134,  1135,  708,   1136,  0,     0,     0,
    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,
    1137,  0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,  831,   1139,
    1140,  2871,  247,   248,   249,   250,   251,   1141,  1142,  252,   253,   1143,  1144,  256,   0,     257,
    258,   259,   260,   1145,  0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,   268,   0,
    269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   1147,  1148,  1149,  1150,  1151,  1152,
    1153,  277,   278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,
    290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   1157,  311,   312,   313,   1158,
    1159,  315,   0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   2872,  837,   321,   322,
    323,   0,     324,   1161,  0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,
    1163,  0,     1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,
    358,   2873,  359,   1165,  843,   361,   844,   0,     362,   363,   364,   1166,  1167,  365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,
    383,   384,   385,   1170,  386,   387,   846,   388,   1171,  1172,  390,   1173,  392,   393,   394,   0,
    395,   0,     0,     1174,  397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,  403,   404,
    405,   406,   0,     407,   408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   1178,  444,   445,
    446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   1179,  457,   458,   459,
    460,   850,   461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
    1181,  0,     475,   476,   1182,  477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     2874,
    485,   1185,  487,   1186,  1187,  489,   490,   491,   492,   0,     493,   494,   0,     1188,  495,   496,
    497,   498,   499,   1189,  0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,   851,   508,
    509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   1191,
    1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,   535,   536,
    1199,  537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,  549,   550,
    551,   552,   553,   554,   555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,   565,   566,
    567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,
    582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,
    0,     0,     0,     1203,  1204,  0,     0,     0,     0,     0,     0,     0,     1206,  829,   1132,  653,
    1133,  1134,  1135,  708,   1136,  0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,
    0,     233,   234,   235,   0,     0,     0,     0,     1137,  0,     0,     236,   237,   0,     238,   239,
    830,   240,   241,   242,   243,   1138,  831,   1139,  1140,  0,     247,   248,   249,   250,   251,   1141,
    1142,  252,   253,   1143,  1144,  256,   0,     257,   258,   259,   260,   1145,  0,     1146,  0,     262,
    263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,
    275,   276,   1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,   280,   281,   282,   1154,
    1155,  285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,
    295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,
    307,   308,   309,   1157,  311,   312,   313,   1158,  1159,  315,   0,     316,   317,   1160,  0,     0,
    319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   1161,  0,     326,   0,     327,
    328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   839,   342,   343,   344,   345,   346,   1162,  1163,  0,     1164,  0,     350,   840,   841,   351,
    842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   1165,  843,   361,   844,   0,
    362,   363,   364,   1166,  1167,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   379,   380,   1168,  845,   1169,  383,   384,   385,   1170,  386,   387,   846,   388,
    1171,  1172,  390,   1173,  392,   393,   394,   0,     395,   0,     0,     1174,  397,   398,   0,     0,
    399,   400,   847,   401,   848,   1175,  403,   404,   405,   406,   0,     407,   408,   0,     409,   1176,
    0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1177,  424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   849,   441,   442,   1178,  444,   445,   446,   447,   448,   449,   450,   451,   38,    452,
    453,   454,   455,   456,   1179,  457,   458,   459,   460,   850,   461,   1180,  463,   0,     464,   465,
    466,   467,   468,   469,   470,   471,   472,   473,   1181,  0,     475,   476,   1804,  477,   478,   479,
    480,   481,   482,   0,     1183,  1184,  0,     0,     485,   1185,  487,   1186,  1187,  489,   490,   491,
    492,   0,     493,   494,   0,     1188,  495,   496,   497,   498,   499,   1189,  0,     500,   501,   502,
    503,   504,   1071,  1190,  0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     47,
    513,   514,   515,   516,   517,   518,   519,   1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,
    529,   530,   531,   532,   533,   534,   535,   536,   1199,  537,   0,     538,   539,   540,   541,   542,
    543,   544,   545,   546,   1200,  1201,  549,   550,   551,   552,   553,   554,   555,   556,   1202,  558,
    559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
    575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,
    590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     0,     1203,  1204,  0,     0,     0,
    0,     0,     0,     0,     1206,  829,   1132,  653,   1133,  1134,  1135,  708,   1136,  0,     0,     0,
    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,
    1137,  0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,  831,   1139,
    1140,  0,     247,   248,   249,   250,   251,   1141,  1142,  252,   253,   1143,  1144,  256,   0,     257,
    258,   259,   260,   1145,  0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,   268,   0,
    269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   1147,  1148,  1149,  1150,  1151,  1152,
    1153,  277,   278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,
    290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   1157,  311,   312,   313,   1158,
    1159,  315,   0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,
    323,   0,     324,   1161,  0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,
    1163,  0,     1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,
    358,   0,     359,   1165,  843,   361,   844,   0,     362,   363,   364,   1166,  1167,  365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,
    383,   384,   385,   1170,  386,   387,   846,   388,   1171,  1172,  390,   1173,  392,   393,   394,   0,
    395,   0,     0,     1174,  397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,  403,   404,
    405,   406,   0,     407,   408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   1178,  444,   445,
    446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   1179,  457,   458,   459,
    460,   850,   461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
    1181,  0,     475,   476,   1182,  477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,
    485,   1185,  487,   1186,  1187,  489,   490,   491,   492,   0,     493,   494,   0,     1188,  495,   496,
    497,   498,   499,   1189,  0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,   851,   508,
    509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   1191,
    1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,   535,   536,
    1199,  537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,  549,   550,
    551,   552,   553,   554,   555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,   565,   566,
    567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,
    582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,
    0,     0,     0,     1203,  1204,  0,     0,     0,     0,     0,     1743,  2817,  1206,  829,   1132,  653,
    1133,  1134,  1135,  708,   1136,  0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,
    0,     233,   234,   235,   0,     0,     0,     0,     1137,  0,     0,     236,   237,   0,     238,   239,
    830,   240,   241,   242,   243,   1138,  831,   1139,  1140,  0,     247,   248,   249,   250,   251,   1141,
    1142,  252,   253,   1143,  1144,  256,   0,     257,   258,   259,   260,   1145,  0,     1146,  0,     262,
    263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,
    275,   276,   1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,   280,   281,   282,   1154,
    1155,  285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,
    295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,
    307,   308,   309,   1157,  311,   312,   313,   1158,  1159,  315,   0,     316,   317,   1160,  0,     0,
    319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   1161,  0,     326,   0,     327,
    328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   839,   342,   343,   344,   345,   346,   1162,  1163,  0,     1164,  0,     350,   840,   841,   351,
    842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   1165,  843,   361,   844,   0,
    362,   363,   364,   1166,  1167,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   379,   380,   1168,  845,   1169,  383,   384,   385,   1170,  386,   387,   846,   388,
    1171,  1172,  390,   1173,  392,   393,   394,   0,     395,   0,     0,     1174,  397,   398,   0,     0,
    399,   400,   847,   401,   848,   1175,  403,   404,   405,   406,   0,     407,   408,   0,     409,   1176,
    0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1177,  424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   849,   441,   442,   1178,  444,   445,   446,   447,   448,   449,   450,   451,   0,     452,
    453,   454,   455,   456,   1179,  457,   458,   459,   460,   850,   461,   1180,  463,   0,     464,   465,
    466,   467,   468,   469,   470,   471,   472,   473,   1181,  0,     475,   476,   1182,  477,   478,   479,
    480,   481,   482,   0,     1183,  1184,  0,     0,     485,   1185,  487,   1186,  1187,  489,   490,   491,
    492,   0,     493,   494,   0,     1188,  495,   496,   497,   498,   499,   1189,  0,     500,   501,   502,
    503,   504,   505,   1190,  0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,
    513,   514,   515,   516,   517,   518,   519,   1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,
    529,   530,   531,   532,   533,   534,   535,   536,   1199,  537,   0,     538,   539,   540,   541,   542,
    543,   544,   545,   546,   1200,  1201,  549,   550,   551,   552,   553,   554,   555,   556,   1202,  558,
    559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
    575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,
    590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     0,     1203,  1204,  1205,  0,     0,
    0,     0,     0,     0,     1206,  829,   1132,  653,   1133,  1134,  1135,  708,   1136,  0,     0,     0,
    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,
    1137,  0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,  831,   1139,
    1140,  0,     247,   248,   249,   250,   251,   1141,  1142,  252,   253,   1143,  1144,  256,   0,     257,
    258,   259,   260,   1145,  0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,   268,   0,
    269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   1147,  1148,  1149,  1150,  1151,  1152,
    1153,  277,   278,   279,   280,   281,   282,   1154,  1155,  285,   1280,  286,   0,     287,   288,   289,
    290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   1157,  311,   312,   313,   1158,
    1159,  315,   0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,
    323,   0,     324,   1161,  0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,
    1163,  0,     1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,
    358,   0,     359,   1165,  843,   361,   844,   0,     362,   363,   364,   1166,  1167,  365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,
    383,   384,   385,   1170,  386,   387,   846,   388,   1171,  1172,  390,   1173,  392,   393,   394,   0,
    395,   0,     0,     1174,  397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,  403,   404,
    405,   406,   0,     407,   408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   1178,  444,   445,
    446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   1179,  457,   458,   459,
    460,   850,   461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
    1181,  0,     475,   476,   1182,  477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,
    485,   1185,  487,   1186,  1187,  489,   490,   491,   492,   0,     493,   494,   0,     1188,  495,   496,
    497,   498,   499,   1189,  0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,   851,   508,
    509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   1191,
    1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,   535,   536,
    1199,  537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,  549,   550,
    551,   552,   553,   554,   555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,   565,   566,
    567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,
    582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,
    0,     0,     0,     1203,  1204,  0,     0,     0,     0,     0,     0,     0,     1206,  829,   1132,  653,
    1133,  1134,  1135,  708,   1136,  0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,
    2296,  233,   234,   235,   0,     0,     0,     0,     1137,  0,     0,     236,   237,   0,     238,   239,
    830,   240,   241,   242,   243,   1138,  831,   1139,  1140,  0,     247,   248,   249,   250,   251,   1141,
    1142,  252,   253,   1143,  1144,  256,   0,     257,   258,   259,   260,   1145,  0,     1146,  0,     262,
    263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,
    275,   276,   1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,   280,   281,   282,   1154,
    1155,  285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,
    295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,
    307,   308,   309,   1157,  311,   312,   313,   1158,  1159,  315,   0,     316,   317,   1160,  0,     0,
    319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   1161,  0,     326,   0,     327,
    328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   839,   342,   343,   344,   345,   346,   1162,  1163,  0,     1164,  0,     350,   840,   841,   351,
    842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   1165,  843,   361,   844,   0,
    362,   363,   364,   1166,  1167,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   379,   380,   1168,  845,   1169,  383,   384,   385,   1170,  386,   387,   846,   388,
    1171,  1172,  390,   1173,  392,   393,   394,   0,     395,   0,     0,     1174,  397,   398,   0,     0,
    399,   400,   847,   401,   848,   1175,  403,   404,   405,   406,   0,     407,   408,   0,     409,   1176,
    0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1177,  424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   849,   441,   442,   1178,  444,   445,   446,   447,   448,   449,   450,   451,   0,     452,
    453,   454,   455,   456,   1179,  457,   458,   459,   460,   850,   461,   1180,  463,   0,     464,   465,
    466,   467,   468,   469,   470,   471,   472,   473,   1181,  0,     475,   476,   1182,  477,   478,   479,
    480,   481,   482,   0,     1183,  1184,  0,     0,     485,   1185,  487,   1186,  1187,  489,   490,   491,
    492,   0,     493,   494,   0,     1188,  495,   496,   497,   498,   499,   1189,  0,     500,   501,   502,
    503,   504,   505,   1190,  0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,
    513,   514,   515,   516,   517,   518,   519,   1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,
    529,   530,   531,   532,   533,   534,   535,   536,   1199,  537,   0,     538,   539,   540,   541,   542,
    543,   544,   545,   546,   1200,  1201,  549,   550,   551,   552,   553,   554,   555,   556,   1202,  558,
    559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
    575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,
    590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     0,     1203,  1204,  0,     0,     0,
    0,     0,     0,     0,     1206,  829,   1132,  653,   1133,  1134,  1135,  708,   1136,  0,     0,     0,
    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,
    1137,  0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,  831,   1139,
    1140,  0,     247,   248,   249,   250,   251,   1141,  1142,  252,   253,   1143,  1144,  256,   0,     257,
    258,   259,   260,   1145,  0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,   268,   0,
    269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   1147,  1148,  1149,  1150,  1151,  1152,
    1153,  277,   278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,
    290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   1157,  311,   312,   313,   1158,
    1159,  315,   0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   2872,  837,   321,   322,
    323,   0,     324,   1161,  0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,
    1163,  0,     1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,
    358,   0,     359,   1165,  843,   361,   844,   0,     362,   363,   364,   1166,  1167,  365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,
    383,   384,   385,   1170,  386,   387,   846,   388,   1171,  1172,  390,   1173,  392,   393,   394,   0,
    395,   0,     0,     1174,  397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,  403,   404,
    405,   406,   0,     407,   408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   1178,  444,   445,
    446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   1179,  457,   458,   459,
    460,   850,   461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
    1181,  0,     475,   476,   1182,  477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,
    485,   1185,  487,   1186,  1187,  489,   490,   491,   492,   0,     493,   494,   0,     1188,  495,   496,
    497,   498,   499,   1189,  0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,   851,   508,
    509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   1191,
    1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,   535,   536,
    1199,  537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,  549,   550,
    551,   552,   553,   554,   555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,   565,   566,
    567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,
    582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,
    0,     0,     0,     1203,  1204,  0,     0,     0,     0,     0,     0,     0,     1206,  829,   1132,  653,
    1133,  1134,  1135,  708,   1136,  0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,
    0,     233,   234,   235,   0,     0,     0,     0,     1137,  0,     0,     236,   237,   0,     238,   239,
    830,   240,   241,   242,   243,   1138,  831,   1139,  1140,  0,     247,   248,   249,   250,   251,   1141,
    1142,  252,   253,   1143,  1144,  256,   0,     257,   258,   259,   260,   1145,  0,     1146,  0,     262,
    263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,
    275,   276,   1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,   280,   281,   282,   1154,
    1155,  285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,
    295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,
    307,   308,   309,   1157,  311,   312,   313,   1158,  1159,  315,   0,     316,   317,   1160,  0,     0,
    319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   1161,  0,     326,   0,     327,
    328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   839,   342,   343,   344,   345,   346,   1162,  1163,  0,     1164,  0,     350,   840,   841,   351,
    842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   1165,  843,   361,   844,   0,
    362,   363,   364,   1166,  1167,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   379,   380,   1168,  845,   1169,  383,   384,   385,   1170,  386,   387,   846,   388,
    1171,  1172,  390,   1173,  392,   393,   394,   0,     395,   0,     0,     1174,  397,   398,   0,     0,
    399,   400,   847,   401,   848,   1175,  403,   404,   405,   406,   0,     407,   408,   0,     409,   1176,
    0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1177,  424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   849,   441,   442,   1178,  444,   445,   446,   447,   448,   449,   450,   451,   0,     452,
    453,   454,   455,   456,   1179,  457,   458,   459,   460,   850,   461,   1180,  463,   0,     464,   465,
    466,   467,   468,   469,   470,   471,   472,   473,   1181,  0,     475,   476,   1182,  477,   478,   479,
    480,   481,   482,   0,     1183,  1184,  0,     0,     485,   1185,  487,   1186,  1187,  489,   490,   491,
    492,   0,     493,   494,   0,     1188,  495,   496,   497,   498,   499,   1189,  0,     500,   501,   502,
    503,   504,   505,   1190,  4255,  507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,
    513,   514,   515,   516,   517,   518,   519,   1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,
    529,   530,   531,   532,   533,   534,   535,   536,   1199,  537,   0,     538,   539,   540,   541,   542,
    543,   544,   545,   546,   1200,  1201,  549,   550,   551,   552,   553,   554,   555,   556,   1202,  558,
    559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
    575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,
    590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     0,     1203,  1204,  0,     0,     0,
    0,     0,     0,     0,     1206,  829,   1132,  653,   1133,  1134,  1135,  708,   1136,  0,     0,     0,
    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,
    1137,  0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   5368,  1138,  831,   1139,
    1140,  0,     247,   248,   249,   250,   251,   1141,  1142,  252,   253,   1143,  1144,  256,   0,     257,
    258,   259,   260,   1145,  0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,   268,   0,
    269,   270,   271,   272,   273,   274,   0,     834,   275,   5369,  1147,  1148,  1149,  1150,  1151,  1152,
    1153,  277,   278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,
    290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   1157,  311,   312,   313,   1158,
    1159,  315,   0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,
    323,   0,     324,   1161,  0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,
    1163,  0,     1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,
    358,   0,     359,   1165,  843,   361,   844,   0,     362,   363,   364,   1166,  1167,  365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,
    383,   384,   385,   1170,  386,   387,   846,   388,   1171,  1172,  390,   1173,  392,   393,   394,   0,
    395,   0,     0,     1174,  397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,  403,   404,
    405,   406,   0,     407,   408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   1178,  444,   445,
    446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   1179,  457,   458,   459,
    460,   850,   461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
    1181,  0,     475,   476,   1182,  477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,
    485,   1185,  487,   1186,  1187,  489,   490,   491,   492,   5370,  493,   494,   0,     1188,  495,   496,
    497,   498,   499,   1189,  0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,   851,   508,
    509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   1191,
    1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,   535,   536,
    1199,  537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,  549,   550,
    551,   552,   553,   554,   555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,   565,   566,
    567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,
    582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,
    0,     0,     0,     1203,  1204,  0,     0,     0,     0,     0,     0,     0,     1206,  829,   1132,  653,
    1133,  1134,  1135,  708,   1136,  0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,
    0,     233,   234,   235,   0,     0,     0,     0,     1137,  0,     0,     236,   237,   0,     238,   239,
    830,   240,   241,   242,   243,   1138,  831,   1139,  1140,  0,     247,   248,   249,   250,   251,   1141,
    1142,  252,   253,   1143,  1144,  256,   0,     257,   258,   259,   260,   1145,  0,     1146,  0,     262,
    263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,
    275,   5369,  1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,   280,   281,   282,   1154,
    1155,  285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,
    295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,
    307,   308,   309,   1157,  311,   312,   313,   1158,  1159,  315,   0,     316,   317,   1160,  0,     0,
    319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   1161,  0,     326,   0,     327,
    328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   839,   342,   343,   344,   345,   346,   1162,  1163,  0,     1164,  0,     350,   840,   841,   351,
    842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   1165,  843,   361,   844,   0,
    362,   363,   364,   1166,  1167,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   379,   380,   1168,  845,   1169,  383,   384,   385,   1170,  386,   387,   846,   388,
    1171,  1172,  390,   1173,  392,   393,   394,   0,     395,   0,     0,     1174,  397,   398,   0,     0,
    399,   400,   847,   401,   848,   1175,  403,   404,   405,   406,   0,     407,   408,   0,     409,   1176,
    0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1177,  424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   849,   441,   442,   1178,  444,   445,   446,   447,   448,   449,   450,   451,   0,     452,
    453,   454,   455,   456,   1179,  457,   458,   459,   460,   850,   461,   1180,  463,   0,     464,   465,
    466,   467,   468,   469,   470,   471,   472,   473,   1181,  0,     475,   476,   1182,  477,   478,   479,
    480,   481,   482,   0,     1183,  1184,  0,     0,     485,   1185,  487,   1186,  1187,  489,   490,   491,
    492,   5370,  493,   494,   0,     1188,  495,   496,   497,   498,   499,   1189,  0,     500,   501,   502,
    503,   504,   505,   1190,  0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,
    513,   514,   515,   516,   517,   518,   519,   1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,
    529,   530,   531,   532,   533,   534,   535,   536,   1199,  537,   0,     538,   539,   540,   541,   542,
    543,   544,   545,   546,   1200,  1201,  549,   550,   551,   552,   553,   554,   555,   556,   1202,  558,
    559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
    575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,
    590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     0,     1203,  1204,  0,     0,     0,
    0,     0,     0,     0,     1206,  829,   1132,  653,   1133,  1134,  1135,  708,   1136,  0,     0,     0,
    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,
    1137,  0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,  831,   1139,
    1140,  0,     247,   248,   249,   250,   251,   1141,  1142,  252,   253,   1143,  1144,  256,   0,     257,
    258,   259,   260,   1145,  0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,   268,   0,
    269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   1147,  1148,  1149,  1150,  1151,  1152,
    1153,  277,   278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,
    290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   1157,  311,   312,   313,   1158,
    1159,  315,   0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,
    323,   0,     324,   1161,  0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,
    1163,  0,     1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,
    358,   0,     359,   1165,  843,   361,   844,   0,     362,   363,   364,   1166,  1167,  365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,
    383,   384,   385,   1170,  386,   387,   846,   388,   1171,  1172,  390,   1173,  392,   393,   394,   0,
    395,   0,     0,     1174,  397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,  403,   404,
    405,   406,   0,     407,   408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   1178,  444,   445,
    446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   1179,  457,   458,   459,
    460,   850,   461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
    1181,  0,     475,   476,   1182,  477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,
    485,   1185,  487,   1186,  1187,  489,   490,   491,   492,   0,     493,   494,   0,     1188,  495,   496,
    497,   498,   499,   1189,  0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,   851,   508,
    509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   1191,
    1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,   535,   536,
    1199,  537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,  549,   550,
    551,   552,   553,   554,   555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,   565,   566,
    567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,
    582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,
    0,     0,     0,     1203,  1204,  0,     0,     0,     0,     0,     0,     0,     1206,  829,   1132,  653,
    1133,  1134,  1135,  708,   1136,  0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,
    0,     233,   234,   235,   0,     0,     0,     0,     1137,  0,     0,     236,   237,   0,     238,   239,
    830,   240,   241,   242,   243,   1138,  831,   1139,  1140,  0,     247,   248,   249,   250,   251,   1141,
    1142,  252,   253,   1143,  1144,  256,   0,     257,   258,   259,   260,   1145,  0,     1146,  0,     262,
    263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,
    275,   276,   1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,   280,   281,   282,   1154,
    1155,  285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,
    295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,
    307,   308,   309,   1157,  311,   312,   313,   1158,  1159,  315,   0,     316,   317,   1160,  0,     0,
    319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   1161,  0,     326,   0,     327,
    328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   839,   342,   343,   344,   345,   346,   1162,  1163,  0,     1164,  0,     350,   840,   841,   351,
    842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   1165,  843,   361,   844,   0,
    362,   363,   364,   1166,  1167,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   379,   380,   1168,  845,   1169,  383,   384,   385,   1170,  386,   387,   846,   388,
    1171,  1172,  390,   1173,  392,   393,   394,   0,     395,   0,     0,     1174,  397,   398,   0,     0,
    399,   400,   847,   401,   848,   1175,  403,   404,   405,   406,   0,     407,   408,   0,     409,   1176,
    0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1177,  424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   849,   441,   442,   1178,  444,   445,   446,   447,   448,   449,   450,   451,   0,     452,
    453,   454,   455,   456,   1179,  457,   458,   459,   460,   850,   461,   1180,  463,   0,     464,   465,
    466,   467,   468,   469,   470,   471,   472,   473,   1181,  0,     475,   476,   1182,  477,   478,   479,
    480,   481,   482,   0,     1183,  1184,  0,     0,     485,   1185,  487,   1186,  1187,  489,   490,   491,
    492,   0,     493,   494,   0,     1188,  495,   496,   497,   498,   499,   1189,  0,     500,   501,   502,
    503,   504,   505,   1190,  0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,
    513,   514,   515,   516,   517,   518,   519,   1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,
    529,   530,   531,   532,   533,   534,   535,   536,   1199,  537,   0,     538,   539,   540,   541,   542,
    543,   544,   545,   546,   1200,  1201,  549,   550,   551,   552,   553,   554,   555,   556,   1202,  558,
    559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
    575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,
    590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     0,     2299,  2300,  0,     0,     0,
    0,     0,     0,     0,     1206,  829,   3008,  653,   1133,  1134,  1135,  708,   1136,  0,     0,     0,
    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,
    1137,  0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,  831,   1139,
    1140,  0,     247,   248,   249,   250,   251,   1141,  1142,  252,   253,   1143,  1144,  256,   0,     257,
    258,   259,   260,   1145,  0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,   268,   0,
    269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   1147,  1148,  1149,  1150,  1151,  1152,
    1153,  277,   278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,
    290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   1157,  311,   312,   313,   1158,
    1159,  315,   0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,
    323,   0,     324,   1161,  0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,
    1163,  0,     1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,
    358,   0,     359,   1165,  843,   361,   844,   0,     362,   363,   364,   1166,  1167,  365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,
    383,   384,   385,   1170,  386,   387,   846,   388,   1171,  1172,  390,   1173,  392,   393,   394,   0,
    395,   0,     0,     1174,  397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,  403,   404,
    405,   406,   0,     407,   408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   1178,  444,   445,
    446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   1179,  457,   458,   459,
    460,   850,   461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
    1181,  0,     475,   476,   1182,  477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,
    485,   1185,  487,   1186,  1187,  489,   490,   491,   492,   0,     493,   494,   0,     1188,  495,   496,
    497,   498,   499,   1189,  0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,   851,   508,
    509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   1191,
    1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,   535,   536,
    1199,  537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,  549,   550,
    551,   552,   553,   554,   555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,   565,   566,
    567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,
    582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,
    0,     0,     0,     1203,  1204,  0,     0,     0,     0,     0,     0,     0,     1206,  829,   1132,  653,
    1133,  1134,  1135,  708,   1136,  0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,
    0,     233,   234,   235,   0,     0,     0,     0,     1137,  0,     0,     236,   237,   0,     238,   239,
    830,   240,   241,   242,   243,   1138,  831,   1139,  1140,  0,     247,   248,   249,   250,   251,   1141,
    1142,  252,   253,   1143,  1144,  256,   0,     257,   258,   259,   260,   1145,  0,     1146,  0,     262,
    263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,
    275,   276,   1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,   280,   281,   282,   1154,
    1155,  285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,
    295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,
    307,   308,   309,   1157,  311,   312,   313,   1158,  1159,  315,   0,     316,   317,   1160,  0,     0,
    319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   1161,  0,     326,   0,     327,
    328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   839,   342,   343,   344,   345,   346,   1162,  1163,  0,     1164,  0,     350,   3545,  841,   351,
    842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   1165,  843,   361,   844,   0,
    362,   363,   364,   1166,  1167,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   379,   380,   1168,  845,   1169,  383,   384,   385,   1170,  386,   387,   846,   388,
    1171,  1172,  390,   1173,  392,   393,   394,   0,     395,   0,     0,     1174,  397,   398,   0,     0,
    399,   400,   847,   401,   848,   1175,  403,   404,   405,   406,   0,     407,   408,   0,     409,   1176,
    0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1177,  424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   849,   441,   442,   1178,  444,   445,   446,   447,   448,   449,   450,   451,   0,     452,
    453,   454,   455,   456,   1179,  457,   458,   459,   460,   850,   461,   1180,  463,   0,     464,   465,
    466,   467,   468,   469,   470,   471,   472,   473,   1181,  0,     475,   476,   1182,  477,   478,   479,
    480,   481,   482,   0,     1183,  1184,  0,     0,     485,   1185,  487,   1186,  1187,  489,   490,   491,
    492,   0,     493,   494,   0,     1188,  495,   496,   497,   498,   499,   1189,  0,     500,   501,   502,
    503,   504,   505,   1190,  0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,
    513,   514,   515,   516,   517,   518,   519,   1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,
    529,   530,   531,   532,   533,   534,   535,   536,   1199,  537,   0,     538,   539,   540,   541,   542,
    543,   544,   545,   546,   1200,  1201,  549,   550,   551,   552,   553,   554,   555,   556,   1202,  558,
    559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
    575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,
    590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     0,     1203,  1204,  0,     0,     0,
    0,     0,     0,     0,     1206,  829,   1132,  653,   1133,  1134,  1135,  708,   1136,  0,     0,     0,
    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,
    1137,  0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,  831,   1139,
    1140,  0,     247,   248,   249,   250,   251,   1141,  1142,  252,   253,   1143,  1144,  256,   0,     257,
    258,   259,   260,   1145,  0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,   268,   0,
    269,   270,   271,   272,   273,   274,   0,     834,   275,   4264,  1147,  1148,  1149,  1150,  1151,  1152,
    1153,  277,   278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,
    290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   1157,  311,   312,   313,   1158,
    1159,  315,   0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,
    323,   0,     324,   1161,  0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,
    1163,  0,     1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,
    358,   0,     359,   1165,  843,   361,   844,   0,     362,   363,   364,   1166,  1167,  365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,
    383,   384,   385,   1170,  386,   387,   846,   388,   1171,  1172,  390,   1173,  392,   393,   394,   0,
    395,   0,     0,     1174,  397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,  403,   404,
    405,   406,   0,     407,   408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   1178,  444,   445,
    446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   1179,  457,   458,   459,
    460,   850,   461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
    1181,  0,     475,   476,   1182,  477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,
    485,   1185,  487,   1186,  1187,  489,   490,   491,   492,   0,     493,   494,   0,     1188,  495,   496,
    497,   498,   499,   1189,  0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,   851,   508,
    509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   1191,
    1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,   535,   536,
    1199,  537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,  549,   550,
    551,   552,   553,   554,   555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,   565,   566,
    567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,
    582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,
    0,     0,     0,     1203,  1204,  0,     0,     0,     0,     0,     0,     0,     1206,  829,   1132,  653,
    1133,  1134,  1135,  708,   1136,  0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,
    0,     233,   234,   235,   0,     0,     0,     0,     1137,  0,     0,     236,   237,   0,     238,   239,
    830,   240,   241,   242,   243,   1138,  831,   1139,  1140,  0,     247,   248,   249,   250,   251,   1141,
    1142,  252,   253,   1143,  1144,  256,   0,     257,   258,   259,   260,   1145,  0,     1146,  0,     262,
    263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,
    275,   276,   1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,   280,   281,   282,   1154,
    1155,  285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,
    295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,
    307,   308,   309,   1157,  311,   312,   313,   1158,  1159,  315,   0,     316,   317,   1160,  0,     0,
    319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   1161,  0,     326,   0,     327,
    328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   839,   342,   343,   344,   345,   346,   1162,  1163,  0,     1164,  0,     350,   840,   841,   351,
    842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   1165,  843,   361,   844,   0,
    362,   363,   364,   1166,  1167,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   379,   380,   1168,  845,   1169,  383,   384,   385,   1170,  386,   387,   846,   388,
    1171,  1172,  390,   1173,  392,   393,   394,   0,     395,   0,     0,     1174,  397,   398,   0,     0,
    399,   400,   847,   401,   848,   1175,  403,   404,   405,   406,   0,     407,   408,   0,     409,   1176,
    0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1177,  424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   849,   441,   442,   1178,  444,   445,   446,   447,   448,   449,   450,   451,   0,     452,
    453,   454,   455,   456,   1179,  457,   458,   459,   460,   850,   461,   1180,  463,   0,     464,   465,
    466,   467,   468,   469,   470,   471,   472,   473,   1181,  0,     475,   476,   1182,  477,   478,   479,
    480,   481,   482,   0,     1183,  1184,  0,     0,     485,   1185,  487,   1186,  1187,  489,   490,   491,
    492,   0,     493,   494,   0,     1188,  495,   496,   497,   498,   499,   1189,  0,     500,   501,   502,
    503,   504,   505,   1190,  0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,
    513,   514,   515,   516,   517,   518,   4622,  1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,
    529,   530,   531,   532,   533,   534,   535,   536,   1199,  537,   0,     538,   539,   540,   541,   542,
    543,   544,   545,   546,   1200,  1201,  549,   550,   551,   552,   553,   554,   555,   556,   1202,  558,
    559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
    575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,
    590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     0,     1203,  1204,  0,     0,     0,
    0,     0,     0,     0,     1206,  829,   1132,  653,   1133,  1134,  1135,  708,   1136,  0,     0,     0,
    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,
    1137,  0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,  831,   1139,
    1140,  0,     247,   248,   249,   250,   251,   1141,  1142,  252,   253,   1143,  1144,  256,   0,     257,
    258,   259,   260,   1145,  0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,   268,   0,
    269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   1147,  1148,  1149,  1150,  1151,  1152,
    1153,  277,   278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,
    290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   1157,  311,   312,   313,   1158,
    1159,  315,   0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,
    323,   0,     324,   1161,  0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,
    1163,  0,     1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,
    358,   0,     359,   1165,  843,   361,   844,   0,     362,   363,   364,   1166,  1167,  365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,
    383,   4632,  385,   1170,  386,   387,   846,   388,   1171,  1172,  390,   1173,  392,   393,   394,   0,
    395,   0,     0,     1174,  397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,  403,   404,
    405,   406,   0,     407,   408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   1178,  444,   445,
    446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   1179,  457,   458,   459,
    460,   850,   461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
    1181,  0,     475,   476,   1182,  477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,
    485,   1185,  487,   1186,  1187,  489,   490,   491,   492,   0,     493,   494,   0,     1188,  495,   496,
    497,   498,   499,   1189,  0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,   851,   508,
    509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   1191,
    1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,   535,   536,
    1199,  537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,  549,   550,
    551,   552,   553,   554,   555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,   565,   566,
    567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,
    582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,
    0,     0,     0,     1203,  1204,  0,     0,     0,     0,     0,     0,     0,     1206,  829,   1132,  653,
    1133,  1134,  1135,  708,   1136,  0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,
    0,     233,   234,   235,   0,     0,     0,     0,     1137,  0,     0,     236,   237,   0,     238,   239,
    830,   240,   241,   242,   243,   1138,  831,   1139,  1140,  0,     247,   248,   249,   250,   251,   1141,
    1142,  252,   253,   1143,  1144,  256,   0,     257,   258,   259,   260,   1145,  0,     1146,  0,     262,
    263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,
    275,   276,   1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,   280,   281,   282,   1154,
    1155,  285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,
    295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,
    307,   308,   309,   1157,  311,   312,   313,   1158,  1159,  315,   0,     316,   317,   1160,  0,     0,
    319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   1161,  0,     326,   0,     327,
    328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   839,   342,   343,   344,   345,   346,   1162,  1163,  0,     1164,  0,     350,   840,   841,   351,
    842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   1165,  843,   361,   844,   0,
    362,   363,   364,   1166,  1167,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   379,   380,   1168,  845,   1169,  383,   384,   385,   1170,  386,   387,   846,   388,
    1171,  1172,  390,   1173,  392,   393,   394,   0,     395,   0,     0,     1174,  397,   398,   0,     0,
    399,   400,   847,   401,   848,   1175,  403,   404,   405,   406,   0,     407,   408,   0,     409,   1176,
    0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1177,  424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   849,   441,   442,   1178,  444,   445,   446,   447,   448,   449,   450,   451,   0,     452,
    453,   454,   455,   456,   1179,  457,   458,   459,   460,   850,   461,   1180,  463,   0,     464,   465,
    466,   467,   468,   469,   470,   471,   472,   473,   1181,  0,     475,   476,   1182,  477,   478,   479,
    480,   481,   482,   0,     1183,  1184,  0,     0,     485,   1185,  487,   1186,  1187,  489,   490,   491,
    492,   0,     493,   494,   0,     1188,  495,   496,   497,   498,   499,   1189,  0,     500,   501,   502,
    503,   504,   505,   1190,  0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,
    513,   514,   515,   516,   517,   518,   519,   1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,
    529,   530,   531,   532,   533,   534,   535,   4973,  1199,  537,   0,     538,   539,   540,   541,   542,
    543,   544,   545,   546,   1200,  4974,  549,   550,   551,   552,   553,   554,   555,   556,   1202,  558,
    559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
    575,   576,   577,   578,   4975,  580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,
    590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     0,     1203,  1204,  0,     0,     0,
    0,     0,     0,     0,     4976,  829,   1132,  653,   1133,  1134,  1135,  708,   1136,  0,     0,     0,
    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,
    1137,  0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,  831,   1139,
    1140,  0,     247,   248,   249,   250,   251,   1141,  1142,  252,   253,   1143,  1144,  256,   0,     257,
    258,   259,   260,   1145,  0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,   268,   0,
    269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   1147,  1148,  1149,  1150,  1151,  1152,
    1153,  277,   278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,
    290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   1157,  311,   312,   313,   1158,
    1159,  315,   0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,
    323,   0,     324,   1161,  0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,
    1163,  0,     1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,
    358,   0,     359,   1165,  843,   361,   844,   0,     362,   363,   364,   1166,  1167,  365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,
    383,   384,   385,   0,     386,   387,   846,   388,   1171,  1172,  390,   1173,  392,   393,   394,   0,
    395,   0,     0,     1174,  397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,  403,   404,
    405,   406,   0,     407,   408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   1178,  444,   445,
    446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   1179,  457,   458,   459,
    460,   850,   461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
    1181,  0,     475,   476,   1182,  477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,
    485,   1185,  487,   1186,  1187,  489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,
    497,   498,   499,   1189,  0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,   851,   508,
    509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   1191,
    1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,   535,   536,
    1199,  537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,  549,   550,
    551,   552,   553,   554,   555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,   565,   566,
    567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,
    582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,
    0,     0,     0,     2852,  2853,  0,     0,     829,   1132,  653,   1133,  1134,  1206,  708,   1136,  0,
    0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,
    0,     0,     1137,  0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,
    831,   1139,  1140,  0,     247,   248,   249,   250,   251,   1141,  1142,  252,   253,   1143,  1144,  256,
    0,     257,   258,   259,   260,   1145,  0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,
    268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   1147,  1148,  1149,  1150,
    1151,  1152,  1153,  277,   278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,
    288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,
    300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   1157,  311,   312,
    313,   1158,  1159,  315,   0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,
    321,   322,   323,   0,     324,   1161,  0,     326,   0,     327,   328,   329,   330,   331,   838,   332,
    333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,
    346,   1162,  1163,  0,     1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,
    0,     357,   358,   0,     359,   1165,  843,   361,   844,   0,     362,   363,   364,   1166,  1167,  365,
    366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,
    845,   1169,  383,   384,   385,   0,     386,   387,   846,   388,   1171,  1172,  390,   1173,  392,   393,
    394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,
    403,   404,   405,   406,   0,     407,   408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,
    415,   416,   417,   418,   419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,
    430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   2997,
    2998,  445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   1179,  457,
    458,   459,   460,   850,   461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,
    472,   473,   1181,  0,     475,   476,   1182,  477,   478,   479,   480,   481,   482,   0,     1183,  1184,
    0,     0,     485,   1185,  487,   1186,  1187,  489,   490,   491,   492,   0,     493,   494,   0,     0,
    495,   496,   497,   498,   499,   1189,  0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,
    851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,
    519,   1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,
    535,   536,   1199,  537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,
    549,   550,   551,   552,   553,   554,   555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,
    565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,
    0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,
    0,     0,     0,     0,     0,     2999,  3000,  0,     0,     0,     0,     0,     0,     0,     1206,  829,
    1132,  653,   1133,  1134,  1135,  708,   1136,  0,     0,     0,     224,   225,   226,   227,   228,   229,
    230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     1137,  0,     0,     236,   237,   0,
    238,   239,   830,   240,   241,   242,   -3012, 1138,  831,   1139,  1140,  0,     247,   248,   249,   250,
    251,   1141,  1142,  252,   253,   1143,  1144,  256,   0,     257,   258,   259,   260,   1145,  0,     1146,
    0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,
    0,     834,   275,   5369,  1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,   280,   281,
    282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,
    0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    0,     0,     307,   308,   309,   1157,  311,   312,   313,   1158,  1159,  315,   0,     316,   317,   1160,
    0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   1161,  0,     326,
    0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,
    340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,  1163,  0,     1164,  0,     350,   840,
    841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   1165,  843,   361,
    0,     0,     362,   363,   364,   1166,  1167,  365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,  383,   384,   385,   0,     386,   387,
    846,   388,   1171,  1172,  390,   1173,  392,   393,   394,   0,     395,   0,     0,     1174,  397,   398,
    0,     0,     399,   400,   847,   401,   848,   1175,  403,   404,   405,   406,   0,     407,   408,   0,
    409,   1176,  0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,
    1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
    438,   0,     439,   440,   849,   441,   442,   1178,  444,   445,   446,   447,   448,   449,   450,   451,
    0,     452,   453,   454,   455,   456,   1179,  457,   458,   459,   460,   0,     461,   1180,  463,   0,
    464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   1181,  0,     475,   476,   1182,  477,
    478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,     485,   1185,  487,   1186,  1187,  489,
    490,   491,   492,   5370,  493,   494,   0,     1188,  495,   496,   497,   498,   499,   1189,  0,     500,
    501,   502,   503,   504,   505,   1190,  0,     507,   851,   508,   509,   510,   511,   0,     0,     512,
    0,     0,     513,   514,   515,   516,   517,   518,   519,   1191,  1192,  1193,  1194,  1195,  1196,  1197,
    1198,  528,   529,   530,   531,   532,   533,   534,   535,   536,   1199,  537,   0,     538,   539,   540,
    541,   542,   543,   544,   545,   546,   1200,  1201,  549,   550,   551,   552,   553,   554,   555,   556,
    1202,  558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,
    573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,
    588,   589,   590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     0,     1203,  1204,  0,
    0,     829,   1132,  653,   1133,  1134,  1206,  708,   1136,  0,     0,     0,     224,   225,   226,   227,
    228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     1137,  0,     0,     236,
    237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,  831,   1139,  1140,  0,     4168,  248,
    249,   250,   251,   1141,  1142,  252,   253,   1143,  1144,  256,   0,     257,   258,   259,   260,   1145,
    0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,
    273,   274,   0,     834,   275,   276,   1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,
    280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,
    293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   0,     0,     307,   308,   309,   1157,  311,   312,   313,   1158,  1159,  315,   0,     316,
    317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   1161,
    0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,  1163,  0,     1164,  0,
    350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   1165,
    843,   361,   844,   0,     362,   363,   364,   1166,  1167,  365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,  383,   384,   385,   0,
    386,   387,   846,   388,   1171,  1172,  390,   1173,  392,   393,   394,   0,     395,   0,     0,     396,
    397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,  403,   404,   405,   406,   0,     407,
    408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   849,   441,   442,   1178,  444,   445,   446,   447,   448,   449,
    450,   451,   0,     452,   453,   454,   455,   456,   1179,  457,   458,   459,   460,   850,   461,   1180,
    463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   1181,  0,     475,   476,
    1182,  477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,     485,   1185,  487,   1186,
    1187,  489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   1189,
    0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,   851,   508,   509,   510,   511,   0,
    0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   1191,  1192,  1193,  1194,  1195,
    1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,   535,   536,   1199,  537,   0,     538,
    539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,  549,   550,   551,   552,   553,   554,
    555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,
    571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,
    586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     829,   1132,
    653,   1133,  1134,  0,     708,   1136,  0,     0,     1206,  224,   225,   226,   227,   228,   229,   230,
    231,   0,     233,   234,   235,   0,     0,     0,     0,     1137,  0,     0,     236,   237,   0,     238,
    239,   830,   240,   241,   242,   243,   1138,  831,   1139,  1140,  0,     247,   248,   249,   250,   251,
    1141,  1142,  252,   253,   1143,  1144,  256,   0,     257,   258,   259,   260,   1145,  0,     1146,  0,
    262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,
    834,   275,   276,   1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,   280,   281,   282,
    1154,  1155,  285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,
    0,     295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    0,     307,   308,   309,   1157,  311,   312,   313,   1158,  1159,  315,   0,     316,   317,   1160,  0,
    0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   1161,  0,     326,   0,
    327,   328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   839,   342,   343,   344,   345,   346,   1162,  1163,  0,     1164,  0,     350,   840,   841,
    351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   1165,  843,   361,   844,
    0,     362,   363,   364,   1166,  1167,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   379,   380,   1168,  845,   1169,  383,   384,   385,   0,     386,   387,   846,
    388,   1171,  1172,  390,   1173,  392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,
    0,     399,   400,   847,   401,   848,   1175,  403,   404,   405,   406,   0,     407,   408,   0,     409,
    1176,  0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1177,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   849,   441,   442,   1178,  444,   445,   446,   447,   448,   449,   450,   451,   0,
    452,   453,   454,   455,   456,   1179,  457,   458,   459,   460,   850,   461,   1180,  463,   0,     464,
    465,   466,   467,   468,   469,   470,   471,   472,   473,   1181,  0,     475,   476,   1182,  477,   478,
    479,   480,   481,   482,   0,     1183,  1184,  0,     0,     485,   1185,  487,   1186,  1187,  489,   490,
    491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   1189,  0,     500,   501,
    502,   503,   504,   505,   1190,  0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,
    0,     513,   514,   515,   516,   517,   518,   519,   1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   1199,  537,   0,     538,   539,   540,   541,
    542,   543,   544,   545,   546,   1200,  1201,  549,   550,   551,   552,   553,   554,   555,   556,   1202,
    558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
    574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,
    589,   590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     829,   1132,  653,   1133,  1134,
    1135,  708,   1136,  0,     0,     1206,  224,   225,   226,   227,   228,   229,   230,   231,   0,     233,
    234,   235,   0,     0,     0,     0,     1137,  0,     0,     236,   237,   0,     238,   239,   830,   240,
    241,   242,   0,     1138,  831,   1139,  1140,  0,     247,   248,   249,   250,   251,   1141,  1142,  252,
    253,   1143,  1144,  256,   0,     257,   258,   259,   260,   1145,  0,     1146,  0,     262,   263,   264,
    265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,   276,
    1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,   280,   281,   282,   1154,  1155,  285,
    0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,
    1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   0,     306,   0,     0,     307,   308,
    309,   1157,  311,   312,   313,   1158,  1159,  315,   0,     316,   317,   1160,  0,     0,     319,   0,
    320,   836,   0,     837,   321,   322,   323,   0,     324,   1161,  0,     326,   0,     327,   328,   329,
    330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   839,
    342,   343,   344,   345,   346,   1162,  1163,  0,     1164,  0,     350,   840,   841,   351,   842,   352,
    353,   354,   355,   356,   0,     357,   358,   0,     359,   1165,  843,   361,   0,     0,     362,   363,
    364,   1166,  1167,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
    378,   379,   380,   1168,  845,   1169,  383,   384,   385,   0,     386,   387,   846,   388,   1171,  1172,
    390,   1173,  392,   393,   394,   0,     395,   0,     0,     1174,  397,   398,   0,     0,     399,   400,
    847,   401,   848,   1175,  403,   404,   405,   406,   0,     407,   408,   0,     409,   1176,  0,     411,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1177,  424,   425,   426,
    427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,
    849,   441,   442,   1178,  444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,
    455,   456,   1179,  0,     458,   459,   460,   0,     461,   1180,  463,   0,     464,   465,   466,   467,
    468,   469,   470,   471,   472,   473,   1181,  0,     475,   476,   1182,  477,   478,   479,   480,   481,
    482,   0,     1183,  1184,  0,     0,     485,   1185,  487,   1186,  1187,  489,   490,   491,   492,   0,
    493,   494,   0,     1188,  495,   496,   497,   498,   499,   1189,  0,     500,   501,   502,   503,   504,
    505,   1190,  0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,
    515,   516,   517,   518,   519,   1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,   530,
    531,   532,   533,   534,   535,   536,   1199,  537,   0,     538,   539,   540,   541,   542,   543,   544,
    545,   546,   1200,  1201,  549,   550,   551,   552,   553,   554,   555,   556,   1202,  558,   559,   560,
    561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,
    577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
    592,   0,     0,     0,     0,     0,     0,     0,     0,     1203,  1204,  0,     0,     0,     0,     0,
    0,     0,     1206,  829,   1132,  653,   1133,  1134,  1135,  708,   1136,  0,     0,     0,     224,   225,
    226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     1137,  0,
    0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   0,     1138,  831,   1139,  1140,  0,
    247,   248,   249,   250,   251,   1141,  1142,  252,   253,   1143,  1144,  256,   0,     257,   258,   259,
    260,   1145,  0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,
    271,   272,   273,   274,   0,     834,   275,   276,   1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,
    278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,   290,   291,
    0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,
    303,   304,   0,     306,   0,     0,     307,   308,   309,   1157,  311,   312,   313,   1158,  1159,  315,
    0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,
    324,   1161,  0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,
    336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,  1163,  0,
    1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,
    359,   1165,  843,   361,   0,     0,     362,   363,   364,   1166,  1167,  365,   366,   367,   368,   369,
    370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,  383,   384,
    385,   0,     386,   387,   846,   388,   1171,  1172,  390,   1173,  392,   393,   394,   0,     395,   0,
    0,     1174,  397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,  403,   404,   405,   406,
    0,     407,   408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,     415,   416,   417,   418,
    419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,
    434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   1178,  444,   445,   446,   447,
    448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   1179,  0,     458,   459,   460,   0,
    461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   1181,  0,
    475,   476,   1182,  477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,     485,   1185,
    487,   1186,  1187,  489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,
    499,   1189,  0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,   851,   508,   509,   510,
    511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   1191,  1192,  1193,
    1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,   535,   536,   1199,  537,
    0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,  549,   550,   551,   552,
    553,   554,   555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
    569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,
    584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,     0,     0,
    829,   2852,  2853,  0,     0,     0,     0,     0,     0,     0,     1206,  224,   225,   226,   227,   228,
    229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,
    0,     238,   239,   830,   240,   241,   242,   243,   244,   831,   245,   246,   0,     247,   248,   249,
    250,   251,   0,     1142,  252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   1145,  0,
    1146,  0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,
    274,   0,     834,   275,   276,   1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,   280,
    281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,
    294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   1158,  0,     315,   0,     316,   317,
    318,   0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   1161,  0,
    326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    840,   841,   351,   842,   352,   353,   354,   355,   356,   3665,  357,   358,   0,     359,   1165,  843,
    361,   844,   0,     362,   363,   364,   1166,  1167,  365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   379,   380,   381,   845,   382,   383,   384,   385,   0,     386,
    387,   846,   388,   0,     1172,  390,   391,   392,   393,   394,   0,     395,   0,     792,   396,   397,
    398,   0,     0,     399,   400,   847,   401,   848,   1175,  403,   404,   405,   406,   0,     407,   408,
    0,     409,   1176,  0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   849,   441,   442,   443,   3666,  445,   446,   447,   448,   449,   450,
    451,   38,    452,   453,   454,   455,   456,   1179,  457,   458,   459,   460,   850,   461,   462,   463,
    0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   1181,  0,     475,   476,   42,
    477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   1185,  487,   1186,  0,
    489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   1189,  0,
    500,   501,   502,   503,   504,   1071,  506,   0,     507,   851,   508,   509,   510,   511,   0,     0,
    512,   0,     47,    513,   514,   515,   516,   517,   518,   519,   1191,  1192,  1193,  1194,  1195,  1196,
    1197,  1198,  528,   529,   530,   531,   532,   533,   534,   535,   536,   3667,  537,   0,     538,   539,
    540,   541,   542,   543,   544,   545,   546,   1200,  1201,  549,   550,   551,   552,   553,   554,   555,
    556,   1202,  558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
    572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,
    587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     829,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     3668,  224,   225,   226,   227,   228,   229,   230,   231,
    0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,
    830,   240,   241,   242,   243,   244,   831,   245,   246,   0,     247,   248,   249,   250,   251,   0,
    1142,  252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   1145,  0,     1146,  0,     262,
    263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,
    275,   276,   1147,  1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,   280,   281,   282,   283,
    284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,
    295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,
    307,   308,   309,   310,   311,   312,   313,   1158,  0,     315,   0,     316,   317,   318,   0,     0,
    319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   1161,  0,     326,   0,     327,
    328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   839,   342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   840,   841,   351,
    842,   352,   353,   354,   355,   356,   3665,  357,   358,   0,     359,   1165,  843,   361,   844,   0,
    362,   363,   364,   1166,  1167,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   379,   380,   381,   845,   382,   383,   384,   385,   0,     386,   387,   846,   388,
    0,     1172,  390,   391,   392,   393,   394,   0,     395,   0,     792,   396,   397,   398,   0,     0,
    399,   400,   847,   401,   848,   1175,  403,   404,   405,   406,   0,     407,   408,   0,     409,   1176,
    0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   849,   441,   442,   443,   3666,  445,   446,   447,   448,   449,   450,   451,   0,     452,
    453,   454,   455,   456,   1179,  457,   458,   459,   460,   850,   461,   462,   463,   0,     464,   465,
    466,   467,   468,   469,   470,   471,   472,   473,   1181,  0,     475,   476,   0,     477,   478,   479,
    480,   481,   482,   0,     483,   484,   0,     0,     485,   1185,  487,   1186,  0,     489,   490,   491,
    492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   1189,  0,     500,   501,   502,
    503,   504,   505,   506,   0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,
    513,   514,   515,   516,   517,   518,   519,   1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,
    529,   530,   531,   532,   533,   534,   535,   536,   3667,  537,   0,     538,   539,   540,   541,   542,
    543,   544,   545,   546,   1200,  1201,  549,   550,   551,   552,   553,   554,   555,   556,   1202,  558,
    559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
    575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,
    590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     829,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     3668,  224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,
    235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   830,   240,   241,
    242,   243,   244,   831,   245,   246,   0,     247,   248,   249,   250,   251,   0,     1142,  252,   253,
    254,   255,   256,   0,     257,   258,   259,   260,   1145,  0,     1146,  0,     262,   263,   264,   265,
    266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   1147,
    1148,  1149,  1150,  1151,  1152,  1153,  277,   278,   279,   280,   281,   282,   283,   284,   285,   0,
    286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,
    310,   311,   312,   313,   1158,  0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,
    836,   0,     837,   321,   322,   323,   0,     324,   1161,  0,     326,   0,     327,   328,   329,   330,
    331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   840,   841,   351,   842,   352,   353,
    354,   355,   356,   0,     357,   358,   0,     359,   1165,  843,   361,   844,   0,     362,   363,   364,
    1166,  1167,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    379,   380,   381,   845,   382,   383,   384,   385,   0,     386,   387,   846,   388,   0,     1172,  390,
    391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   847,
    401,   848,   1175,  403,   404,   405,   406,   0,     407,   408,   0,     409,   1176,  0,     411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,
    441,   442,   443,   3666,  445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,
    456,   1179,  457,   458,   459,   460,   850,   461,   462,   463,   0,     464,   465,   466,   467,   468,
    469,   470,   471,   472,   473,   1181,  0,     475,   476,   0,     477,   478,   479,   480,   481,   482,
    0,     483,   484,   0,     0,     485,   1185,  487,   1186,  0,     489,   490,   491,   492,   0,     493,
    494,   0,     0,     495,   496,   497,   498,   499,   1189,  0,     500,   501,   502,   503,   504,   505,
    506,   0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,
    516,   517,   518,   519,   1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,
    532,   533,   534,   535,   536,   3667,  537,   0,     538,   539,   540,   541,   542,   543,   544,   545,
    546,   1200,  1201,  549,   550,   551,   552,   553,   554,   555,   556,   1202,  558,   559,   560,   561,
    562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
    578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
    0,     0,     0,     0,     0,     0,     0,     829,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     49,    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,
    0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   244,
    831,   245,   246,   0,     247,   248,   249,   250,   251,   0,     1142,  252,   253,   254,   255,   256,
    0,     257,   258,   259,   260,   1145,  0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,
    268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   1147,  1148,  1149,  1150,
    1151,  1152,  1153,  277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,
    288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,
    300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,
    313,   1158,  0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   836,   0,     837,
    321,   322,   323,   0,     324,   1161,  0,     326,   0,     327,   328,   329,   330,   331,   838,   332,
    333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,
    346,   347,   348,   0,     349,   0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,
    0,     357,   358,   0,     359,   1165,  843,   361,   844,   0,     362,   363,   364,   1166,  1167,  365,
    366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
    845,   382,   383,   384,   385,   0,     386,   387,   846,   388,   0,     1172,  390,   391,   392,   393,
    394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,
    403,   404,   405,   406,   0,     407,   408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,
    415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,
    430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   443,
    444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   1179,  457,
    458,   459,   460,   850,   461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,
    472,   473,   1181,  0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,
    0,     0,     485,   1185,  487,   1186,  0,     489,   490,   491,   492,   0,     493,   494,   0,     0,
    495,   496,   497,   498,   499,   1189,  0,     500,   501,   502,   503,   504,   505,   506,   0,     507,
    851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,
    519,   1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,
    535,   536,   3667,  537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,
    549,   550,   551,   552,   553,   554,   555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,
    565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,
    0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,
    0,     0,     0,     0,     829,   1132,  653,   1133,  1134,  0,     708,   0,     0,     0,     4289,  224,
    225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,
    0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,  831,   1139,  1140,
    0,     247,   248,   249,   250,   251,   0,     4327,  252,   253,   1143,  1144,  256,   0,     257,   258,
    259,   260,   261,   0,     832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,
    270,   271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,
    277,   278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   1159,
    315,   0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,
    0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,  1163,
    0,     1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   360,   843,   361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,  383,
    384,   385,   0,     386,   387,   846,   388,   1171,  389,   390,   1173,  392,   393,   394,   0,     395,
    0,     0,     396,   397,   398,   0,     0,     399,   400,   847,   401,   848,   402,   403,   404,   405,
    406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,
    850,   461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,     485,
    486,   487,   488,   1187,  489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,   851,   508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
    552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,
    583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     4328,  829,   1132,  653,   1133,  1134,  0,     708,   4329,  0,     0,     0,     224,
    225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,
    0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,  831,   1139,  1140,
    0,     247,   248,   249,   250,   251,   0,     4327,  252,   253,   1143,  1144,  256,   0,     257,   258,
    259,   260,   261,   0,     832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,
    270,   271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,
    277,   278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   1159,
    315,   0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,
    0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,  1163,
    0,     1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   360,   843,   361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,  383,
    384,   385,   0,     386,   387,   846,   388,   1171,  389,   390,   1173,  392,   393,   394,   0,     395,
    0,     0,     396,   397,   398,   0,     0,     399,   400,   847,   401,   848,   402,   403,   404,   405,
    406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,
    850,   461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,     485,
    486,   487,   488,   1187,  489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,   851,   508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
    552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,
    583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     4328,  829,   1132,  653,   1133,  1134,  0,     708,   4338,  0,     0,     0,     224,
    225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,
    0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,  831,   1139,  1140,
    0,     247,   248,   249,   250,   251,   0,     4327,  252,   253,   1143,  1144,  256,   0,     257,   258,
    259,   260,   261,   0,     832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,
    270,   271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,
    277,   278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   1159,
    315,   0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,
    0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   1162,  1163,
    0,     1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   360,   843,   361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,   1169,  383,
    384,   385,   0,     386,   387,   846,   388,   1171,  389,   390,   1173,  392,   393,   394,   0,     395,
    0,     0,     396,   397,   398,   0,     0,     399,   400,   847,   401,   848,   402,   403,   404,   405,
    406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,
    850,   461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,     0,     485,
    486,   487,   488,   1187,  489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   0,     0,     500,   501,   502,   503,   504,   4383,  1190,  0,     507,   851,   508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
    552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,
    583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     4328,  873,   1412,  653,   0,     0,     0,     708,   4329,  0,     0,     0,     224,
    225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,
    0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   244,   831,   245,   246,
    0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,
    259,   260,   261,   0,     832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,
    270,   271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,
    277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   1674,
    315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,
    0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   360,   843,   361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   845,   382,   383,
    384,   385,   0,     386,   387,   846,   388,   0,     389,   390,   391,   392,   393,   394,   0,     395,
    1675,  0,     396,   397,   398,   0,     0,     399,   400,   847,   401,   848,   402,   403,   404,   405,
    406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,
    850,   461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,
    486,   487,   488,   1676,  489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   851,   508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
    552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,
    583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,     0,
    0,     873,   1413,  1414,  4832,  0,     0,     0,     0,     0,     0,     4833,  224,   225,   226,   227,
    228,   229,   230,   231,   0,     233,   234,   235,   3,     4,     0,     0,     0,     0,     0,     236,
    237,   0,     238,   239,   830,   240,   241,   242,   243,   244,   831,   245,   246,   0,     247,   248,
    249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,
    0,     832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,
    273,   274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,     277,   278,   279,
    280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,
    293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,
    317,   318,   0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   325,
    0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   347,   348,   0,     349,   0,
    350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,
    843,   361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   845,   382,   383,   384,   385,   0,
    386,   387,   846,   388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,
    397,   398,   0,     0,     399,   400,   847,   401,   848,   402,   403,   404,   405,   406,   0,     407,
    408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   849,   441,   442,   443,   444,   445,   446,   447,   448,   449,
    450,   451,   38,    452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   850,   461,   462,
    463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,
    42,    477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,
    0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,
    0,     500,   501,   502,   503,   504,   1071,  506,   0,     507,   851,   508,   509,   510,   511,   0,
    0,     512,   0,     47,    513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
    525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,
    539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
    555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,
    571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,
    586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     829,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     49,    224,   225,   226,   227,   228,   229,   230,
    231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,
    239,   830,   240,   241,   242,   243,   244,   831,   245,   246,   0,     247,   248,   249,   250,   251,
    0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     832,   0,
    262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,
    834,   275,   276,   0,     0,     0,     835,   0,     0,     0,     277,   278,   279,   280,   281,   282,
    283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,
    0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,
    0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   325,   0,     326,   0,
    327,   328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   839,   342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   840,   841,
    351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   843,   361,   844,
    0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   379,   380,   381,   845,   382,   383,   384,   385,   0,     386,   387,   846,
    388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,
    0,     399,   400,   847,   401,   848,   402,   403,   404,   405,   406,   0,     407,   408,   0,     409,
    410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   849,   441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,
    452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   850,   461,   462,   463,   0,     464,
    465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,
    479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,
    491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,
    502,   503,   504,   505,   506,   0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,
    0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,
    542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
    558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
    574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,
    589,   590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     223,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     5045,  224,   225,   226,   227,   228,   229,   230,   231,   0,     233,
    234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,
    241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,
    253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,
    265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,
    0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,
    0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,
    297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,
    309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,
    320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,
    330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,
    342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,
    353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,
    364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
    378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,
    390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,
    0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,
    412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
    427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,
    0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   38,    452,   453,   454,
    455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,
    468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   42,    477,   478,   479,   480,   481,
    482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,
    493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,
    1071,  506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     47,    513,   514,
    515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
    531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,
    545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,
    561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,
    577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
    592,   0,     0,     0,     0,     0,     0,     0,     223,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     49,    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,
    0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,
    244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,
    256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,
    267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,
    0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,
    287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,
    312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,
    0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
    381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,
    393,   394,   0,     395,   0,     792,   396,   397,   398,   0,     0,     399,   400,   0,     401,   0,
    402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,
    457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,
    471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,
    484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,
    0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,
    507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,
    518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
    548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
    564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
    580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,
    0,     0,     0,     0,     0,     223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     1780,
    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,
    0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,
    246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,
    258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,
    269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,
    0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,
    290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,
    0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,
    323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,
    358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,
    383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,
    395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,
    405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,
    446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,
    460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
    474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,
    485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,
    497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,
    509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,
    521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,
    551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
    567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,
    582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,
    0,     0,     223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     1263,  224,   225,   226,
    227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,
    236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,
    248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,
    261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,
    272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,
    279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,
    292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,
    316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,
    325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,
    360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,
    0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,
    396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,
    407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,
    462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,
    476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,
    488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,
    0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,
    0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,
    538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
    554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
    570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,
    585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     223,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     3026,  224,   225,   226,   227,   228,   229,
    230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,
    238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,
    251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,
    0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,
    0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,
    282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,
    0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,
    0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,
    0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,
    0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,
    340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,
    0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,
    0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,
    374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,
    0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,
    0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,
    409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,
    423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
    438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
    0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,
    464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,
    478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,
    490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,
    501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,
    0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
    527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,
    541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,
    557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,
    573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,
    588,   589,   590,   591,   592,   0,     0,     0,     0,     0,     0,     0,     223,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     4208,  224,   225,   226,   227,   228,   229,   230,   231,   0,
    233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,
    240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,
    252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,
    264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,
    276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,
    285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,
    296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,
    308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,
    0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,
    329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,
    352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,
    363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,
    389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,
    400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,
    454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,
    467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,
    481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,
    0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,
    504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,
    514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,
    544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
    560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
    576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
    591,   592,   0,     0,     0,     0,     0,     0,     0,     1525,  1412,  653,   0,     0,     884,   708,
    0,     0,     0,     4679,  224,   225,   226,   227,   228,   229,   230,   231,   2169,  233,   234,   235,
    2170,  2171,  2172,  2173,  2174,  2175,  2176,  236,   237,   2177,  238,   239,   830,   240,   241,   242,
    0,     1526,  831,   1527,  1528,  2178,  247,   248,   249,   250,   251,   2179,  2180,  252,   253,   1529,
    1530,  256,   2181,  257,   258,   259,   260,   0,     2182,  832,   2183,  262,   263,   264,   265,   266,
    833,   267,   268,   2184,  269,   270,   271,   272,   273,   274,   2185,  834,   275,   276,   2186,  2187,
    2188,  835,   2189,  2190,  2191,  277,   278,   279,   280,   281,   282,   1531,  1532,  285,   2192,  286,
    2193,  287,   288,   289,   290,   291,   2194,  292,   293,   294,   2195,  2196,  295,   296,   1156,  298,
    299,   2197,  300,   301,   302,   2198,  303,   304,   305,   306,   2199,  2200,  307,   308,   309,   0,
    311,   312,   313,   0,     2201,  315,   2202,  316,   317,   1533,  2203,  2204,  319,   2205,  320,   836,
    2206,  837,   321,   322,   323,   2207,  324,   0,     2208,  326,   2209,  327,   328,   329,   330,   331,
    838,   332,   333,   334,   2210,  335,   336,   337,   338,   339,   340,   2211,  341,   839,   0,     343,
    344,   345,   346,   1534,  1535,  2212,  1536,  2213,  350,   840,   841,   351,   842,   352,   353,   354,
    355,   356,   2214,  357,   358,   2215,  359,   0,     843,   361,   844,   2216,  362,   363,   364,   2217,
    2218,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
    380,   1537,  845,   1538,  383,   384,   3970,  2219,  386,   387,   846,   388,   2220,  0,     390,   1539,
    392,   393,   394,   2221,  395,   2222,  2223,  3971,  397,   398,   2224,  2225,  399,   0,     847,   401,
    848,   0,     403,   404,   405,   406,   2226,  407,   408,   2227,  409,   0,     2228,  0,     412,   413,
    414,   2229,  415,   416,   417,   418,   419,   420,   421,   422,   1540,  424,   425,   426,   427,   2230,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   2231,  439,   440,   849,   441,
    442,   3972,  444,   445,   446,   447,   448,   449,   450,   451,   2232,  452,   453,   454,   455,   456,
    2233,  457,   2326,  459,   460,   850,   461,   1542,  463,   2234,  464,   465,   466,   467,   468,   469,
    470,   471,   472,   473,   0,     2235,  475,   476,   2236,  477,   478,   479,   480,   481,   482,   2237,
    1543,  1544,  2238,  2239,  485,   0,     487,   0,     2240,  489,   490,   491,   492,   2241,  493,   494,
    2242,  2243,  495,   496,   497,   498,   499,   2244,  2245,  500,   501,   502,   503,   504,   0,     1545,
    2246,  507,   851,   508,   509,   510,   511,   2247,  2248,  512,   2249,  2250,  513,   514,   515,   516,
    517,   518,   0,     0,     0,     0,     0,     0,     0,     0,     0,     528,   529,   530,   531,   532,
    533,   534,   535,   536,   2251,  537,   2252,  538,   539,   540,   541,   542,   543,   544,   545,   546,
    0,     0,     549,   550,   551,   552,   553,   554,   555,   556,   0,     558,   559,   560,   561,   562,
    563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,
    0,     580,   2253,  581,   582,   0,     584,   585,   586,   587,   588,   589,   590,   591,   592,   0,
    0,     0,     0,     887,   888,   889,   0,     3973,  3974,  892,   893,   894,   895,   223,   0,     0,
    0,     0,     884,   0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,
    0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,
    0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,
    0,     252,   253,   254,   255,   256,   0,     257,   885,   259,   260,   261,   0,     0,     0,     262,
    263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,
    275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,
    284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,
    295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,
    307,   308,   309,   310,   311,   312,   313,   314,   0,     886,   0,     316,   317,   318,   0,     0,
    319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,
    328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,
    0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,
    362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,
    0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,
    399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,
    0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,
    453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,
    466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,
    480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,
    492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,
    503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,
    513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
    529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,
    543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,
    559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
    575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,
    590,   591,   592,   0,     0,     0,     0,     887,   888,   889,   0,     890,   891,   892,   893,   894,
    895,   223,   0,     0,     0,     0,     884,   0,     0,     0,     0,     0,     224,   225,   226,   227,
    228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,
    237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,
    249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   985,   259,   260,   261,
    0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,
    273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,
    280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,
    293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     986,   0,     316,
    317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,
    0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,
    350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,
    0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,
    386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,
    397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,
    408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,
    450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,
    463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,
    0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,
    0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,
    0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,
    0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
    525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,
    539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
    555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,
    571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,
    586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     887,   888,   889,   0,     890,
    891,   892,   893,   894,   895,   223,   0,     0,     0,     0,     884,   0,     0,     0,     0,     0,
    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,
    0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,
    246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,
    1041,  259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,
    269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,
    0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,
    290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,
    0,     1042,  0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,
    323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   1043,  0,     332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,
    358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,
    383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,
    395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,
    405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,
    446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,
    460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
    474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,
    485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,
    497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,
    509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,
    521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,
    551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
    567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,
    582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     887,
    888,   889,   0,     890,   891,   892,   893,   894,   895,   223,   0,     0,     0,     0,     884,   0,
    0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,
    0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,
    243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,
    255,   256,   0,     257,   1511,  259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,
    0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,
    0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,
    0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,
    299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,
    311,   312,   313,   314,   0,     1512,  0,     316,   317,   318,   0,     0,     319,   0,     320,   0,
    0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,
    0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,
    344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,
    355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,
    0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
    380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,
    392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,
    0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,
    414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,
    428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,
    442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,
    0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,
    470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,
    483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,
    0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,
    0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,
    517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
    533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,
    547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,
    563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,
    579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,
    0,     0,     0,     887,   888,   889,   0,     890,   891,   892,   893,   894,   895,   223,   0,     0,
    0,     0,     884,   0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,
    0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,
    0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,
    0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,
    263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,
    275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,
    284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,
    295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,
    307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,
    319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,
    328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,
    341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,
    0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,
    362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
    376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,
    0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,
    399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,
    0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
    425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,
    439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,
    453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,
    466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,
    480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,
    492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,
    503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,
    513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
    529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,
    543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,
    559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
    575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,
    590,   591,   592,   0,     0,     0,     0,     887,   888,   889,   0,     890,   891,   892,   893,   894,
    895,   223,   0,     0,     0,     0,     884,   0,     0,     0,     0,     0,     224,   225,   226,   227,
    228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,
    237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,
    249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   3103,  259,   260,   261,
    0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,
    273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,
    280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,
    293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,
    305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     3104,  0,     316,
    317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,
    0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,
    338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,
    350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,
    0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,
    372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,
    386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,
    397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,
    408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,
    421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,
    436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,
    450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,
    463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,
    0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,
    0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,
    0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,
    0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
    525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,
    539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
    555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,
    571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,
    586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     887,   888,   889,   0,     890,
    891,   892,   893,   894,   895,   223,   0,     0,     0,     0,     884,   0,     0,     0,     0,     0,
    224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,
    0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,
    246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,
    258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,
    269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,
    0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,
    290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,
    302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,
    0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,
    323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,
    0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,
    348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,
    358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,
    368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,
    383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,
    395,   0,     0,     4994,  397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,
    405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,
    417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,
    432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,
    446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,
    460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
    474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,
    485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,
    497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,
    509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,
    521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
    0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,
    551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
    567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,
    582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     0,     0,     0,     887,
    888,   889,   0,     890,   891,   892,   893,   894,   895,   1815,  0,     0,     0,     0,     1816,  0,
    0,     1817,  0,     0,     1818,  1819,  1820,  1821,  1822,  1823,  1824,  1825,  0,     1826,  1827,  0,
    0,     0,     1828,  0,     0,     1829,  0,     1830,  1831,  0,     1832,  0,     1833,  1834,  1835,  1836,
    1837,  1838,  1839,  1840,  1841,  0,     1842,  1843,  1844,  1845,  1846,  0,     0,     0,     1847,  0,
    0,     1848,  0,     1849,  1850,  1851,  1852,  1853,  1854,  0,     0,     1855,  0,     1856,  1857,  1858,
    0,     0,     1859,  0,     1860,  1861,  0,     1862,  1863,  1864,  0,     0,     1865,  0,     0,     0,
    0,     0,     0,     0,     0,     1866,  1867,  0,     1868,  0,     1869,  1870,  1871,  1872,  0,     1873,
    0,     1874,  1875,  1876,  1877,  1878,  0,     0,     1879,  0,     0,     0,     0,     1880,  1881,  1882,
    1883,  0,     1884,  1885,  1886,  0,     1887,  1888,  1889,  0,     0,     0,     1890,  1891,  1892,  1893,
    1894,  0,     1895,  1896,  0,     0,     0,     0,     1897,  1898,  0,     0,     1899,  0,     1900,  1901,
    0,     0,     1902,  0,     1903,  0,     1904,  1905,  0,     1906,  0,     1907,  1908,  0,     0,     1909,
    1910,  1911,  1912,  1913,  1914,  1915,  1916,  1917,  1918,  1919,  1920,  0,     0,     0,     1921,  1922,
    1923,  1924,  1925,  1926,  1927,  0,     1928,  0,     1929,  1930,  1931,  1932,  0,     1933,  0,     1934,
    1935,  1936,  0,     0,     0,     0,     0,     1937,  0,     1938,  1939,  0,     1940,  1941,  1942,  0,
    0,     1943,  1944,  0,     1945,  0,     1946,  1947,  1948,  1949,  0,     1950,  1951,  0,     1952,  1953,
    1954,  1955,  0,     1956,  1957,  1958,  1959,  1960,  1961,  1962,  1963,  1964,  0,     1965,  1966,  1967,
    1968,  1969,  0,     0,     1970,  0,     0,     1971,  1972,  1973,  1974,  0,     0,     1975,  1976,  0,
    0,     1977,  1978,  1979,  0,     1980,  0,     0,     1981,  0,     0,     1982,  0,     1983,  1984,  1985,
    1986,  0,     1987,  1988,  1989,  1990,  0,     1991,  1992,  1993,  1994,  1995,  1996,  0,     0,     0,
    0,     1997,  1998,  1999,  2000,  2001,  2002,  0,     2003,  2004,  2005,  0,     2006,  2007,  0,     2008,
    2009,  2010,  2011,  2012,  2013,  2014,  2015,  2016,  0,     2017,  0,     2018,  0,     2019,  0,     2020,
    0,     2021,  2022,  2023,  2024,  2025,  2026,  2027,  0,     0,     2028,  0,     2029,  2030,  2031,  2032,
    2033,  2034,  2035,  0,     2036,  0,     2037,  2038,  0,     0,     2039,  2040,  2041,  2042,  0,     0,
    2043,  2044,  0,     0,     2045,  2046,  2047,  2048,  0,     2049,  2050,  2051,  0,     0,     2052,  2053,
    0,     0,     2054,  2055,  0,     2056,  2057,  0,     0,     2058,  2059,  0,     2060,  2061,  2062,  2063,
    0,     0,     2064,  2065,  2066,  0,     2067,  0,     0,     0,     0,     0,     0,     0,     2068,  0,
    2069,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2070,  2071,  2072,
    2073,  2074,  2075,  2076,  0,     0,     0,     0,     2077,  2078,  2079,  0,     2080,  2081,  2082,  0,
    2083,  2084,  2085,  2086,  0,     2087,  0,     2088,  2089,  2090,  0,     2091,  2092,  2093,  0,     2094,
    0,     2095,  2096,  2097,  0,     2098,  2099,  2100,  2101,  2102,  0,     0,     0,     0,     0,     2103,
    2104,  0,     0,     2105,  2106,  2107,  2108,  2109,  2110,  2111,  2112,  0,     0,     0,     0,     0,
    0,     0,     2168,  2113,  2114,  2115,  0,     2116,  2117,  2118,  2119,  2120,  2121,  224,   225,   226,
    227,   228,   229,   230,   231,   2169,  233,   234,   235,   2170,  2171,  2172,  2173,  2174,  2175,  2176,
    236,   237,   2177,  238,   239,   830,   240,   241,   242,   243,   244,   831,   245,   246,   2178,  247,
    248,   249,   250,   251,   2179,  2180,  252,   253,   254,   255,   256,   2181,  257,   258,   259,   260,
    261,   2182,  832,   2183,  262,   263,   264,   265,   266,   833,   267,   268,   2184,  269,   270,   271,
    272,   273,   274,   2185,  834,   275,   276,   2186,  2187,  2188,  835,   2189,  2190,  2191,  277,   278,
    279,   280,   281,   282,   283,   284,   285,   2192,  286,   2193,  287,   288,   289,   290,   291,   2194,
    292,   293,   294,   2195,  2196,  295,   296,   297,   298,   299,   2197,  300,   301,   302,   2198,  303,
    304,   305,   306,   2199,  2200,  307,   308,   309,   310,   311,   312,   313,   314,   2201,  315,   2202,
    316,   317,   318,   2203,  2204,  319,   2205,  320,   836,   2206,  837,   321,   322,   323,   2207,  324,
    325,   2208,  326,   2209,  327,   328,   329,   330,   331,   838,   332,   333,   334,   2210,  335,   336,
    337,   338,   339,   340,   2211,  341,   839,   342,   343,   344,   345,   346,   347,   348,   2212,  349,
    2213,  350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   2214,  357,   358,   2215,  359,
    360,   843,   361,   844,   2216,  362,   363,   364,   2217,  2218,  365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   845,   382,   383,   384,   385,
    2219,  386,   387,   846,   388,   2220,  389,   390,   391,   392,   393,   394,   2221,  395,   2222,  2223,
    396,   397,   398,   2224,  2225,  399,   400,   847,   401,   848,   402,   403,   404,   405,   406,   2226,
    407,   408,   2227,  409,   410,   2228,  411,   412,   413,   414,   2229,  415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   2230,  428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   2231,  439,   440,   849,   441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   2232,  452,   453,   454,   455,   456,   2233,  457,   458,   459,   460,   850,   461,
    462,   463,   2234,  464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   2235,  475,
    476,   2236,  477,   478,   479,   480,   481,   482,   2237,  483,   484,   2238,  2239,  485,   486,   487,
    488,   2240,  489,   490,   491,   492,   2241,  493,   494,   2242,  2243,  495,   496,   497,   498,   499,
    2244,  2245,  500,   501,   502,   503,   504,   505,   506,   2246,  507,   851,   508,   509,   510,   511,
    2247,  2248,  512,   2249,  2250,  513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   2251,  537,   2252,
    538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
    554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
    570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   2253,  581,   582,   583,   584,
    585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     2254,  224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,
    0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,
    244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,
    256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,
    267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,
    0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,
    287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,
    312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,
    0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
    381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,
    393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,
    402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,
    457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,
    471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,
    484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,
    0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,
    507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,
    518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
    548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
    564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
    580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     797,   224,   225,   226,   227,   228,   229,   230,
    231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,
    239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,
    0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,
    262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,
    0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,
    283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,
    0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,
    0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,
    327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,
    0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,
    388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,
    0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,
    410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,
    452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,
    465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,
    479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,
    491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,
    502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,
    0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,
    542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
    558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
    574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,
    589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     5076,  224,
    225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,
    0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,
    0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,
    259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,
    270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,
    277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,
    315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,
    0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,
    384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,
    0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,
    406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,
    0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,
    486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
    552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,
    583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   1525,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     5587,  224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,
    235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   830,   240,   241,
    242,   0,     1526,  831,   1527,  1528,  0,     247,   248,   249,   250,   251,   0,     0,     252,   253,
    1529,  1530,  256,   0,     257,   258,   259,   260,   0,     0,     832,   0,     262,   263,   264,   265,
    266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   0,
    0,     0,     835,   0,     0,     0,     277,   278,   279,   280,   281,   282,   1531,  1532,  285,   0,
    286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,
    0,     311,   312,   313,   0,     0,     315,   0,     316,   317,   1533,  0,     0,     319,   0,     320,
    836,   0,     837,   321,   322,   323,   0,     324,   0,     0,     326,   0,     327,   328,   329,   330,
    331,   838,   332,   333,   334,   2322,  335,   336,   337,   338,   339,   340,   0,     341,   839,   2323,
    343,   344,   345,   346,   1534,  1535,  0,     1536,  0,     350,   840,   841,   351,   842,   352,   353,
    354,   355,   356,   0,     357,   358,   0,     359,   0,     843,   361,   844,   0,     362,   363,   364,
    0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    379,   380,   1537,  845,   1538,  383,   384,   0,     0,     386,   387,   846,   388,   0,     0,     390,
    1539,  392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     2324,  399,   2325,  847,
    401,   848,   0,     403,   404,   405,   406,   0,     407,   408,   0,     409,   0,     0,     0,     412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1540,  424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,
    441,   442,   0,     444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,
    456,   0,     457,   2326,  459,   460,   850,   461,   1542,  463,   0,     464,   465,   466,   467,   468,
    469,   470,   471,   472,   473,   0,     0,     475,   476,   0,     477,   478,   479,   480,   481,   482,
    0,     1543,  1544,  0,     0,     485,   0,     487,   0,     0,     489,   490,   491,   492,   0,     493,
    494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   0,
    1545,  2327,  507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,
    516,   517,   518,   0,     0,     0,     0,     0,     0,     0,     0,     0,     528,   529,   530,   531,
    532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,
    546,   0,     0,     549,   550,   551,   552,   553,   554,   555,   556,   0,     558,   559,   560,   561,
    562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
    578,   0,     580,   0,     581,   582,   0,     584,   585,   586,   587,   588,   589,   590,   591,   592,
    3454,  0,     0,     0,     0,     0,     0,     0,     0,     0,     2328,  224,   225,   226,   227,   228,
    229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,
    0,     238,   239,   830,   240,   241,   242,   0,     1526,  831,   1527,  1528,  0,     247,   248,   249,
    250,   251,   0,     0,     252,   253,   1529,  1530,  256,   0,     257,   258,   259,   260,   0,     0,
    832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,
    274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,     277,   278,   279,   280,
    281,   282,   1531,  1532,  285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,
    294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   0,     0,     307,   308,   309,   0,     311,   312,   313,   0,     0,     315,   0,     316,   317,
    1533,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   0,     0,
    326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   2322,  335,   336,   337,   338,
    339,   340,   0,     341,   839,   2323,  343,   344,   345,   346,   1534,  1535,  0,     1536,  0,     350,
    840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   0,     843,
    361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   379,   380,   1537,  845,   1538,  383,   384,   0,     0,     386,
    387,   846,   388,   0,     0,     390,   1539,  392,   393,   394,   0,     395,   0,     0,     396,   397,
    398,   0,     2324,  399,   2325,  847,   401,   848,   0,     403,   404,   405,   406,   0,     407,   408,
    0,     409,   0,     0,     0,     412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   1540,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   849,   441,   442,   0,     444,   445,   446,   447,   448,   449,   450,
    451,   0,     452,   453,   454,   455,   456,   0,     457,   2326,  459,   460,   850,   461,   1542,  463,
    0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   0,     0,     475,   476,   0,
    477,   478,   479,   480,   481,   482,   0,     1543,  1544,  0,     0,     485,   0,     487,   0,     0,
    489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,
    500,   501,   502,   503,   504,   0,     1545,  2327,  507,   851,   508,   509,   510,   511,   0,     0,
    512,   0,     0,     513,   514,   515,   516,   517,   518,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,
    540,   541,   542,   543,   544,   545,   546,   0,     0,     549,   550,   551,   552,   553,   554,   555,
    556,   0,     558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
    572,   573,   574,   575,   576,   577,   578,   0,     580,   0,     581,   582,   0,     584,   585,   586,
    587,   588,   589,   590,   591,   592,   829,   1132,  653,   1133,  1134,  0,     708,   0,     0,     0,
    2328,  224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,
    0,     0,     0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   1138,  831,
    1139,  1140,  0,     247,   248,   249,   250,   251,   0,     4327,  252,   253,   1143,  1144,  256,   0,
    257,   258,   259,   260,   261,   0,     832,   0,     262,   263,   264,   265,   266,   833,   267,   268,
    0,     269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,     835,   0,
    0,     0,     277,   278,   279,   280,   281,   282,   1154,  1155,  285,   0,     286,   0,     287,   288,
    289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,
    314,   1159,  315,   0,     316,   317,   1160,  0,     0,     319,   0,     320,   836,   0,     837,   321,
    322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,
    1162,  1163,  0,     1164,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,
    357,   358,   0,     359,   360,   843,   361,   844,   0,     362,   363,   364,   0,     0,     365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1168,  845,
    1169,  383,   384,   385,   0,     386,   387,   846,   388,   1171,  389,   390,   1173,  392,   393,   394,
    0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   847,   401,   848,   402,   403,
    404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   1177,  424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,
    459,   460,   850,   461,   1180,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,
    473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     1183,  1184,  0,
    0,     485,   486,   487,   488,   1187,  489,   490,   491,   492,   0,     493,   494,   0,     0,     495,
    496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   1190,  0,     507,   851,
    508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
    550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
    566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,
    581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   873,   1412,  653,   0,
    0,     0,     708,   0,     0,     4328,  0,     224,   225,   226,   227,   228,   229,   230,   231,   0,
    233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   830,
    240,   241,   242,   243,   244,   831,   245,   246,   0,     247,   248,   249,   250,   251,   0,     0,
    252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     832,   0,     262,   263,
    264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,
    276,   0,     0,     0,     835,   0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,
    285,   2158,  286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,
    296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,
    308,   309,   310,   311,   312,   313,   314,   1674,  315,   0,     316,   317,   318,   0,     0,     319,
    0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,
    329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    839,   342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   840,   841,   351,   842,
    352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   843,   361,   844,   0,     362,
    363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   379,   380,   381,   845,   382,   383,   384,   385,   0,     386,   387,   846,   388,   0,
    389,   390,   391,   392,   393,   394,   0,     395,   1675,  0,     396,   397,   398,   0,     0,     399,
    400,   847,   401,   848,   402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   849,   441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,
    454,   455,   456,   0,     457,   458,   459,   460,   850,   461,   462,   463,   0,     464,   465,   466,
    467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,
    481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   1676,  489,   490,   491,   492,
    0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,
    504,   505,   506,   0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,
    514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,
    544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
    560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
    576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
    591,   592,   873,   1412,  653,   0,     0,     0,     708,   0,     1413,  1414,  0,     224,   225,   226,
    227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,
    236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   244,   831,   245,   246,   0,     247,
    248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,
    261,   0,     832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,
    272,   273,   274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,     277,   278,
    279,   280,   281,   282,   283,   284,   285,   2163,  286,   0,     287,   288,   289,   290,   291,   0,
    292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   1674,  315,   0,
    316,   317,   318,   0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,
    325,   0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,
    360,   843,   361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   845,   382,   383,   384,   385,
    0,     386,   387,   846,   388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   1675,  0,
    396,   397,   398,   0,     0,     399,   400,   847,   401,   848,   402,   403,   404,   405,   406,   0,
    407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   850,   461,
    462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,
    476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,
    488,   1676,  489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,
    0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   851,   508,   509,   510,   511,
    0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,
    538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
    554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
    570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,
    585,   586,   587,   588,   589,   590,   591,   592,   873,   1412,  653,   0,     0,     0,     708,   0,
    1413,  1414,  0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,
    0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,
    244,   831,   245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,
    256,   0,     257,   258,   259,   260,   261,   0,     832,   0,     262,   263,   264,   265,   266,   833,
    267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,
    835,   0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,
    287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,
    312,   313,   314,   1674,  315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   836,   0,
    837,   321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   838,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   840,   841,   351,   842,   352,   353,   354,   355,
    356,   0,     357,   358,   0,     359,   360,   843,   361,   844,   0,     362,   363,   364,   0,     0,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
    381,   845,   382,   383,   384,   385,   0,     386,   387,   846,   388,   0,     389,   390,   391,   392,
    393,   394,   0,     395,   1675,  0,     396,   397,   398,   0,     0,     399,   400,   847,   401,   848,
    402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,
    457,   458,   459,   460,   850,   461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,
    471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,
    484,   0,     0,     485,   486,   487,   488,   1676,  489,   490,   491,   492,   0,     493,   494,   0,
    0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,
    507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,
    518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
    548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
    564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
    580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,
    0,     0,     0,     0,     708,   0,     1413,  1414,  0,     224,   709,   226,   227,   228,   229,   230,
    231,   710,   233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,
    239,   0,     711,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,
    0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,
    262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,
    0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,
    283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,
    0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   712,   318,   0,
    0,     319,   0,     713,   0,     714,   0,     321,   322,   323,   0,     324,   325,   0,     326,   0,
    327,   328,   329,   330,   331,   0,     332,   333,   334,   715,   335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   716,   0,     357,   358,   0,     359,   360,   0,     361,   0,
    0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   379,   380,   381,   0,     382,   717,   384,   385,   0,     386,   387,   0,
    388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,
    0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,
    410,   0,     411,   412,   413,   414,   0,     718,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   719,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,
    452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,
    465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,
    479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,
    491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,
    502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,
    0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,
    542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
    558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
    574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,
    589,   590,   591,   592,   2168,  5462,  653,   0,     0,     0,     708,   0,     720,   721,   0,     224,
    225,   226,   227,   228,   229,   230,   231,   2169,  233,   234,   235,   2170,  2171,  2172,  2173,  2174,
    2175,  2176,  236,   237,   2177,  238,   239,   830,   240,   241,   242,   243,   244,   831,   245,   246,
    2178,  247,   248,   249,   250,   251,   2179,  2180,  252,   253,   254,   255,   256,   2181,  257,   258,
    259,   260,   261,   2182,  832,   2183,  262,   263,   264,   265,   266,   833,   267,   268,   2184,  269,
    270,   271,   272,   273,   274,   2185,  834,   275,   276,   2186,  2187,  2188,  835,   2189,  2190,  2191,
    277,   278,   279,   280,   281,   282,   283,   284,   285,   2192,  286,   2193,  287,   288,   289,   290,
    291,   2194,  292,   293,   294,   2195,  2196,  295,   296,   297,   298,   299,   2197,  300,   301,   302,
    2198,  303,   304,   305,   306,   2199,  2200,  307,   308,   309,   310,   311,   312,   313,   314,   2201,
    315,   2202,  316,   317,   318,   2203,  2204,  319,   2205,  320,   836,   2206,  837,   321,   322,   323,
    2207,  324,   325,   2208,  326,   2209,  327,   328,   329,   330,   331,   838,   332,   333,   334,   2210,
    335,   336,   337,   338,   339,   340,   2211,  341,   839,   342,   343,   344,   345,   346,   347,   348,
    2212,  349,   2213,  350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   2214,  357,   358,
    2215,  359,   360,   843,   361,   844,   2216,  362,   363,   364,   2217,  2218,  365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   845,   382,   383,
    384,   385,   2219,  386,   387,   846,   388,   2220,  389,   390,   391,   392,   393,   394,   2221,  395,
    2222,  2223,  396,   397,   398,   2224,  2225,  399,   400,   847,   401,   848,   402,   403,   404,   405,
    406,   2226,  407,   408,   2227,  409,   410,   2228,  411,   412,   413,   414,   2229,  415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   2230,  428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   2231,  439,   440,   849,   441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   2232,  452,   453,   454,   455,   456,   2233,  457,   458,   459,   460,
    850,   461,   462,   463,   2234,  464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
    2235,  475,   476,   2236,  477,   478,   479,   480,   481,   482,   2237,  483,   484,   2238,  2239,  485,
    486,   487,   488,   2240,  489,   490,   491,   492,   2241,  493,   494,   2242,  2243,  495,   496,   497,
    498,   499,   2244,  2245,  500,   501,   502,   503,   504,   505,   506,   2246,  507,   851,   508,   509,
    510,   511,   2247,  2248,  512,   2249,  2250,  513,   514,   515,   516,   517,   518,   519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   2251,
    537,   2252,  538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
    552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   2253,  581,   582,
    583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   2168,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   2169,  233,   234,
    235,   2170,  2171,  2172,  2173,  2174,  2175,  2176,  236,   237,   2177,  238,   239,   830,   240,   241,
    242,   243,   244,   831,   245,   246,   2178,  247,   248,   249,   250,   251,   2179,  2180,  252,   253,
    254,   255,   256,   2181,  257,   258,   259,   260,   261,   2182,  832,   2183,  262,   263,   264,   265,
    266,   833,   267,   268,   2184,  269,   270,   271,   272,   273,   274,   2185,  834,   275,   276,   2186,
    2187,  2188,  835,   2189,  2190,  2191,  277,   278,   279,   280,   281,   282,   283,   284,   285,   2192,
    286,   2193,  287,   288,   289,   290,   291,   2194,  292,   293,   294,   2195,  2196,  295,   296,   297,
    298,   299,   2197,  300,   301,   302,   2198,  303,   304,   305,   306,   2199,  2200,  307,   308,   309,
    310,   311,   312,   313,   314,   2201,  315,   2202,  316,   317,   318,   2203,  2204,  319,   2205,  320,
    836,   2206,  837,   321,   322,   323,   2207,  324,   325,   2208,  326,   2209,  327,   328,   329,   330,
    331,   838,   332,   333,   334,   2210,  335,   336,   337,   338,   339,   340,   2211,  341,   839,   342,
    343,   344,   345,   346,   347,   348,   2212,  349,   2213,  350,   840,   841,   351,   842,   352,   353,
    354,   355,   356,   2214,  357,   358,   2215,  359,   360,   843,   361,   844,   2216,  362,   363,   364,
    2217,  2218,  365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    379,   380,   381,   845,   382,   383,   384,   385,   2219,  386,   387,   846,   388,   2220,  389,   390,
    391,   392,   393,   394,   2221,  395,   2222,  2223,  396,   397,   398,   2224,  2225,  399,   400,   847,
    401,   848,   402,   403,   404,   405,   406,   2226,  407,   408,   2227,  409,   410,   2228,  411,   412,
    413,   414,   2229,  415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    2230,  428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   2231,  439,   440,   849,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   2232,  452,   453,   454,   455,
    456,   2233,  457,   458,   459,   460,   850,   461,   462,   463,   2234,  464,   465,   466,   467,   468,
    469,   470,   471,   472,   473,   474,   2235,  475,   476,   2236,  477,   478,   479,   480,   481,   482,
    2237,  483,   484,   2238,  2239,  485,   486,   487,   488,   2240,  489,   490,   491,   492,   2241,  493,
    494,   2242,  2243,  495,   496,   497,   498,   499,   2244,  2245,  500,   501,   502,   503,   504,   505,
    506,   2246,  507,   851,   508,   509,   510,   511,   2247,  2248,  512,   2249,  2250,  513,   514,   515,
    516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   2251,  537,   2252,  538,   539,   540,   541,   542,   543,   544,   545,
    546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,
    562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
    578,   579,   580,   2253,  581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
    2168,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   3189,
    229,   230,   231,   2169,  233,   234,   235,   2170,  2171,  2172,  2173,  2174,  2175,  2176,  236,   237,
    2177,  238,   239,   830,   240,   241,   242,   243,   244,   831,   245,   246,   2178,  247,   248,   249,
    250,   251,   2179,  2180,  252,   253,   254,   255,   256,   2181,  257,   258,   259,   260,   261,   2182,
    832,   2183,  262,   263,   264,   265,   266,   833,   267,   268,   2184,  269,   270,   271,   272,   273,
    274,   2185,  834,   275,   276,   2186,  2187,  2188,  835,   2189,  2190,  2191,  277,   278,   279,   280,
    281,   282,   283,   284,   285,   2192,  286,   2193,  287,   288,   289,   290,   291,   2194,  292,   293,
    294,   2195,  2196,  295,   296,   297,   3190,  299,   2197,  300,   301,   302,   2198,  303,   304,   305,
    306,   2199,  2200,  307,   308,   309,   310,   311,   312,   313,   314,   2201,  315,   2202,  316,   317,
    318,   2203,  2204,  319,   2205,  320,   836,   2206,  837,   321,   322,   323,   2207,  324,   325,   2208,
    326,   2209,  327,   328,   329,   330,   331,   838,   332,   333,   334,   2210,  335,   336,   337,   338,
    339,   340,   2211,  341,   839,   342,   343,   344,   345,   346,   347,   348,   2212,  349,   2213,  350,
    840,   841,   351,   842,   352,   353,   354,   355,   356,   2214,  357,   358,   2215,  359,   360,   843,
    361,   844,   2216,  362,   363,   364,   2217,  2218,  365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   379,   380,   381,   845,   382,   383,   384,   385,   2219,  386,
    387,   846,   388,   2220,  389,   390,   391,   392,   393,   394,   2221,  395,   2222,  2223,  396,   397,
    398,   2224,  2225,  399,   400,   847,   401,   848,   402,   403,   404,   405,   406,   2226,  407,   408,
    2227,  409,   410,   2228,  411,   412,   413,   414,   2229,  415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   2230,  428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   2231,  439,   440,   849,   441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   2232,  452,   453,   454,   455,   456,   2233,  3191,  458,   459,   460,   850,   461,   462,   463,
    2234,  464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   2235,  475,   476,   2236,
    477,   478,   479,   480,   481,   482,   2237,  483,   484,   2238,  2239,  485,   486,   487,   488,   2240,
    489,   490,   491,   492,   2241,  493,   494,   2242,  2243,  495,   496,   497,   498,   499,   2244,  2245,
    500,   501,   502,   503,   504,   505,   506,   2246,  507,   851,   508,   509,   510,   511,   2247,  2248,
    512,   2249,  2250,  513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   2251,  537,   2252,  538,   539,
    540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
    556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
    572,   573,   574,   575,   576,   577,   578,   579,   580,   2253,  581,   582,   583,   584,   585,   586,
    587,   588,   589,   590,   591,   592,   829,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,
    0,     0,     0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   244,   831,
    245,   246,   0,     247,   248,   249,   250,   251,   0,     1142,  252,   253,   254,   255,   256,   0,
    257,   258,   259,   260,   1145,  0,     1146,  0,     262,   263,   264,   265,   266,   833,   267,   268,
    0,     269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   1147,  1148,  1149,  1150,  1151,
    1152,  1153,  277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,
    289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,
    1158,  0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   836,   0,     837,   321,
    322,   323,   0,     324,   1161,  0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,
    357,   358,   0,     359,   1165,  843,   361,   844,   0,     362,   363,   364,   1166,  1167,  365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   845,
    382,   383,   384,   385,   0,     386,   387,   846,   388,   0,     1172,  390,   391,   392,   393,   394,
    0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   847,   401,   848,   1175,  403,
    404,   405,   406,   0,     407,   408,   0,     409,   1176,  0,     411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   1179,  457,   458,
    459,   460,   850,   461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,
    473,   1181,  0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,
    0,     485,   1185,  487,   1186,  0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,
    496,   497,   498,   499,   1189,  0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   851,
    508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,
    1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  528,   529,   530,   531,   532,   533,   534,   535,
    536,   3667,  537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   1200,  1201,  549,
    550,   551,   552,   553,   554,   555,   556,   1202,  558,   559,   560,   561,   562,   563,   564,   565,
    566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,
    581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   873,   0,     653,   0,
    0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,
    233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   830,
    240,   241,   242,   243,   244,   831,   245,   246,   0,     247,   248,   249,   250,   251,   0,     0,
    252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     832,   0,     262,   263,
    264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,
    276,   0,     0,     0,     835,   0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,
    285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,
    296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,
    308,   309,   310,   311,   312,   313,   314,   1674,  315,   0,     316,   317,   318,   0,     0,     319,
    0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,
    329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    839,   342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   840,   841,   351,   842,
    352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   843,   361,   844,   0,     362,
    363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   379,   380,   381,   845,   382,   383,   384,   385,   0,     386,   387,   846,   388,   0,
    389,   390,   391,   392,   393,   394,   0,     395,   1675,  0,     396,   397,   398,   0,     0,     399,
    400,   847,   401,   848,   402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   849,   441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,
    454,   455,   456,   0,     457,   458,   459,   460,   850,   461,   462,   463,   0,     464,   465,   466,
    467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,
    481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   1676,  489,   490,   491,   492,
    0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,
    504,   505,   506,   0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,
    514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,
    544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
    560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
    576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
    591,   592,   873,   0,     653,   0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,
    227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,
    236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   244,   831,   245,   246,   0,     247,
    248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,
    261,   0,     832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,
    272,   273,   274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,     277,   278,
    279,   280,   281,   282,   283,   284,   285,   2143,  286,   0,     287,   288,   289,   290,   291,   0,
    292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,
    316,   317,   318,   0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,
    325,   0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,
    360,   843,   361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   845,   382,   383,   384,   385,
    0,     386,   387,   846,   388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,
    396,   397,   398,   0,     0,     399,   400,   847,   401,   848,   402,   403,   404,   405,   406,   0,
    407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   850,   461,
    462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,
    476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,
    488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,
    0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   851,   508,   509,   510,   511,
    0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,
    538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
    554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
    570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,
    585,   586,   587,   588,   589,   590,   591,   592,   873,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,
    0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,
    244,   831,   245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,
    256,   0,     257,   258,   259,   260,   261,   0,     832,   0,     262,   263,   264,   265,   266,   833,
    267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,
    835,   0,     0,     2560,  277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,
    287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,
    312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   836,   0,
    837,   321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   838,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   840,   841,   351,   842,   352,   353,   354,   355,
    356,   0,     357,   358,   0,     359,   360,   843,   361,   844,   0,     362,   363,   364,   0,     0,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
    381,   845,   382,   383,   384,   385,   0,     386,   387,   846,   388,   0,     389,   390,   391,   392,
    393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   847,   401,   848,
    402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,
    457,   458,   459,   460,   850,   461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,
    471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,
    484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,
    0,     495,   496,   497,   498,   499,   2561,  0,     500,   501,   502,   503,   504,   505,   506,   0,
    507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,
    518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
    548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
    564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
    580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   873,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,
    231,   0,     233,   234,   235,   3,     4,     0,     0,     0,     0,     0,     236,   237,   0,     238,
    239,   830,   240,   241,   242,   243,   244,   831,   245,   246,   0,     247,   248,   249,   250,   251,
    0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     832,   0,
    262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,
    834,   275,   276,   0,     0,     0,     835,   0,     0,     0,     277,   278,   279,   280,   281,   282,
    283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,
    0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,
    0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   325,   0,     326,   0,
    327,   328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   839,   342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   840,   841,
    351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   843,   361,   844,
    0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   379,   380,   381,   845,   382,   383,   384,   385,   0,     386,   387,   846,
    388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,
    0,     399,   400,   847,   401,   848,   402,   403,   404,   405,   406,   0,     407,   408,   0,     409,
    410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   849,   441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,
    452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   850,   461,   462,   463,   0,     464,
    465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,
    479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,
    491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,
    502,   503,   504,   505,   506,   0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,
    0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,
    542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
    558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
    574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,
    589,   590,   591,   592,   873,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,
    225,   226,   227,   228,   229,   230,   231,   900,   233,   234,   235,   0,     0,     0,     0,     0,
    0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   244,   831,   245,   246,
    0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,
    259,   260,   261,   0,     832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,
    270,   271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,
    277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,
    315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,
    0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   360,   843,   361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   845,   382,   383,
    384,   385,   0,     386,   387,   846,   388,   0,     389,   390,   391,   392,   393,   394,   0,     395,
    0,     0,     396,   397,   398,   0,     0,     399,   400,   847,   401,   848,   402,   403,   404,   405,
    406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,
    850,   461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,
    486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   851,   508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
    552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,
    583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   873,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   916,   233,   234,
    235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   830,   240,   241,
    242,   243,   244,   831,   245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,
    254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     832,   0,     262,   263,   264,   265,
    266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   0,
    0,     0,     835,   0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,
    286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,
    310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,
    836,   0,     837,   321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,
    331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   840,   841,   351,   842,   352,   353,
    354,   355,   356,   0,     357,   358,   0,     359,   360,   843,   361,   844,   0,     362,   363,   364,
    0,     0,     365,   366,   917,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    379,   380,   381,   845,   382,   383,   384,   385,   0,     386,   387,   846,   388,   0,     389,   390,
    391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   847,
    401,   848,   402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,
    456,   0,     457,   458,   459,   460,   850,   461,   462,   463,   0,     464,   465,   466,   467,   468,
    469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,
    0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,
    494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,
    506,   0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,
    516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,
    546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,
    562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
    578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
    873,   0,     653,   0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,
    229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,
    0,     238,   239,   830,   240,   241,   242,   243,   244,   831,   245,   246,   0,     247,   248,   249,
    250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,
    832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,
    274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,     277,   278,   279,   280,
    281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,
    294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,
    318,   0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   325,   0,
    326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   843,
    361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   379,   380,   381,   845,   382,   383,   384,   385,   0,     386,
    387,   846,   388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,
    398,   0,     0,     399,   400,   847,   401,   848,   402,   403,   404,   405,   406,   0,     407,   408,
    0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   849,   441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   850,   461,   462,   463,
    0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,
    477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,
    489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,
    500,   501,   502,   503,   504,   505,   506,   0,     507,   851,   508,   509,   510,   511,   0,     0,
    512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,
    540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
    556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
    572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,
    587,   588,   589,   590,   591,   592,   873,   0,     653,   0,     0,     0,     0,     0,     0,     0,
    0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,
    0,     0,     0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   244,   831,
    245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,
    257,   258,   259,   260,   261,   0,     832,   0,     262,   263,   264,   265,   266,   833,   267,   268,
    0,     269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,     835,   0,
    0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,
    289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,
    314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   836,   0,     837,   321,
    322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   1664,  838,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,
    357,   358,   0,     359,   360,   843,   361,   844,   0,     362,   363,   364,   0,     0,     365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   845,
    382,   383,   384,   385,   0,     386,   387,   846,   388,   0,     389,   390,   391,   392,   393,   394,
    0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   847,   401,   848,   402,   403,
    404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,
    459,   460,   850,   461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,
    473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,
    0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,
    496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   851,
    508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
    550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
    566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,
    581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   873,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,
    233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   830,
    240,   241,   242,   243,   244,   831,   245,   246,   0,     247,   248,   249,   250,   251,   0,     0,
    252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     832,   0,     262,   263,
    264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,
    276,   0,     0,     0,     835,   0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,
    285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,
    296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,
    308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,
    0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   325,   3508,  326,   0,     327,   328,
    329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    839,   342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   840,   841,   351,   842,
    352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   843,   361,   844,   0,     362,
    363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   379,   380,   381,   845,   382,   383,   384,   385,   0,     386,   387,   846,   388,   0,
    389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,
    400,   847,   401,   848,   402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   849,   441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,
    454,   455,   456,   0,     457,   458,   459,   460,   850,   461,   462,   463,   0,     464,   465,   466,
    467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,
    481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,
    0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,
    504,   505,   506,   0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,
    514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,
    544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
    560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
    576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
    591,   592,   829,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,
    227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,
    236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   244,   831,   245,   246,   0,     247,
    248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,
    261,   0,     832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,
    272,   273,   274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,     277,   278,
    279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,
    292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,
    316,   317,   318,   0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,
    325,   0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,
    360,   843,   361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   845,   382,   383,   384,   385,
    0,     386,   387,   846,   388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,
    396,   397,   398,   0,     0,     399,   400,   847,   401,   848,   402,   403,   404,   405,   406,   0,
    407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   850,   461,
    462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,
    476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,
    488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,
    0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   851,   508,   509,   510,   511,
    0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,
    538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
    554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
    570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,
    585,   586,   587,   588,   589,   590,   591,   592,   873,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,
    0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,
    244,   831,   245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,
    256,   0,     257,   258,   259,   260,   261,   0,     832,   0,     262,   263,   264,   265,   266,   833,
    267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,
    835,   0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,
    287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,
    312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   836,   0,
    837,   321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   838,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   840,   841,   351,   842,   352,   353,   354,   355,
    356,   0,     357,   358,   0,     359,   360,   843,   361,   844,   0,     362,   363,   364,   0,     0,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
    381,   845,   382,   383,   384,   385,   0,     386,   387,   846,   388,   0,     389,   390,   391,   392,
    393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   847,   401,   848,
    402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,
    457,   458,   459,   460,   850,   461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,
    471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,
    484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,
    0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,
    507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,
    518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
    548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
    564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
    580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   873,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,
    231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,
    239,   830,   240,   241,   242,   243,   244,   831,   245,   246,   0,     247,   248,   249,   250,   251,
    0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     832,   0,
    262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,
    834,   275,   276,   0,     0,     0,     835,   0,     0,     0,     277,   278,   279,   280,   281,   282,
    283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,
    0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,
    0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   325,   0,     326,   0,
    327,   328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   839,   342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   840,   841,
    351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   843,   361,   844,
    0,     362,   363,   364,   0,     0,     365,   366,   998,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   379,   380,   381,   845,   382,   383,   384,   385,   0,     386,   387,   846,
    388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,
    0,     399,   400,   847,   401,   848,   402,   403,   404,   405,   406,   0,     407,   408,   0,     409,
    410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   849,   441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,
    452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   850,   461,   462,   463,   0,     464,
    465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,
    479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,
    491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,
    502,   503,   504,   505,   506,   0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,
    0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,
    542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
    558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
    574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,
    589,   590,   591,   592,   829,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,
    225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,
    0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   244,   831,   245,   246,
    0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,
    259,   260,   261,   0,     832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,
    270,   271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,
    277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,
    315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,
    0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   1022,  838,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   360,   843,   361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   845,   382,   383,
    384,   385,   0,     386,   387,   846,   388,   0,     389,   390,   391,   392,   393,   394,   0,     395,
    0,     0,     396,   397,   398,   0,     0,     399,   400,   847,   401,   848,   402,   403,   404,   405,
    406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,
    850,   461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,
    486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   851,   508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
    552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,
    583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   829,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,
    235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   830,   240,   241,
    242,   243,   244,   831,   245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,
    254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     832,   0,     262,   263,   264,   265,
    266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   0,
    0,     0,     835,   0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,
    286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,
    310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,
    836,   0,     837,   321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,
    1034,  838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   840,   841,   351,   842,   352,   353,
    354,   355,   356,   0,     357,   358,   0,     359,   360,   843,   361,   844,   0,     362,   363,   364,
    0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    379,   380,   381,   845,   382,   383,   384,   385,   0,     386,   387,   846,   388,   0,     389,   390,
    391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   847,
    401,   848,   402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,
    456,   0,     457,   458,   459,   460,   850,   461,   462,   463,   0,     464,   465,   466,   467,   468,
    469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,
    0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,
    494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,
    506,   0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,
    516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,
    546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,
    562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
    578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
    873,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,
    229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,
    0,     238,   239,   830,   240,   241,   242,   243,   244,   831,   245,   246,   0,     247,   248,   249,
    250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,
    832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,
    274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,     277,   278,   279,   280,
    281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,
    294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,
    318,   0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   325,   0,
    326,   0,     327,   328,   329,   330,   1036,  838,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   839,   342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   843,
    361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   379,   380,   381,   845,   382,   383,   384,   385,   0,     386,
    387,   846,   388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,
    398,   0,     0,     399,   400,   847,   401,   848,   402,   403,   404,   405,   406,   0,     407,   408,
    0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   849,   441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   850,   461,   462,   463,
    0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,
    477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,
    489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,
    500,   501,   502,   503,   504,   505,   506,   0,     507,   851,   508,   509,   510,   511,   0,     0,
    512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,
    540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
    556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
    572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,
    587,   588,   589,   590,   591,   592,   873,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,
    0,     0,     0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   243,   244,   831,
    245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,
    257,   258,   259,   260,   261,   0,     832,   0,     262,   263,   264,   265,   266,   833,   267,   268,
    0,     269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,     835,   0,
    0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,
    289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,
    314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   836,   0,     837,   321,
    322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   1046,  838,   332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,
    357,   358,   0,     359,   360,   843,   361,   844,   0,     362,   363,   364,   0,     0,     365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   845,
    382,   383,   384,   385,   0,     386,   387,   846,   388,   0,     389,   390,   391,   392,   393,   394,
    0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   847,   401,   848,   402,   403,
    404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,
    459,   460,   850,   461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,
    473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,
    0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,
    496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   851,
    508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
    550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
    566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,
    581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   873,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,
    233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   830,
    240,   241,   242,   243,   244,   831,   245,   246,   0,     247,   248,   249,   250,   251,   0,     0,
    252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     832,   0,     262,   263,
    264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,
    276,   0,     0,     0,     835,   0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,
    285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,
    296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,
    308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,
    0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,
    329,   330,   1057,  838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    839,   342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   840,   841,   351,   842,
    352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   843,   361,   844,   0,     362,
    363,   364,   0,     0,     365,   366,   1058,  368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   379,   380,   381,   845,   382,   383,   384,   385,   0,     386,   387,   846,   388,   0,
    389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,
    400,   847,   401,   848,   402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   849,   441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,
    454,   455,   456,   0,     457,   458,   459,   460,   850,   461,   462,   463,   0,     464,   465,   466,
    467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,
    481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,
    0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,
    504,   505,   506,   0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,
    514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,
    544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
    560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
    576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
    591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,
    227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,
    236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,
    248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   2359,  257,   258,   259,   260,
    261,   0,     0,     2439,  262,   263,   264,   265,   266,   0,     267,   268,   2360,  269,   270,   271,
    272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,
    279,   280,   281,   282,   283,   284,   285,   2440,  286,   0,     287,   288,   289,   290,   291,   0,
    292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   0,     2361,  307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,
    316,   317,   318,   0,     0,     319,   2362,  320,   0,     0,     0,     321,   322,   323,   0,     324,
    325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,
    360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,
    0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,
    396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   2441,
    407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   2363,  415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,
    462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,
    476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,
    488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     2364,  495,   496,   497,   498,   499,
    0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,
    0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,
    538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
    554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
    570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,
    585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,
    0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,
    244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,
    256,   2359,  257,   258,   259,   260,   261,   0,     0,     3397,  262,   263,   264,   265,   266,   0,
    267,   268,   2360,  269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,
    0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   3398,  286,   0,
    287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     2361,  307,   308,   309,   310,   311,
    312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   2362,  320,   0,     0,
    0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     357,   358,   0,     359,   360,   0,     361,   3399,  0,     362,   363,   364,   0,     0,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
    381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,
    393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,
    402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,
    2363,  415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,
    457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,
    471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,
    484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,
    2364,  495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,
    507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,
    518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
    548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
    564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
    580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,
    231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,
    239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,
    0,     0,     252,   253,   254,   255,   256,   2359,  257,   258,   259,   260,   261,   0,     0,     0,
    262,   263,   264,   265,   266,   0,     267,   268,   2360,  269,   270,   271,   272,   273,   274,   0,
    0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,
    283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,
    0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    2361,  307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,
    0,     319,   2362,  320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,
    327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,
    0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,
    388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,
    0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,
    410,   0,     411,   412,   413,   414,   2363,  415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,
    452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,
    465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,
    479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,
    491,   492,   0,     493,   494,   0,     2364,  495,   496,   497,   498,   499,   0,     0,     500,   501,
    502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,
    0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,
    542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
    558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
    574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,
    589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,
    225,   226,   227,   228,   761,   230,   231,   727,   233,   234,   235,   0,     0,     0,     0,     0,
    0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,
    0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,
    259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,
    270,   271,   272,   273,   274,   728,   0,     275,   276,   0,     0,     0,     0,     0,     0,     0,
    277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,
    315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,
    762,   324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,
    384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,
    0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,
    406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   729,   428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   730,   452,   453,   454,   455,   456,   0,     457,   458,   459,   460,
    0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,
    486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
    552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,
    583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   727,   233,   234,
    235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,
    242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,
    254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,
    266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   728,   0,     275,   276,   0,
    0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,
    286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,
    310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,
    0,     0,     0,     321,   322,   323,   3065,  324,   325,   0,     326,   0,     327,   328,   329,   330,
    331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,
    0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,
    391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,
    401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    729,   428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   730,   452,   453,   454,   455,
    456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,
    469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,
    0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,
    494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,
    506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,
    516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,
    546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,
    562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
    578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
    223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,
    229,   230,   231,   727,   233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,
    0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,
    250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,
    0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,
    274,   728,   0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,
    281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,
    294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,
    318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,
    326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,
    361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,
    387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,
    398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,
    0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   729,   428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   730,   452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,
    0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,
    477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,
    489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,
    500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,
    512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,
    540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
    556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
    572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,
    587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     224,   225,   226,   227,   228,   229,   230,   231,   1701,  233,   234,   235,   0,     0,     0,
    0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,
    245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,
    257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,
    0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,
    0,     0,     277,   278,   279,   1702,  281,   282,   283,   284,   285,   0,     286,   0,     287,   288,
    289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   1703,  297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,
    314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   1704,  320,   0,     0,     0,     1705,
    322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   1706,  1707,  356,   0,
    357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,
    382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,
    0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,
    404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,
    445,   446,   1708,  448,   449,   450,   451,   0,     1709,  453,   454,   455,   456,   0,     457,   458,
    459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,
    473,   474,   0,     475,   476,   1710,  477,   1711,  479,   480,   481,   482,   0,     483,   484,   0,
    0,     485,   486,   487,   488,   0,     489,   490,   1712,  492,   0,     493,   494,   0,     0,     495,
    496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,
    508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
    550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
    566,   567,   568,   569,   570,   1713,  572,   573,   574,   575,   576,   577,   578,   579,   580,   0,
    581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,
    233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,
    240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,
    252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,
    264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   728,   0,     275,
    276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,
    285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,
    296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,
    308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,
    0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,
    329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,
    352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,
    363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,
    389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,
    400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   729,   428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   730,   452,   453,
    454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,
    467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,
    481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,
    0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,
    504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,
    514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,
    544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
    560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
    576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
    591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,
    227,   228,   229,   230,   231,   909,   233,   234,   235,   0,     0,     0,     0,     0,     0,     0,
    236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,
    248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,
    261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,
    272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,
    279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,
    292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,
    316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,
    325,   0,     326,   0,     327,   328,   329,   330,   910,   0,     332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,
    360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,
    0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     792,
    396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,
    407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,
    462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,
    476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,
    488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,
    0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,
    0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,
    538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
    554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
    570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,
    585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   3,
    4,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,
    244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,
    256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,
    267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,
    0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,
    287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,
    312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,
    0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
    381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,
    393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,
    402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,
    457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,
    471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,
    484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,
    0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,
    507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,
    518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
    548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
    564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
    580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,
    231,   3170,  233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,
    239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,
    0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,
    262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,
    0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,
    283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,
    0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,
    0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,
    327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,
    0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,
    388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,
    0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,
    410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,
    452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,
    465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,
    479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,
    491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   3171,  0,     500,   501,
    502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,
    0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,
    542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
    558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
    574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,
    589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,
    225,   226,   227,   228,   229,   230,   231,   3185,  233,   234,   235,   0,     0,     0,     0,     0,
    0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,
    0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,
    259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,
    270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,
    277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,
    315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,
    0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,
    384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,
    0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,
    406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,
    0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,
    486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   3186,  0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
    552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,
    583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
    235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,
    242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,
    254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,
    266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,
    0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,
    286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,
    310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,
    0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,
    331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,
    0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,
    391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,
    401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,
    456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,
    469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,
    0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,
    494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,
    506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,
    516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,
    546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,
    562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
    578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
    223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,
    229,   230,   231,   644,   233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,
    0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,
    250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,
    0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,
    274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,
    281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,
    294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,
    318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,
    326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,
    361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,
    387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,
    398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,
    0,     409,   410,   0,     411,   412,   645,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,
    0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,
    477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,
    489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,
    500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,
    512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,
    540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
    556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
    572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,
    587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     224,   225,   226,   227,   228,   229,   230,   231,   753,   233,   234,   235,   0,     0,     0,
    0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,
    245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,
    257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,
    0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,
    0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,
    289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,
    314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,
    322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,
    357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,
    382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,
    0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,
    404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   754,   0,     457,   458,
    459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,
    473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     755,   484,   0,
    0,     756,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,
    496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,
    508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
    550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
    566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,
    581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   786,
    233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,
    240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,
    252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,
    264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,
    276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,
    285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,
    296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,
    308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,
    0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,
    329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,
    352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,
    363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,
    389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,
    400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,
    454,   455,   787,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,
    467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,
    481,   482,   0,     788,   484,   0,     0,     789,   486,   487,   488,   0,     489,   490,   491,   492,
    0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,
    504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,
    514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,
    544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
    560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
    576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
    591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,
    227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,
    236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,
    248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,
    261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,
    272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,
    279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,
    292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,
    316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,
    325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,
    360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,
    0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     792,
    396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,
    407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,
    462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,
    476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,
    488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,
    0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,
    0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,
    538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
    554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
    570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,
    585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   879,   233,   234,   235,   0,
    0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,
    244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,
    256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,
    267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,
    0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,
    287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,
    312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,
    0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   880,   0,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
    381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,
    393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,
    402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,
    457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,
    471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,
    484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,
    0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,
    507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,
    518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
    548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
    564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
    580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,
    231,   1015,  233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,
    239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,
    0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,
    262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,
    0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,
    283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,
    0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,
    0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,
    327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,
    0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,
    388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,
    0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,
    410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,
    452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,
    465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,
    479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,
    491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,
    502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,
    0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,
    542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
    558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
    574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,
    589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,
    225,   226,   227,   228,   229,   230,   231,   1238,  233,   234,   235,   0,     0,     0,     0,     0,
    0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,
    0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,
    259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,
    270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,
    277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,
    315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,
    0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,
    384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,
    0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,
    406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,
    0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,
    486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
    552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,
    583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,
    235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   1249,  240,   241,
    242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     772,   253,
    254,   255,   1250,  0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,
    266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,
    0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,
    286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,
    310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,
    0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,
    331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,
    0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    379,   775,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,
    391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,
    401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    776,   442,   443,   444,   445,   446,   777,   448,   449,   450,   451,   0,     452,   453,   454,   455,
    1242,  0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,
    469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,
    0,     779,   484,   0,     0,     780,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,
    494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,
    506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,
    516,   517,   781,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,
    546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,
    562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
    578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
    223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,
    229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,
    0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,
    250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,
    0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,
    274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,
    281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,
    294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,
    318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,
    326,   0,     327,   328,   329,   330,   1355,  0,     332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,
    361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,
    387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     792,   396,   397,
    398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,
    0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,
    0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,
    477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,
    489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,
    500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,
    512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,
    540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
    556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
    572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,
    587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     224,   225,   226,   227,   228,   229,   230,   231,   1417,  233,   234,   235,   0,     0,     0,
    0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,
    245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,
    257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,
    0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,
    0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,
    289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,
    314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,
    322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   1418,  0,     332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,
    357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,
    382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,
    0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,
    404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,
    459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,
    473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,
    0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,
    496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,
    508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
    550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
    566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,
    581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   753,
    233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,
    240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,
    252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,
    264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,
    276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,
    285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,
    296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,
    308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,
    0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,
    329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,
    352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,
    363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,
    389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,
    400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,
    454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,
    467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,
    481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,
    0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,
    504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,
    514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,
    544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
    560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
    576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
    591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,
    227,   228,   229,   230,   231,   2279,  233,   234,   235,   0,     0,     0,     0,     0,     0,     0,
    236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,
    248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,
    261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,
    272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,
    279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,
    292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,
    316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,
    325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,
    360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,
    0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,
    396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,
    407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,
    462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,
    476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,
    488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,
    0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,
    0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,
    538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
    554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
    570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,
    585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,
    0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,
    244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,
    256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,
    267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,
    0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,
    287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,
    312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,
    0,     321,   322,   2948,  0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   2949,  0,     0,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
    381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,
    393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,
    402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,
    457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,
    471,   472,   473,   474,   0,     475,   476,   2950,  477,   478,   2951,  480,   2952,  482,   0,     483,
    484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,
    0,     495,   496,   2953,  498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,
    507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,
    518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
    548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
    564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
    580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,
    653,   0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,
    231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,
    239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,
    0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,
    262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,
    0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,
    283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,
    0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,
    0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,
    327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,
    0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,
    388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,
    0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,
    410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,
    452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,
    465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,
    479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,
    491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,
    502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,
    0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,
    542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
    558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
    574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,
    589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,
    225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,
    4225,  0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,
    0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,
    259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,
    270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,
    277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,
    315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,
    0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,
    384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,
    0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,
    406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,
    0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,
    486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
    552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,
    583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,
    235,   0,     0,     0,     0,     0,     4239,  0,     236,   237,   0,     238,   239,   0,     240,   241,
    242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,
    254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,
    266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,
    0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,
    286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,
    310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,
    0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,
    331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,
    0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,
    391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,
    401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,
    456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,
    469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,
    0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,
    494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,
    506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,
    516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,
    546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,
    562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
    578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
    223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,
    229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,
    0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,
    250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,
    0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,
    274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,
    281,   282,   283,   284,   285,   4510,  286,   0,     287,   288,   289,   290,   291,   0,     292,   293,
    294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,
    318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,
    326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,
    361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,
    387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,
    398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,
    0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,
    0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,
    477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,
    489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,
    500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,
    512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,
    540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
    556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
    572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,
    587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,
    0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,
    245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,
    257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,
    0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,
    0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   4512,  286,   0,     287,   288,
    289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,
    314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,
    322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,
    357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,
    382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,
    0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,
    404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,
    459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,
    473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,
    0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,
    496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,
    508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
    550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
    566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,
    581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,
    233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,
    240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,
    252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,
    264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,
    276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,
    285,   4514,  286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,
    296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,
    308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,
    0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,
    329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,
    352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,
    363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,
    389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,
    400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,
    454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,
    467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,
    481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,
    0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,
    504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,
    514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,
    544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
    560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
    576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
    591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,
    227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,
    236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,
    248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,
    261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,
    272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,
    279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,
    292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,
    316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,
    325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,
    360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,
    0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,
    396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,
    407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,
    462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,
    476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,
    488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,
    0,     4767,  500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,
    0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,
    538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
    554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
    570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,
    585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,
    0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,
    244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,
    256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,
    267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,
    0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,
    287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,
    312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,
    0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     357,   358,   0,     359,   360,   0,     361,   3399,  0,     362,   363,   364,   0,     0,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
    381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,
    393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,
    402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,
    457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,
    471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,
    484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,
    0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,
    507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,
    518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
    548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
    564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
    580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,
    231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,
    239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,
    0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,
    262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,
    0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,
    283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,
    0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,
    0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,
    327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,
    0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,
    388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,
    0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,
    410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,
    452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,
    465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,
    479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,
    491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,
    502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,
    0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,
    542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
    558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
    574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,
    589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,
    225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,
    0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,
    0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,
    259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,
    270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,
    277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,
    315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,
    0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,
    384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,
    0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,
    406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,
    0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     742,
    486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
    552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,
    583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,
    235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,
    242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,
    254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,
    266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,
    0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,
    286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,
    310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,
    0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,
    331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,
    0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,
    391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,
    401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    441,   442,   443,   444,   445,   751,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,
    456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,
    469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,
    0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,
    494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,
    506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,
    516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,
    546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,
    562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
    578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
    223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,
    229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,
    0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,
    250,   251,   0,     0,     772,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,
    0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     773,   270,   271,   272,   273,
    274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,
    281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,
    294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,
    318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,
    326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,
    361,   0,     0,     362,   363,   774,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   379,   775,   381,   0,     382,   383,   384,   385,   0,     386,
    387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,
    398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,
    0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     776,   442,   443,   444,   445,   446,   777,   448,   449,   450,
    451,   0,     452,   453,   454,   455,   778,   0,     457,   458,   459,   460,   0,     461,   462,   463,
    0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,
    477,   478,   479,   480,   481,   482,   0,     779,   484,   0,     0,     780,   486,   487,   488,   0,
    489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,
    500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,
    512,   0,     0,     513,   514,   515,   516,   517,   781,   519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,
    540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
    556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
    572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,
    587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,
    0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,
    245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,
    257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,
    0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,
    0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,
    289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,
    314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,
    322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,
    357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,
    382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,
    0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,
    404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   804,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,
    459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,
    473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,
    0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,
    496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,
    508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
    550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
    566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,
    581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,
    233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,
    240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,
    252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,
    264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,
    276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,
    285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,
    296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,
    308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,
    0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,
    329,   330,   904,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,
    352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,
    363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,
    389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,
    400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,
    454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,
    467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,
    481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,
    0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,
    504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,
    514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,
    544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
    560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
    576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
    591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,
    227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,
    236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,
    248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,
    261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,
    272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,
    279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,
    292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,
    316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,
    325,   0,     326,   0,     327,   328,   329,   330,   919,   0,     332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,
    360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,
    0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,
    396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,
    407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,
    462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,
    476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,
    488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,
    0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,
    0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,
    538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
    554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
    570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,
    585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,
    0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,
    244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,
    256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,
    267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,
    0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,
    287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,
    312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,
    0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   976,   0,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
    381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,
    393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,
    402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,
    457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,
    471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,
    484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,
    0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,
    507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,
    518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
    548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
    564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
    580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,
    231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,
    239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,
    0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,
    262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,
    0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,
    283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,
    0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,
    0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,
    327,   328,   329,   330,   990,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,
    0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,
    388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,
    0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,
    410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,
    452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,
    465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,
    479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,
    491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,
    502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,
    0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,
    542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
    558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
    574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,
    589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,
    225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,
    0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,
    0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,
    259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,
    270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,
    277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,
    315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,
    0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   1027,  0,     332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,
    384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,
    0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,
    406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,
    0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,
    486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
    552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,
    583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,
    235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,
    242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,
    254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,
    266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,
    0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,
    286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,
    310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,
    0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,
    1048,  0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,
    0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,
    391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,
    401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,
    456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,
    469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,
    0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,
    494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,
    506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,
    516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,
    546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,
    562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
    578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
    223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,
    229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,
    0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,
    250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,
    0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,
    274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,
    281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,
    294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,
    318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,
    326,   0,     327,   328,   329,   330,   1050,  0,     332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,
    361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,
    387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,
    398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,
    0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,
    0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,
    477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,
    489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,
    500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,
    512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,
    540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
    556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
    572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,
    587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,
    0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,
    245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,
    257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,
    0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,
    0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,
    289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,
    314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,
    322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   1052,  0,     332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,
    357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,
    382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,
    0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,
    404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,
    459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,
    473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,
    0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,
    496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,
    508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
    550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
    566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,
    581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,
    233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,
    240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,
    252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,
    264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,
    276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,
    285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,
    296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,
    308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,
    0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,
    329,   330,   1055,  0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,
    352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,
    363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,
    389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,
    400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,
    454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,
    467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,
    481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,
    0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,
    504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,
    514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,
    544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
    560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
    576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
    591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,
    227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,
    236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,
    248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,
    261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,
    272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,
    279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,
    292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,
    316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,
    325,   0,     326,   0,     327,   328,   329,   330,   1063,  0,     332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,
    360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,
    0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,
    396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,
    407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,
    462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,
    476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,
    488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,
    0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,
    0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,
    538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
    554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
    570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,
    585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,
    0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,
    244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     772,   253,   254,   255,
    256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,
    267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,
    0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,
    287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,
    312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,
    0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   775,
    381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,
    393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,
    402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     776,   442,
    443,   444,   445,   446,   777,   448,   449,   450,   451,   0,     452,   453,   454,   455,   1242,  0,
    457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,
    471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     779,
    484,   0,     0,     780,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,
    0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,
    507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,
    781,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
    548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
    564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
    580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,
    231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,
    239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,
    0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,
    262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,
    0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,
    283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,
    0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,
    0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,
    327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,
    0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,
    388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,
    0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,
    410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,
    452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,
    465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,
    479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,
    491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,
    502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,
    0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,
    542,   543,   544,   545,   1293,  547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
    558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
    574,   575,   576,   577,   578,   579,   1294,  0,     581,   582,   583,   584,   585,   586,   587,   588,
    589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,
    225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,
    0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,
    0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,
    259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,
    270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,
    277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,
    315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,
    0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   1571,  0,     332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,
    384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,
    0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,
    406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,
    447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,
    0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,
    486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
    552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,
    583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,
    235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,
    242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,
    254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,
    266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,
    0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,
    286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,
    310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,
    0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,
    1603,  0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,
    0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,
    391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,
    401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,
    456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,
    469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,
    0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,
    494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,
    506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,
    516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,
    546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,
    562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
    578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
    223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,
    229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,
    0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,
    250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,
    0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,
    274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,
    281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,
    294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,
    318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,
    326,   0,     327,   328,   329,   330,   1638,  0,     332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,
    361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,
    387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,
    398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,
    0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,
    0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,
    477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,
    489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,
    500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,
    512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,
    540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
    556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
    572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,
    587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,
    0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,
    245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,
    257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,
    0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,
    0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,
    289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,
    314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,
    322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   1640,  0,     332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,
    357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,
    382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,
    0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,
    404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,
    445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,
    459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,
    473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,
    0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,
    496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,
    508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
    550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
    566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,
    581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,
    233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,
    240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,
    252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,
    264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,
    276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,
    285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,
    296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,
    308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,
    0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,
    329,   330,   1642,  0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,
    352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,
    363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,
    389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,
    400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,
    454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,
    467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,
    481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,
    0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,
    504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,
    514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,
    544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
    560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
    576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
    591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,
    227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,
    236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,
    248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,
    261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,
    272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,
    279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,
    292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,
    316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,
    325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,
    360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,
    0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,
    396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,
    407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   1737,  447,   448,
    449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,
    462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,
    476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,
    488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,
    0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,
    0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,
    538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
    554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
    570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,
    585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,
    0,     0,     0,     0,     2319,  0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,
    244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,
    256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,
    267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,
    0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,
    287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,
    312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,
    0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
    381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,
    393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,
    402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,
    0,     458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,
    471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,
    484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,
    0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,
    507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,
    518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
    548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
    564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
    580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,
    231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,
    239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,
    0,     0,     772,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,
    262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,
    0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,
    283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,
    0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,
    0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,
    327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,
    0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   379,   775,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,
    388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,
    0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,
    410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     776,   442,   443,   444,   445,   446,   777,   448,   449,   450,   451,   0,
    452,   453,   454,   455,   1242,  0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,
    465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   2350,
    479,   480,   481,   482,   0,     779,   484,   0,     0,     780,   486,   487,   488,   0,     489,   490,
    491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,
    502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,
    0,     513,   514,   515,   516,   517,   781,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,
    542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
    558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
    574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,
    589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,
    225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,
    0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,
    0,     247,   248,   249,   250,   251,   0,     0,     772,   253,   254,   255,   256,   0,     257,   258,
    259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,
    270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,
    277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,
    315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,
    0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,
    0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   775,   381,   0,     382,   383,
    384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,
    0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,
    406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     776,   442,   443,   444,   445,   446,
    2421,  448,   449,   450,   451,   0,     452,   453,   454,   455,   2422,  0,     457,   458,   459,   460,
    0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     779,   484,   0,     0,     2423,
    486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   781,   519,   520,   521,
    522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
    552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,
    583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,
    235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,
    242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,
    254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,
    266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,
    0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,
    286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,
    298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,
    310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,
    0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,
    2709,  0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,
    343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,
    354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,
    0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
    379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,
    391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,
    401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,
    413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
    0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,
    441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,
    456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,
    469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,
    0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,
    494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,
    506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,
    516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,
    546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,
    562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
    578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
    223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,
    229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,
    0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,
    250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,
    0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,
    274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,
    281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,
    294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,
    318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,
    326,   0,     327,   328,   329,   330,   3076,  0,     332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,
    0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,
    361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,
    387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,
    398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,
    0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,
    0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,
    477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,
    489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,
    500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,
    512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
    526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,
    540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
    556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
    572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,
    587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,
    0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,
    245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     772,   253,   254,   255,   256,   0,
    257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,
    0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,
    0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,
    289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,
    301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,
    314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,
    322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   331,   0,     332,   333,
    334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,
    347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,
    357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,
    367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   775,   381,   0,
    382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,
    0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,
    404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,
    416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,
    431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     776,   442,   443,   444,
    445,   446,   777,   448,   449,   450,   451,   0,     452,   453,   454,   455,   2422,  0,     457,   458,
    459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,
    473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     779,   484,   0,
    0,     2423,  486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,
    496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,
    508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   781,   519,
    520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
    536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
    550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
    566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,
    581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,
    233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,
    240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,
    252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,
    264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,
    276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,
    285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,
    296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,
    308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,
    0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,
    329,   330,   3173,  0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,
    352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,
    363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,
    389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,
    400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,
    411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   0,     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,
    454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,
    467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,
    481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,
    0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,
    504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,
    514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,
    544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
    560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
    576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
    591,   592,   223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,
    227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,
    236,   237,   0,     238,   239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,
    248,   249,   250,   251,   0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,
    261,   0,     0,     0,     262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,
    272,   273,   274,   0,     0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,
    279,   280,   281,   282,   283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,
    292,   293,   294,   0,     0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,
    304,   305,   306,   0,     0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,
    316,   317,   318,   0,     0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,
    325,   0,     326,   0,     327,   328,   329,   330,   3178,  0,     332,   333,   334,   0,     335,   336,
    337,   338,   339,   340,   0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,
    0,     350,   0,     0,     351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,
    360,   0,     361,   0,     0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,
    371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,
    0,     386,   387,   0,     388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,
    396,   397,   398,   0,     0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,
    407,   408,   0,     409,   410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,
    420,   421,   422,   423,   424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,
    435,   436,   437,   438,   0,     439,   440,   0,     441,   442,   443,   444,   445,   446,   447,   448,
    449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,
    462,   463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,
    476,   0,     477,   478,   479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,
    488,   0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,
    0,     0,     500,   501,   502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,
    0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
    524,   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,
    538,   539,   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
    554,   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
    570,   571,   572,   573,   574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,
    585,   586,   587,   588,   589,   590,   591,   592,   223,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,
    0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   0,     240,   241,   242,   243,
    244,   0,     245,   246,   0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   254,   255,
    256,   0,     257,   258,   259,   260,   261,   0,     0,     0,     262,   263,   264,   265,   266,   0,
    267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     0,     275,   276,   0,     0,     0,
    0,     0,     0,     0,     277,   278,   279,   280,   281,   282,   283,   284,   285,   0,     286,   0,
    287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   310,   311,
    312,   313,   314,   0,     315,   0,     316,   317,   318,   0,     0,     319,   0,     320,   0,     0,
    0,     321,   322,   323,   0,     324,   325,   0,     326,   0,     327,   328,   329,   330,   3302,  0,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   0,     342,   343,   344,
    345,   346,   347,   348,   0,     349,   0,     350,   0,     0,     351,   0,     352,   353,   354,   355,
    356,   0,     357,   358,   0,     359,   360,   0,     361,   0,     0,     362,   363,   364,   0,     0,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
    381,   0,     382,   383,   384,   385,   0,     386,   387,   0,     388,   0,     389,   390,   391,   392,
    393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   400,   0,     401,   0,
    402,   403,   404,   405,   406,   0,     407,   408,   0,     409,   410,   0,     411,   412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   0,     441,   442,
    443,   444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,
    457,   458,   459,   460,   0,     461,   462,   463,   0,     464,   465,   466,   467,   468,   469,   470,
    471,   472,   473,   474,   0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     483,
    484,   0,     0,     485,   486,   487,   488,   0,     489,   490,   491,   492,   0,     493,   494,   0,
    0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   505,   506,   0,
    507,   0,     508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,
    518,   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
    534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
    548,   549,   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
    564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
    580,   0,     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,   223,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   230,
    231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,
    239,   0,     240,   241,   242,   243,   244,   0,     245,   246,   0,     247,   248,   249,   250,   251,
    0,     0,     252,   253,   254,   255,   256,   0,     257,   258,   259,   260,   261,   0,     0,     0,
    262,   263,   264,   265,   266,   0,     267,   268,   0,     269,   270,   271,   272,   273,   274,   0,
    0,     275,   276,   0,     0,     0,     0,     0,     0,     0,     277,   278,   279,   280,   281,   282,
    283,   284,   285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,
    0,     295,   296,   297,   298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,
    0,     307,   308,   309,   310,   311,   312,   313,   314,   0,     315,   0,     316,   317,   318,   0,
    0,     319,   0,     320,   0,     0,     0,     321,   322,   323,   0,     324,   325,   0,     326,   0,
    327,   328,   329,   330,   331,   0,     332,   333,   334,   0,     335,   336,   337,   338,   339,   340,
    0,     341,   0,     342,   343,   344,   345,   346,   347,   348,   0,     349,   0,     350,   0,     0,
    351,   0,     352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   360,   0,     361,   0,
    0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
    375,   376,   377,   378,   379,   380,   381,   0,     382,   383,   384,   385,   0,     386,   387,   0,
    388,   0,     389,   390,   391,   392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,
    0,     399,   400,   0,     401,   0,     402,   403,   404,   405,   406,   0,     407,   408,   0,     409,
    410,   0,     411,   412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   0,     422,   423,
    424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
    0,     439,   440,   0,     441,   442,   443,   0,     445,   446,   447,   448,   449,   450,   451,   0,
    452,   453,   454,   455,   456,   0,     457,   458,   459,   460,   0,     461,   462,   463,   0,     464,
    465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   0,     475,   476,   0,     477,   478,
    479,   480,   481,   482,   0,     483,   484,   0,     0,     485,   486,   487,   488,   0,     489,   490,
    491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,
    502,   503,   504,   505,   506,   0,     507,   0,     508,   509,   510,   511,   0,     0,     512,   0,
    0,     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,
    542,   543,   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
    558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
    574,   575,   576,   577,   578,   579,   580,   0,     581,   582,   583,   584,   585,   586,   587,   588,
    589,   590,   591,   592,   1525,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     224,
    225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,
    0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   0,     1526,  831,   1527,  1528,
    0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   1529,  1530,  256,   0,     257,   258,
    259,   260,   0,     0,     832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,
    270,   271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,
    277,   278,   279,   280,   281,   282,   1531,  1532,  285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   0,     311,   312,   313,   0,     0,
    315,   0,     316,   317,   1533,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,
    0,     324,   0,     0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   2322,
    335,   336,   337,   338,   339,   340,   0,     341,   839,   2323,  343,   344,   345,   346,   1534,  1535,
    0,     1536,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   0,     843,   361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1537,  845,   1538,  383,
    384,   0,     0,     386,   387,   846,   388,   0,     0,     390,   1539,  392,   393,   394,   0,     395,
    0,     0,     396,   397,   398,   0,     0,     399,   2325,  847,   401,   848,   0,     403,   404,   405,
    406,   0,     407,   408,   0,     409,   0,     0,     0,     412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   1540,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   0,     444,   445,   446,
    447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   2326,  459,   460,
    850,   461,   1542,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   0,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     1543,  1544,  0,     0,     485,
    0,     487,   0,     0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   0,     0,     500,   501,   502,   503,   504,   0,     1545,  2327,  507,   851,   508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   0,     0,     549,   550,   551,
    552,   553,   554,   555,   556,   0,     558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   0,     580,   0,     581,   582,
    1525,  584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     224,   225,   226,   227,   228,
    229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,
    0,     238,   239,   830,   240,   241,   242,   0,     1526,  831,   1527,  1528,  0,     247,   248,   249,
    250,   251,   0,     0,     252,   253,   1529,  1530,  256,   0,     257,   258,   259,   260,   0,     0,
    832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,
    274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,     277,   278,   279,   280,
    281,   282,   1531,  1532,  285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,
    294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   0,     0,     307,   308,   309,   0,     311,   312,   313,   0,     0,     315,   0,     316,   317,
    1533,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   0,     0,
    326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   839,   0,     343,   344,   345,   346,   1534,  1535,  0,     1536,  0,     350,
    840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   0,     843,
    361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   379,   380,   1537,  845,   1538,  383,   384,   0,     0,     386,
    387,   846,   388,   2417,  0,     390,   1539,  392,   393,   394,   0,     395,   0,     0,     396,   397,
    398,   0,     0,     399,   0,     847,   401,   848,   0,     403,   404,   405,   406,   0,     407,   408,
    0,     409,   0,     0,     0,     412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   1540,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   849,   441,   442,   0,     444,   445,   446,   447,   448,   449,   450,
    451,   0,     452,   453,   454,   455,   456,   0,     457,   2326,  459,   460,   850,   461,   1542,  463,
    0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   0,     0,     475,   476,   4071,
    477,   478,   479,   480,   481,   482,   0,     1543,  1544,  0,     0,     485,   0,     487,   0,     0,
    489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,
    500,   501,   502,   503,   504,   0,     1545,  0,     507,   851,   508,   509,   510,   511,   0,     0,
    512,   0,     0,     513,   514,   515,   516,   517,   518,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,
    540,   541,   542,   543,   544,   545,   546,   0,     0,     549,   550,   551,   552,   553,   554,   555,
    556,   0,     558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
    572,   573,   574,   575,   576,   577,   578,   0,     580,   0,     581,   582,   1525,  584,   585,   586,
    587,   588,   589,   590,   591,   592,   0,     224,   225,   226,   227,   228,   229,   230,   231,   0,
    233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   830,
    240,   241,   242,   0,     1526,  831,   1527,  1528,  0,     247,   248,   249,   250,   251,   0,     0,
    252,   253,   1529,  1530,  256,   0,     257,   258,   259,   260,   0,     0,     832,   0,     262,   263,
    264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,
    276,   0,     0,     0,     835,   0,     0,     0,     277,   278,   279,   280,   281,   282,   1531,  1532,
    285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,
    296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,
    308,   309,   0,     311,   312,   313,   0,     0,     315,   0,     316,   317,   1533,  0,     0,     319,
    0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   0,     0,     326,   0,     327,   328,
    329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    839,   0,     343,   344,   345,   346,   1534,  1535,  0,     1536,  0,     350,   840,   841,   351,   842,
    352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   0,     843,   361,   844,   0,     362,
    363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   379,   380,   1537,  845,   1538,  383,   384,   2499,  0,     386,   387,   846,   388,   0,
    0,     390,   1539,  392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,
    0,     847,   401,   848,   0,     403,   404,   405,   406,   0,     407,   408,   0,     409,   0,     0,
    0,     412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1540,  424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   849,   441,   442,   0,     444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,
    454,   455,   456,   0,     457,   1541,  459,   460,   850,   461,   1542,  463,   0,     464,   465,   466,
    467,   468,   469,   470,   471,   472,   473,   0,     0,     475,   476,   0,     477,   478,   479,   480,
    481,   482,   0,     1543,  1544,  0,     0,     485,   0,     487,   0,     0,     489,   490,   491,   492,
    0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,
    504,   0,     1545,  0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,
    514,   515,   516,   517,   518,   0,     0,     0,     0,     0,     0,     0,     0,     0,     528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,
    544,   545,   546,   0,     0,     549,   550,   551,   552,   553,   554,   555,   556,   0,     558,   559,
    560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
    576,   577,   578,   0,     580,   0,     581,   582,   1525,  584,   585,   586,   587,   588,   589,   590,
    591,   592,   0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,
    0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   0,
    1526,  831,   1527,  1528,  0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   1529,  1530,
    256,   0,     257,   258,   259,   260,   0,     0,     832,   0,     262,   263,   264,   265,   266,   833,
    267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,
    835,   0,     0,     0,     277,   278,   279,   280,   281,   282,   1531,  1532,  285,   0,     286,   0,
    287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   0,     311,
    312,   313,   0,     0,     315,   0,     316,   317,   1533,  0,     0,     319,   0,     320,   836,   0,
    837,   321,   322,   323,   0,     324,   0,     0,     326,   0,     327,   328,   329,   330,   331,   838,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   0,     343,   344,
    345,   346,   1534,  1535,  0,     1536,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,
    356,   0,     357,   358,   0,     359,   0,     843,   361,   844,   0,     362,   363,   364,   0,     0,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
    1537,  845,   1538,  383,   384,   3868,  0,     386,   387,   846,   388,   0,     0,     390,   1539,  392,
    393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   0,     847,   401,   848,
    0,     403,   404,   405,   406,   0,     407,   408,   0,     409,   0,     0,     0,     412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   1540,  424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,
    0,     444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,
    457,   1541,  459,   460,   850,   461,   1542,  463,   0,     464,   465,   466,   467,   468,   469,   470,
    471,   472,   473,   0,     0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     1543,
    1544,  0,     0,     485,   0,     487,   0,     0,     489,   490,   491,   492,   0,     493,   494,   0,
    0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   0,     1545,  0,
    507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,
    518,   0,     0,     0,     0,     0,     0,     0,     0,     0,     528,   529,   530,   531,   532,   533,
    534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   0,
    0,     549,   550,   551,   552,   553,   554,   555,   556,   0,     558,   559,   560,   561,   562,   563,
    564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   0,
    580,   0,     581,   582,   1525,  584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     224,
    225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,
    0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   0,     1526,  831,   1527,  1528,
    0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   1529,  1530,  256,   0,     257,   258,
    259,   260,   0,     0,     832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,
    270,   271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,
    277,   278,   279,   280,   281,   282,   1531,  1532,  285,   0,     286,   0,     287,   288,   289,   290,
    291,   0,     292,   293,   294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,   302,
    0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   0,     311,   312,   313,   0,     0,
    315,   0,     316,   317,   1533,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,
    0,     324,   0,     0,     326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   0,
    335,   336,   337,   338,   339,   340,   0,     341,   839,   0,     343,   344,   345,   346,   1534,  1535,
    0,     1536,  0,     350,   840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,
    0,     359,   0,     843,   361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,
    369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,   1537,  845,   1538,  383,
    384,   0,     0,     386,   387,   846,   388,   0,     0,     390,   1539,  392,   393,   394,   0,     395,
    0,     0,     396,   397,   398,   0,     0,     399,   0,     847,   401,   848,   0,     403,   404,   405,
    406,   0,     407,   408,   0,     409,   0,     0,     0,     412,   413,   414,   0,     415,   416,   417,
    418,   419,   420,   421,   422,   1540,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,
    433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,   0,     444,   445,   446,
    447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,     457,   1541,  459,   460,
    850,   461,   1542,  463,   0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   0,
    0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     1543,  1544,  0,     0,     485,
    0,     487,   0,     0,     489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,
    498,   499,   0,     0,     500,   501,   502,   503,   504,   0,     1545,  0,     507,   851,   508,   509,
    510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,   518,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     528,   529,   530,   531,   532,   533,   534,   535,   536,   0,
    537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   0,     0,     549,   550,   551,
    552,   553,   554,   555,   556,   0,     558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
    568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   0,     580,   0,     581,   582,
    1525,  584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     224,   225,   226,   227,   228,
    229,   230,   231,   0,     233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,
    0,     238,   239,   830,   240,   241,   242,   0,     1526,  831,   1527,  1528,  0,     247,   248,   249,
    250,   251,   0,     0,     252,   253,   1529,  1530,  256,   0,     257,   258,   259,   260,   0,     0,
    832,   0,     262,   263,   264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,
    274,   0,     834,   275,   276,   0,     0,     0,     835,   0,     0,     0,     277,   278,   279,   280,
    281,   282,   1531,  1532,  285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,
    294,   0,     0,     295,   296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,
    306,   0,     0,     307,   308,   309,   0,     311,   312,   313,   0,     0,     315,   0,     316,   317,
    1533,  0,     0,     319,   0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   0,     0,
    326,   0,     327,   328,   329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,
    339,   340,   0,     341,   839,   0,     343,   344,   345,   346,   1534,  1535,  0,     1536,  0,     350,
    840,   841,   351,   842,   352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   0,     843,
    361,   844,   0,     362,   363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,
    373,   374,   375,   376,   377,   378,   379,   380,   1537,  845,   1538,  383,   384,   0,     0,     386,
    387,   846,   388,   0,     0,     390,   1539,  392,   393,   394,   0,     395,   0,     0,     396,   397,
    398,   0,     0,     399,   0,     847,   401,   848,   0,     403,   404,   405,   406,   0,     407,   408,
    0,     409,   0,     0,     0,     412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,
    422,   1540,  424,   425,   426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,
    437,   438,   0,     439,   440,   849,   441,   442,   0,     444,   445,   446,   447,   448,   449,   450,
    451,   0,     452,   453,   454,   455,   456,   0,     457,   2326,  459,   460,   850,   461,   1542,  463,
    0,     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   0,     0,     475,   476,   0,
    477,   478,   479,   480,   481,   482,   0,     1543,  1544,  0,     0,     485,   0,     487,   0,     0,
    489,   490,   491,   492,   0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,
    500,   501,   502,   503,   504,   0,     1545,  0,     507,   851,   508,   509,   510,   511,   0,     0,
    512,   0,     0,     513,   514,   515,   516,   517,   518,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     528,   529,   530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,
    540,   541,   542,   543,   544,   545,   546,   0,     0,     549,   550,   551,   552,   553,   554,   555,
    556,   0,     558,   559,   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
    572,   573,   574,   575,   576,   577,   578,   0,     580,   0,     581,   582,   1525,  584,   585,   586,
    587,   588,   589,   590,   591,   592,   0,     224,   225,   226,   227,   228,   229,   230,   231,   0,
    233,   234,   235,   0,     0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   830,
    240,   241,   242,   0,     1526,  831,   1527,  1528,  0,     247,   248,   249,   250,   251,   0,     0,
    252,   253,   1529,  1530,  256,   0,     257,   258,   259,   260,   0,     0,     832,   0,     262,   263,
    264,   265,   266,   833,   267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,
    276,   0,     0,     0,     835,   0,     0,     0,     277,   278,   279,   280,   281,   282,   1531,  1532,
    285,   0,     286,   0,     287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,
    296,   1156,  298,   299,   0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,
    308,   309,   0,     311,   312,   313,   0,     0,     315,   0,     316,   317,   1533,  0,     0,     319,
    0,     320,   836,   0,     837,   321,   322,   323,   0,     324,   0,     0,     326,   0,     327,   328,
    329,   330,   331,   838,   332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,
    839,   0,     343,   344,   345,   346,   1534,  1535,  0,     1536,  0,     350,   840,   841,   351,   842,
    352,   353,   354,   355,   356,   0,     357,   358,   0,     359,   0,     843,   361,   844,   0,     362,
    363,   364,   0,     0,     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
    377,   378,   379,   380,   1537,  845,   1538,  383,   384,   0,     0,     386,   387,   846,   388,   0,
    0,     390,   1539,  392,   393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,
    0,     847,   401,   848,   0,     403,   404,   405,   406,   0,     407,   408,   0,     409,   0,     0,
    0,     412,   413,   414,   0,     415,   416,   417,   418,   419,   420,   421,   422,   1540,  424,   425,
    426,   427,   0,     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,
    440,   849,   441,   442,   0,     444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,
    454,   455,   456,   0,     457,   0,     459,   460,   850,   461,   1542,  463,   0,     464,   465,   466,
    467,   468,   469,   470,   471,   472,   473,   0,     0,     475,   476,   0,     477,   478,   479,   480,
    481,   482,   0,     1543,  1544,  0,     0,     485,   0,     487,   0,     0,     489,   490,   491,   492,
    0,     493,   494,   0,     0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,
    504,   0,     1545,  0,     507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,
    514,   515,   516,   517,   518,   0,     0,     0,     0,     0,     0,     0,     0,     0,     528,   529,
    530,   531,   532,   533,   534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,
    544,   545,   546,   0,     0,     549,   550,   551,   552,   553,   554,   555,   556,   0,     558,   559,
    560,   561,   562,   563,   564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
    576,   577,   578,   0,     580,   0,     581,   582,   1525,  584,   585,   586,   587,   588,   589,   590,
    591,   592,   0,     224,   225,   226,   227,   228,   229,   230,   231,   0,     233,   234,   235,   0,
    0,     0,     0,     0,     0,     0,     236,   237,   0,     238,   239,   830,   240,   241,   242,   0,
    0,     831,   0,     0,     0,     247,   248,   249,   250,   251,   0,     0,     252,   253,   0,     0,
    256,   0,     257,   258,   259,   260,   0,     0,     832,   0,     262,   263,   264,   265,   266,   833,
    267,   268,   0,     269,   270,   271,   272,   273,   274,   0,     834,   275,   276,   0,     0,     0,
    835,   0,     0,     0,     277,   278,   279,   280,   281,   282,   0,     0,     285,   0,     286,   0,
    287,   288,   289,   290,   291,   0,     292,   293,   294,   0,     0,     295,   296,   297,   298,   299,
    0,     300,   301,   302,   0,     303,   304,   305,   306,   0,     0,     307,   308,   309,   0,     311,
    312,   313,   0,     0,     315,   0,     316,   317,   0,     0,     0,     319,   0,     320,   836,   0,
    837,   321,   322,   323,   0,     324,   0,     0,     326,   0,     327,   328,   329,   330,   331,   838,
    332,   333,   334,   0,     335,   336,   337,   338,   339,   340,   0,     341,   839,   0,     343,   344,
    345,   346,   0,     0,     0,     0,     0,     350,   840,   841,   351,   842,   352,   353,   354,   355,
    356,   0,     357,   358,   0,     359,   0,     843,   361,   844,   0,     362,   363,   364,   0,     0,
    365,   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
    0,     845,   0,     383,   384,   0,     0,     386,   387,   846,   388,   0,     0,     390,   0,     392,
    393,   394,   0,     395,   0,     0,     396,   397,   398,   0,     0,     399,   0,     847,   401,   848,
    0,     403,   404,   405,   406,   0,     407,   408,   0,     409,   0,     0,     0,     412,   413,   414,
    0,     415,   416,   417,   418,   419,   420,   421,   422,   0,     424,   425,   426,   427,   0,     428,
    429,   430,   431,   432,   433,   434,   435,   436,   437,   438,   0,     439,   440,   849,   441,   442,
    0,     444,   445,   446,   447,   448,   449,   450,   451,   0,     452,   453,   454,   455,   456,   0,
    457,   0,     459,   460,   850,   461,   0,     463,   0,     464,   465,   466,   467,   468,   469,   470,
    471,   472,   473,   0,     0,     475,   476,   0,     477,   478,   479,   480,   481,   482,   0,     0,
    0,     0,     0,     485,   0,     487,   0,     0,     489,   490,   491,   492,   0,     493,   494,   0,
    0,     495,   496,   497,   498,   499,   0,     0,     500,   501,   502,   503,   504,   0,     0,     0,
    507,   851,   508,   509,   510,   511,   0,     0,     512,   0,     0,     513,   514,   515,   516,   517,
    518,   0,     0,     0,     0,     0,     0,     0,     0,     0,     528,   529,   530,   531,   532,   533,
    534,   535,   536,   0,     537,   0,     538,   539,   540,   541,   542,   543,   544,   545,   546,   0,
    0,     549,   550,   551,   552,   553,   554,   555,   556,   0,     558,   559,   560,   561,   562,   563,
    564,   565,   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,   577,   578,   0,
    580,   0,     581,   582,   3148,  584,   585,   586,   587,   588,   589,   590,   591,   592,   0,     1818,
    1819,  1820,  1821,  0,     1823,  1824,  1825,  0,     1826,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     1830,  1831,  0,     0,     0,     1833,  1834,  1835,  1836,  0,     1838,  1839,  1840,  1841,
    0,     1842,  1843,  1844,  1845,  1846,  0,     0,     0,     1847,  0,     0,     1848,  0,     1849,  1850,
    1851,  1852,  1853,  0,     0,     0,     1855,  0,     1856,  1857,  1858,  0,     0,     1859,  0,     1860,
    1861,  0,     1862,  1863,  1864,  0,     0,     1865,  0,     0,     0,     0,     0,     0,     0,     0,
    1866,  1867,  0,     1868,  0,     1869,  1870,  1871,  1872,  0,     1873,  0,     1874,  1875,  1876,  1877,
    1878,  0,     0,     1879,  0,     0,     0,     0,     1880,  1881,  1882,  1883,  0,     1884,  1885,  1886,
    3149,  1887,  1888,  1889,  0,     0,     0,     1890,  1891,  1892,  1893,  1894,  0,     1895,  1896,  0,
    0,     0,     0,     1897,  1898,  0,     3150,  1899,  0,     1900,  1901,  0,     0,     1902,  0,     1903,
    0,     1904,  1905,  0,     1906,  0,     1907,  1908,  0,     0,     1909,  0,     1911,  1912,  1913,  0,
    1915,  1916,  1917,  1918,  1919,  1920,  0,     0,     0,     1921,  1922,  1923,  1924,  1925,  1926,  1927,
    0,     1928,  0,     1929,  0,     0,     1932,  0,     1933,  0,     1934,  1935,  1936,  0,     0,     0,
    0,     0,     1937,  0,     1938,  0,     0,     1940,  1941,  1942,  0,     0,     1943,  1944,  0,     1945,
    0,     1946,  1947,  1948,  1949,  0,     1950,  1951,  0,     1952,  1953,  1954,  1955,  0,     1956,  1957,
    1958,  1959,  0,     1961,  1962,  0,     1964,  0,     1965,  1966,  1967,  1968,  1969,  0,     0,     1970,
    0,     0,     3151,  1972,  1973,  0,     0,     0,     1975,  1976,  0,     0,     1977,  1978,  1979,  0,
    1980,  0,     0,     1981,  0,     0,     1982,  0,     1983,  1984,  1985,  1986,  0,     1987,  1988,  1989,
    1990,  0,     1991,  1992,  1993,  1994,  1995,  1996,  0,     0,     0,     0,     1997,  1998,  1999,  2000,
    2001,  2002,  0,     2003,  2004,  2005,  0,     2006,  2007,  0,     2008,  2009,  2010,  2011,  2012,  2013,
    2014,  2015,  2016,  0,     2017,  0,     2018,  0,     2019,  0,     2020,  0,     2021,  2022,  2023,  2024,
    0,     2026,  2027,  0,     0,     2028,  0,     3152,  2030,  2031,  2032,  2033,  2034,  2035,  0,     2036,
    0,     2037,  2038,  0,     0,     0,     2040,  2041,  2042,  0,     0,     2043,  2044,  0,     0,     2045,
    2046,  2047,  2048,  0,     2049,  2050,  2051,  0,     0,     2052,  2053,  0,     0,     2054,  2055,  0,
    2056,  2057,  0,     0,     2058,  2059,  0,     2060,  2061,  3153,  2063,  0,     0,     2064,  2065,  2066,
    0,     2067,  0,     0,     0,     0,     0,     0,     0,     2068,  0,     2069,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     2070,  2071,  2072,  2073,  2074,  2075,  2076,  0,
    0,     0,     0,     2077,  2078,  2079,  0,     2080,  2081,  2082,  0,     2083,  2084,  2085,  2086,  0,
    2087,  0,     2088,  2089,  2090,  0,     2091,  2092,  2093,  0,     2094,  0,     2095,  2096,  2097,  0,
    2098,  2099,  2100,  2101,  2102,  0,     0,     0,     0,     0,     2103,  2104,  3148,  0,     2105,  2106,
    2107,  2108,  2109,  2110,  2111,  2112,  0,     1818,  1819,  1820,  1821,  0,     1823,  1824,  1825,  0,
    1826,  0,     0,     0,     0,     0,     0,     0,     0,     0,     1830,  1831,  0,     0,     0,     1833,
    1834,  1835,  1836,  0,     1838,  1839,  1840,  1841,  0,     1842,  1843,  1844,  1845,  1846,  0,     0,
    0,     1847,  0,     0,     1848,  0,     1849,  1850,  1851,  1852,  1853,  0,     0,     0,     1855,  0,
    1856,  1857,  1858,  0,     0,     1859,  0,     1860,  1861,  0,     1862,  1863,  1864,  0,     0,     1865,
    0,     0,     0,     0,     0,     0,     0,     0,     1866,  1867,  0,     1868,  0,     1869,  1870,  1871,
    1872,  0,     1873,  0,     1874,  1875,  1876,  1877,  1878,  0,     0,     1879,  0,     0,     0,     0,
    1880,  1881,  1882,  1883,  0,     1884,  1885,  1886,  0,     1887,  1888,  1889,  0,     0,     0,     1890,
    1891,  1892,  1893,  1894,  0,     1895,  1896,  0,     0,     0,     0,     1897,  1898,  0,     3150,  1899,
    0,     1900,  1901,  0,     0,     1902,  0,     1903,  0,     1904,  1905,  0,     1906,  0,     1907,  1908,
    0,     0,     1909,  0,     1911,  1912,  1913,  0,     1915,  1916,  1917,  1918,  1919,  1920,  0,     0,
    0,     1921,  1922,  1923,  1924,  1925,  1926,  1927,  0,     1928,  0,     1929,  0,     0,     1932,  0,
    1933,  0,     1934,  1935,  1936,  0,     0,     0,     0,     0,     1937,  0,     1938,  0,     0,     1940,
    1941,  1942,  0,     0,     1943,  1944,  0,     1945,  0,     1946,  1947,  1948,  1949,  0,     1950,  1951,
    0,     1952,  1953,  1954,  1955,  0,     1956,  1957,  1958,  1959,  0,     1961,  1962,  0,     1964,  0,
    1965,  1966,  1967,  1968,  1969,  0,     0,     1970,  0,     0,     3151,  1972,  1973,  0,     0,     0,
    1975,  1976,  0,     0,     1977,  1978,  1979,  0,     1980,  0,     0,     1981,  0,     0,     1982,  0,
    1983,  1984,  1985,  1986,  0,     1987,  1988,  1989,  1990,  0,     1991,  1992,  1993,  1994,  1995,  1996,
    0,     0,     0,     0,     1997,  1998,  1999,  2000,  2001,  2002,  0,     2003,  2004,  2005,  0,     2006,
    2007,  0,     2008,  2009,  2010,  2011,  2012,  2013,  2014,  2015,  2016,  0,     2017,  0,     2018,  0,
    2019,  0,     2020,  0,     2021,  2022,  2023,  2024,  0,     2026,  2027,  0,     0,     2028,  0,     2029,
    2030,  2031,  2032,  2033,  2034,  2035,  0,     2036,  0,     2037,  2038,  0,     0,     0,     2040,  2041,
    2042,  0,     0,     2043,  2044,  0,     0,     2045,  2046,  2047,  2048,  0,     2049,  2050,  2051,  0,
    0,     2052,  2053,  0,     0,     2054,  2055,  0,     2056,  2057,  0,     0,     2058,  2059,  0,     2060,
    2061,  2062,  2063,  0,     0,     2064,  2065,  2066,  0,     2067,  0,     0,     0,     0,     0,     0,
    0,     2068,  0,     2069,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2070,  2071,  2072,  2073,  2074,  2075,  2076,  0,     0,     0,     0,     2077,  2078,  2079,  0,     2080,
    2081,  2082,  0,     2083,  2084,  2085,  2086,  0,     2087,  0,     2088,  2089,  2090,  0,     2091,  2092,
    2093,  0,     2094,  0,     2095,  2096,  2097,  0,     2098,  2099,  2100,  2101,  2102,  0,     0,     0,
    0,     0,     2103,  2104,  3148,  0,     2105,  2106,  2107,  2108,  2109,  2110,  2111,  2112,  0,     1818,
    1819,  1820,  1821,  0,     1823,  1824,  1825,  0,     1826,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     1830,  1831,  0,     0,     0,     1833,  1834,  1835,  1836,  0,     1838,  1839,  1840,  1841,
    0,     1842,  1843,  1844,  1845,  1846,  0,     0,     0,     1847,  0,     0,     1848,  0,     1849,  1850,
    1851,  1852,  1853,  0,     0,     0,     1855,  0,     1856,  1857,  1858,  0,     0,     1859,  0,     1860,
    1861,  0,     1862,  1863,  1864,  0,     0,     1865,  0,     0,     0,     0,     0,     0,     0,     0,
    1866,  1867,  0,     1868,  0,     1869,  1870,  1871,  1872,  0,     1873,  0,     1874,  1875,  1876,  1877,
    1878,  0,     0,     1879,  0,     0,     0,     0,     1880,  1881,  1882,  1883,  0,     1884,  1885,  1886,
    0,     1887,  1888,  1889,  0,     0,     0,     1890,  1891,  1892,  1893,  1894,  0,     1895,  1896,  0,
    0,     0,     0,     1897,  1898,  0,     3150,  1899,  0,     1900,  1901,  0,     0,     1902,  0,     1903,
    0,     1904,  1905,  0,     1906,  0,     1907,  1908,  0,     0,     3176,  0,     1911,  1912,  1913,  0,
    1915,  1916,  1917,  1918,  1919,  1920,  0,     0,     0,     1921,  1922,  1923,  1924,  1925,  1926,  1927,
    0,     1928,  0,     1929,  0,     0,     1932,  0,     1933,  0,     1934,  1935,  1936,  0,     0,     0,
    0,     0,     1937,  0,     1938,  0,     0,     1940,  1941,  1942,  0,     0,     1943,  1944,  0,     1945,
    0,     1946,  1947,  1948,  1949,  0,     1950,  1951,  0,     1952,  1953,  1954,  1955,  0,     1956,  1957,
    1958,  1959,  0,     1961,  1962,  0,     1964,  0,     1965,  1966,  1967,  1968,  1969,  0,     0,     1970,
    0,     0,     3151,  1972,  1973,  0,     0,     0,     1975,  1976,  0,     0,     1977,  1978,  1979,  0,
    1980,  0,     0,     1981,  0,     0,     1982,  0,     1983,  1984,  1985,  1986,  0,     1987,  1988,  1989,
    1990,  0,     1991,  1992,  1993,  1994,  1995,  1996,  0,     0,     0,     0,     1997,  1998,  1999,  2000,
    2001,  2002,  0,     2003,  2004,  2005,  0,     2006,  2007,  0,     2008,  2009,  2010,  2011,  2012,  2013,
    2014,  2015,  2016,  0,     2017,  0,     2018,  0,     2019,  0,     2020,  0,     2021,  2022,  2023,  2024,
    0,     2026,  2027,  0,     0,     2028,  0,     2029,  2030,  2031,  2032,  2033,  2034,  2035,  0,     2036,
    0,     2037,  2038,  0,     0,     0,     2040,  2041,  2042,  0,     0,     2043,  2044,  0,     0,     2045,
    2046,  2047,  2048,  0,     2049,  2050,  2051,  0,     0,     2052,  2053,  0,     0,     2054,  2055,  0,
    2056,  2057,  0,     0,     2058,  2059,  0,     2060,  2061,  2062,  2063,  0,     0,     2064,  2065,  2066,
    0,     2067,  0,     0,     0,     0,     0,     0,     0,     2068,  0,     2069,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     2070,  2071,  2072,  2073,  2074,  2075,  2076,  0,
    0,     0,     0,     2077,  2078,  2079,  0,     2080,  2081,  2082,  0,     2083,  2084,  2085,  2086,  0,
    2087,  0,     2088,  2089,  2090,  0,     2091,  2092,  2093,  0,     2094,  0,     2095,  2096,  2097,  0,
    2098,  2099,  2100,  2101,  2102,  0,     0,     0,     0,     0,     2103,  2104,  3148,  0,     2105,  2106,
    2107,  2108,  2109,  2110,  2111,  2112,  0,     1818,  1819,  1820,  1821,  0,     1823,  1824,  1825,  0,
    1826,  0,     0,     0,     0,     0,     0,     0,     0,     0,     1830,  1831,  0,     0,     0,     1833,
    1834,  1835,  1836,  0,     1838,  1839,  1840,  1841,  0,     1842,  1843,  1844,  1845,  1846,  0,     0,
    0,     1847,  0,     0,     1848,  0,     1849,  1850,  1851,  1852,  1853,  0,     0,     0,     1855,  0,
    1856,  1857,  1858,  0,     0,     1859,  0,     1860,  1861,  0,     1862,  1863,  1864,  0,     0,     1865,
    0,     0,     0,     0,     0,     0,     0,     0,     1866,  1867,  0,     1868,  0,     1869,  1870,  1871,
    1872,  0,     1873,  0,     1874,  1875,  1876,  1877,  1878,  0,     0,     1879,  0,     0,     0,     0,
    1880,  1881,  1882,  1883,  0,     1884,  1885,  1886,  0,     1887,  1888,  1889,  0,     0,     0,     1890,
    1891,  1892,  1893,  1894,  0,     1895,  1896,  0,     0,     0,     0,     1897,  1898,  0,     3150,  1899,
    0,     1900,  1901,  0,     0,     1902,  0,     1903,  0,     1904,  1905,  0,     1906,  0,     1907,  1908,
    0,     0,     3822,  0,     1911,  1912,  1913,  0,     1915,  1916,  1917,  1918,  1919,  1920,  0,     0,
    0,     1921,  1922,  1923,  1924,  1925,  1926,  1927,  0,     1928,  0,     1929,  0,     0,     1932,  0,
    1933,  0,     1934,  1935,  1936,  0,     0,     0,     0,     0,     1937,  0,     1938,  0,     0,     1940,
    1941,  1942,  0,     0,     1943,  1944,  0,     1945,  0,     1946,  1947,  1948,  1949,  0,     1950,  1951,
    0,     1952,  1953,  1954,  1955,  0,     1956,  1957,  1958,  1959,  0,     1961,  1962,  0,     1964,  0,
    1965,  1966,  1967,  1968,  1969,  0,     0,     1970,  0,     0,     3151,  1972,  1973,  0,     0,     0,
    1975,  1976,  0,     0,     1977,  1978,  1979,  0,     1980,  0,     0,     1981,  0,     0,     1982,  0,
    1983,  1984,  1985,  1986,  0,     1987,  1988,  1989,  1990,  0,     1991,  1992,  1993,  1994,  1995,  1996,
    0,     0,     0,     0,     1997,  1998,  1999,  2000,  2001,  2002,  0,     2003,  2004,  2005,  0,     2006,
    2007,  0,     2008,  2009,  2010,  2011,  2012,  2013,  2014,  2015,  2016,  0,     2017,  0,     2018,  0,
    2019,  0,     2020,  0,     2021,  2022,  2023,  2024,  0,     2026,  2027,  0,     0,     2028,  0,     2029,
    2030,  2031,  2032,  2033,  2034,  2035,  0,     2036,  0,     2037,  2038,  0,     0,     0,     2040,  2041,
    2042,  0,     0,     2043,  2044,  0,     0,     2045,  2046,  2047,  2048,  0,     2049,  2050,  2051,  0,
    0,     2052,  2053,  0,     0,     2054,  2055,  0,     2056,  2057,  0,     0,     2058,  2059,  0,     2060,
    2061,  2062,  2063,  0,     0,     2064,  2065,  2066,  0,     2067,  0,     0,     0,     0,     0,     0,
    0,     2068,  0,     2069,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2070,  2071,  2072,  2073,  2074,  2075,  2076,  0,     0,     0,     0,     2077,  2078,  2079,  0,     2080,
    2081,  2082,  0,     2083,  2084,  2085,  2086,  0,     2087,  0,     2088,  2089,  2090,  0,     2091,  2092,
    2093,  0,     2094,  0,     2095,  2096,  2097,  0,     2098,  2099,  2100,  2101,  2102,  0,     0,     0,
    0,     0,     2103,  2104,  3148,  0,     2105,  2106,  2107,  2108,  2109,  2110,  2111,  2112,  0,     1818,
    1819,  1820,  1821,  0,     1823,  1824,  1825,  0,     1826,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     1830,  1831,  0,     0,     0,     1833,  1834,  1835,  1836,  0,     1838,  1839,  1840,  1841,
    0,     1842,  1843,  1844,  1845,  1846,  0,     0,     0,     1847,  0,     0,     1848,  0,     1849,  1850,
    1851,  1852,  1853,  0,     0,     0,     1855,  0,     1856,  1857,  1858,  0,     0,     1859,  0,     1860,
    1861,  0,     1862,  1863,  1864,  0,     0,     1865,  0,     0,     0,     0,     0,     0,     0,     0,
    1866,  1867,  0,     1868,  0,     1869,  1870,  1871,  1872,  0,     1873,  0,     1874,  1875,  1876,  1877,
    1878,  0,     0,     1879,  0,     0,     0,     0,     1880,  1881,  1882,  1883,  0,     1884,  1885,  1886,
    0,     1887,  1888,  1889,  0,     0,     0,     1890,  1891,  1892,  1893,  1894,  0,     1895,  1896,  0,
    0,     0,     0,     1897,  1898,  0,     3150,  1899,  0,     1900,  1901,  0,     0,     1902,  0,     1903,
    0,     1904,  1905,  0,     1906,  0,     1907,  1908,  0,     0,     1909,  0,     1911,  1912,  1913,  0,
    1915,  1916,  1917,  1918,  1919,  1920,  0,     0,     0,     1921,  1922,  1923,  1924,  1925,  1926,  1927,
    0,     1928,  0,     1929,  0,     0,     1932,  0,     1933,  0,     1934,  1935,  1936,  0,     0,     0,
    0,     0,     1937,  0,     1938,  0,     0,     1940,  1941,  1942,  0,     0,     1943,  1944,  0,     1945,
    0,     1946,  1947,  1948,  1949,  0,     1950,  1951,  0,     1952,  1953,  1954,  1955,  0,     1956,  1957,
    1958,  1959,  0,     1961,  1962,  0,     1964,  0,     1965,  1966,  1967,  1968,  1969,  0,     0,     1970,
    0,     0,     3151,  1972,  1973,  0,     0,     0,     1975,  1976,  0,     0,     1977,  1978,  1979,  0,
    1980,  0,     0,     1981,  0,     0,     1982,  0,     1983,  1984,  1985,  1986,  0,     1987,  1988,  1989,
    1990,  0,     1991,  1992,  1993,  1994,  1995,  1996,  0,     0,     0,     0,     1997,  1998,  1999,  2000,
    2001,  2002,  0,     2003,  2004,  2005,  0,     2006,  2007,  0,     2008,  2009,  2010,  2011,  2012,  2013,
    2014,  2015,  2016,  0,     2017,  0,     2018,  0,     2019,  0,     2020,  0,     2021,  2022,  2023,  2024,
    0,     2026,  2027,  0,     0,     2028,  0,     3152,  2030,  2031,  2032,  2033,  2034,  2035,  0,     2036,
    0,     2037,  2038,  0,     0,     0,     2040,  2041,  2042,  0,     0,     2043,  2044,  0,     0,     2045,
    2046,  2047,  2048,  0,     2049,  2050,  2051,  0,     0,     2052,  2053,  0,     0,     2054,  2055,  0,
    2056,  2057,  0,     0,     2058,  2059,  0,     2060,  2061,  2062,  2063,  0,     0,     2064,  2065,  2066,
    0,     2067,  0,     0,     0,     0,     0,     0,     0,     2068,  0,     2069,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     2070,  2071,  2072,  2073,  2074,  2075,  2076,  0,
    0,     0,     0,     2077,  2078,  2079,  0,     2080,  2081,  2082,  0,     2083,  2084,  2085,  2086,  0,
    2087,  0,     2088,  2089,  2090,  0,     2091,  2092,  2093,  0,     2094,  0,     2095,  2096,  2097,  0,
    2098,  2099,  2100,  2101,  2102,  0,     0,     0,     0,     0,     2103,  2104,  3148,  0,     2105,  2106,
    2107,  2108,  2109,  2110,  2111,  2112,  0,     1818,  1819,  1820,  1821,  0,     1823,  1824,  1825,  0,
    1826,  0,     0,     0,     0,     0,     0,     0,     0,     0,     1830,  1831,  0,     0,     0,     1833,
    1834,  1835,  1836,  0,     1838,  1839,  1840,  1841,  0,     1842,  1843,  1844,  1845,  1846,  0,     0,
    0,     1847,  0,     0,     1848,  0,     1849,  1850,  1851,  1852,  1853,  0,     0,     0,     1855,  0,
    1856,  1857,  1858,  0,     0,     1859,  0,     1860,  1861,  0,     1862,  1863,  1864,  0,     0,     1865,
    0,     0,     0,     0,     0,     0,     0,     0,     1866,  1867,  0,     1868,  0,     1869,  1870,  1871,
    1872,  0,     1873,  0,     1874,  1875,  1876,  1877,  1878,  0,     0,     1879,  0,     0,     0,     0,
    1880,  1881,  1882,  1883,  0,     1884,  1885,  1886,  0,     1887,  1888,  1889,  0,     0,     0,     1890,
    1891,  1892,  1893,  1894,  0,     1895,  1896,  0,     0,     0,     0,     1897,  1898,  0,     3150,  1899,
    0,     1900,  1901,  0,     0,     1902,  0,     1903,  0,     1904,  1905,  0,     1906,  0,     1907,  1908,
    0,     0,     1909,  0,     1911,  1912,  1913,  0,     1915,  1916,  1917,  1918,  1919,  1920,  0,     0,
    0,     1921,  1922,  1923,  1924,  1925,  1926,  1927,  0,     1928,  0,     1929,  0,     0,     1932,  0,
    1933,  0,     1934,  1935,  1936,  0,     0,     0,     0,     0,     1937,  0,     1938,  0,     0,     1940,
    1941,  1942,  0,     0,     1943,  1944,  0,     1945,  0,     1946,  1947,  1948,  1949,  0,     1950,  1951,
    0,     1952,  1953,  1954,  1955,  0,     1956,  1957,  1958,  1959,  0,     1961,  1962,  0,     1964,  0,
    1965,  1966,  1967,  1968,  1969,  0,     0,     1970,  0,     0,     3151,  1972,  1973,  0,     0,     0,
    1975,  1976,  0,     0,     1977,  1978,  1979,  0,     1980,  0,     0,     1981,  0,     0,     1982,  0,
    1983,  1984,  1985,  1986,  0,     1987,  1988,  1989,  1990,  0,     1991,  1992,  1993,  1994,  1995,  1996,
    0,     0,     0,     0,     1997,  1998,  1999,  2000,  2001,  2002,  0,     2003,  2004,  2005,  0,     2006,
    2007,  0,     2008,  2009,  2010,  2011,  2012,  2013,  2014,  2015,  2016,  0,     2017,  0,     2018,  0,
    2019,  0,     2020,  0,     0,     2022,  2023,  2024,  0,     2026,  2027,  0,     0,     2028,  0,     2029,
    2030,  2031,  2032,  2033,  2034,  2035,  0,     2036,  0,     2037,  2038,  0,     0,     0,     2040,  2041,
    2042,  0,     0,     2043,  2044,  0,     0,     2045,  2046,  2047,  2048,  0,     2049,  2050,  2051,  0,
    0,     2052,  2053,  0,     0,     2054,  2055,  0,     2056,  2057,  0,     0,     2058,  2059,  0,     2060,
    2061,  2062,  2063,  0,     0,     2064,  2065,  2066,  0,     2067,  0,     0,     0,     0,     0,     0,
    0,     2068,  0,     2069,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2070,  2071,  2072,  2073,  2074,  2075,  2076,  0,     0,     0,     0,     2077,  2078,  2079,  0,     2080,
    2081,  2082,  0,     2083,  2084,  2085,  2086,  0,     2087,  0,     2088,  2089,  2090,  0,     2091,  2092,
    2093,  0,     2094,  0,     2095,  2096,  2097,  0,     2098,  2099,  2100,  2101,  2102,  0,     0,     0,
    0,     0,     2103,  2104,  3148,  0,     2105,  2106,  2107,  2108,  2109,  2110,  2111,  2112,  0,     1818,
    1819,  1820,  1821,  0,     1823,  1824,  1825,  0,     1826,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     1830,  1831,  0,     0,     0,     1833,  1834,  1835,  1836,  0,     1838,  1839,  1840,  1841,
    0,     1842,  1843,  1844,  1845,  1846,  0,     0,     0,     1847,  0,     0,     1848,  0,     1849,  1850,
    1851,  1852,  1853,  0,     0,     0,     1855,  0,     1856,  1857,  1858,  0,     0,     1859,  0,     1860,
    1861,  0,     1862,  1863,  1864,  0,     0,     1865,  0,     0,     0,     0,     0,     0,     0,     0,
    1866,  1867,  0,     1868,  0,     1869,  1870,  1871,  1872,  0,     1873,  0,     1874,  1875,  1876,  1877,
    1878,  0,     0,     1879,  0,     0,     0,     0,     1880,  1881,  1882,  1883,  0,     1884,  1885,  1886,
    0,     1887,  1888,  1889,  0,     0,     0,     1890,  1891,  1892,  1893,  1894,  0,     1895,  1896,  0,
    0,     0,     0,     1897,  1898,  0,     0,     1899,  0,     1900,  1901,  0,     0,     1902,  0,     1903,
    0,     1904,  1905,  0,     1906,  0,     1907,  1908,  0,     0,     1909,  0,     1911,  1912,  1913,  0,
    1915,  1916,  1917,  1918,  1919,  1920,  0,     0,     0,     1921,  1922,  1923,  1924,  1925,  1926,  1927,
    0,     1928,  0,     1929,  0,     0,     1932,  0,     1933,  0,     1934,  1935,  1936,  0,     0,     0,
    0,     0,     1937,  0,     1938,  0,     0,     1940,  1941,  1942,  0,     0,     1943,  1944,  0,     1945,
    0,     1946,  1947,  1948,  1949,  0,     1950,  1951,  0,     1952,  1953,  1954,  1955,  0,     1956,  1957,
    1958,  1959,  0,     1961,  1962,  0,     1964,  0,     1965,  1966,  1967,  1968,  1969,  0,     0,     1970,
    0,     0,     3151,  1972,  1973,  0,     0,     0,     1975,  1976,  0,     0,     1977,  1978,  1979,  0,
    1980,  0,     0,     1981,  0,     0,     1982,  0,     1983,  1984,  1985,  1986,  0,     1987,  1988,  1989,
    1990,  0,     1991,  1992,  1993,  1994,  1995,  1996,  0,     0,     0,     0,     1997,  1998,  1999,  2000,
    2001,  2002,  0,     2003,  2004,  2005,  0,     2006,  2007,  0,     2008,  2009,  2010,  2011,  2012,  2013,
    2014,  2015,  2016,  0,     2017,  0,     2018,  0,     2019,  0,     2020,  0,     2021,  2022,  2023,  2024,
    0,     2026,  2027,  0,     0,     2028,  0,     2029,  2030,  2031,  2032,  2033,  2034,  2035,  0,     2036,
    0,     2037,  2038,  0,     0,     0,     2040,  2041,  2042,  0,     0,     2043,  2044,  0,     0,     2045,
    2046,  2047,  2048,  0,     2049,  2050,  2051,  0,     0,     2052,  2053,  0,     0,     2054,  2055,  0,
    2056,  2057,  0,     0,     2058,  2059,  0,     2060,  2061,  2062,  2063,  0,     0,     2064,  2065,  2066,
    0,     2067,  0,     0,     0,     0,     0,     0,     0,     2068,  0,     2069,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     2070,  2071,  2072,  2073,  2074,  2075,  2076,  0,
    0,     0,     0,     2077,  2078,  2079,  0,     2080,  2081,  2082,  0,     2083,  2084,  2085,  2086,  0,
    2087,  0,     2088,  2089,  2090,  0,     2091,  2092,  2093,  0,     2094,  0,     2095,  2096,  2097,  0,
    2098,  2099,  2100,  2101,  2102,  0,     0,     0,     0,     0,     2103,  2104,  0,     0,     2105,  2106,
    2107,  2108,  2109,  2110,  2111,  2112};

static const yytype_int16 yycheck[] = {
    21,   0,    49,   34,   619,  26,   0,    0,    654,  1035, 1075, 773,  0,    823,  0,    0,    21,   43,   204,
    0,    1044, 26,   828,  974,  901,  16,   11,   48,   675,  1340, 7,    181,  20,   24,   853,  20,   1388, 14,
    685,  1391, 189,  918,  1097, 48,   1321, 1705, 2330, 2331, 2314, 695,  199,  1403, 1039, 1405, 906,  1407, 654,
    12,   673,  1269, 1541, 931,  729,  730,  49,   1814, 1381, 734,  882,  1023, 1499, 2793, 1125, 1401, 1391, 2498,
    1387, 1184, 42,   3118, 3154, 780,  1306, 3163, 1154, 1155, 3376, 3423, 2636, 1597, 3210, 1286, 20,   2644, 3395,
    1558, 973,  3189, 1446, 3191, 977,  1066, 1743, 1173, 1381, 982,  3802, 610,  3847, 3468, 3841, 22,   989,  1323,
    1296, 3847, 3701, 3453, 905,  2959, 2960, 2549, 999,  34,   911,  2772, 17,   4058, 200,  2271, 776,  3811, 3746,
    920,  206,  1463, 1464, 4001, 2961, 4342, 4347, 1458, 3742, 987,  4373, 217,  3380, 3381, 3382, 3383, 3384, 3385,
    1660, 997,  2441, 2601, 3026, 3442, 0,    1777, 663,  2448, 4047, 4072, 183,  0,    1370, 1387, 3668, 2456, 1327,
    0,    167,  183,  33,   3674, 1602, 4571, 776,  2893, 0,    40,   3882, 0,    1613, 0,    3641, 39,   4563, 2302,
    0,    2300, 0,    0,    1070, 0,    0,    0,    183,  4294, 3155, 3034, 4338, 4570, 3673, 3590, 4679, 3713, 4681,
    0,    1143, 1144, 3796, 3797, 3798, 3799, 2639, 0,    0,    9,    58,   0,    11,   5036, 5037, 0,    871,  3799,
    4916, 9,    820,  2956, 3797, 3798, 9,    5,    1169, 48,   820,  5,    104,  1206, 22,   155,  4711, 4712, 5,
    22,   212,  125,  48,   5,    68,   80,   13,   5,    87,   154,  4909, 13,   5,    1075, 129,  37,   190,  191,
    3850, 31,   194,  5,    196,  18,   5,    135,  149,  37,   5,    154,  924,  5,    13,   5,    5,    35,   1267,
    3850, 174,  5109, 58,   5,    216,  25,   77,   219,  3019, 2718, 2956, 2720, 201,  11,   967,  22,   5,    5,
    154,  5,    209,  5,    29,   5,    4715, 154,  72,   109,  162,  218,  3120, 4,    3032, 97,   104,  154,  9,
    162,  160,  106,  123,  44,   4059, 58,   48,   162,  31,   60,   251,  163,  951,  136,  285,  11,   162,  4997,
    4998, 5,    1327, 3,    4,    5,    104,  104,  77,   9,    315,  9,    104,  1001, 0,    31,   331,  3019, 970,
    331,  31,   154,  36,   9,    22,   9,    60,   256,  286,  154,  154,  23,   121,  154,  5,    68,   22,   154,
    111,  167,  31,   174,  1254, 16,   31,   97,   1207, 5,    51,   174,  174,  52,   66,   174,  331,  148,  1045,
    174,  324,  60,   109,  109,  154,  216,  133,  34,   239,  104,  407,  239,  295,  25,   121,  1061, 1062, 1236,
    51,   51,   5,    405,  4,    290,  151,  28,   272,  9,    104,  1075, 354,  259,  5254, 619,  405,  4299, 144,
    1544, 1252, 251,  68,   133,  228,  1257, 1258, 11,   104,  84,   11,   42,   356,  366,  315,  4858, 3567, 79,
    1103, 134,  22,   151,  155,  1531, 1532, 11,   1062, 29,   1113, 66,   392,  1539, 36,   38,   4,    36,   396,
    493,  104,  9,    3591, 1126, 307,  187,  1508, 1129, 357,  241,  359,  673,  272,  1513, 508,  35,   59,   408,
    118,  492,  4969, 970,  175,  405,  66,   1111, 3736, 66,   135,  213,  99,   1702, 354,  658,  154,  1706, 2130,
    1708, 364,  398,  1711, 22,   1713, 4894, 669,  384,  159,  410,  29,   324,  510,  278,  4731, 239,  174,  1129,
    1742, 136,  192,  22,   322,  510,  188,  510,  510,  4770, 29,   506,  1358, 617,  173,  242,  1502, 621,  466,
    3841, 162,  1777, 1368, 354,  283,  216,  216,  506,  632,  162,  390,  319,  319,  1442, 1353, 1444, 1792, 1356,
    246,  305,  201,  280,  450,  510,  354,  68,   1561, 364,  364,  272,  506,  317,  246,  447,  193,  4992, 384,
    506,  3394, 283,  5414, 392,  506,  5000, 1529, 1530, 1808, 351,  1452, 477,  364,  1249, 401,  1538, 405,  388,
    4347, 506,  601,  1257, 1258, 104,  364,  4347, 376,  391,  339,  467,  1434, 5272, 510,  1437, 1438, 395,  68,
    1497, 467,  493,  4326, 506,  1419, 510,  368,  97,   127,  384,  1111, 506,  358,  1696, 1252, 493,  5300, 467,
    3069, 308,  695,  345,  346,  1249, 379,  484,  11,   386,  1610, 468,  508,  395,  4524, 472,  104,  654,  655,
    445,  482,  510,  506,  3749, 468,  451,  2290, 823,  510,  308,  308,  510,  384,  1666, 4565, 4377, 608,  510,
    315,  127,  612,  379,  709,  4025, 711,  386,  713,  305,  506,  1509, 599,  477,  719,  720,  721,  604,  333,
    629,  709,  700,  711,  506,  713,  600,  695,  1321, 4412, 502,  719,  505,  1703, 5184, 509,  4583, 4219, 3795,
    497,  498,  1314, 1712, 509,  509,  5122, 4229, 509,  2391, 1314, 4233, 509,  1380, 506,  5425, 693,  4040, 4195,
    507,  506,  493,  4328, 4329, 723,  506,  3982, 4218, 4135, 742,  506,  3037, 4338, 3039, 4328, 4329, 508,  504,
    4344, 506,  11,   508,  5131, 951,  4338, 695,  4274, 4059, 506,  1381, 4057, 506,  765,  739,  1741, 506,  1743,
    4344, 506,  772,  506,  506,  775,  776,  777,  936,  1753, 506,  506,  407,  1757, 812,  493,  507,  1672, 30,
    947,  5612, 1765, 1766, 812,  506,  506,  1681, 506,  351,  506,  1424, 497,  498,  1422, 1778, 1779, 814,  5289,
    5630, 5631, 493,  814,  814,  407,  405,  493,  1790, 814,  812,  814,  814,  502,  5034, 796,  814,  339,  1800,
    1769, 1770, 195,  497,  498,  497,  498,  4707, 493,  2326, 1829, 750,  493,  510,  4714, 342,  339,  497,  498,
    497,  498,  467,  465,  1008, 3147, 882,  1011, 827,  3687, 509,  467,  3418, 97,   5263, 773,  104,  800,  2336,
    3954, 251,  492,  510,  510,  104,  5255, 22,   5018, 8,    448,  18,   11,   451,  3001, 792,  506,  3000, 354,
    1503, 3849, 3341, 4991, 3730, 3344, 3345, 342,  392,  3348, 28,   868,  504,  870,  492,  3354, 508,  162,  73,
    815,  254,  97,   497,  498,  109,  256,  51,   104,  506,  774,  3346, 3347, 4045, 778,  2137, 364,  70,   136,
    1541, 75,   499,  500,  501,  502,  78,   1605, 1606, 3665, 104,  386,  3668, 97,   255,  195,  1709, 1710, 1422,
    392,  499,  500,  501,  502,  97,   1566, 77,   109,  885,  886,  4892, 104,  8,    105,  261,  11,   156,  26,
    27,   113,  261,  814,  163,  5,    146,  354,  5,    5353, 814,  883,  127,  83,   22,   104,  814,  1805, 154,
    121,  1636, 99,   482,  254,  44,   814,  187,  195,  814,  479,  814,  1647, 5204, 5205, 3717, 814,  3665, 814,
    814,  3668, 814,  814,  814,  1659, 5,    97,   316,  507,  18,   860,  106,  1630, 3746, 5416, 8,    255,  506,
    11,   1673, 261,  1644, 1503, 290,  4851, 4764, 4773, 4774, 187,  178,  5,    965,  482,  4773, 51,   4082, 95,
    261,  22,   272,  907,  908,  4664, 36,   18,   2330, 1075, 163,  255,  42,   167,  985,  986,  313,  506,  225,
    226,  227,  2290, 238,  257,  8,    195,  1062, 11,   104,  510,  5469, 979,  116,  135,  4775, 4776, 66,   1070,
    1009, 1075, 1070, 3746, 2513, 272,  2406, 154,  5,    3376, 1566, 4708, 153,  2278, 155,  2280, 241,  1003, 1004,
    1005, 1080, 269,  1082, 4806, 1084, 486,  1086, 197,  1088, 1089, 1090, 354,  1041, 1042, 1108, 1095, 228,  121,
    241,  231,  1014, 156,  354,  11,   270,  1631, 174,  506,  239,  257,  8,    104,  186,  11,   302,  1129, 364,
    497,  498,  499,  500,  501,  502,  239,  68,   4732, 68,   195,  36,   1137, 4737, 241,  121,  77,   1630, 347,
    1206, 1775, 324,  4746, 464,  4619, 506,  331,  4666, 506,  302,  4670, 354,  1157, 324,  4746, 4675, 308,  2494,
    4678, 371,  364,  66,   3466, 104,  8,    104,  157,  2344, 239,  174,  449,  354,  384,  5124, 504,  401,  342,
    364,  508,  1102, 390,  354,  344,  1188, 291,  347,  347,  1817, 4288, 5603, 195,  196,  257,  322,  510,  358,
    4552, 1208, 246,  2439, 510,  1206, 1125, 2972, 4583, 2429, 42,   1218, 5137, 392,  239,  1252, 5117, 384,  2852,
    2853, 1257, 1258, 1424, 2857, 75,   1232, 405,  104,  506,  328,  392,  104,  497,  498,  499,  500,  501,  502,
    246,  319,  195,  4349, 1249, 244,  493,  1252, 1253, 5082, 426,  427,  1257, 1258, 269,  320,  4555, 504,  257,
    506,  507,  508,  333,  510,  113,  246,  1299, 1300, 390,  1302, 1279, 317,  2904, 2905, 155,  1299, 1300, 507,
    1302, 239,  510,  4909, 5035, 5036, 5037, 308,  276,  302,  272,  269,  405,  4379, 4380, 157,  135,  104,  195,
    1051, 421,  104,  1299, 1300, 149,  1302, 257,  98,   195,  64,   331,  424,  1064, 106,  18,   364,  302,  422,
    331,  2679, 24,   397,  2852, 2853, 302,  1358, 396,  2857, 372,  506,  68,   506,  1817, 446,  5575, 1368, 22,
    68,   326,  272,  1316, 272,  170,  326,  457,  331,  174,  460,  1263, 2344, 386,  68,   506,  331,  268,  405,
    493,  494,  495,  5256, 497,  498,  499,  500,  501,  502,  104,  5608, 2695, 357,  257,  359,  355,  104,  2904,
    2905, 389,  4989, 1293, 1294, 1413, 1414, 364,  282,  212,  506,  177,  104,  20,   5261, 4272, 374,  271,  4245,
    158,  1479, 5615, 5273, 461,  272,  2689, 1434, 1317, 272,  1437, 1438, 2695, 4759, 40,   5352, 223,  510,  268,
    156,  5629, 4250, 83,   121,  488,  5362, 4255, 257,  5018, 270,  304,  149,  108,  5642, 5643, 5121, 116,  364,
    390,  364,  5018, 159,  493,  494,  495,  4571, 497,  498,  499,  500,  501,  502,  1644, 1450, 75,   1352, 174,
    68,   216,  246,  4966, 104,  4115, 336,  1396, 304,  510,  510,  4764, 1624, 326,  272,  4933, 366,  4820, 272,
    506,  1386, 5,    1634, 5417, 331,  1509, 2472, 1393, 75,   2449, 1457, 121,  3941, 5356, 200,  113,  104,  75,
    3947, 3948, 364,  4229, 355,  333,  364,  4233, 1581, 306,  254,  497,  498,  499,  500,  501,  502,  68,   335,
    132,  408,  127,  358,  194,  1597, 257,  1430, 5368, 113,  1433, 2488, 1523, 107,  508,  331,  3823, 405,  113,
    1465, 1466, 1467, 1468, 295,  5158, 107,  272,  116,  116,  118,  118,  2313, 2622, 272,  104,  32,   1705, 3841,
    497,  498,  499,  500,  501,  502,  2759, 1637, 1469, 272,  188,  4229, 4871, 506,  3035, 4233, 353,  354,  4877,
    269,  3041, 191,  1483, 144,  3724, 104,  1426, 1511, 1512, 1429, 1660, 1775, 5045, 144,  1583, 1519, 5049, 5050,
    149,  171,  1501, 311,  5,    1582, 5187, 5188, 241,  357,  136,  359,  5468, 171,  302,  4039, 497,  498,  499,
    500,  501,  502,  493,  494,  495,  96,   497,  498,  499,  500,  501,  502,  2852, 2853, 382,  2475, 259,  2857,
    1560, 112,  1478, 5497, 364,  331,  1482, 8,    510,  5483, 11,   364,  398,  99,   2631, 261,  213,  2438, 366,
    1608, 199,  270,  68,   163,  5272, 364,  213,  1587, 1588, 1589, 1590, 77,   4089, 272,  4091, 493,  494,  495,
    241,  497,  498,  499,  500,  501,  502,  306,  2904, 2905, 251,  251,  1672, 2711, 270,  1672, 8,    219,  253,
    11,   104,  1681, 239,  270,  1681, 2721, 1601, 104,  253,  2545, 2516, 1734, 331,  1682, 1609, 1684, 28,   1686,
    2524, 1688, 2526, 1690, 5,    167,  2326, 1694, 9,    199,  2330, 2331, 272,  1649, 8,    1724, 2513, 11,   2715,
    2606, 1724, 1724, 1658, 239,  1755, 1756, 1724, 342,  1724, 1724, 282,  1667, 1763, 358,  28,   1673, 1767, 1768,
    2535, 224,  405,  2705, 407,  106,  229,  1719, 504,  3034, 228,  239,  508,  261,  1783, 269,  1785, 108,  378,
    3044, 290,  424,  3,    1762, 5108, 4853, 358,  4059, 228,  0,    2393, 231,  2567, 1780, 407,  358,  26,   27,
    19,   392,  333,  2436, 1811, 446,  1813, 107,  316,  1780, 302,  5536, 2980, 5384, 8,    68,   457,  11,   5536,
    460,  1709, 1710, 268,  509,  77,   291,  269,  104,  364,  2659, 2660, 2661, 2662, 174,  28,   321,  1733, 1726,
    366,  3140, 364,  2671, 195,  324,  18,   2675, 106,  5564, 2444, 407,  24,   104,  268,  384,  1804, 243,  84,
    76,   197,  3505, 2349, 2691, 3,    1740, 5,    194,  322,  333,  2698, 313,  2821, 171,  114,  354,  272,  103,
    450,  3140, 1001, 96,   408,  492,  124,  3064, 322,  331,  5611, 5612, 331,  195,  5615, 5500, 4917, 5611, 4602,
    506,  5578, 5615, 390,  1625, 4309, 4310, 241,  477,  257,  5630, 5631, 126,  136,  1635, 2879, 392,  4738, 1639,
    4740, 331,  3543, 2886, 384,  1645, 1646, 2872, 156,  269,  405,  195,  510,  18,   5273, 3263, 5539, 5613, 5614,
    24,   492,  5001, 324,  197,  1061, 1665, 317,  385,  1854, 1914, 241,  2508, 5024, 121,  506,  5271, 184,  257,
    291,  4664, 11,   174,  302,  2908, 99,   4670, 179,  302,  179,  2763, 4675, 306,  354,  4678, 3572, 493,  3273,
    3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 241,  5,    421,  508,  2444, 9,    257,  144,  3045,
    331,  368,  289,  149,  4702, 2946, 4704, 4708, 4532, 338,  3494, 195,  2565, 306,  392,  3609, 4543, 224,  317,
    66,   317,  269,  229,  285,  2610, 2504, 5122, 405,  4664, 272,  4554, 60,   242,  243,  4670, 506,  167,  269,
    331,  4675, 121,  291,  4678, 3074, 1579, 2688, 4468, 4469, 368,  3643, 3644, 711,  712,  713,  302,  4,    716,
    717,  718,  158,  9,    250,  295,  1598, 356,  274,  726,  213,  5345, 368,  302,  368,  4708, 257,  405,  104,
    354,  2699, 3572, 302,  298,  3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 11,   325,  3,    116,
    315,  118,  228,  174,  321,  231,  302,  269,  2689, 313,  3105, 324,  253,  331,  2695, 57,   58,   2734, 405,
    324,  407,  36,   216,  398,  8,    142,  354,  11,   343,  223,  2699, 291,  5142, 506,  507,  331,  509,  255,
    201,  5190, 302,  354,  260,  303,  28,   432,  295,  3446, 352,  354,  3449, 66,   36,   269,  3643, 3644, 494,
    495,  42,   497,  498,  499,  500,  501,  502,  2734, 2610, 327,  3093, 331,  398,  76,   5263, 377,  154,  2871,
    325,  2873, 2874, 392,  84,   385,  66,   396,  388,  2966, 302,  392,  2973, 2151, 306,  364,  405,  269,  174,
    482,  322,  106,  158,  103,  405,  2782, 493,  494,  495,  354,  497,  498,  499,  500,  501,  502,  357,  4909,
    359,  331,  121,  241,  501,  506,  269,  126,  246,  506,  428,  508,  302,  431,  505,  246,  149,  302,  136,
    510,  251,  306,  2393, 506,  493,  494,  495,  149,  497,  498,  499,  500,  501,  502,  3968, 398,  169,  5302,
    456,  302,  368,  331,  216,  306,  2132, 283,  331,  169,  901,  357,  2384, 359,  259,  2141, 368,  473,  4966,
    2391, 181,  297,  179,  304,  269,  916,  4909, 918,  195,  196,  331,  3367, 3368, 3369, 170,  132,  382,  405,
    174,  1426, 223,  506,  1429, 421,  321,  2340, 3121, 144,  2970, 506,  2345, 5564, 149,  2348, 20,   2299, 2300,
    302,  507,  195,  196,  510,  493,  494,  495,  223,  497,  498,  499,  500,  501,  502,  319,  5416, 40,   2370,
    212,  244,  239,  241,  241,  140,  405,  4966, 246,  3503, 2782, 2925, 3774, 269,  507,  1478, 3167, 510,  191,
    1482, 2318, 504,  3750, 506,  2354, 370,  2356, 379,  2973, 241,  315,  316,  244,  356,  2318, 380,  3122, 505,
    4,    2266, 213,  274,  510,  9,    2415, 257,  302,  21,   260,  3572, 5469, 289,  3575, 3576, 3577, 3578, 3579,
    3580, 3581, 3582, 3583, 3584, 155,  2265, 2435, 2267, 298,  5600, 255,  357,  5449, 359,  81,   260,  3428, 331,
    397,  3994, 4732, 4824, 253,  177,  405,  4737, 407,  3439, 3609, 506,  261,  508,  183,  269,  324,  3375, 382,
    1078, 501,  2468, 1081, 169,  1083, 506,  1085, 508,  1087, 198,  368,  21,   1091, 432,  507,  2313, 26,   510,
    3623, 3061, 3062, 210,  269,  74,   3643, 3644, 354,  335,  302,  3034, 507,  398,  3037, 510,  3039, 2421, 315,
    316,  5158, 3044, 2507, 1116, 1117, 4187, 2511, 3227, 2405, 504,  377,  506,  3091, 508,  489,  490,  4872, 302,
    385,  331,  3730, 388,  315,  316,  2529, 482,  392,  2386, 2387, 2388, 3307, 4730, 3782, 48,   507,  2540, 2395,
    510,  2397, 405,  2399, 2400, 3528, 3994, 321,  85,   331,  4764, 2553, 506,  5603, 3094, 3329, 3330, 3815, 3816,
    201,  3597, 3598, 2564, 3091, 428,  2516, 506,  431,  5158, 2571, 405,  433,  407,  2524, 378,  2526, 5580, 5581,
    5,    3535, 9,    507,  3389, 10,   510,  3725, 506,  116,  312,  118,  106,  18,   456,  319,  2264, 405,  507,
    407,  319,  510,  3140, 357,  507,  359,  76,   510,  3853, 507,  35,   473,  510,  255,  507,  142,  4810, 510,
    507,  5272, 155,  510,  77,   315,  316,  497,  498,  499,  500,  501,  502,  1794, 356,  2464, 1797, 149,  510,
    356,  4603, 4604, 4605, 4606, 506,  4189, 4190, 506,  48,   38,   183,  5299, 3532, 398,  493,  494,  495,  125,
    497,  498,  499,  500,  501,  502,  2493, 198,  508,  423,  3438, 181,  2522, 510,  2619, 258,  258,  3248, 2593,
    210,  507,  507,  197,  510,  510,  405,  2601, 407,  5272, 255,  405,  507,  407,  8,    510,  364,  11,   3094,
    507,  149,  3234, 510,  3236, 4911, 3611, 236,  504,  158,  507,  507,  508,  510,  432,  507,  255,  3604, 510,
    432,  241,  423,  132,  36,   8,    246,  2797, 11,   177,  42,   251,  239,  2803, 241,  144,  3727, 258,  85,
    2586, 149,  507,  205,  206,  510,  28,   2658, 2594, 38,   423,  4189, 4190, 2599, 36,   66,   507,  219,  507,
    510,  42,   510,  2681, 357,  507,  359,  482,  510,  3298, 216,  2645, 482,  3747, 3748, 132,  197,  2681, 507,
    2770, 4180, 510,  2692, 153,  191,  66,   312,  144,  499,  2699, 507,  506,  149,  510,  506,  319,  506,  506,
    2457, 508,  154,  507,  2793, 3536, 510,  405,  213,  407,  269,  507,  155,  60,   510,  3342, 260,  507,  4046,
    66,   510,  2641, 2925, 510,  2481, 2763, 2734, 3390, 507,  3392, 77,   510,  3416, 4065, 356,  507,  191,  154,
    510,  2682, 183,  507,  507,  3407, 3234, 3409, 3236, 48,   253,  3376, 405,  154,  407,  3994, 370,  198,  261,
    104,  213,  106,  5043, 507,  170,  509,  380,  507,  174,  210,  510,  507,  507,  4065, 510,  510,  2717, 3390,
    2719, 3392, 125,  507,  193,  507,  510,  405,  510,  407,  507,  195,  196,  510,  2956, 170,  2995, 236,  507,
    174,  509,  356,  253,  358,  506,  508,  3465, 3690, 212,  817,  261,  819,  3298, 132,  432,  507,  255,  357,
    510,  359,  195,  196,  3445, 507,  507,  144,  510,  510,  368,  507,  149,  507,  510,  319,  510,  331,  409,
    212,  181,  379,  244,  506,  382,  3466, 3840, 174,  3842, 3679, 2908, 507,  137,  508,  510,  257,  3465, 3478,
    3342, 3019, 506,  3682, 3683, 3684, 507,  174,  482,  510,  241,  3527, 507,  244,  356,  510,  191,  312,  255,
    2814, 507,  378,  507,  510,  507,  510,  257,  510,  3880, 260,  507,  137,  506,  510,  174,  4099, 4100, 4101,
    213,  137,  507,  507,  241,  510,  510,  507,  507,  246,  510,  510,  507,  255,  149,  510,  2908, 137,  2951,
    2952, 2953, 507,  302,  507,  510,  405,  510,  407,  507,  269,  2922, 510,  86,   378,  3551, 4691, 507,  335,
    507,  510,  253,  510,  211,  2971, 507,  2973, 283,  510,  261,  2941, 106,  255,  432,  386,  3571, 386,  110,
    3808, 4189, 4190, 297,  3951, 506,  2710, 2956, 3445, 335,  3046, 3022, 368,  507,  2999, 3000, 510,  250,  2973,
    130,  44,   398,  2726, 2727, 2987, 3599, 2730, 201,  507,  2987, 2987, 510,  2736, 4615, 4234, 2987, 4236, 2987,
    2987, 150,  507,  3478, 319,  510,  4626, 482,  321,  507,  507,  288,  510,  510,  3088, 49,   165,  60,   507,
    507,  507,  510,  510,  510,  86,   405,  31,   4647, 4648, 3641, 507,  506,  3019, 510,  4246, 3022, 507,  60,
    241,  510,  5308, 356,  409,  66,   506,  2950, 507,  379,  110,  510,  241,  38,   507,  2795, 77,   510,  38,
    4269, 507,  5327, 269,  510,  96,   125,  507,  149,  373,  510,  130,  3923, 378,  507,  507,  486,  510,  510,
    3551, 507,  398,  398,  510,  104,  507,  106,  507,  510,  507,  510,  150,  510,  405,  153,  407,  74,   506,
    4615, 3571, 246,  3091, 137,  493,  494,  495,  165,  497,  498,  499,  500,  501,  502,  507,  507,  507,  510,
    510,  510,  3932, 432,  3730, 3935, 3936, 137,  319,  319,  3599, 5393, 137,  4647, 4648, 493,  494,  495,  354,
    497,  498,  499,  500,  501,  502,  409,  289,  505,  176,  137,  137,  507,  507,  511,  510,  510,  507,  3225,
    507,  510,  510,  510,  255,  319,  181,  356,  356,  507,  507,  3237, 510,  510,  3641, 482,  507,  137,  137,
    510,  3100, 18,   3102, 3103, 3104, 507,  319,  24,   510,  137,  507,  507,  246,  510,  510,  4849, 3376, 4156,
    224,  506,  254,  255,  356,  229,  137,  507,  137,  4166, 510,  137,  3195, 255,  137,  239,  137,  354,  405,
    405,  407,  407,  506,  31,   211,  356,  150,  149,  241,  64,   149,  506,  255,  246,  5,    5,    506,  289,
    4074, 3841, 149,  506,  506,  279,  268,  432,  432,  506,  4435, 4436, 506,  4438, 5,    405,  506,  407,  506,
    5,    506,  506,  506,  506,  506,  3246, 506,  506,  5,    506,  5,    506,  283,  506,  3336, 506,  405,  506,
    407,  406,  506,  114,  432,  506,  506,  307,  297,  266,  121,  506,  5564, 124,  506,  506,  506,  506,  193,
    482,  482,  506,  4104, 506,  439,  432,  506,  506,  510,  31,   87,   3320, 3321, 3322, 3323, 211,  3325, 4582,
    510,  31,   455,  3300, 342,  506,  506,  128,  4932, 3320, 3321, 3322, 3323, 128,  3325, 149,  482,  149,  331,
    253,  251,  364,  508,  364,  364,  319,  319,  3324, 364,  364,  179,  3077, 364,  364,  77,   319,  137,  482,
    3365, 3366, 506,  323,  481,  3370, 3341, 255,  255,  3344, 3345, 3376, 3505, 3348, 379,  208,  507,  246,  364,
    3354, 364,  481,  481,  506,  481,  385,  364,  255,  4019, 4020, 356,  179,  251,  506,  364,  439,  168,  506,
    77,   510,  174,  3376, 269,  137,  386,  3410, 386,  4615, 98,   364,  364,  455,  239,  364,  241,  3390, 48,
    3392, 4626, 48,   364,  364,  259,  356,  251,  364,  4475, 364,  37,   4023, 4932, 37,   259,  364,  510,  50,
    364,  364,  3494, 4647, 4648, 331,  269,  195,  364,  506,  255,  255,  409,  405,  3174, 506,  3508, 395,  3419,
    3179, 3431, 506,  31,   30,   20,   255,  137,  241,  506,  4059, 104,  386,  83,   3452, 137,  4065, 397,  219,
    3530, 302,  251,  241,  305,  306,  31,   405,  506,  3452, 149,  31,   201,  137,  320,  3464, 3465, 4294, 137,
    3476, 506,  462,  137,  386,  137,  250,  386,  137,  4541, 364,  331,  154,  245,  3476, 401,  3396, 506,  506,
    3399, 362,  233,  423,  233,  507,  11,   3653, 331,  136,  510,  362,  364,  140,  145,  162,  3415, 506,  154,
    3536, 3665, 507,  168,  3668, 366,  168,  506,  191,  199,  506,  3429, 4478, 371,  4480, 333,  256,  386,  4484,
    263,  510,  4487, 3440, 4489, 76,   48,   172,  510,  507,  364,  364,  389,  510,  3451, 319,  4023, 386,  246,
    319,  506,  199,  3459, 3297, 199,  246,  506,  368,  3488, 3303, 364,  3491, 364,  364,  398,  321,  4180, 201,
    246,  255,  38,   338,  97,   208,  97,   4890, 272,  364,  272,  272,  358,  4195, 272,  405,  281,  36,   510,
    364,  356,  436,  437,  364,  319,  3746, 302,  302,  169,  125,  328,  291,  3651, 364,  364,  195,  239,  31,
    241,  8,    3538, 195,  11,   195,  195,  195,  254,  4463, 30,   3668, 504,  504,  364,  3528, 386,  506,  364,
    386,  493,  3657, 3658, 3659, 3660, 137,  3627, 480,  269,  36,   151,  251,  364,  364,  149,  42,   4261, 3796,
    3797, 3798, 3799, 328,  398,  137,  506,  3841, 506,  405,  354,  31,   255,  4475, 255,  166,  149,  166,  3651,
    31,   137,  66,   255,  302,  255,  149,  174,  306,  4323, 174,  174,  310,  3665, 510,  328,  3668, 19,   316,
    160,  510,  5040, 4533, 4534, 409,  323,  510,  230,  405,  255,  4307, 451,  510,  331,  3850, 48,   250,  368,
    3777, 201,  423,  4932, 340,  154,  354,  273,  398,  507,  507,  423,  348,  154,  265,  507,  507,  4195, 507,
    402,  507,  507,  476,  13,   13,   507,  507,  364,  130,  506,  510,  507,  3477, 256,  256,  402,  3481, 3482,
    392,  3484, 384,  3486, 3487, 4358, 309,  493,  48,   213,  507,  258,  3495, 507,  255,  177,  3662, 3663, 3664,
    255,  507,  4959, 507,  507,  506,  4833, 400,  137,  409,  364,  170,  4969, 507,  506,  174,  506,  506,  8,
    4428, 185,  11,   246,  127,  4841, 4842, 4398, 3529, 507,  506,  364,  364,  425,  506,  259,  506,  195,  196,
    137,  506,  478,  137,  506,  137,  435,  3,    36,   177,  354,  432,  213,  431,  42,   212,  274,  274,  478,
    383,  3841, 4804, 506,  454,  364,  364,  506,  506,  221,  4475, 3902, 364,  221,  3905, 4307, 506,  221,  364,
    66,   470,  319,  364,  3768, 3769, 3770, 3771, 4456, 244,  4831, 364,  3841, 3872, 364,  319,  364,  241,  331,
    364,  4525, 319,  257,  5138, 3883, 319,  137,  364,  37,   3872, 5063, 483,  364,  483,  4682, 4059, 483,  195,
    195,  21,   195,  4689, 506,  504,  322,  3874, 231,  4358, 3877, 507,  3879, 213,  4696, 507,  3883, 493,  68,
    510,  507,  38,   304,  97,   373,  507,  130,  510,  506,  254,  507,  255,  31,   4753, 54,   3932, 493,  364,
    3935, 3936, 163,  319,  386,  386,  319,  319,  258,  67,   510,  4398, 135,  135,  256,  195,  504,  241,  361,
    127,  3955, 154,  11,   81,   335,  149,  510,  507,  170,  397,  507,  3848, 174,  58,   154,  507,  3941, 4828,
    3973, 3974, 4026, 507,  3947, 3948, 506,  3950, 261,  3887, 3888, 3984, 507,  5317, 154,  195,  196,  402,  5165,
    506,  4937, 162,  506,  119,  510,  491,  507,  507,  256,  507,  373,  4456, 212,  149,  506,  131,  31,   364,
    386,  386,  185,  3984, 3985, 3986, 3987, 48,   356,  373,  506,  137,  9,    364,  364,  364,  319,  151,  364,
    4619, 364,  4976, 156,  319,  506,  506,  244,  507,  507,  5074, 5046, 507,  149,  5047, 48,   99,   356,  149,
    66,   257,  137,  97,   373,  195,  407,  4107, 507,  195,  4059, 199,  505,  287,  405,  125,  125,  328,  4027,
    409,  507,  149,  505,  180,  71,   506,  506,  3,    4055, 506,  356,  507,  510,  506,  364,  328,  510,  506,
    3992, 510,  4059, 507,  4055, 4062, 5059, 159,  5061, 4261, 97,   154,  3981, 223,  4229, 195,  195,  4104, 4233,
    195,  195,  116,  48,   507,  154,  506,  296,  507,  4709, 403,  403,  4000, 507,  510,  497,  498,  499,  500,
    501,  502,  506,  335,  198,  264,  198,  48,   506,  257,  164,  507,  251,  507,  373,  507,  507,  364,  506,
    493,  507,  4735, 4029, 507,  154,  506,  405,  4893, 4123, 66,   179,  11,   4783, 193,  356,  510,  246,  246,
    286,  4953, 48,   356,  4619, 28,   493,  493,  507,  364,  137,  195,  4764, 510,  477,  510,  453,  362,  8,
    156,  5227, 11,   154,  505,  386,  31,   174,  386,  122,  401,  405,  272,  405,  319,  154,  506,  4793, 4328,
    4329, 325,  182,  506,  328,  258,  154,  4833, 36,   4338, 154,  506,  506,  296,  42,   4344, 391,  198,  507,
    341,  272,  255,  507,  506,  5014, 5015, 506,  5172, 507,  5174, 354,  507,  404,  297,  364,  506,  360,  485,
    66,   506,  506,  485,  405,  22,   23,   364,  506,  149,  27,   373,  246,  111,  246,  32,   33,   34,   438,
    36,   31,   222,  39,   40,   177,  42,   4229, 44,   506,  287,  4233, 506,  136,  507,  506,  31,   398,  4286,
    507,  48,   316,  4280, 259,  316,  4735, 507,  48,   510,  4257, 4258, 4267, 497,  498,  499,  500,  501,  502,
    4280, 48,   31,   507,  506,  506,  506,  4267, 31,   507,  506,  510,  356,  11,   386,  239,  356,  255,  356,
    5,    507,  4906, 328,  143,  5354, 287,  4911, 60,   258,  60,   117,  391,  390,  4211, 4212, 4213, 4214, 296,
    510,  31,   506,  506,  154,  294,  356,  507,  4393, 170,  4933, 402,  507,  174,  149,  122,  510,  179,  255,
    255,  4405, 4355, 405,  506,  31,   31,   506,  258,  258,  4333, 506,  440,  4336, 4086, 195,  196,  506,  4355,
    507,  506,  48,   4094, 4095, 507,  446,  507,  477,  109,  4971, 315,  434,  212,  5,    384,  507,  5394, 506,
    315,  133,  193,  507,  140,  4396, 4397, 471,  4527, 17,   4401, 4402, 255,  28,   463,  506,  213,  482,  259,
    136,  189,  190,  191,  192,  315,  194,  244,  196,  459,  287,  199,  48,   201,  246,  506,  204,  482,  453,
    506,  257,  209,  438,  434,  212,  506,  506,  213,  216,  477,  218,  219,  1600, 471,  3252, 1481, 493,  493,
    4804, 2643, 2973, 908,  493,  5415, 4906, 3167, 5045, 814,  874,  3840, 5049, 5050, 4782, 2558, 3359, 4370, 1258,
    506,  3950, 5066, 4831, 5227, 4884, 4017, 4890, 4475, 4518, 4870, 3068, 2751, 4766, 4933, 5306, 4708, 4454, 4455,
    907,  5388, 5241, 5240, 5336, 5118, 3072, 4765, 4741, 3804, 3222, 3850, 4468, 4469, 4500, 5611, 4773, 5473, 5535,
    4475, 5563, 5519, 335,  4479, 5619, 5131, 5546, 5475, 5567, 5648, 4500, 4007, 2634, 4971, 2634, 3834, 3190, 2628,
    1584, 3430, 5403, 5606, 5495, 4863, 3375, 4061, 4437, 5495, 5347, 4795, 4664, 5214, 5324, 1574, 4798, 26,   4670,
    5189, 4709, 4107, 4451, 4675, 1104, 4988, 4678, 4602, 5586, 4063, 3044, 5138, 4065, 2331, 3301, 655,  5594, 5367,
    1114, 5527, 791,  2266, 8,    1077, 1673, 11,   2267, 2987, 4044, 5607, 5474, 4268, 804,  3722, 2992, 4549, 4708,
    5511, 5155, 2316, 5514, 5515, 4305, 5517, 3007, 5294, 5176, 1308, 5186, 5045, 36,   2290, 2315, 5049, 5050, 4764,
    42,   5563, 5227, 5565, 4732, 5194, 5195, 1285, 3019, 4737, 1309, 4581, 3027, 1311, 3668, 4219, 4235, 4967, 4746,
    3665, 5158, 5157, 3723, 5553, 66,   1316, 5556, 5557, 4793, 5559, 2609, 796,  3626, 4603, 4604, 4605, 4606, 4935,
    3613, 5297, 4359, 4360, 4361, 4362, 5606, 5298, 5285, 5374, 4553, 2922, 2995, 4702, 2823, 4704, 3619, 3718, 2920,
    5619, -1,   -1,   -1,   2134, -1,   -1,   4792, 1219, -1,   494,  495,  -1,   497,  498,  499,  500,  501,  502,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   0,    -1,   -1,   -1,   -1,   -1,   -1,   4585, -1,   -1,   4670, -1,   -1,   -1,   -1,   4675, -1,   -1,
    4678, -1,   -1,   -1,   -1,   -1,   -1,   4849, -1,   -1,   -1,   -1,   -1,   -1,   170,  -1,   -1,   -1,   174,
    -1,   -1,   -1,   -1,   4693, 4457, 4458, -1,   -1,   5194, 5195, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   195,  196,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4764, -1,   -1,   -1,   -1,   -1,   212,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   84,   4909, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4764, -1,   -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   4710, 4711, 4712, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   257,  -1,   -1,   -1,   -1,   -1,   599,  -1,   -1,   -1,   -1,   604,  -1,
    132,  -1,   608,  -1,   610,  -1,   612,  4805, -1,   4807, 4966, -1,   144,  619,  -1,   -1,   622,  149,  -1,
    -1,   970,  -1,   154,  629,  -1,   -1,   4824, 159,  -1,   -1,   162,  -1,   164,  -1,   4767, 4833, -1,   -1,
    -1,   4837, 4587, 4839, 4589, 4590, -1,   4843, -1,   4845, -1,   4847, -1,   -1,   658,  -1,   4601, -1,   -1,
    663,  -1,   191,  -1,   -1,   5018, 669,  -1,   335,  -1,   673,  4874, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   213,  4874, -1,   690,  -1,   -1,   4875, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   253,  4976, -1,   -1,   -1,   -1,   -1,   -1,   261,  -1,   -1,   -1,
    739,  -1,   -1,   -1,   -1,   -1,   5095, 272,  -1,   4852, -1,   750,  751,  -1,   5564, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   8,    1111, -1,   11,   -1,   771,  -1,   773,  774,  -1,   -1,
    -1,   778,  -1,   4966, 4908, -1,   309,  -1,   -1,   -1,   -1,   -1,   4893, 4976, -1,   792,  -1,   36,   -1,
    796,  -1,   -1,   5186, 42,   -1,   802,  -1,   -1,   -1,   -1,   -1,   5158, -1,   -1,   -1,   -1,   -1,   -1,
    815,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   66,   -1,   -1,   827,  354,  493,  494,  495,  -1,   497,
    498,  499,  500,  501,  502,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   378,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   868,  -1,   870,  -1,
    -1,   -1,   -1,   5067, 402,  -1,   404,  405,  -1,   -1,   -1,   883,  -1,   885,  886,  -1,   130,  -1,   -1,
    -1,   -1,   -1,   -1,   4999, -1,   -1,   -1,   -1,   -1,   -1,   -1,   5253, -1,   -1,   432,  907,  908,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   5116, -1,   -1,   -1,   -1,   -1,   5272, -1,   -1,   -1,   -1,   -1,   170,
    -1,   5116, -1,   174,  5060, -1,   5062, 936,  -1,   -1,   -1,   -1,   0,    -1,   -1,   -1,   -1,   -1,   947,
    -1,   -1,   476,  951,  -1,   195,  196,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   965,  -1,
    -1,   -1,   5319, 212,  -1,   -1,   -1,   -1,   -1,   -1,   1321, 504,  979,  -1,   507,  508,  509,  4925, 985,
    986,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   244,  1003, 1004,
    1005, -1,   -1,   1008, 1009, -1,   1011, -1,   -1,   -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   84,   5299, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5227, -1,   1381, -1,   1039, -1,   1041, 1042,
    -1,   -1,   -1,   -1,   -1,   8,    4990, -1,   11,   -1,   -1,   -1,   -1,   -1,   5184, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1066, -1,   28,   -1,   -1,   -1,   -1,   132,  -1,   5267, 36,   -1,   1422, -1,   -1,
    -1,   42,   -1,   -1,   144,  -1,   -1,   -1,   -1,   149,  -1,   -1,   335,  -1,   154,  -1,   1097, 1098, -1,
    159,  -1,   1102, 162,  1104, 164,  66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   21,
    5311, 5312, 5248, 1122, 5064, -1,   1125, -1,   -1,   1128, -1,   -1,   -1,   191,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   1141, -1,   -1,   -1,   -1,   -1,   -1,   5348, -1,   -1,   -1,   -1,   -1,   213,  -1,   -1,
    -1,   -1,   1503, -1,   -1,   5348, -1,   -1,   68,   -1,   5367, 5360, 5361, 1170, -1,   5367, 5367, -1,   -1,
    -1,   5564, 5367, 5427, 5367, 5367, 5532, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5415, 253,
    98,   -1,   1541, -1,   -1,   -1,   5328, 261,  1203, 1204, -1,   1206, -1,   -1,   -1,   170,  -1,   -1,   272,
    174,  -1,   119,  -1,   -1,   -1,   -1,   -1,   1566, 5415, -1,   1225, -1,   5427, 131,  -1,   -1,   -1,   5427,
    5427, -1,   195,  196,  -1,   5427, -1,   5427, 5427, -1,   -1,   -1,   -1,   -1,   -1,   151,  5471, 309,  -1,
    212,  156,  -1,   497,  498,  499,  500,  501,  502,  -1,   -1,   1263, -1,   -1,   1266, -1,   5395, -1,   5492,
    -1,   -1,   5495, -1,   -1,   -1,   -1,   -1,   -1,   -1,   241,  5474, 5505, 244,  -1,   1630, -1,   -1,   -1,
    -1,   -1,   -1,   1293, 1294, 354,  -1,   257,  -1,   202,  260,  1301, -1,   5495, -1,   1305, 1306, -1,   -1,
    -1,   -1,   5503, -1,   -1,   -1,   -1,   1316, 1317, 1318, 378,  223,  -1,   -1,   -1,   -1,   -1,   -1,   5527,
    -1,   -1,   -1,   -1,   5527, 5527, 1334, -1,   -1,   -1,   5527, -1,   5527, 5527, 5564, 402,  -1,   404,  405,
    -1,   -1,   -1,   5454, 5543, 5544, -1,   -1,   5547, 5548, -1,   5550, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1370, -1,   5564, 432,  -1,   335,  31,   -1,   -1,   -1,   -1,   -1,   -1,   286,  5606,
    -1,   1386, 1387, -1,   -1,   -1,   -1,   -1,   1393, -1,   50,   1396, -1,   -1,   5621, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   5599, -1,   -1,   313,  -1,   -1,   -1,   5606, -1,   319,  476,  -1,   -1,   -1,   -1,   325,
    5645, 1424, -1,   -1,   -1,   83,   5621, 1430, -1,   -1,   1433, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    5383, -1,   -1,   504,  -1,   -1,   507,  508,  509,  354,  -1,   356,  -1,   -1,   -1,   1457, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1465, 1466, 1467, 1468, 1469, 373,  -1,   -1,   1817, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   136,  -1,   1483, -1,   140,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   398,  -1,   -1,   -1,
    1499, -1,   1501, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1511, 1512, -1,   -1,   -1,   -1,   172,
    -1,   1519, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   493,  494,  495,  -1,
    497,  498,  499,  500,  501,  502,  -1,   -1,   -1,   201,  507,  -1,   -1,   510,  -1,   -1,   208,  0,    -1,
    -1,   -1,   -1,   -1,   1560, -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   24,   -1,   26,   27,   -1,   -1,   239,  -1,   241,  1587, 1588, 1589, 1590, -1,   -1,   -1,
    -1,   41,   -1,   -1,   -1,   -1,   -1,   1601, -1,   -1,   -1,   -1,   -1,   -1,   -1,   1609, -1,   -1,   -1,
    1613, -1,   61,   -1,   63,   64,   -1,   -1,   -1,   -1,   69,   1624, 71,   -1,   -1,   -1,   -1,   -1,   1631,
    -1,   -1,   1634, -1,   82,   -1,   84,   -1,   -1,   -1,   -1,   -1,   1644, -1,   -1,   -1,   -1,   1649, -1,
    306,  -1,   -1,   100,  310,  -1,   103,  1658, -1,   -1,   316,  -1,   -1,   -1,   -1,   1666, 1667, 323,  115,
    0,    117,  -1,   -1,   -1,   121,  331,  -1,   -1,   -1,   -1,   127,  -1,   -1,   -1,   340,  -1,   -1,   -1,
    -1,   136,  -1,   138,  348,  -1,   -1,   1696, -1,   144,  -1,   -1,   -1,   -1,   1703, -1,   1705, -1,   -1,
    -1,   1709, 1710, -1,   1712, 159,  -1,   -1,   -1,   -1,   -1,   1719, -1,   -1,   -1,   -1,   8,    -1,   1726,
    11,   31,   -1,   -1,   -1,   -1,   1733, 1734, -1,   -1,   1737, -1,   -1,   -1,   1741, -1,   1743, 28,   400,
    -1,   50,   -1,   404,  1750, -1,   36,   1753, 84,   -1,   -1,   1757, 42,   -1,   -1,   -1,   -1,   -1,   -1,
    1765, 1766, -1,   214,  215,  425,  -1,   -1,   1773, 220,  1775, 1776, 1777, 1778, 1779, 83,   -1,   66,   -1,
    -1,   -1,   232,  1787, 1788, -1,   1790, 2135, 1792, 1793, -1,   -1,   1796, 243,  1798, 454,  1800, 1801, 132,
    -1,   1804, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   144,  470,  -1,   -1,   -1,   149,  -1,   -1,
    -1,   -1,   154,  -1,   -1,   -1,   1828, 159,  -1,   -1,   162,  136,  164,  281,  -1,   140,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   8,    293,  -1,   11,   -1,   -1,   298,  299,  1854, 301,  -1,   -1,   -1,   -1,
    306,  191,  -1,   -1,   -1,   311,  28,   -1,   314,  172,  -1,   -1,   318,  -1,   36,   -1,   -1,   323,  324,
    -1,   42,   -1,   -1,   213,  -1,   331,  170,  -1,   334,  -1,   174,  -1,   -1,   -1,   -1,   -1,   342,  -1,
    201,  -1,   -1,   -1,   -1,   -1,   66,   208,  -1,   -1,   354,  -1,   1910, 195,  196,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   253,  -1,   371,  -1,   -1,   212,  -1,   -1,   261,  -1,   -1,   -1,   381,
    239,  -1,   241,  1939, -1,   387,  272,  -1,   -1,   -1,   392,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   241,  -1,   405,  244,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   257,
    1974, -1,   260,  -1,   -1,   309,  -1,   -1,   2326, -1,   -1,   -1,   2330, 2331, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   8,    -1,   -1,   11,   -1,   -1,   306,  -1,   -1,   -1,   310,  170,  -1,   -1,   -1,
    174,  316,  -1,   -1,   462,  28,   -1,   -1,   323,  -1,   -1,   -1,   354,  36,   -1,   -1,   331,  -1,   -1,
    42,   -1,   195,  196,  -1,   -1,   340,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   348,  -1,   -1,   378,  -1,
    212,  335,  -1,   -1,   -1,   66,   -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   402,  -1,   404,  405,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   257,  -1,   400,  260,  -1,   2444, 404,  432,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 425,  2123, -1,   -1,
    -1,   -1,   -1,   -1,   8,    -1,   2132, 11,   2134, 2135, -1,   -1,   -1,   -1,   -1,   2141, -1,   -1,   -1,
    -1,   476,  -1,   -1,   -1,   -1,   454,  -1,   -1,   -1,   -1,   -1,   -1,   36,   170,  -1,   -1,   -1,   174,
    42,   -1,   -1,   470,  -1,   -1,   -1,   -1,   -1,   335,  504,  -1,   -1,   507,  508,  509,  -1,   -1,   -1,
    -1,   195,  196,  -1,   -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   212,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  8,    -1,
    -1,   11,   -1,   -1,   -1,   510,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   28,
    -1,   -1,   -1,   -1,   -1,   -1,   257,  36,   -1,   260,  -1,   -1,   130,  42,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   2265, 2610, 2267, -1,   -1,   -1,   2271, -1,   -1,   -1,   -1,   -1,   66,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2290, -1,   170,  -1,   -1,   -1,   174,
    -1,   -1,   2299, 2300, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2313, 18,   -1,
    -1,   195,  196,  2319, 24,   2321, -1,   -1,   335,  -1,   -1,   -1,   -1,   -1,   -1,   493,  494,  495,  212,
    497,  498,  499,  500,  501,  502,  -1,   -1,   -1,   8,    2689, -1,   11,   510,  2349, -1,   2695, -1,   -1,
    2354, -1,   2356, -1,   -1,   -1,   64,   -1,   -1,   -1,   28,   -1,   244,  -1,   -1,   -1,   -1,   -1,   36,
    2373, -1,   -1,   -1,   -1,   42,   257,  -1,   170,  -1,   -1,   2384, 174,  2386, 2387, 2388, -1,   -1,   2391,
    -1,   2393, -1,   2395, -1,   2397, -1,   2399, 2400, -1,   66,   -1,   -1,   2405, 195,  196,  -1,   -1,   114,
    -1,   -1,   -1,   -1,   -1,   -1,   121,  -1,   -1,   124,  -1,   -1,   212,  -1,   -1,   -1,   -1,   -1,   2429,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2782, 2439, -1,   -1,   -1,   -1,   -1,   8,    -1,   -1,   11,
    -1,   2450, -1,   241,  -1,   -1,   244,  -1,   335,  2458, -1,   -1,   -1,   -1,   -1,   2464, 28,   -1,   -1,
    257,  -1,   -1,   260,  -1,   36,   -1,   179,  -1,   -1,   -1,   42,   -1,   -1,   493,  494,  495,  -1,   497,
    498,  499,  500,  501,  502,  8,    2493, -1,   11,   -1,   2497, 2498, 510,  -1,   -1,   -1,   66,   2504, 2505,
    170,  -1,   -1,   -1,   174,  -1,   28,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   36,   -1,   2522, -1,   -1,
    -1,   42,   -1,   -1,   -1,   -1,   195,  196,  -1,   -1,   239,  -1,   241,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   335,  251,  212,  2549, 66,   2551, 2552, -1,   -1,   259,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   269,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   241,  -1,   -1,   244,  -1,
    -1,   -1,   -1,   -1,   2586, -1,   -1,   -1,   -1,   -1,   -1,   257,  2594, -1,   260,  -1,   302,  2599, -1,
    305,  306,  -1,   -1,   -1,   -1,   170,  2608, -1,   -1,   174,  -1,   -1,   -1,   2959, 2960, 2961, -1,   497,
    498,  499,  500,  501,  502,  -1,   -1,   331,  -1,   -1,   -1,   -1,   195,  196,  -1,   -1,   2636, -1,   -1,
    2639, -1,   2641, -1,   2643, -1,   -1,   2646, -1,   -1,   212,  -1,   -1,   -1,   -1,   170,  -1,   -1,   -1,
    174,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   371,  -1,   -1,   -1,   335,  2672, -1,   -1,   -1,   -1,
    -1,   241,  195,  196,  244,  2682, 2683, -1,   389,  -1,   -1,   -1,   -1,   3034, -1,   -1,   3037, 257,  3039,
    212,  260,  -1,   -1,   3044, -1,   -1,   -1,   493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  -1,
    2715, -1,   2717, 2718, 2719, 2720, 510,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   436,  437,
    -1,   -1,   -1,   -1,   -1,   2739, -1,   257,  -1,   -1,   260,  -1,   -1,   -1,   -1,   -1,   3094, 2751, -1,
    -1,   8,    -1,   -1,   11,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    335,  -1,   28,   -1,   480,  -1,   -1,   -1,   -1,   -1,   36,   -1,   -1,   -1,   -1,   -1,   42,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3140, 2797, -1,   -1,   -1,   -1,   -1,   2803, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   66,   -1,   2814, -1,   -1,   -1,   -1,   335,  -1,   2821, 2822, -1,   -1,   -1,   -1,   2827, -1,
    493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  -1,   -1,   -1,   8,    -1,   -1,   11,   510,  -1,
    -1,   -1,   -1,   -1,   2852, 2853, -1,   -1,   -1,   2857, -1,   -1,   -1,   -1,   28,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   36,   2871, 2872, 2873, 2874, -1,   42,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2885,
    -1,   -1,   2888, -1,   3234, -1,   3236, -1,   2894, 2895, -1,   -1,   -1,   -1,   66,   -1,   -1,   -1,   2904,
    2905, -1,   -1,   2908, -1,   -1,   -1,   -1,   -1,   -1,   -1,   170,  -1,   -1,   -1,   174,  2921, -1,   2923,
    -1,   2925, -1,   2927, -1,   -1,   493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  -1,   195,  196,
    -1,   507,  -1,   2946, 18,   -1,   -1,   2950, -1,   -1,   24,   3298, -1,   2956, -1,   212,  2959, 2960, 2961,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2976, 493,  494,  495,  -1,
    497,  498,  499,  500,  501,  502,  241,  -1,   -1,   244,  507,  2992, 64,   -1,   -1,   -1,   -1,   3342, -1,
    -1,   -1,   -1,   257,  170,  -1,   260,  3007, 174,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3019, -1,   8,    3022, -1,   11,   -1,   3026, -1,   -1,   195,  196,  -1,   3376, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   28,   -1,   114,  -1,   -1,   212,  -1,   -1,   36,   121,  -1,   -1,   124,  -1,   42,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3067, -1,   3069, -1,   -1,   -1,   -1,   3074, 241,
    -1,   -1,   244,  66,   -1,   335,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   257,  -1,   -1,   260,
    -1,   -1,   -1,   -1,   -1,   3100, 3445, 3102, 3103, 3104, -1,   -1,   -1,   179,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3466, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3478, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   239,  335,  241,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   251,  -1,   -1,   170,  -1,   -1,   -1,   174,  259,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   269,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3551, 195,
    196,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   212,  -1,   3571,
    -1,   -1,   -1,   302,  -1,   -1,   305,  306,  -1,   -1,   -1,   493,  494,  495,  -1,   497,  498,  499,  500,
    501,  502,  -1,   -1,   -1,   -1,   507,  241,  3599, -1,   244,  -1,   -1,   331,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   8,    -1,   257,  11,   -1,   260,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   28,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   36,   3641, -1,   -1,   371,  -1,   42,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   389,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   66,   493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  -1,   -1,   -1,   -1,   507,
    -1,   3687, -1,   -1,   3346, 3347, 335,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   436,  437,  8,    -1,   -1,   11,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3730, 28,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   36,   3396, 3397, -1,
    3399, -1,   42,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   480,  -1,   -1,   -1,   -1,   -1,   3415, 31,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   66,   -1,   970,  3428, 3429, 170,  -1,   -1,   -1,   174,  50,   -1,
    -1,   -1,   3439, 3440, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3451, -1,   -1,   -1,   195,
    196,  -1,   -1,   3459, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   83,   -1,   -1,   -1,   212,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3488, -1,   -1,   3491, -1,   -1,
    -1,   -1,   -1,   3841, -1,   -1,   -1,   241,  -1,   -1,   244,  3505, 493,  494,  495,  -1,   497,  498,  499,
    500,  501,  502,  -1,   257,  -1,   -1,   507,  136,  -1,   -1,   -1,   140,  -1,   -1,   3528, 170,  -1,   -1,
    -1,   174,  -1,   -1,   -1,   -1,   3538, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3548, -1,   -1,
    -1,   -1,   -1,   195,  196,  -1,   172,  3558, -1,   -1,   -1,   -1,   -1,   3564, -1,   3566, -1,   1111, -1,
    -1,   212,  3572, -1,   -1,   3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, -1,   201,  -1,   3588,
    3589, -1,   -1,   -1,   208,  -1,   335,  -1,   -1,   -1,   -1,   241,  -1,   -1,   244,  3604, -1,   -1,   -1,
    3608, 3609, -1,   -1,   -1,   3613, -1,   -1,   257,  -1,   3618, 260,  -1,   -1,   -1,   -1,   239,  -1,   241,
    -1,   3628, -1,   -1,   3631, -1,   3633, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3642, 3643, 3644, -1,
    -1,   -1,   3648, -1,   -1,   3651, -1,   -1,   -1,   3655, -1,   -1,   -1,   -1,   -1,   -1,   3662, 3663, 3664,
    3665, -1,   -1,   3668, 3669, -1,   -1,   -1,   3673, 3674, -1,   -1,   -1,   -1,   4023, 3680, -1,   -1,   -1,
    -1,   -1,   3686, 3687, -1,   -1,   -1,   306,  -1,   -1,   335,  310,  -1,   -1,   -1,   -1,   -1,   316,  -1,
    -1,   -1,   -1,   -1,   -1,   323,  -1,   -1,   -1,   3712, -1,   -1,   4059, 331,  -1,   3718, -1,   -1,   4065,
    3722, -1,   3724, 340,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   348,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3746, 3747, 3748, -1,   3750, -1,   -1,   493,  494,  495,  -1,   497,  498,  499,
    500,  501,  502,  -1,   -1,   -1,   -1,   -1,   3768, 3769, 3770, 3771, -1,   -1,   -1,   -1,   -1,   -1,   1321,
    -1,   -1,   -1,   -1,   -1,   -1,   400,  -1,   -1,   -1,   404,  405,  8,    -1,   -1,   11,   -1,   3796, 3797,
    3798, 3799, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   8,    425,  28,   11,   -1,   -1,   -1,   -1,
    -1,   -1,   36,   -1,   -1,   -1,   -1,   3824, 42,   -1,   -1,   -1,   28,   -1,   -1,   -1,   -1,   -1,   -1,
    4180, 36,   1381, 454,  -1,   -1,   -1,   42,   3844, -1,   -1,   -1,   3848, 66,   3850, 4195, 493,  494,  495,
    470,  497,  498,  499,  500,  501,  502,  -1,   -1,   -1,   -1,   507,  66,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   1422, -1,   -1,   -1,   -1,   -1,   -1,   -1,   3887, 3888, 8,    -1,   -1,   11,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4245, -1,   -1,   -1,   -1,   4250, -1,   -1,   28,   -1,   4255,
    -1,   -1,   -1,   -1,   -1,   36,   -1,   3919, -1,   -1,   8,    42,   -1,   11,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   66,   -1,   -1,
    36,   -1,   -1,   170,  -1,   -1,   42,   174,  -1,   -1,   1503, -1,   -1,   4307, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   170,  -1,   -1,   -1,   174,  -1,   -1,   195,  196,  66,   3981, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3992, -1,   3994, 212,  195,  196,  1541, -1,   4000, -1,   -1,   -1,   -1,   -1,   4006,
    -1,   -1,   -1,   -1,   -1,   -1,   212,  4358, -1,   -1,   4017, -1,   -1,   -1,   -1,   -1,   1566, 241,  -1,
    -1,   244,  -1,   4029, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4039, 257,  -1,   241,  260,  130,
    244,  4046, -1,   -1,   -1,   -1,   170,  -1,   -1,   4398, 174,  -1,   -1,   257,  -1,   -1,   260,  -1,   -1,
    -1,   -1,   4066, 4067, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   -1,   -1,   -1,   -1,
    -1,   170,  -1,   -1,   1630, 174,  4089, -1,   4091, -1,   212,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   4456, -1,   -1,   -1,   -1,   -1,   335,  -1,   -1,
    -1,   241,  -1,   -1,   244,  212,  4127, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   335,  -1,   257,  -1,
    -1,   260,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4156, -1,   244,
    -1,   -1,   -1,   -1,   189,  -1,   -1,   4166, -1,   -1,   -1,   -1,   257,  -1,   199,  200,  -1,   -1,   4177,
    4178, -1,   206,  -1,   4182, -1,   -1,   -1,   -1,   -1,   -1,   4189, 4190, 217,  -1,   -1,   4194, -1,   -1,
    -1,   -1,   -1,   4200, 4201, -1,   -1,   4204, -1,   -1,   4207, 4208, -1,   -1,   4211, 4212, 4213, 4214, -1,
    335,  -1,   4218, 4219, -1,   4221, 4222, -1,   -1,   4225, -1,   -1,   -1,   4229, -1,   -1,   -1,   4233, -1,
    -1,   -1,   -1,   4582, 4239, -1,   -1,   -1,   -1,   -1,   4245, -1,   -1,   -1,   335,  4250, -1,   -1,   -1,
    -1,   4255, -1,   -1,   -1,   -1,   -1,   4261, -1,   -1,   -1,   -1,   -1,   -1,   4268, -1,   -1,   -1,   4272,
    -1,   1817, 4619, 493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  4286, -1,   -1,   4289, 507,  -1,
    -1,   -1,   493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  -1,   -1,   -1,   -1,   507,  4309, 4310,
    -1,   -1,   -1,   8,    -1,   -1,   11,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4328, 4329,
    -1,   -1,   -1,   -1,   28,   -1,   -1,   -1,   4338, -1,   -1,   -1,   36,   -1,   4344, -1,   -1,   -1,   42,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   4356, -1,   -1,   -1,   -1,   -1,   -1,   -1,   8,    -1,   -1,   11,
    -1,   -1,   4370, -1,   66,   -1,   493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  -1,   -1,   -1,
    -1,   507,  -1,   -1,   4735, 36,   -1,   4738, -1,   4740, -1,   42,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   497,  498,  499,  500,  501,  502,  -1,   -1,   -1,   4764, -1,   66,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4437, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   4451, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   170,  -1,   -1,   -1,   174,  -1,
    -1,   -1,   -1,   -1,   130,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    195,  196,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   8,    -1,   -1,   11,   -1,   4516, -1,   212,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   170,  4527, -1,   -1,   174,  28,   4532, -1,   -1,   -1,   -1,   -1,   -1,
    36,   -1,   4541, -1,   -1,   -1,   42,   -1,   241,  -1,   -1,   244,  195,  196,  4553, 4554, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4906, 257,  -1,   -1,   260,  4911, 212,  66,   4570, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4585, -1,   -1,   -1,   4933, -1,   617,  -1,   -1,   -1,   621,
    -1,   -1,   -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   632,  -1,   -1,   -1,   -1,   -1,   -1,   257,  -1,
    4615, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4626, 4971, 654,  -1,   -1,   -1,   658,  -1,
    -1,   -1,   -1,   -1,   4638, -1,   -1,   335,  -1,   669,  670,  -1,   -1,   4647, 4648, 675,  -1,   4651, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   685,  -1,   -1,   -1,   -1,   4664, -1,   4666, -1,   -1,   695,  4670, -1,
    -1,   170,  -1,   4675, -1,   174,  4678, 4679, -1,   4681, -1,   4683, 4684, -1,   -1,   -1,   -1,   -1,   -1,
    335,  -1,   -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   5045, -1,   -1,   -1,   5049, 5050, -1,   4708, 4709,
    4710, 4711, 4712, -1,   -1,   212,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   4732, -1,   -1,   -1,   -1,   4737, 4738, -1,   4740, -1,   -1,   -1,   241,  771,  4746, 244,
    -1,   -1,   776,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   257,  -1,   -1,   260,  -1,   -1,   4766,
    4767, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   802,  -1,   -1,   -1,   -1,   -1,   -1,   2326, -1,   -1,
    -1,   2330, 2331, -1,   -1,   -1,   4792, 4793, 5138, -1,   -1,   -1,   -1,   493,  494,  495,  -1,   497,  498,
    499,  500,  501,  502,  -1,   -1,   -1,   -1,   507,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   335,  -1,   -1,   4841, 4842,
    -1,   -1,   -1,   -1,   -1,   -1,   4849, 5194, 5195, 4852, 497,  498,  499,  500,  501,  502,  -1,   -1,   -1,
    -1,   4863, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4872, -1,   -1,   -1,   4876, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   8,    -1,   -1,   11,   -1,   -1,   4890, -1,   -1,   4893, -1,   -1,   -1,   -1,   924,  -1,
    -1,   2444, -1,   -1,   28,   -1,   -1,   -1,   4908, 4909, 936,  -1,   36,   -1,   -1,   -1,   -1,   -1,   42,
    -1,   -1,   947,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4930, -1,   4932, -1,   -1,   4935, -1,   4937,
    -1,   -1,   -1,   -1,   66,   -1,   970,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    4957, -1,   -1,   -1,   -1,   4962, -1,   -1,   -1,   4966, -1,   -1,   4969, -1,   -1,   -1,   -1,   -1,   1001,
    4976, -1,   -1,   -1,   -1,   4981, 1008, -1,   -1,   1011, 18,   -1,   -1,   -1,   -1,   -1,   24,   -1,   -1,
    -1,   493,  494,  495,  4999, 497,  498,  499,  500,  501,  502,  -1,   -1,   -1,   -1,   507,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   5018, 1045, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   64,
    -1,   -1,   1061, 1062, -1,   -1,   -1,   1066, -1,   -1,   -1,   -1,   -1,   170,  -1,   -1,   1075, 174,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   5059, 5060, 5061, 5062, -1,   -1,   -1,   -1,   2610, -1,   -1,   -1,
    195,  196,  -1,   5074, -1,   -1,   1103, -1,   -1,   -1,   -1,   114,  -1,   -1,   1111, -1,   1113, 212,  121,
    -1,   -1,   124,  -1,   -1,   5095, -1,   -1,   -1,   -1,   1126, -1,   -1,   1129, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   5114, 1141, -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   5131, -1,   257,  -1,   -1,   260,  -1,   -1,   18,   -1,   -1,   -1,   -1,   1170, 24,   2689,
    179,  -1,   -1,   -1,   -1,   2695, -1,   -1,   5155, -1,   -1,   5158, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   5172, -1,   5174, -1,   5176, 1203, 1204, -1,   1206, -1,   -1,   -1,   5184,
    64,   5186, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1225, 5200, -1,   -1,   -1,
    -1,   -1,   -1,   239,  -1,   241,  -1,   335,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   251,  5564, -1,   -1,
    1249, -1,   -1,   -1,   259,  -1,   -1,   -1,   1257, 1258, -1,   -1,   114,  -1,   269,  -1,   2782, 1266, 1267,
    121,  -1,   -1,   124,  -1,   -1,   5248, -1,   -1,   -1,   -1,   5253, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   302,  -1,   5272, 305,  306,  1301, -1,   -1,   -1,   1305,
    1306, -1,   -1,   -1,   5284, 5285, -1,   -1,   -1,   5289, -1,   -1,   -1,   8,    5294, 1321, 11,   5297, -1,
    331,  179,  1327, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   28,   -1,   -1,   -1,   -1,
    -1,   5319, -1,   36,   -1,   -1,   -1,   -1,   -1,   42,   5328, -1,   -1,   -1,   -1,   8,    -1,   -1,   11,
    -1,   -1,   371,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   66,   -1,   28,   5354, 1381,
    -1,   389,  -1,   -1,   239,  36,   241,  -1,   -1,   -1,   -1,   42,   5368, 493,  494,  495,  251,  497,  498,
    499,  500,  501,  502,  -1,   259,  -1,   -1,   507,  -1,   5385, 8,    -1,   -1,   11,   269,  66,   -1,   -1,
    -1,   5395, 1422, -1,   -1,   -1,   -1,   -1,   -1,   -1,   436,  437,  28,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   36,   -1,   -1,   -1,   -1,   -1,   42,   -1,   -1,   302,  -1,   -1,   305,  306,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   66,   -1,   -1,   -1,   480,  -1,   -1,
    -1,   331,  1479, 5454, 170,  -1,   -1,   -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    8,    -1,   -1,   11,   -1,   -1,   -1,   1503, -1,   -1,   195,  196,  -1,   5483, -1,   -1,   -1,   -1,   -1,
    -1,   28,   3034, 371,  -1,   3037, 170,  3039, 212,  36,   174,  -1,   3044, -1,   -1,   42,   -1,   -1,   -1,
    -1,   -1,   389,  -1,   -1,   -1,   -1,   1541, -1,   -1,   -1,   -1,   195,  196,  -1,   -1,   -1,   -1,   241,
    -1,   66,   244,  -1,   -1,   5532, -1,   -1,   1561, -1,   212,  -1,   -1,   1566, -1,   257,  -1,   -1,   260,
    5546, -1,   170,  -1,   -1,   3094, 174,  -1,   -1,   1581, -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   241,  -1,   -1,   244,  -1,   1597, -1,   195,  196,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   257,  -1,
    -1,   260,  5586, -1,   -1,   -1,   212,  -1,   -1,   -1,   5594, -1,   -1,   3140, 1624, -1,   -1,   480,  -1,
    -1,   1630, -1,   -1,   5607, 1634, -1,   1636, 1637, -1,   -1,   -1,   -1,   -1,   -1,   -1,   241,  335,  1647,
    244,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   170,  1659, 1660, 257,  174,  -1,   260,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   1673, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   195,  196,  -1,
    335,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   212,  -1,   -1,   -1,   -1,
    1705, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3234, -1,   3236, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   -1,   335,  -1,   1741, -1,
    1743, -1,   257,  -1,   -1,   260,  -1,   1750, -1,   -1,   1753, -1,   -1,   -1,   1757, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   1765, 1766, -1,   -1,   8,    -1,   -1,   11,   1773, -1,   -1,   1776, 1777, 1778, 1779, -1,
    3298, -1,   -1,   -1,   -1,   -1,   1787, 1788, 28,   1790, -1,   1792, 1793, -1,   -1,   1796, 36,   1798, -1,
    1800, 1801, -1,   42,   493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  -1,   -1,   -1,   1817, 507,
    -1,   -1,   -1,   -1,   335,  -1,   3342, -1,   66,   1828, 1829, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  -1,   -1,   -1,
    -1,   507,  3376, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   8,    -1,   -1,   11,   -1,   -1,
    -1,   -1,   493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  -1,   -1,   28,   1910, 507,  -1,   32,
    -1,   -1,   -1,   36,   -1,   -1,   -1,   -1,   -1,   42,   -1,   -1,   -1,   -1,   3445, -1,   -1,   170,  -1,
    -1,   -1,   174,  -1,   -1,   -1,   1939, -1,   -1,   -1,   -1,   -1,   -1,   -1,   66,   -1,   3466, -1,   -1,
    -1,   -1,   -1,   -1,   195,  196,  -1,   -1,   -1,   3478, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   212,  1974, -1,   -1,   -1,   -1,   -1,   -1,   493,  494,  495,  -1,   497,  498,  499,  500,  501,
    502,  8,    -1,   112,  11,   507,  -1,   -1,   -1,   -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,
    -1,   -1,   28,   -1,   -1,   50,   -1,   -1,   -1,   257,  36,   -1,   260,  -1,   -1,   -1,   42,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3551, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   8,    -1,
    83,   11,   66,   -1,   170,  -1,   -1,   3571, 174,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   28,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   36,   -1,   -1,   195,  196,  -1,   42,   -1,   -1,   3599, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   212,  -1,   -1,   335,  -1,   -1,   -1,   136,  -1,   -1,   66,
    140,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 241,
    2123, 3641, 244,  -1,   -1,   -1,   -1,   -1,   -1,   149,  -1,   2134, 2135, 172,  154,  257,  -1,   -1,   260,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   170,  -1,   -1,   -1,   174,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   208,  -1,   -1,   -1,   -1,   -1,   195,  196,
    -1,   8,    -1,   -1,   11,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   212,  -1,   -1,   -1,
    -1,   -1,   28,   -1,   239,  -1,   241,  -1,   170,  -1,   36,   -1,   174,  -1,   3730, -1,   42,   335,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   195,  196,  -1,   -1,   -1,
    -1,   -1,   66,   257,  -1,   -1,   260,  -1,   -1,   -1,   -1,   -1,   212,  -1,   -1,   -1,   -1,   493,  494,
    495,  -1,   497,  498,  499,  500,  501,  502,  -1,   -1,   505,  386,  -1,   -1,   306,  2271, 308,  -1,   310,
    -1,   -1,   -1,   241,  -1,   316,  244,  -1,   -1,   -1,   -1,   -1,   323,  -1,   -1,   2290, -1,   -1,   -1,
    257,  331,  -1,   260,  -1,   2299, 2300, -1,   -1,   -1,   340,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   348,
    -1,   -1,   -1,   -1,   280,  335,  -1,   -1,   148,  -1,   -1,   3841, -1,   2326, -1,   -1,   -1,   2330, 2331,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2340, -1,   -1,   170,  2344, 2345, -1,   174,  2348, 18,   -1,
    -1,   -1,   -1,   -1,   24,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   400,  -1,   -1,   -1,   195,  196,
    2370, -1,   335,  2373, 493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  2384, 212,  349,  -1,   -1,
    425,  -1,   2391, -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   241,  2415, -1,   244,  454,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   257,  -1,   -1,   260,  470,  2435, 2436, -1,   -1,   -1,   -1,   -1,   -1,   -1,   2444, 114,
    -1,   -1,   -1,   -1,   -1,   278,  121,  -1,   -1,   124,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2467, 2468, -1,   -1,   -1,   2472, -1,   -1,   -1,   493,  494,  495,  -1,   497,  498,  499,  500,
    501,  502,  -1,   -1,   -1,   -1,   -1,   -1,   8,    -1,   -1,   11,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   4023, 2507, 335,  -1,   179,  2511, 28,   -1,   -1,   31,   -1,   -1,   -1,   -1,   36,   -1,
    -1,   -1,   -1,   -1,   42,   -1,   -1,   2529, 493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  2540,
    -1,   4059, -1,   -1,   -1,   -1,   -1,   4065, -1,   66,   -1,   -1,   2553, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   2564, 8,    -1,   -1,   11,   -1,   239,  2571, 241,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   251,  -1,   -1,   28,   -1,   -1,   -1,   -1,   259,  -1,   -1,   36,   -1,   -1,   -1,   -1,
    -1,   42,   269,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   2608, -1,   2610, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2631, -1,   302,  -1,   -1,
    305,  306,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   170,
    -1,   -1,   -1,   174,  -1,   -1,   -1,   331,  4180, -1,   -1,   493,  494,  495,  -1,   497,  498,  499,  500,
    501,  502,  -1,   -1,   4195, 195,  196,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2689, -1,   -1,   -1,
    -1,   -1,   2695, 212,  -1,   -1,   2699, -1,   -1,   371,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   389,  -1,   -1,   -1,   -1,   241,  -1,   170,  244,  -1,   -1,
    174,  -1,   -1,   2734, -1,   -1,   -1,   -1,   2739, -1,   257,  -1,   -1,   260,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   195,  196,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   436,  437,
    212,  2770, -1,   -1,   -1,   -1,   -1,   8,    -1,   -1,   11,   -1,   -1,   2782, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4307, -1,   -1,   2793, -1,   -1,   28,   2797, 241,  31,   -1,   244,  -1,   2803, 36,   -1,   -1,
    -1,   -1,   -1,   42,   480,  -1,   -1,   257,  -1,   -1,   260,  -1,   335,  -1,   2821, 2822, -1,   -1,   -1,
    -1,   2827, -1,   -1,   -1,   -1,   275,  -1,   66,   -1,   -1,   -1,   -1,   -1,   -1,   4358, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   2852, 2853, -1,   -1,   -1,   2857, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   2871, 2872, 2873, 2874, -1,   -1,   -1,   -1,   2879, -1,   4398, -1,
    -1,   -1,   2885, 2886, -1,   2888, -1,   -1,   -1,   335,  -1,   2894, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2904, 2905, -1,   -1,   2908, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,
    2921, -1,   2923, -1,   -1,   24,   2927, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   170,  4456,
    -1,   -1,   174,  -1,   -1,   -1,   2946, -1,   -1,   -1,   -1,   49,   -1,   -1,   -1,   -1,   2956, -1,   -1,
    2959, 2960, 2961, -1,   195,  196,  -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,   2973, -1,   -1,   2976, 493,
    494,  495,  212,  497,  498,  499,  500,  501,  502,  -1,   -1,   -1,   8,    -1,   2992, 11,   18,   -1,   -1,
    -1,   96,   -1,   24,   -1,   -1,   -1,   -1,   -1,   -1,   3007, -1,   241,  28,   -1,   244,  -1,   -1,   -1,
    114,  -1,   36,   3019, -1,   -1,   -1,   121,  42,   257,  124,  -1,   260,  -1,   -1,   -1,   -1,   -1,   3034,
    -1,   -1,   3037, -1,   3039, 64,   -1,   -1,   -1,   3044, -1,   3046, -1,   66,   -1,   493,  494,  495,  -1,
    497,  498,  499,  500,  501,  502,  -1,   3061, 3062, -1,   -1,   -1,   -1,   3067, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   176,  -1,   -1,   179,  -1,   -1,   -1,   -1,   -1,   -1,   3088, -1,   114,  3091,
    -1,   -1,   3094, -1,   -1,   121,  -1,   -1,   124,  -1,   4619, 335,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   224,  -1,   -1,   -1,
    -1,   229,  -1,   -1,   -1,   -1,   154,  -1,   -1,   -1,   3140, 239,  -1,   241,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   170,  251,  -1,   179,  174,  -1,   -1,   -1,   -1,   259,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   268,  269,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3189, 3190, 3191, -1,   -1,   212,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   302,  -1,
    -1,   305,  306,  307,  -1,   -1,   -1,   200,  -1,   239,  -1,   241,  4735, 206,  -1,   -1,   -1,   241,  -1,
    3225, 244,  251,  -1,   -1,   217,  -1,   -1,   331,  3234, 259,  3236, 3237, -1,   257,  -1,   -1,   260,  -1,
    342,  269,  -1,   4764, 3248, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   493,  494,
    495,  -1,   497,  498,  499,  500,  501,  502,  -1,   -1,   371,  -1,   -1,   -1,   -1,   302,  -1,   -1,   305,
    306,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   389,  -1,   -1,   -1,   -1,   -1,   -1,   3298, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   331,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   335,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3336, -1,   436,
    437,  -1,   -1,   3342, -1,   -1,   -1,   -1,   371,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   389,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3375, 3376,
    -1,   -1,   -1,   -1,   -1,   480,  -1,   -1,   -1,   -1,   -1,   -1,   4906, 3390, -1,   3392, -1,   4911, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3407, -1,   3409, -1,   -1,   436,  437,  -1,
    -1,   4933, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3445, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4971, -1,   480,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3465, 3466, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   493,  494,  495,  3478, 497,  498,  499,  500,  501,  502,  -1,   -1,   8,    -1,   -1,   11,
    -1,   -1,   -1,   3494, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3505, -1,   28,   3508, -1,
    31,   -1,   -1,   -1,   -1,   36,   -1,   -1,   -1,   -1,   -1,   42,   -1,   -1,   -1,   -1,   -1,   3527, 5045,
    -1,   3530, -1,   5049, 5050, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   66,   -1,   -1,
    3548, -1,   -1,   3551, -1,   -1,   -1,   -1,   -1,   -1,   3558, -1,   -1,   -1,   -1,   -1,   3564, -1,   3566,
    -1,   -1,   -1,   -1,   3571, 3572, -1,   -1,   3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, -1,
    -1,   -1,   3588, 3589, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3599, -1,   -1,   -1,   -1,   3604,
    -1,   -1,   -1,   3608, 3609, -1,   3611, -1,   3613, -1,   -1,   -1,   -1,   3618, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3628, -1,   617,  3631, -1,   3633, 621,  -1,   -1,   -1,   -1,   -1,   -1,   3641, 3642,
    3643, 3644, 632,  -1,   -1,   3648, 170,  -1,   3651, -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   8,
    -1,   -1,   11,   3665, -1,   654,  3668, -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   5194, 5195, -1,   3680,
    28,   -1,   670,  31,   -1,   3686, 3687, 675,  36,   -1,   212,  -1,   -1,   -1,   42,   -1,   -1,   685,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   695,  -1,   -1,   -1,   3712, -1,   -1,   -1,   -1,   -1,   3718,
    66,   241,  -1,   -1,   244,  3724, -1,   -1,   -1,   -1,   -1,   3730, -1,   -1,   -1,   -1,   -1,   257,  -1,
    -1,   260,  -1,   -1,   -1,   -1,   -1,   -1,   3746, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3777, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   776,  -1,   -1,   -1,   -1,   -1,
    -1,   3796, 3797, 3798, 3799, -1,   -1,   -1,   -1,   -1,   8,    -1,   -1,   11,   -1,   -1,   -1,   -1,   -1,
    335,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   18,   170,  -1,   28,   -1,   174,  24,   -1,   -1,   -1,   -1,
    36,   3834, -1,   -1,   -1,   -1,   42,   3840, 3841, 3842, -1,   -1,   -1,   -1,   -1,   195,  196,  3850, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   66,   -1,   212,  -1,   -1,   64,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3880, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   3902, -1,   -1,   3905, -1,   -1,   -1,
    -1,   257,  -1,   -1,   260,  -1,   -1,   -1,   -1,   114,  -1,   -1,   -1,   -1,   -1,   -1,   121,  -1,   -1,
    124,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   924,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3951, 200,  -1,   -1,   -1,   -1,   -1,   206,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   170,  -1,   217,  -1,   174,  493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  -1,   179,  -1,
    -1,   -1,   -1,   335,  -1,   -1,   -1,   195,  196,  3994, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   212,  -1,   -1,   -1,   -1,   1001, -1,   -1,   -1,   -1,   4019, 4020, -1,   -1,
    4023, -1,   -1,   4026, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   241,  -1,   -1,   244,
    -1,   239,  -1,   241,  -1,   5564, -1,   -1,   -1,   -1,   -1,   -1,   257,  251,  -1,   260,  1045, 4059, -1,
    -1,   -1,   259,  -1,   4065, 4066, 4067, -1,   -1,   -1,   -1,   -1,   269,  1061, 1062, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1075, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   302,  4107, -1,   305,  306,  -1,   -1,   18,   -1,   -1,   1103, -1,
    -1,   24,   -1,   -1,   -1,   -1,   -1,   -1,   1113, 4127, -1,   -1,   -1,   -1,   335,  -1,   -1,   331,  -1,
    -1,   -1,   1126, -1,   -1,   1129, -1,   -1,   -1,   493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,
    4156, -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,   4166, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    371,  -1,   4177, 4178, -1,   4180, -1,   4182, -1,   -1,   -1,   -1,   -1,   -1,   4189, 4190, -1,   -1,   389,
    4194, 4195, -1,   -1,   -1,   -1,   4200, 4201, -1,   -1,   4204, -1,   -1,   4207, -1,   114,  -1,   -1,   -1,
    -1,   -1,   -1,   121,  -1,   -1,   124,  -1,   4221, -1,   -1,   -1,   -1,   -1,   -1,   -1,   4229, -1,   -1,
    -1,   4233, -1,   -1,   -1,   -1,   -1,   -1,   436,  437,  -1,   -1,   -1,   4245, -1,   -1,   -1,   -1,   4250,
    -1,   -1,   -1,   -1,   4255, -1,   -1,   -1,   -1,   -1,   -1,   1249, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    1257, 1258, 18,   -1,   179,  -1,   -1,   -1,   24,   -1,   1267, -1,   -1,   -1,   480,  -1,   -1,   -1,   -1,
    4289, 493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  -1,   -1,   -1,   49,   -1,   -1,   -1,   4307,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   4323, -1,   -1,   -1,
    -1,   4328, 4329, 970,  -1,   -1,   -1,   239,  -1,   241,  -1,   4338, -1,   1327, -1,   -1,   -1,   4344, -1,
    251,  -1,   -1,   4349, 96,   -1,   -1,   -1,   259,  -1,   -1,   -1,   4358, -1,   -1,   -1,   -1,   -1,   269,
    -1,   -1,   -1,   114,  617,  -1,   -1,   -1,   621,  -1,   121,  -1,   -1,   124,  -1,   -1,   -1,   -1,   -1,
    632,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4393, -1,   -1,   -1,   302,  4398, -1,   305,  306,  -1,
    -1,   -1,   4405, 654,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    670,  -1,   -1,   -1,   331,  675,  4428, -1,   176,  -1,   -1,   179,  -1,   -1,   -1,   685,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   695,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4456, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   371,  -1,   -1,   -1,   -1,   1111, -1,   -1,   -1,   4475, -1,   -1,   224,
    -1,   -1,   -1,   -1,   229,  389,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   1479, 239,  -1,   241,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   251,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   259,  -1,   -1,   4516,
    -1,   -1,   -1,   -1,   -1,   268,  269,  -1,   -1,   -1,   4527, 776,  -1,   -1,   436,  437,  -1,   18,   -1,
    -1,   -1,   -1,   -1,   24,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   302,  -1,   -1,   305,  306,  307,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    1561, 480,  -1,   -1,   -1,   -1,   64,   -1,   4582, -1,   -1,   331,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   1581, -1,   342,  -1,   -1,   -1,   -1,   -1,   4602, -1,   -1,   -1,   -1,   -1,   -1,   -1,   1597, -1,
    -1,   -1,   -1,   4615, -1,   -1,   -1,   4619, -1,   -1,   -1,   -1,   -1,   371,  4626, -1,   -1,   -1,   114,
    -1,   -1,   -1,   -1,   -1,   -1,   121,  4638, -1,   124,  -1,   -1,   389,  -1,   -1,   -1,   4647, 4648, 1636,
    1637, 4651, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1647, -1,   -1,   -1,   4664, -1,   -1,   -1,   -1,
    -1,   4670, -1,   1659, 1660, -1,   4675, 924,  -1,   4678, -1,   -1,   1321, -1,   4683, 4684, -1,   1673, -1,
    -1,   -1,   436,  437,  -1,   -1,   -1,   179,  -1,   -1,   -1,   -1,   -1,   -1,   4702, -1,   4704, -1,   -1,
    -1,   4708, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   4732, -1,   480,  4735, -1,   4737, 4738, -1,   4740, 1381, -1,   -1,   -1,
    -1,   4746, -1,   -1,   -1,   -1,   -1,   -1,   1001, -1,   239,  -1,   241,  -1,   -1,   -1,   -1,   -1,   -1,
    4764, -1,   -1,   251,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   259,  -1,   -1,   -1,   -1,   -1,   -1,   1422,
    4783, 21,   269,  -1,   -1,   -1,   -1,   -1,   -1,   4792, 18,   -1,   -1,   33,   1045, -1,   24,   -1,   -1,
    -1,   -1,   4804, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1061, 1062, -1,   -1,   54,   302,  -1,   -1,
    305,  306,  -1,   -1,   -1,   -1,   1075, -1,   -1,   67,   4831, -1,   4833, -1,   -1,   970,  -1,   -1,   64,
    77,   -1,   1829, -1,   81,   -1,   -1,   331,  -1,   4849, -1,   -1,   -1,   -1,   -1,   1103, -1,   -1,   -1,
    -1,   -1,   98,   -1,   1503, -1,   1113, -1,   104,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    1126, -1,   -1,   1129, 119,  -1,   -1,   -1,   -1,   371,  -1,   114,  -1,   -1,   -1,   -1,   131,  -1,   121,
    -1,   -1,   124,  -1,   1541, 139,  140,  -1,   389,  4906, -1,   -1,   4909, -1,   4911, -1,   -1,   151,  -1,
    -1,   -1,   -1,   -1,   -1,   158,  -1,   -1,   -1,   162,  1566, -1,   -1,   -1,   4930, -1,   4932, 4933, -1,
    4935, -1,   4937, -1,   -1,   177,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   436,  437,
    179,  -1,   -1,   4957, -1,   -1,   -1,   -1,   4962, -1,   -1,   -1,   4966, -1,   -1,   -1,   -1,   4971, -1,
    -1,   -1,   -1,   4976, 1111, -1,   216,  -1,   -1,   -1,   -1,   -1,   -1,   223,  -1,   -1,   -1,   1630, -1,
    -1,   -1,   -1,   -1,   480,  -1,   -1,   -1,   -1,   1249, -1,   -1,   -1,   -1,   -1,   -1,   -1,   1257, 1258,
    -1,   -1,   -1,   239,  -1,   241,  -1,   5018, 1267, 257,  -1,   -1,   260,  5024, -1,   251,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   259,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   269,  5045, -1,   -1,   -1,
    5049, 5050, -1,   -1,   -1,   -1,   -1,   -1,   -1,   295,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   313,  302,  -1,   1327, 305,  306,  319,  -1,   -1,   -1,   -1,
    -1,   325,  -1,   -1,   328,  -1,   -1,   -1,   5095, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    331,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   5114, -1,   -1,   354,  -1,   356,  357,  -1,   359,  360,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   368,  -1,   -1,   -1,   -1,   373,  -1,   5138, -1,   -1,   -1,   379,  -1,
    -1,   382,  371,  -1,   385,  -1,   -1,   -1,   -1,   -1,   -1,   5155, -1,   -1,   5158, -1,   -1,   398,  -1,
    -1,   389,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   5172, -1,   5174, -1,   5176, 1817, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   1321, -1,   -1,   -1,   -1,   -1,   -1,   5194, 5195, -1,   -1,   -1,   -1,   5200,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   458,  -1,   -1,   -1,   -1,   -1,   5227, -1,   -1,   -1,   1479, 469,  -1,   -1,   -1,   473,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1381, -1,   -1,   487,  -1,   -1,   5253, -1,   480,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5272, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   5284, 5285, -1,   -1,   1422, -1,   -1,   -1,   -1,   -1,   5294, -1,
    -1,   -1,   -1,   5299, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1561, -1,
    -1,   -1,   -1,   -1,   5319, 21,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1581,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1597, -1,   -1,   -1,
    2340, -1,   -1,   -1,   2344, 2345, -1,   -1,   2348, -1,   -1,   -1,   -1,   67,   -1,   5368, 1503, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   81,   -1,   -1,   2370, -1,   5385, -1,   -1,   1636, 1637, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   98,   -1,   1647, -1,   -1,   -1,   104,  -1,   -1,   -1,   1541, -1,   -1,
    -1,   1659, 1660, -1,   -1,   5415, -1,   -1,   119,  -1,   -1,   -1,   -1,   -1,   -1,   1673, -1,   -1,   2415,
    -1,   131,  -1,   1566, -1,   -1,   -1,   -1,   -1,   139,  140,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2435, 2436, 151,  -1,   -1,   -1,   -1,   156,  -1,   -1,   -1,   -1,   -1,   162,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5475, 177,  -1,   -1,   -1,   2467, 2468, -1,   5483, -1,   2472,
    -1,   -1,   -1,   -1,   21,   -1,   -1,   -1,   -1,   5495, 1630, -1,   -1,   -1,   -1,   202,  33,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2507, -1,   223,  54,
    2511, -1,   -1,   -1,   -1,   -1,   -1,   -1,   5532, -1,   -1,   -1,   67,   -1,   -1,   -1,   -1,   -1,   2529,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   81,   -1,   -1,   2540, -1,   -1,   257,  -1,   -1,   -1,   -1,   -1,
    -1,   5563, 5564, 5565, 2553, 98,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2564, -1,   -1,   -1,
    1829, -1,   -1,   2571, 286,  -1,   -1,   119,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    131,  -1,   -1,   -1,   -1,   -1,   5606, -1,   139,  140,  -1,   -1,   313,  -1,   -1,   -1,   317,  -1,   319,
    5619, 151,  -1,   -1,   -1,   325,  156,  -1,   328,  -1,   -1,   -1,   162,  -1,   -1,   -1,   7,    -1,   -1,
    -1,   -1,   -1,   13,   14,   -1,   2631, -1,   177,  19,   -1,   21,   -1,   -1,   353,  354,  26,   356,  28,
    -1,   -1,   360,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   368,  -1,   -1,   -1,   -1,   373,  -1,   -1,   47,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   1817, 385,  -1,   2326, -1,   -1,   -1,   2330, 2331, 223,  -1,   -1,
    -1,   -1,   398,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2699, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   268,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2734, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   286,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   466,  -1,   -1,   -1,   -1,   -1,
    -1,   473,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   313,  2770, -1,   -1,   317,  -1,   319,  -1,
    -1,   -1,   -1,   -1,   325,  -1,   -1,   328,  -1,   -1,   -1,   -1,   -1,   -1,   2444, -1,   2793, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   21,   -1,   -1,   -1,   -1,   -1,   -1,   354,  196,  356,  -1,   -1,
    -1,   360,  -1,   -1,   -1,   -1,   -1,   207,  208,  368,  210,  -1,   -1,   213,  373,  215,  -1,   -1,   -1,
    219,  -1,   54,   -1,   -1,   -1,   -1,   385,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   67,   68,   -1,   -1,
    -1,   398,  -1,   -1,   -1,   -1,   77,   -1,   -1,   -1,   81,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   2879, 98,   -1,   -1,   -1,   -1,   -1,   2886, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   119,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   131,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   139,  466,  -1,   -1,   -1,   -1,   -1,   -1,
    473,  -1,   -1,   -1,   151,  -1,   -1,   -1,   -1,   156,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2610, -1,   177,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   2973, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   202,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    223,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2689, -1,   -1,   257,  -1,   -1,   2695,
    -1,   -1,   -1,   3046, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3061,
    3062, -1,   -1,   -1,   -1,   -1,   286,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2340, -1,
    -1,   -1,   2344, 2345, -1,   -1,   2348, 3088, -1,   -1,   3091, -1,   -1,   -1,   313,  -1,   -1,   -1,   317,
    -1,   319,  -1,   -1,   -1,   -1,   -1,   325,  -1,   2370, 328,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2782, -1,   -1,   -1,   -1,   -1,   -1,   354,  -1,
    356,  -1,   -1,   -1,   360,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   368,  -1,   -1,   -1,   2415, 373,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2435, 2436,
    -1,   -1,   -1,   2326, 398,  -1,   -1,   2330, 2331, -1,   -1,   -1,   -1,   3189, 3190, 3191, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2467, 2468, -1,   -1,   -1,   2472, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   606,  -1,   -1,   -1,   3225, -1,   -1,   -1,   614,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3237, 623,  624,  -1,   -1,   -1,   628,  -1,   -1,   2507, -1,   3248, -1,   2511, -1,
    -1,   -1,   -1,   473,  -1,   -1,   -1,   -1,   645,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   2529, -1,   -1,
    -1,   -1,   -1,   659,  -1,   -1,   -1,   -1,   2540, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   676,  2553, -1,   679,  -1,   681,  2444, 683,  -1,   -1,   -1,   -1,   2564, -1,   -1,   -1,   -1,   -1,
    -1,   2571, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3336, -1,   723,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   746,  -1,   748,  -1,   -1,
    -1,   -1,   -1,   -1,   2631, -1,   -1,   -1,   -1,   3375, -1,   -1,   -1,   -1,   -1,   3034, -1,   -1,   3037,
    -1,   3039, -1,   -1,   -1,   3390, 3044, 3392, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3407, -1,   3409, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   804,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2699, -1,   -1,   3094,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2610, -1,   3465, -1,   -1,   -1,   -1,   -1,   -1,   -1,   2734, -1,   -1,   -1,   -1,   -1,   864,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3140, -1,   -1,   -1,   -1,   -1,   -1,   3494, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3508, 2770, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3527, -1,   -1,   3530, -1,   2793, -1,   -1,   -1,   -1,
    -1,   923,  -1,   925,  -1,   2689, -1,   -1,   -1,   -1,   -1,   2695, -1,   -1,   -1,   -1,   -1,   -1,   940,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   953,  -1,   -1,   -1,   -1,   -1,   -1,
    960,  -1,   -1,   -1,   -1,   -1,   3234, -1,   3236, -1,   -1,   -1,   972,  -1,   -1,   975,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3611, -1,
    -1,   -1,   1000, -1,   -1,   2879, -1,   -1,   -1,   -1,   -1,   -1,   2886, -1,   1012, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   2782, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3298, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   1060, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3342, -1,   -1,   -1,   -1,   -1,   1080, -1,   1082, -1,   1084, -1,   1086, -1,   1088, 1089, 1090, -1,   -1,
    -1,   -1,   1095, -1,   2973, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3376, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3777, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3046, -1,   -1,   -1,   -1,   -1,   -1,   3445, -1,   -1,   -1,   -1,   -1,   -1,   -1,   3061, 3062, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3466, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3478, -1,   3088, -1,   -1,   3091, -1,   -1,   -1,   3834, -1,   -1,   -1,   -1,   -1,   3840,
    -1,   3842, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   771,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   970,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3880, -1,   -1,   -1,   802,  -1,   -1,   3034, -1,   -1,   3037, -1,   3039, -1,   -1,   -1,   -1,   3044,
    3551, -1,   1285, -1,   3902, -1,   -1,   3905, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3571, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3189, 3190, 3191, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3599, 3094, -1,   -1,   -1,   3951, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3225, -1,   -1,   -1,   -1,   1354, -1,   -1,   -1,   -1,
    -1,   -1,   3237, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3248, 3641, -1,   -1,   -1,   -1,
    3140, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1111, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   4019, 4020, -1,   -1,   -1,   -1,   -1,   4026, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3336, -1,   3730, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3234,
    -1,   3236, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    4107, -1,   -1,   -1,   -1,   -1,   -1,   3375, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3390, -1,   3392, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3407, -1,   3409, -1,   -1,   3298, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   1570, -1,   -1,   3841, -1,   -1,   -1,   -1,   -1,   -1,   3342, -1,   -1,   -1,   -1,   1585, -1,
    -1,   -1,   3465, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1321, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   1141, -1,   -1,   -1,   -1,   -1,   3376, -1,   1616, -1,   3494, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3508, 1633, -1,   -1,   -1,   1170, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1648, -1,   1650, 3527, 1652, -1,   3530, -1,   -1,   1657, -1,   -1,   1381, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   1203, 1204, -1,   1206, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    1682, 3445, 1684, -1,   1686, -1,   1688, -1,   1690, -1,   1225, -1,   1694, -1,   -1,   -1,   -1,   -1,   -1,
    1422, -1,   -1,   3466, -1,   -1,   -1,   4323, -1,   -1,   -1,   -1,   -1,   -1,   -1,   3478, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1266, 4349, 3611, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4023, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1301, -1,   -1,   -1,   1305, 1306, -1,   -1,   -1,
    -1,   4393, -1,   -1,   -1,   1503, -1,   -1,   -1,   -1,   -1,   -1,   3551, 4405, 4059, -1,   -1,   -1,   970,
    -1,   4065, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3571, -1,   -1,   -1,   4428, -1,
    -1,   -1,   -1,   -1,   -1,   1541, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3599, -1,   -1,   -1,   -1,   -1,   -1,   -1,   1566, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   4475, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3641, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3777, -1,   -1,   -1,   -1,   -1,   -1,   -1,   1630,
    -1,   -1,   4180, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4195, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   1111, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3834, -1,   -1,   -1,   -1,   -1,   3840, -1,   3842,
    -1,   3730, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4602, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3880,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3902, -1,   -1,   3905, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4307, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3951, -1,   -1,   -1,   3841, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   4702, -1,   4704, 4358, -1,   -1,   -1,   -1,   -1,   1817, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4398, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   4019, 4020, -1,   1321, -1,   -1,   -1,   4026, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4783, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4456, 4804, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1381, 970,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4831, 1750, 4833, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4107, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   1773, -1,   -1,   1776, -1,   -1,   1779, 1422, -1,   -1,   -1,   -1,
    -1,   -1,   1787, 1788, -1,   -1,   -1,   1792, 1793, 4023, -1,   1796, -1,   1798, -1,   -1,   1801, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   2276, 2277, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   1828, -1,   4059, -1,   -1,   -1,   -1,   -1,   4065, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    1503, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2341, 2342, -1,   -1,   -1,   2346,
    2347, 1111, -1,   2350, 4619, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2360, -1,   -1,   -1,   -1,   -1,
    1541, 2367, -1,   -1,   -1,   2371, 2372, -1,   -1,   2375, 2376, 1910, -1,   -1,   -1,   -1,   2382, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   1566, -1,   -1,   2394, -1,   2396, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   1939, -1,   -1,   5024, -1,   -1,   -1,   -1,   -1,   -1,   2416, -1,   4180, -1,   -1,   2421, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4195, -1,   -1,   -1,   2437, -1,   -1,   -1,   1974,
    -1,   -1,   -1,   -1,   2446, 4323, -1,   -1,   -1,   2451, 2452, 2453, 2454, 1630, -1,   -1,   -1,   -1,   -1,
    2461, 2462, -1,   -1,   -1,   -1,   4735, -1,   2469, -1,   -1,   -1,   4349, 2474, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   2482, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4764, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2512, -1,   -1,   -1,   -1,   4393,
    -1,   -1,   -1,   -1,   -1,   2523, -1,   2525, -1,   -1,   -1,   4405, 2530, -1,   -1,   -1,   2534, -1,   2536,
    2537, 2538, 2539, -1,   2541, -1,   -1,   -1,   4307, -1,   -1,   -1,   -1,   -1,   -1,   4428, -1,   2554, 2555,
    -1,   2557, 1321, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2568, 2569, 2570, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, -1,   2123, -1,   -1,   -1,
    -1,   -1,   4358, -1,   -1,   4475, -1,   2134, 2135, -1,   -1,   2326, -1,   -1,   -1,   2330, 2331, -1,   5227,
    -1,   -1,   -1,   -1,   -1,   1381, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2632, -1,   -1,   -1,   4398, -1,   4906, -1,   -1,   -1,   1817, 4911, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1422, -1,   -1,   -1,   -1,   -1,   4933, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5299, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   4456, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4971, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2444, -1,   -1,   4602,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2271, -1,   1503, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   2299, 2300, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5045, 1541, -1,   -1,   5049, 5050, -1,
    -1,   -1,   -1,   -1,   2788, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5415, -1,   -1,
    1566, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4702, -1,   4704, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2373,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4619, -1,   -1,
    5475, -1,   -1,   -1,   -1,   -1,   -1,   1630, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   5495, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2610, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4783, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5194, 5195, 4804, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5563, -1,   5565, -1,   -1,   -1,   -1,
    4831, -1,   4833, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2689, -1,   -1,   -1,   -1,   4735,
    2695, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2986, -1,   -1,   -1,   -1,   5606, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4764, -1,   5619, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3047, 3048, -1,
    -1,   -1,   -1,   -1,   1817, -1,   -1,   -1,   -1,   -1,   -1,   2782, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   2608, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3089, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3098, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3113, 3114, -1,   -1,   -1,   3118, -1,   -1,   -1,   -1,   3123, 3124, 3125,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4906,
    -1,   -1,   -1,   5024, 4911, -1,   2326, -1,   -1,   -1,   2330, 2331, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   4933, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3180, 3181, 3182,
    3183, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   2739, -1,   -1,   4971, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3226, -1,   3228, 3229, 3230, -1,   -1,   -1,   -1,   -1,   -1,   -1,   3238, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2444, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   5045, -1,   -1,   -1,   5049, 5050, 2822, -1,   -1,   -1,   -1,   2827, -1,   5564,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3311, -1,   3034, -1,   -1,
    3037, -1,   3039, -1,   -1,   -1,   -1,   3044, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3337, 2871, -1,   2873, 2874, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5227, 2885, -1,
    -1,   2888, -1,   -1,   -1,   -1,   -1,   2894, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3094, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2921, -1,   2923, 3391,
    -1,   -1,   2927, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3140, -1,   -1,   -1,   5299, -1,   -1,   2959, 2960, 2961, -1,
    -1,   -1,   5194, 5195, -1,   2610, 3436, -1,   -1,   -1,   -1,   3441, -1,   2976, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2992, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3007, -1,   -1,   -1,   -1,   3479, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3493, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3234, 2689, 3236, -1,   -1,   -1,   -1,   2695, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3067, -1,   -1,   -1,   -1,   5415, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2326, -1,   -1,   -1,   2330, 2331, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3298, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5475, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   2782, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5495,
    -1,   3342, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1219, -1,   -1,   -1,   -1,   -1,   3376, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   2444, -1,   -1,   -1,   -1,   -1,   5563, -1,   5565, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1281, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3445, -1,   -1,   -1,   -1,   -1,   5606, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5619, -1,   3466, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3753, -1,   3755, -1,   3478, -1,   -1,   -1,   -1,   3762, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3778, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3794, -1,   -1,   -1,   -1,   -1,   -1,   -1,   5564, -1,   -1,   -1,   -1,   3807, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3820, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3551, -1,   -1,   -1,   -1,   -1,   -1,   -1,   3838, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2610,
    -1,   -1,   3571, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3034, -1,   -1,   3037, -1,   3039, -1,   -1,
    -1,   -1,   3044, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3599, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3889, 3890, 3891, -1,   -1,   3894, 3895, 3896, 3897, 3898, -1,   -1,   -1,   -1,   3903, 3904,
    -1,   3906, 3907, 3908, 3909, 3910, 3911, 3912, -1,   -1,   -1,   -1,   -1,   -1,   3094, 3641, 3921, -1,   -1,
    3924, 3925, 2689, -1,   -1,   -1,   -1,   -1,   2695, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3140, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3988, 3989, 3990, -1,   -1,   3993, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3730, -1,   -1,   -1,   -1,   -1,   3548, -1,   -1,   -1,
    2782, -1,   -1,   -1,   -1,   -1,   3558, -1,   -1,   -1,   -1,   -1,   3564, -1,   3566, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3588, 3589,
    -1,   -1,   3234, -1,   3236, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3608,
    -1,   -1,   -1,   -1,   3613, -1,   4082, -1,   -1,   3618, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3628, -1,   -1,   3631, 1669, 3633, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3642, -1,   -1,   -1,   -1,
    -1,   3648, -1,   -1,   3651, -1,   3841, -1,   -1,   3298, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3680, -1,   -1,   -1,   -1,
    -1,   3686, 3687, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3342, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   1748, 3712, -1,   -1,   -1,   -1,   -1,   3718, -1,   -1,   -1,   -1,
    -1,   3724, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3376, 1772, -1,   -1,   -1,   -1,   1777, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1802, 1803, -1,   -1,   1806, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3445, 3034, -1,   -1,   3037, -1,   3039, -1,   -1,   -1,   -1,   3044, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3466, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4023, 3478,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4318, 4319, 4320, 4321, -1,
    -1,   4324, -1,   -1,   -1,   -1,   -1,   -1,   3094, -1,   -1,   -1,   -1,   -1,   -1,   4059, -1,   -1,   -1,
    -1,   -1,   4065, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3551, 3140, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4389, 4390, 4391, 4392, -1,   4394, 4395, 3571, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   4406, 4407, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3599, -1,   -1,   -1,   -1,   4429, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   4180, -1,   -1,   -1,   -1,   -1,   -1,   3641, -1,   -1,   -1,   -1,   3234, -1,   3236, 4195,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4066, 4067, 3298, 4536, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4545, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3730, -1,   -1,   -1,   -1,   -1,   2131, -1,   -1,   -1,   -1,   -1,   4567, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3342, -1,   -1,   -1,   -1,   -1,   -1,   4307, -1,   -1,
    -1,   -1,   -1,   -1,   4593, 4127, -1,   -1,   2167, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3376, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4358, -1,   -1,   -1,   -1,   -1,   -1,   4177, 4178,
    -1,   -1,   -1,   4182, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4194, -1,   -1,   -1,
    -1,   3841, 4200, 4201, -1,   -1,   4204, -1,   -1,   4207, -1,   -1,   4398, -1,   -1,   -1,   -1,   3445, -1,
    -1,   -1,   -1,   -1,   4221, -1,   -1,   -1,   -1,   4693, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3466, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4245, -1,   -1,   3478, 2286, 4250, -1,   -1,   -1,   -1,
    4255, -1,   -1,   -1,   -1,   -1,   2298, -1,   -1,   -1,   -1,   2303, -1,   4456, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4749, -1,   -1,   -1,   -1,   -1,   -1,   4289, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   4784, -1,   -1,   -1,   3551, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3571, -1,   -1,   4811, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3599, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4023, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3641, -1,   -1,   -1,   -1,   -1,   4059, -1,   -1,   -1,   -1,   -1,   4065, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   4619, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   4917, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3730, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4516, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5003, -1,   4180, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   4735, -1,   -1,   -1,   -1,   -1,   4195, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4764, 5044,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3841, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   4638, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4651, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4307, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   5142, -1,   -1,   -1,   -1,   -1,   -1,   -1,   4683, 4684, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   4358, -1,   4906, -1,   -1,   -1,   -1,   4911, -1,   -1,   5193, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4738, -1,   4740, -1,   -1,   -1,   -1,   4933, -1,   -1,   -1,
    -1,   5217, -1,   -1,   -1,   -1,   -1,   4398, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   5242, -1,   -1,   -1,   -1,   5247, -1,   -1,   4971, -1,   -1,   -1,
    -1,   2825, -1,   -1,   -1,   -1,   4023, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   2848, -1,   2850, 4456, 2852, 2853, 2854, -1,   -1,   2857, -1,   -1,   -1,   2861,
    -1,   -1,   -1,   -1,   4059, -1,   -1,   -1,   2870, -1,   4065, -1,   -1,   2875, -1,   -1,   -1,   -1,   2880,
    -1,   2882, -1,   -1,   -1,   -1,   2887, 5318, 2889, -1,   -1,   2892, -1,   5045, -1,   -1,   -1,   5049, 5050,
    2900, -1,   -1,   -1,   2904, 2905, -1,   2907, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2919, -1,   -1,   -1,   -1,   -1,   -1,   2926, -1,   2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2965, -1,   4930, -1,   -1,   -1,   -1,   4935, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4180, -1,   -1,   -1,   -1,   -1,   -1,   4957,
    -1,   -1,   -1,   -1,   4962, -1,   -1,   4195, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4976,
    4619, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5194, 5195, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3082, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   4307, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4735, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   5114, -1,   -1,   -1,   -1,   -1,   -1,   -1,   4764, -1,   -1,   -1,   -1,   -1,   4358,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   5155, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4398, -1,   -1,   -1,   -1,   -1,   -1,   -1,   5176, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5200, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4456, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4906, -1,   -1,   -1,   -1,   4911, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   5284, 5285, -1,   -1,   -1,   -1,   -1,   4933, -1,   -1,   5294, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3361, -1,   -1,   -1,   -1,   4971, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5368, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    5564, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5385, -1,   -1,   -1,   4619, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5045, -1,   -1,   -1,   5049, 5050, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3497, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5483, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4735, -1,   -1,   -1,
    3546, -1,   -1,   -1,   -1,   -1,   -1,   3553, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3569, 3570, 4764, 3572, -1,   -1,   3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583,
    3584, 3585, -1,   -1,   -1,   5194, 5195, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3614, -1,   -1,   3617, -1,   -1,   -1,   -1,
    -1,   -1,   3624, -1,   -1,   -1,   -1,   3629, 3630, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3643, 3644, 3645, -1,   3647, -1,   -1,   3650, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3694, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4906, -1,   -1,   -1,
    -1,   4911, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4933, -1,   -1,   3743, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4971, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   5045, -1,   -1,   -1,   5049, 5050, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5564, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3994, -1,   -1,   -1,   -1,   -1,   -1,   5194,
    5195, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4128, -1,   -1,   -1,   4132, 4133, 4134,
    -1,   -1,   4137, -1,   -1,   -1,   -1,   4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4151, 4152, 4153,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4167, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4181, -1,   -1,   -1,   -1,   -1,   -1,   4188, 4189, 4190, 4191,
    -1,   4193, -1,   -1,   -1,   4197, 4198, 4199, -1,   -1,   4202, -1,   -1,   4205, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4247, -1,
    -1,   -1,   -1,   -1,   -1,   4254, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4265, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5564, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   4519, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   4579, 4580, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4611, -1,   -1,   -1,   4615, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   4631, -1,   4633, -1,   -1,   -1,   -1,   -1,   4639, -1,   -1,   4642, 4643, 4644, -1,   -1,   4647,
    4648, 4649, 4650, -1,   4652, -1,   -1,   4655, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4665, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   4706, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4855, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4931, 4932,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4946, -1,   4948, 4949, 4950, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   4979, 4980, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   5146, 5147, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    5161, -1,   -1,   5164, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5252, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   5314, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   5371, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   5448, 14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
    30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
    49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
    68,   69,   70,   71,   72,   73,   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
    87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,
    106,  107,  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
    125,  126,  127,  128,  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
    144,  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,  155,  156,  157,  158,  159,  160,  161,  162,
    163,  164,  165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  180,  181,
    182,  183,  184,  185,  186,  187,  188,  189,  190,  191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
    201,  202,  203,  204,  205,  206,  207,  208,  209,  210,  211,  212,  213,  214,  215,  216,  217,  218,  219,
    220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
    258,  259,  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
    277,  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
    334,  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
    353,  354,  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
    372,  373,  374,  375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,
    391,  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
    410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  430,  431,  432,  433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,
    448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
    467,  468,  469,  470,  471,  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,  482,  483,  484,  485,
    486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   507,  14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
    30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
    49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
    68,   69,   70,   71,   72,   73,   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
    87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,
    106,  107,  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
    125,  126,  127,  128,  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
    144,  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,  155,  156,  157,  158,  159,  160,  161,  162,
    163,  164,  165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  180,  181,
    182,  183,  184,  185,  186,  187,  188,  189,  190,  191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
    201,  202,  203,  204,  205,  206,  207,  208,  209,  210,  211,  212,  213,  214,  215,  216,  217,  218,  219,
    220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
    258,  259,  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
    277,  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
    296,  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
    334,  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
    353,  354,  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
    372,  373,  374,  375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,
    391,  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
    410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  430,  431,  432,  433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,
    448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
    467,  468,  469,  470,  471,  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,  482,  483,  484,  485,
    486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3,    4,    5,    6,    7,    8,    9,    10,
    -1,   -1,   507,  14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   -1,   -1,   -1,
    30,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,
    49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,
    -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,
    87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,
    -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  116,  -1,   118,  119,  120,  121,  122,  -1,   124,
    125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
    -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,
    163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,
    182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,
    201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,
    220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,
    258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,
    277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
    296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  330,  331,  332,  333,
    334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,
    353,  354,  355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,
    372,  373,  374,  -1,   376,  377,  -1,   379,  380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,
    391,  392,  393,  394,  395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,
    410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,
    448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
    467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,
    486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   497,  498,  499,  -1,   -1,   -1,   -1,   -1,
    -1,   506,  507,  3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   14,   15,   16,   17,   18,
    19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,
    38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   53,   54,   55,   56,
    57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,
    76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,
    114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,
    -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,
    152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,
    171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,
    190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,
    209,  210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
    247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,
    266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,
    285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,
    304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,
    342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,
    -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   379,
    380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,
    399,  400,  -1,   -1,   403,  -1,   405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,
    437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
    456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
    475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  507,  3,    4,    5,    6,    7,
    8,    9,    10,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,
    -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
    46,   -1,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,
    65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,
    -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,
    122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,
    141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,
    160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,
    179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,
    198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,
    217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  -1,   254,
    -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,
    274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,
    293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,
    312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  330,
    331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
    350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,
    369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   379,  380,  381,  382,  383,  384,  385,  -1,   387,
    388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,
    407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
    445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,
    464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,
    483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   497,  498,  3,    -1,   -1,
    -1,   -1,   -1,   -1,   506,  507,  -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,
    25,   -1,   -1,   -1,   -1,   -1,   31,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,
    -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,
    63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,
    82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,
    101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,
    120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,
    139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  156,  157,
    158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,
    177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,
    -1,   197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  -1,   -1,   214,
    215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,
    -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,
    -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,
    291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,
    310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,
    329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,
    348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,
    367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,
    -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,
    -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,
    443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,
    462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,
    481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3,    -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   507,  14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,
    25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   -1,   43,
    44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,
    63,   64,   -1,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,
    82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,
    101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,
    120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  -1,   138,
    139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,
    158,  -1,   160,  -1,   -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,  176,
    177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,
    196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  -1,   210,  211,  212,  -1,   214,
    215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  236,  237,  238,  239,  -1,   -1,   242,  243,  244,  245,  -1,   -1,   248,  249,  250,  251,  252,
    -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  -1,   268,  269,  270,  271,
    -1,   273,  274,  -1,   276,  -1,   -1,   -1,   280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,
    291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,
    310,  311,  312,  313,  314,  -1,   316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,
    329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,
    348,  349,  -1,   -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,
    -1,   368,  -1,   -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,
    -1,   387,  388,  389,  390,  391,  -1,   393,  394,  395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,
    -1,   406,  407,  408,  409,  410,  411,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   421,  422,  423,
    424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  -1,
    -1,   444,  445,  446,  447,  448,  449,  450,  451,  -1,   453,  454,  455,  456,  457,  458,  459,  460,  461,
    462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  -1,   475,  -1,   477,  478,  3,    480,
    481,  482,  483,  484,  485,  486,  487,  488,  -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,
    24,   25,   -1,   -1,   -1,   -1,   -1,   507,  -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   -1,
    43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,
    62,   63,   64,   -1,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,
    81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,
    100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,
    119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  -1,
    138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,
    157,  158,  -1,   160,  -1,   -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
    176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,
    195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  -1,   210,  211,  212,  -1,
    214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  239,  -1,   -1,   242,  243,  244,  245,  -1,   -1,   248,  249,  250,  251,
    252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  -1,   268,  269,  270,
    271,  -1,   273,  274,  -1,   276,  -1,   -1,   -1,   280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,
    290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
    -1,   310,  311,  312,  313,  314,  -1,   316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,
    328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,
    347,  348,  349,  -1,   -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,
    366,  -1,   368,  -1,   -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,
    -1,   -1,   387,  388,  389,  390,  391,  -1,   393,  394,  395,  396,  397,  398,  399,  400,  -1,   -1,   403,
    -1,   -1,   406,  407,  408,  409,  410,  411,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   421,  422,
    423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,
    -1,   -1,   444,  445,  446,  447,  448,  449,  450,  451,  -1,   453,  454,  455,  456,  457,  458,  459,  460,
    461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  -1,   475,  -1,   477,  478,  -1,
    480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3,    4,
    5,    -1,   -1,   8,    9,    -1,   -1,   -1,   507,  14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   -1,
    43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
    62,   63,   64,   -1,   66,   67,   68,   69,   70,   71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
    100,  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
    119,  120,  121,  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,  132,  133,  134,  135,  136,  -1,
    138,  139,  140,  -1,   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
    157,  158,  159,  160,  -1,   162,  163,  164,  165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
    176,  177,  178,  179,  180,  181,  182,  183,  -1,   185,  186,  187,  188,  189,  190,  191,  192,  193,  194,
    195,  196,  197,  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,  208,  -1,   210,  211,  212,  213,
    214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  -1,   248,  249,  250,  251,
    252,  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,  -1,   264,  265,  266,  -1,   268,  269,  270,
    271,  272,  273,  274,  275,  276,  -1,   278,  -1,   280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
    290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
    309,  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
    328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
    347,  348,  349,  -1,   351,  352,  353,  354,  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
    366,  -1,   368,  -1,   370,  371,  372,  373,  374,  375,  376,  377,  378,  379,  380,  381,  382,  383,  384,
    385,  386,  387,  388,  389,  390,  391,  -1,   393,  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
    404,  405,  406,  407,  408,  409,  410,  411,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,  435,  436,  437,  438,  439,  440,  441,
    -1,   -1,   444,  445,  446,  447,  448,  449,  450,  451,  -1,   453,  454,  455,  456,  457,  458,  459,  460,
    461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  -1,   475,  476,  477,  478,  -1,
    480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   493,  494,  495,  -1,   497,  498,
    499,  500,  501,  502,  -1,   -1,   -1,   506,  3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,
    14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   30,   -1,   -1,
    33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
    52,   53,   54,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,
    71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,
    90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,
    109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,
    128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,
    147,  -1,   -1,   150,  -1,   152,  153,  154,  155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,
    166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,
    185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,
    -1,   205,  206,  207,  208,  209,  210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
    242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,
    -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,
    280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,
    299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,
    318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
    337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,
    356,  357,  358,  359,  360,  -1,   362,  363,  -1,   365,  366,  367,  368,  369,  370,  371,  372,  373,  374,
    -1,   376,  377,  -1,   379,  380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,
    -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,
    413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
    -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,
    451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,
    470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  3,
    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,
    23,   24,   25,   -1,   -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,
    42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   -1,
    61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,
    80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
    99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,
    118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,
    137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,
    156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,
    175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,
    194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,
    -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,
    251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,
    270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,
    289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
    308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,
    346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,
    -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   379,  380,  381,  382,  383,
    384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,
    403,  -1,   405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,
    441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,
    460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,
    479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   497,
    498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,
    -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   30,   -1,
    -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,
    51,   52,   53,   54,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,
    70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,
    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,
    108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,
    -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,
    146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,
    165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,
    184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,
    203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,
    222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
    241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,
    -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,
    279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,
    298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,
    317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
    336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,
    355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,
    374,  -1,   376,  377,  -1,   379,  380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,
    393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,
    412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,
    450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,
    469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,
    488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   504,  505,  506,
    3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,
    -1,   23,   24,   25,   -1,   -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,
    41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
    -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,
    79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
    98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,
    -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,
    136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,
    155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,
    -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,
    -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,
    212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
    250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,
    269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,
    307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,
    326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,
    345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,   362,  363,
    -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   379,  380,  381,  382,
    383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,
    -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,  439,
    440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,
    459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,
    478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    497,  498,  499,  -1,   -1,   -1,   -1,   -1,   -1,   506,  3,    4,    5,    6,    7,    8,    9,    10,   -1,
    -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   30,
    -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,
    50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,
    69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,
    88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,  -1,
    107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,
    126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,
    145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,
    -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,
    183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,
    202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,
    221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,
    240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,
    259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,
    -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
    -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,
    316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
    335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,
    354,  355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,
    373,  374,  -1,   376,  377,  -1,   379,  380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,
    392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,
    411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
    430,  431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,
    449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,
    468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,
    487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    506,  3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,
    21,   22,   23,   24,   25,   -1,   -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,
    40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
    59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,
    78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
    97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,
    -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,
    135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,
    -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,
    173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,
    192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,
    211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
    249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,
    268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,
    287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,
    306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,
    325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,
    344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,   362,
    363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   379,  380,  381,
    382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,
    -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,
    439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,
    458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,
    477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  3,    4,    5,    6,    7,    8,    9,    10,
    -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,
    30,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,
    49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,
    -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,
    87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,
    -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,
    125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
    -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  154,  155,  156,  157,  158,  -1,   160,  161,  -1,
    163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,
    182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,
    201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,
    220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,
    258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,
    277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
    296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  330,  331,  332,  333,
    334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,
    353,  354,  355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,
    372,  373,  374,  -1,   376,  377,  -1,   379,  380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,
    391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,
    410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,
    448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
    467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,
    486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   506,  3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,
    20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,   38,
    39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
    58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,
    -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
    96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,
    115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,
    134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,
    153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,
    172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,
    -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,
    210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
    248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,
    267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,
    286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,
    305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
    -1,   325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,
    343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,
    362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   379,  380,
    381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,
    400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,
    438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
    457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
    -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  3,    4,    5,    6,    7,    8,    9,
    10,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,
    -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,
    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,
    67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,
    86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,
    105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,
    124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,
    143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,
    -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,
    -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,
    200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  217,  218,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
    238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,
    257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,
    276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
    295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,
    314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  330,  331,  332,
    333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,
    352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,
    371,  372,  373,  374,  375,  376,  377,  -1,   379,  380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,
    390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,
    409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,
    447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,
    466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,
    485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   506,  3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   14,   15,   16,   17,   18,
    19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,
    38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   53,   54,   55,   56,
    57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,
    76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,
    114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,
    -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,
    152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,
    171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,
    190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,
    209,  210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
    247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,
    266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,
    285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,
    304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  -1,   325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,
    342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,
    -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  375,  376,  377,  -1,   379,
    380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,
    399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,
    437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
    456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
    475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  3,    4,    5,    6,    7,    8,
    9,    10,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,
    -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
    -1,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,
    -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,
    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,
    -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,
    -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,
    142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,
    161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,
    180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,
    199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  217,
    218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
    237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  -1,   254,  -1,
    -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,
    -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
    294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,
    313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  330,  331,
    332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
    -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,
    370,  371,  372,  373,  374,  -1,   376,  377,  -1,   379,  380,  381,  382,  383,  384,  385,  -1,   387,  388,
    389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,
    408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,
    446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,
    465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,
    484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   497,  498,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   506,  3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   14,   15,   16,   17,
    18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,
    37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   53,   54,   55,
    56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,
    75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,
    94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,
    113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,
    -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,
    -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,
    170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,
    189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,
    208,  209,  210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
    246,  247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,
    265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,
    284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,
    303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
    322,  323,  -1,   325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,
    341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,
    360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,
    379,  380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,
    398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,
    436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,
    455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,
    474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  3,    4,    5,    6,    7,
    8,    9,    10,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,
    -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
    46,   -1,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,
    65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,
    -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,
    122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,
    141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,
    160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,
    179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,
    198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,
    217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  -1,   254,
    -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,
    274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,
    293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,
    312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  330,
    331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
    350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,
    369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   379,  380,  381,  382,  383,  384,  385,  -1,   387,
    388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,
    407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
    445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,
    464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,
    483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   497,  498,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   506,  3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   14,   15,   16,
    17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,
    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   53,   54,
    55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,
    74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,
    93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,
    -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,
    131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,
    150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,
    169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,
    188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,
    -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
    245,  246,  247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,
    264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,
    -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,
    302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
    321,  322,  323,  -1,   325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,
    340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,
    359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,
    -1,   379,  380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,
    397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,
    435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,
    454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,
    473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  3,    4,    5,    6,
    7,    8,    9,    10,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,
    -1,   -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,
    45,   46,   -1,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   -1,   61,   62,   63,
    64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,
    83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,
    102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,
    121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,
    140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,
    -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,
    178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,
    197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,
    216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  -1,
    254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,
    273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,
    292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,
    311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,
    330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,
    349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,
    368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   379,  380,  381,  382,  383,  384,  385,  -1,
    387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,
    406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,
    444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,
    463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,
    482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   497,  498,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   506,  3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   14,   15,
    16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   30,   -1,   -1,   33,   34,
    -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   53,
    54,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,
    73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,
    92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,
    111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,
    130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,
    -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,
    168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,
    187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,
    206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
    244,  245,  246,  247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,
    263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,
    282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,
    301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
    320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
    -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,
    358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,
    377,  -1,   379,  380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,
    396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,
    415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,
    434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,
    453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
    472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  3,    4,    5,
    6,    7,    8,    9,    10,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,
    25,   -1,   -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,
    44,   45,   46,   -1,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   -1,   61,   62,
    63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,
    82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,
    101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,
    120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,
    139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,
    158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,
    177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,
    196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,
    215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
    -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
    -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,
    291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,
    310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,
    329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,
    348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,
    367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   379,  380,  381,  382,  383,  384,  385,
    -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,
    -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,
    443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,
    462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,
    481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   497,  498,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   506,  3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   14,
    15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   30,   -1,   -1,   33,
    34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,
    53,   54,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,
    72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,
    91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,
    110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,
    129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,
    -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,
    167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,
    186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,
    205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
    243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,
    262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,
    281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,
    300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,
    319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
    338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,
    357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,
    376,  377,  -1,   379,  380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,
    395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,
    414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,
    433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,
    452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,
    471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  3,    4,
    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,
    24,   25,   -1,   -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,
    43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   -1,   61,
    62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,
    81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
    100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,
    119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,
    138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,
    157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,
    176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,
    195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,
    214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
    252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,
    271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,
    290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
    -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,
    328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,
    347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,
    366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,
    385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,
    -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,
    442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,
    461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,
    480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   497,  498,
    -1,   -1,   3,    4,    5,    6,    7,    506,  9,    10,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,
    20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,   38,
    39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
    58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,
    -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
    96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,
    115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,
    134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,
    153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,
    172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,
    -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,
    210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  246,  247,
    248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,
    267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,
    286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,
    305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
    -1,   325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,
    343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,
    362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,
    381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,
    400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,
    438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
    457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
    -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  3,    4,    5,    6,    7,    8,    9,
    10,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,
    -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,
    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,
    67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,
    86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,
    105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,
    124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,
    143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,
    -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,
    -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,
    200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  -1,   -1,   214,  215,  216,  217,  218,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
    238,  239,  240,  -1,   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,
    257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,
    276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
    295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,
    314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  330,  331,  332,
    333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,
    352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,
    371,  372,  373,  374,  375,  376,  377,  -1,   379,  380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,
    390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,
    409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,
    447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,
    466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,
    485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   497,  498,  -1,   -1,   3,    4,    5,
    6,    7,    506,  9,    10,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,
    25,   -1,   -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,
    44,   45,   46,   -1,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   -1,   61,   62,
    63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,
    82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,
    101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,
    120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,
    139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,
    158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,
    177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,
    196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,
    215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
    -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
    -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,
    291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,
    310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,
    329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,
    348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,
    367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  385,
    -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,
    -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,
    443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,
    462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,
    481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   3,    4,    5,    6,
    7,    -1,   9,    10,   -1,   -1,   506,  14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,
    -1,   -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,
    45,   46,   -1,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   -1,   61,   62,   63,
    64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,
    83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,
    102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,
    121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,
    140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,
    -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,
    178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,
    197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,
    216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  -1,
    254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,
    273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,
    292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,
    311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,
    330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,
    349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,
    368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  385,  -1,
    387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,
    406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,
    444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,
    463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,
    482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   3,    4,    5,    6,    7,
    8,    9,    10,   -1,   -1,   506,  14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,
    -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   -1,   43,   44,   45,
    46,   -1,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,
    65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,
    -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,
    122,  -1,   124,  125,  126,  -1,   128,  129,  -1,   131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,
    141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,
    160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,
    179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,
    198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  -1,   -1,   214,  215,  216,
    217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  -1,   254,
    -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,
    274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,
    293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,
    312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  330,
    -1,   332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
    350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,
    369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   379,  380,  381,  382,  383,  384,  385,  -1,   387,
    388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,
    407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
    445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,
    464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,
    483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   497,  498,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   506,  3,    4,    5,    6,    7,    8,    9,    10,   -1,   -1,   -1,   14,   15,   16,
    17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   30,   -1,   -1,   33,   34,   -1,
    36,   37,   38,   39,   40,   41,   -1,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   53,   54,
    55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,
    74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,
    93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,
    -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  -1,
    131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,
    150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,
    169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,
    188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,
    -1,   208,  209,  210,  211,  -1,   -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,
    245,  246,  247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,
    264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,
    -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,
    302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
    321,  322,  323,  -1,   325,  326,  327,  328,  329,  330,  -1,   332,  333,  334,  -1,   336,  337,  338,  -1,
    340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,
    359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,
    -1,   -1,   380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,
    397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,
    435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,
    454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,
    473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3,    497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  14,   15,   16,   17,
    18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,
    37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   54,   55,
    56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,
    75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,
    94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,
    113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,
    -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,
    -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,
    170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,
    189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  204,  205,  206,  -1,
    208,  209,  210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,
    -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   256,  257,  258,  259,  -1,   -1,   262,  263,  264,
    265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,
    284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,
    303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
    322,  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,
    341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,
    360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,
    -1,   380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,
    398,  399,  400,  -1,   -1,   403,  -1,   405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,
    436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,
    455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,
    474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  14,   15,   16,   17,   18,
    19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,
    38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   54,   55,   56,
    57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,
    76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,
    114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,
    -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,
    152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,
    171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,
    190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  204,  205,  206,  -1,   208,
    209,  210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  -1,
    247,  248,  249,  250,  251,  252,  -1,   254,  -1,   256,  257,  258,  259,  -1,   -1,   262,  263,  264,  265,
    266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,
    285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,
    304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  -1,   325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,
    342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,
    -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,
    380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,
    399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,
    437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
    456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
    475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  14,   15,   16,   17,   18,   19,
    20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,
    39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   54,   55,   56,   57,
    58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,
    -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
    96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,
    115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,
    134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,
    153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,
    172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,
    -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,
    210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  -1,   247,
    248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,
    267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,
    286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,
    305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
    -1,   325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,
    343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,
    362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,
    381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,
    400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,
    438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
    457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
    -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  14,   15,   16,   17,   18,   19,   20,
    21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,
    40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   54,   55,   56,   57,   58,
    59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,
    78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
    97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,
    -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,
    135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,
    -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,
    173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,
    192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,
    211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  -1,   247,  248,
    249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,
    268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,
    287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,
    306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,
    325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,
    344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,
    363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,
    382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,
    -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,  436,  437,  438,
    439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,
    458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,
    477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3,    4,    5,    6,    7,    -1,   9,    -1,   -1,   -1,   506,  14,   15,   16,   17,   18,   19,   20,   21,
    -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,
    41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   54,   55,   56,   57,   58,   59,
    -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,
    79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,
    98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,
    -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,
    136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,
    155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,
    -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,
    -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,
    212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  246,  247,  248,  249,
    250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,
    269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,
    307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,
    326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,
    345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,
    -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,
    383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,
    -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,
    440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,
    459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,
    478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   498,  3,    4,    5,    6,    7,    -1,   9,    506,  -1,   -1,   -1,   14,   15,   16,   17,   18,   19,
    20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,
    39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   54,   55,   56,   57,
    58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,
    -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,
    96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,
    115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,
    134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,
    153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,
    172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,
    -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,
    210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  246,  247,
    248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,
    267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,
    286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,
    305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
    -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,
    343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,
    362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,
    381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,
    400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,
    438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
    457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
    -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   498,  3,    4,    5,    6,    7,    -1,   9,    506,  -1,   -1,   -1,   14,   15,   16,   17,
    18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,
    37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   54,   55,
    56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,
    75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,
    -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,
    113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,
    -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,
    -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,
    170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,
    189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,
    208,  209,  210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,
    246,  247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,
    265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,
    284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,
    303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
    322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,
    341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,
    360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,
    -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,
    398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,
    436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,
    455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,
    474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   498,  3,    4,    5,    -1,   -1,   -1,   9,    506,  -1,   -1,   -1,   14,   15,
    16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,
    -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,
    -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,
    73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,
    -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,
    111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,
    130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,
    -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,
    168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,
    187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,
    206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,
    244,  245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  255,  -1,   257,  258,  259,  -1,   -1,   262,
    263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,
    282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,
    301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
    320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,
    -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,
    358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,
    377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,
    396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,
    415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,
    434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,
    453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
    472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   3,    497,  498,  499,  -1,   -1,   -1,   -1,   -1,   -1,   506,  14,   15,   16,
    17,   18,   19,   20,   21,   -1,   23,   24,   25,   26,   27,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,
    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,
    55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,
    74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,
    -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,
    -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,
    131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,
    150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,
    169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,
    188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,
    -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,
    245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,
    264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,
    -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,
    302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
    321,  322,  323,  324,  325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,
    340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,
    359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,
    -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,
    397,  398,  399,  400,  -1,   -1,   403,  -1,   405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,
    435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,
    454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,
    473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  14,   15,   16,   17,
    18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,
    37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,
    56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,
    75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,
    -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,
    113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,
    -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,
    -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,
    170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,
    189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,
    208,  209,  210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,
    -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,
    265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,
    284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,
    303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
    322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,
    341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,
    360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,
    -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,
    398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,
    436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,
    455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,
    474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  14,   15,   16,   17,   18,
    19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,
    -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,
    57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,
    76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,
    114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,
    -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,
    152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,
    171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,
    190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,
    209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,
    247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,
    -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,
    285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,
    304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  324,  325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,
    342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,
    -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,
    380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,
    399,  400,  -1,   -1,   403,  -1,   405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,
    437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
    456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
    475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  14,   15,   16,   17,   18,   19,
    20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,
    39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,
    58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,
    -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,
    96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,
    115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,
    134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,
    -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,
    172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,
    -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,
    -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,
    248,  249,  250,  251,  252,  -1,   254,  -1,   256,  257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,
    267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,
    286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,
    305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
    -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,
    343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,
    362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,
    381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,
    400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,
    438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
    457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
    -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  14,   15,   16,   17,   18,   19,   20,
    21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,
    40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,
    59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,
    78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,
    97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,
    -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,
    135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,
    -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,
    173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,
    192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,
    211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,
    249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,
    268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,
    287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,
    306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,
    325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,
    344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,
    363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,
    382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,
    -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,
    439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,
    458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,
    477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  14,   15,   16,   17,   18,   19,   20,   21,
    -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,
    41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,
    -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,
    79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,
    98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,
    -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,
    136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,
    -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,
    -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,
    -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,
    -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,
    250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,
    269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,
    307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,
    326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,
    345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,
    -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,
    383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,
    -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,
    440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,
    459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,
    478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   3,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  14,   15,   16,   17,   18,   19,   20,   21,   -1,
    23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,
    42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,
    61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,
    80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,
    99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,
    118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,
    137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,
    156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,
    175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,
    194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,
    -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,
    251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,
    270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,
    289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
    308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,
    327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,
    346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,
    -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,
    384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,
    403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,
    441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,
    460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,
    479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   3,    -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,
    24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,
    43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,
    62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,
    81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,
    100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,
    119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,
    138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,
    157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,
    176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,
    -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,
    214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,
    252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,
    271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,
    290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
    -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,
    328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,
    347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,
    366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,
    -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,
    -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,
    442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,
    461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,
    480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   3,    4,    5,
    -1,   -1,   8,    9,    -1,   -1,   -1,   506,  14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   -1,   43,
    44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
    63,   64,   -1,   66,   67,   68,   69,   70,   71,   72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
    82,   83,   84,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,
    101,  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
    120,  121,  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,  132,  133,  134,  135,  136,  -1,   138,
    139,  140,  -1,   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
    158,  159,  160,  -1,   162,  163,  164,  165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,  176,
    177,  178,  179,  180,  181,  182,  183,  -1,   185,  186,  187,  188,  189,  190,  191,  192,  193,  194,  195,
    196,  197,  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,  208,  -1,   210,  211,  212,  213,  214,
    215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  -1,   248,  249,  250,  251,  252,
    253,  254,  255,  256,  257,  258,  259,  260,  261,  262,  -1,   264,  265,  266,  -1,   268,  269,  270,  271,
    272,  273,  274,  275,  276,  -1,   278,  -1,   280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,
    291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
    310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
    329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
    348,  349,  -1,   351,  352,  353,  354,  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
    -1,   368,  -1,   370,  371,  372,  373,  374,  375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,
    386,  387,  388,  389,  390,  391,  -1,   393,  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
    405,  406,  407,  408,  409,  410,  411,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   421,  422,  423,
    424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,  435,  436,  437,  438,  439,  440,  441,  -1,
    -1,   444,  445,  446,  447,  448,  449,  450,  451,  -1,   453,  454,  455,  456,  457,  458,  459,  460,  461,
    462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  -1,   475,  476,  477,  478,  -1,   480,
    481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   493,  494,  495,  -1,   497,  498,  499,
    500,  501,  502,  3,    -1,   -1,   -1,   -1,   8,    -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,
    19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,
    -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,
    57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,
    76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,
    114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,
    -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,
    152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,
    171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,
    190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,
    209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,
    247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,
    -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,
    285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,
    304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,
    342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,
    -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,
    380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,
    399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,
    437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
    456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
    475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   493,
    494,  495,  -1,   497,  498,  499,  500,  501,  502,  3,    -1,   -1,   -1,   -1,   8,    -1,   -1,   -1,   -1,
    -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,
    51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,
    70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,
    108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,
    -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,
    146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,
    165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,
    184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,
    203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,
    222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,
    -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,
    -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,
    279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,
    298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,
    317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,
    336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,
    355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,
    374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,
    393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,
    412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,
    431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,
    450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,
    469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,
    488,  -1,   -1,   -1,   -1,   493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  3,    -1,   -1,   -1,
    -1,   8,    -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,
    45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,
    64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,
    83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,
    102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,
    121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,
    140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,
    -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,
    178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,
    197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,
    216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,
    254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,
    273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,
    292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,
    311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,
    -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,
    349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,
    368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,
    387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,
    406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,
    444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,
    463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,
    482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   493,  494,  495,  -1,   497,  498,  499,  500,
    501,  502,  3,    -1,   -1,   -1,   -1,   8,    -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,
    20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,
    39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,
    58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,
    -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,
    96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,
    115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,
    134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,
    -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,
    172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,
    -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,
    -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,
    248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,
    267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,
    286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,
    305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
    -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,
    343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,
    362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,
    381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,
    400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,
    438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
    457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
    -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   493,  494,
    495,  -1,   497,  498,  499,  500,  501,  502,  3,    -1,   -1,   -1,   -1,   8,    -1,   -1,   -1,   -1,   -1,
    14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,
    52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,
    71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,
    109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,
    128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,
    147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,
    166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,
    185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,
    -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,
    242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,
    -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,
    280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,
    299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,
    318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,
    337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,
    356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,
    -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,
    -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,
    413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,
    -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,
    451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,
    470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,
    -1,   -1,   -1,   -1,   493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  3,    -1,   -1,   -1,   -1,
    8,    -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,
    46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,
    65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,
    -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,
    122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,
    141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,
    160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,
    179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,
    -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,
    -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,
    -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,
    274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,
    293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,
    -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,
    331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
    350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,
    369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,
    388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,
    407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
    445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,
    464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,
    483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   493,  494,  495,  -1,   497,  498,  499,  500,  501,
    502,  3,    -1,   -1,   -1,   -1,   8,    -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,
    21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,
    40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,
    59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,
    78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,
    97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,
    -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,
    135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,
    -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,
    173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,
    192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,
    211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,
    249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,
    268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,
    287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,
    306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,
    325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,
    344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,
    363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,
    382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,
    -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,
    439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,
    458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,
    477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  -1,   -1,   -1,   -1,   493,  494,  495,
    -1,   497,  498,  499,  500,  501,  502,  3,    -1,   -1,   -1,   -1,   8,    -1,   -1,   11,   -1,   -1,   14,
    15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   -1,   -1,   -1,   28,   -1,   -1,   31,   -1,   33,
    34,   -1,   36,   -1,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,
    -1,   -1,   -1,   56,   -1,   -1,   59,   -1,   61,   62,   63,   64,   65,   66,   -1,   -1,   69,   -1,   71,
    72,   73,   -1,   -1,   76,   -1,   78,   79,   -1,   81,   82,   83,   -1,   -1,   86,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   95,   96,   -1,   98,   -1,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,
    110,  111,  -1,   -1,   114,  -1,   -1,   -1,   -1,   119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,
    129,  130,  -1,   -1,   -1,   134,  135,  136,  137,  138,  -1,   140,  141,  -1,   -1,   -1,   -1,   146,  147,
    -1,   -1,   150,  -1,   152,  153,  -1,   -1,   156,  -1,   158,  -1,   160,  161,  -1,   163,  -1,   165,  166,
    -1,   -1,   169,  170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  180,  -1,   -1,   -1,   184,  185,
    186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  -1,   199,  -1,   201,  202,  203,  -1,
    -1,   -1,   -1,   -1,   209,  -1,   211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  -1,   222,  -1,
    224,  225,  226,  227,  -1,   229,  230,  -1,   232,  233,  234,  235,  -1,   237,  238,  239,  240,  241,  242,
    243,  244,  245,  -1,   247,  248,  249,  250,  251,  -1,   -1,   254,  -1,   -1,   257,  258,  259,  260,  -1,
    -1,   263,  264,  -1,   -1,   267,  268,  269,  -1,   271,  -1,   -1,   274,  -1,   -1,   277,  -1,   279,  280,
    281,  282,  -1,   284,  285,  286,  287,  -1,   289,  290,  291,  292,  293,  294,  -1,   -1,   -1,   -1,   299,
    300,  301,  302,  303,  304,  -1,   306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,
    319,  320,  321,  -1,   323,  -1,   325,  -1,   327,  -1,   329,  -1,   331,  332,  333,  334,  335,  336,  337,
    -1,   -1,   340,  -1,   342,  343,  344,  345,  346,  347,  348,  -1,   350,  -1,   352,  353,  -1,   -1,   356,
    357,  358,  359,  -1,   -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  -1,   -1,
    376,  377,  -1,   -1,   380,  381,  -1,   383,  384,  -1,   -1,   387,  388,  -1,   390,  391,  392,  393,  -1,
    -1,   396,  397,  398,  -1,   400,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   408,  -1,   410,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   423,  424,  425,  426,  427,  428,  429,  -1,   -1,   -1,
    -1,   434,  435,  436,  -1,   438,  439,  440,  -1,   442,  443,  444,  445,  -1,   447,  -1,   449,  450,  451,
    -1,   453,  454,  455,  -1,   457,  -1,   459,  460,  461,  -1,   463,  464,  465,  466,  467,  -1,   -1,   -1,
    -1,   -1,   473,  474,  -1,   -1,   477,  478,  479,  480,  481,  482,  483,  484,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3,    493,  494,  495,  -1,   497,  498,  499,  500,  501,  502,  14,   15,   16,   17,   18,   19,
    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
    39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
    58,   59,   60,   61,   62,   63,   64,   65,   66,   67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
    77,   78,   79,   80,   81,   82,   83,   84,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
    96,   97,   98,   99,   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
    115,  116,  117,  118,  119,  120,  121,  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
    134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
    153,  154,  155,  156,  157,  158,  159,  160,  161,  162,  163,  164,  165,  166,  167,  168,  169,  170,  171,
    172,  173,  174,  175,  176,  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
    191,  192,  193,  194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
    210,  211,  212,  213,  214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
    248,  249,  250,  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
    267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,
    286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
    305,  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
    324,  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
    343,  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  359,  360,  361,
    362,  363,  364,  365,  366,  367,  368,  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,  380,
    381,  382,  383,  384,  385,  386,  387,  388,  389,  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,
    400,  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,  435,  436,  437,
    438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
    457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
    476,  477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   499,  14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,
    -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,
    -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,
    -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,
    -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,
    -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,
    -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,
    161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,
    180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,
    199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,
    -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,
    237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,
    -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,
    -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
    294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,
    313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,
    332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
    -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,
    -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,
    389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,
    408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,
    446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,
    465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,
    484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   499,  14,   15,   16,
    17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,
    36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,
    55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,
    -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,
    -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,
    131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,
    150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,
    169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,
    188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,
    -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,
    245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,
    -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,
    -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,
    302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,
    321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,
    340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,
    359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,
    -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,
    397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,
    435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,
    454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,
    473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   499,  14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,
    25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,
    -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,
    63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,
    82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,
    101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,
    120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,
    139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,
    158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,
    177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,
    -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,
    215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,
    -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,
    -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,
    291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,
    310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,
    329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,
    348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,
    367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,
    -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,
    -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,
    443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,
    462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,
    481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   499,
    14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    33,   34,   -1,   36,   37,   38,   39,   40,   41,   -1,   43,   44,   45,   46,   -1,   48,   49,   50,   51,
    52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   -1,   -1,   67,   -1,   69,   70,
    71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,
    -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,
    109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,
    128,  129,  130,  131,  -1,   -1,   134,  135,  136,  -1,   138,  139,  140,  -1,   -1,   143,  -1,   145,  146,
    147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  -1,   -1,   163,  -1,   165,
    166,  167,  168,  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,
    185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,
    -1,   205,  206,  -1,   208,  -1,   210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  -1,   -1,
    242,  243,  244,  245,  -1,   -1,   248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,
    261,  262,  263,  264,  265,  266,  -1,   268,  269,  270,  271,  -1,   273,  274,  -1,   276,  -1,   -1,   -1,
    280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,
    299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  -1,   316,  317,
    318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,
    337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  -1,   -1,   352,  353,  -1,   355,
    356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  -1,   368,  -1,   -1,   371,  372,  373,  374,
    -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  -1,   393,
    394,  395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,
    -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  -1,   -1,   444,  445,  446,  447,  448,  449,  450,
    451,  -1,   453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,
    470,  471,  472,  473,  -1,   475,  -1,   477,  478,  -1,   480,  481,  482,  483,  484,  485,  486,  487,  488,
    3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   499,  14,   15,   16,   17,   18,   19,   20,   21,
    -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,
    41,   -1,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,
    -1,   61,   62,   63,   64,   -1,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,
    79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,
    98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,
    -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,
    136,  -1,   138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,
    155,  156,  157,  158,  -1,   160,  -1,   -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,
    174,  175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,
    -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  -1,   210,  211,
    212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  -1,   -1,   242,  243,  244,  245,  -1,   -1,   248,  249,
    250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   261,  262,  263,  264,  265,  266,  -1,   268,
    269,  270,  271,  -1,   273,  274,  -1,   276,  -1,   -1,   -1,   280,  281,  282,  -1,   284,  285,  286,  287,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,
    307,  308,  -1,   310,  311,  312,  313,  314,  -1,   316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,
    326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,
    345,  346,  347,  348,  349,  -1,   -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,
    -1,   -1,   366,  -1,   368,  -1,   -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,
    383,  384,  -1,   -1,   387,  388,  389,  390,  391,  -1,   393,  394,  395,  396,  397,  398,  399,  400,  -1,
    -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,
    440,  441,  -1,   -1,   444,  445,  446,  447,  448,  449,  450,  451,  -1,   453,  454,  455,  456,  457,  458,
    459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  -1,   475,  -1,   477,
    478,  -1,   480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    4,    5,    6,    7,    -1,   9,    -1,
    -1,   -1,   499,  14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,
    49,   50,   51,   52,   -1,   54,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,
    -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,
    87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,
    -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,
    125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
    -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,
    163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,
    182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,
    201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,
    220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  -1,   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,
    258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,
    277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
    296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,
    334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,
    353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,
    372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,
    391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,
    410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,
    448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
    467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,
    486,  487,  488,  3,    4,    5,    -1,   -1,   -1,   9,    -1,   -1,   498,  -1,   14,   15,   16,   17,   18,
    19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,
    38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,
    57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,
    76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,  -1,   107,  108,  109,  110,  111,  -1,   113,
    114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,
    -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,
    152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,
    171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,
    190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,
    209,  210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  -1,
    247,  248,  249,  250,  251,  252,  -1,   254,  255,  -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,
    266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,
    285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,
    304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,
    342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,
    -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   -1,
    380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,
    399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,
    437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
    456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
    475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    4,    5,    -1,   -1,
    -1,   9,    -1,   497,  498,  -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
    46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,
    65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,
    -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  104,  105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,
    122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,
    141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,
    160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,
    179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,
    198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,
    -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,
    255,  -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,
    274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,
    293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,
    312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,
    331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
    350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,
    369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,
    388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,
    407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
    445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,
    464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,
    483,  484,  485,  486,  487,  488,  3,    4,    5,    -1,   -1,   -1,   9,    -1,   497,  498,  -1,   14,   15,
    16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,
    -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,
    -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,
    73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,
    -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,
    111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,
    130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  -1,   145,  146,  147,  -1,
    -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,
    168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,
    187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,
    206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,
    244,  245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  255,  -1,   257,  258,  259,  -1,   -1,   262,
    263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,
    282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,
    301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
    320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,
    -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,
    358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  370,  371,  372,  373,  374,  -1,   376,
    377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,
    396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,
    415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,
    434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,
    453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
    472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,
    -1,   -1,   -1,   -1,   9,    -1,   497,  498,  -1,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
    24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,
    43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,
    62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,
    81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,
    100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,
    119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,
    138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   154,  -1,   156,
    157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  174,  175,
    176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,
    -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,
    214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,
    252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,
    271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,
    290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
    -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,
    328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,
    347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,
    366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,
    -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,
    -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,
    442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,
    461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,
    480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    4,    5,    -1,   -1,   -1,   9,    -1,   497,  498,
    -1,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
    32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,  106,  107,
    108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
    127,  128,  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
    146,  147,  148,  149,  150,  151,  152,  153,  154,  155,  156,  157,  158,  159,  160,  161,  162,  163,  164,
    165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  180,  181,  182,  183,
    184,  185,  186,  187,  188,  189,  190,  191,  192,  193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
    203,  204,  205,  206,  207,  208,  209,  210,  211,  212,  213,  214,  215,  216,  217,  218,  219,  220,  221,
    222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
    241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
    260,  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
    279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
    298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
    317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
    336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
    355,  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,  372,  373,
    374,  375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,  391,  392,
    393,  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
    412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
    431,  432,  433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,
    450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,
    469,  470,  471,  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,
    488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,
    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
    40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
    59,   60,   61,   62,   63,   64,   65,   66,   67,   68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
    78,   79,   80,   81,   82,   83,   84,   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
    97,   98,   99,   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
    116,  117,  118,  119,  120,  121,  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
    135,  136,  137,  138,  139,  140,  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
    154,  155,  156,  157,  158,  159,  160,  161,  162,  163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
    173,  174,  175,  176,  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,  187,  188,  189,  190,  191,
    192,  193,  194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
    211,  212,  213,  214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
    249,  250,  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,  267,
    268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
    287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
    306,  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
    325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
    344,  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  359,  360,  361,  362,
    363,  364,  365,  366,  367,  368,  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,  380,  381,
    382,  383,  384,  385,  386,  387,  388,  389,  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
    401,  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,  435,  436,  437,  438,
    439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,
    458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  476,
    477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
    67,   68,   69,   70,   71,   72,   73,   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
    86,   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  104,
    105,  106,  107,  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
    124,  125,  126,  127,  128,  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
    143,  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,  155,  156,  157,  158,  159,  160,  161,
    162,  163,  164,  165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  180,
    181,  182,  183,  184,  185,  186,  187,  188,  189,  190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
    200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  210,  211,  212,  213,  214,  215,  216,  217,  218,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
    238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
    257,  258,  259,  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
    276,  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
    295,  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
    314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
    333,  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
    352,  353,  354,  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,
    371,  372,  373,  374,  375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,  387,  388,  389,
    390,  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
    409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  430,  431,  432,  433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,
    447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,
    466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,  482,  483,  484,
    485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,
    18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,
    37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   54,   55,
    56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,
    75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   88,   89,   90,   91,   92,   93,
    94,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,
    113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,
    -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,
    -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,
    170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,
    189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,
    208,  209,  210,  211,  212,  -1,   214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,
    -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,
    265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,
    284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,
    303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
    322,  323,  -1,   325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,
    341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,
    360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,
    -1,   380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,
    398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  -1,   433,  434,  435,
    436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,
    455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,
    474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   5,    -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,
    45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,
    64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,
    83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,
    102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,
    121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,
    140,  141,  142,  143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,
    -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,
    178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,
    197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,
    216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  -1,   247,  248,  249,  250,  251,  252,  -1,
    254,  255,  -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,
    273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,
    292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,
    311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,
    -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,
    349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,
    368,  369,  370,  371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,
    387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,
    406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,
    444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,
    463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,
    482,  483,  484,  485,  486,  487,  488,  3,    -1,   5,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,
    15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
    34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,
    -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,
    72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,
    91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,  -1,   107,  108,  109,
    110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,
    129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,
    -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,
    167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,
    186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,
    205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,
    243,  244,  245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,
    262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,
    281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,
    300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,
    319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,
    338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,
    357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,
    376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,
    395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,
    414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,
    433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,
    452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,
    471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,
    23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,
    42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,
    61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,
    80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   94,   95,   96,   97,   98,
    99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,
    118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,
    137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,
    156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,
    175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,
    194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,
    -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  -1,   247,  248,  249,  250,
    251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,
    270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,
    289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
    308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,
    327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,
    346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,
    -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,
    384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,
    403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,
    441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,
    460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,
    479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   26,   27,   -1,   -1,   -1,
    -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,
    50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,
    69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,
    -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,
    107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,
    126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,
    145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,
    -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,
    183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,
    202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,
    221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,
    240,  -1,   242,  243,  244,  245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,
    259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,
    -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
    -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,
    316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,
    335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,
    -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,
    373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,
    392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,
    411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
    -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,
    449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,
    468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,
    487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,
    39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,
    58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,
    -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,
    96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,
    115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,
    134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,
    153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,
    172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,
    -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,
    210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  -1,   247,
    248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,
    267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,
    286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,
    305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
    -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,
    343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,
    362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,
    381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,
    400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,
    438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
    457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
    -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
    -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,
    -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,
    85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,
    -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,
    -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,
    -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,
    161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,
    180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,
    199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  -1,
    -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
    237,  238,  239,  240,  -1,   242,  243,  244,  245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,
    -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,
    -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
    294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,
    313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,
    332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
    -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,
    -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,
    389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,
    408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,
    446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,
    465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,
    484,  485,  486,  487,  488,  3,    -1,   5,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,
    17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,
    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,
    55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,
    74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,
    -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,
    -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,
    131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,
    150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,
    169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,
    188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,
    -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,
    245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,
    264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,
    -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,
    302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
    321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,
    340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,
    359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,
    -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,
    397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,
    435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,
    454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,
    473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   5,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,
    25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,
    44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,
    63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,
    82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,
    101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,
    120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,
    139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,
    158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,
    177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,
    196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,
    215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  -1,   247,  248,  249,  250,  251,  252,
    -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
    -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,
    291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,
    310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,
    329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,
    348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,
    367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,
    -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,
    -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,
    443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,
    462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,
    481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,
    52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,
    71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,
    -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,
    109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,
    128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,
    147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  162,  163,  -1,   165,
    166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,
    185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,
    -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,
    242,  243,  244,  245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,
    -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,
    280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,
    299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,
    318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,
    337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,
    356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,
    -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,
    -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,
    413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,
    -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,
    451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,
    470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,
    3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,
    -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,
    41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,
    -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,
    79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,
    98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,
    -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,
    136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,
    155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,
    -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,
    -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,
    212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  -1,   247,  248,  249,
    250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,
    269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,
    307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,
    326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,
    345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,
    -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,
    383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,
    -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,
    440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,
    459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,
    478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,
    49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,
    -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,
    87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,
    -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,
    125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,
    -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,
    163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,
    182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,
    201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,
    220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  -1,   242,  243,  244,  245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,
    258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,
    277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
    296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,
    334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,
    353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,
    372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,
    391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,
    410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,
    448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
    467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,
    486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,
    19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,
    38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,
    57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,
    76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,
    114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,
    -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,
    152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,
    171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,
    190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,
    209,  210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  -1,
    247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,
    266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,
    285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,
    304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,
    342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,
    -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,
    380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,
    399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,
    437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
    456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
    475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
    46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,
    65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,
    -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,
    122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,
    141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,
    160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,
    179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,
    198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,
    -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,
    -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,
    274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,
    293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,
    312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,
    331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
    350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,
    369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,
    388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,
    407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
    445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,
    464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,
    483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,
    16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,
    -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,
    -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,
    73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,
    -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,
    111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,
    130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,
    -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,
    168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,
    187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,
    206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,
    244,  245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,
    263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,
    282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,
    301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
    320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,
    -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,
    358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,
    377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,
    396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,
    415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,
    434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,
    453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
    472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,
    24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,
    43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,
    62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,
    81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,
    100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,
    119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,
    138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,
    157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,
    176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,
    195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,
    214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  -1,   247,  248,  249,  250,  251,
    252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,
    271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,
    290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
    -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,
    328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,
    347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,
    366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,
    -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,
    -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,
    442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,
    461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,
    480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,
    51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,
    70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,
    -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,
    108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,
    -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,
    146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,
    165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,
    184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,
    203,  -1,   205,  206,  -1,   208,  209,  210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,
    222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
    -1,   242,  243,  244,  245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,
    -1,   -1,   262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,
    279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,
    298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,
    317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,
    336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,
    355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,
    374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,
    393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,
    412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,
    431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,
    450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,
    469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,
    488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,
    21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,
    40,   41,   42,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,
    59,   -1,   61,   62,   63,   64,   65,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,
    78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,
    97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,
    -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,
    135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,
    -1,   155,  156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,
    173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,  185,  186,  187,  188,  189,  190,  -1,
    192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  210,
    211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  -1,   242,  243,  244,  245,  -1,   247,  248,
    249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  264,  265,  266,  267,
    268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,
    287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,
    306,  307,  308,  -1,   310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,
    325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,
    344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,
    363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,
    382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  396,  397,  398,  399,  400,
    -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,
    439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,
    458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,
    477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,
    48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,   -1,
    -1,   68,   69,   70,   71,   72,   73,   -1,   75,   76,   77,   78,   79,   80,   81,   82,   83,   -1,   -1,
    86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  104,
    105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,
    124,  125,  126,  -1,   128,  129,  130,  131,  -1,   133,  134,  135,  136,  137,  138,  139,  140,  141,  -1,
    143,  -1,   145,  146,  147,  -1,   -1,   150,  151,  152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,
    -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,
    -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,
    200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,
    238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,
    257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  272,  273,  274,  -1,
    276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
    295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,
    314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,
    333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,
    352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,
    371,  372,  373,  374,  -1,   376,  377,  -1,   379,  380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,
    390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,
    409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,
    447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,
    466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,
    485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,
    18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,
    37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,
    56,   57,   58,   59,   60,   61,   62,   63,   64,   65,   -1,   -1,   68,   69,   70,   71,   72,   73,   -1,
    75,   76,   77,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,  -1,   107,  108,  109,  110,  111,  -1,
    113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,
    -1,   133,  134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,
    151,  152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,
    -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,
    189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,
    208,  209,  -1,   211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,
    -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,
    265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  283,
    284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,
    303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,
    322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,
    341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,
    360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,
    379,  380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,
    398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,
    436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,
    455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,
    474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,
    45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   60,   61,   62,   63,
    64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   77,   78,   79,   80,   81,   82,
    83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,
    102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,
    121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   133,  134,  135,  136,  137,  138,  139,
    140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  151,  152,  -1,   -1,   -1,   156,  157,  158,
    -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,
    178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,
    197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,
    216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,
    254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,
    273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,
    292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,
    311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,
    -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,
    349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,
    368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   379,  380,  381,  382,  383,  384,  -1,   -1,
    387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,
    406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,
    444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,
    463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,
    482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,
    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
    34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,
    -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,
    72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   84,   -1,   86,   87,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,
    110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,
    129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,
    -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  159,  160,  161,  -1,   163,  -1,   165,  166,
    167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,
    186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,
    205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,
    243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,
    262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,
    281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
    300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,
    319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,
    338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,
    357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,
    376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,
    395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,
    414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,
    433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,
    452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,
    471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,
    42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,
    61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,
    80,   81,   82,   83,   84,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,
    99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,
    118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,
    137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,
    156,  157,  158,  159,  160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,
    175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,
    194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,
    -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,
    251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,
    270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,
    289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
    308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
    327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,
    346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,
    -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,
    384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,
    403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,
    441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,
    460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,
    479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,
    50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,
    69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   84,   -1,   86,   87,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,
    107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,
    126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,
    145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,
    -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,
    -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,
    202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,
    221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,
    240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,
    259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,
    -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
    297,  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,
    316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,
    -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,
    -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,
    373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,
    392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,
    411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
    -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,
    449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,
    468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,
    487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,
    20,   21,   22,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,
    39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,
    58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,
    -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,
    96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,
    115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,
    134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  151,  152,
    -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,
    172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,
    -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,
    -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,
    248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,
    267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,
    286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,
    305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
    -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,
    343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,
    362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,
    381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,
    400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,
    438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
    457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
    -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,
    -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,
    -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   84,
    -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,
    -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,
    -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,
    -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,
    161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,
    180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,
    199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,
    -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,
    237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,
    -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,
    -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
    294,  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,
    313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,  -1,   331,
    332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
    -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,
    -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,
    389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,
    408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,
    446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,
    465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,
    484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,
    17,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,
    36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,
    55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,
    -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,
    -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,
    131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,
    150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,
    169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,
    188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,
    -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,
    245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   256,  257,  258,  259,  -1,   -1,   262,  263,
    -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,
    -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,
    302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,
    321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,
    340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,
    359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,
    -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,
    397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,
    435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,
    454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,
    473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,
    25,   26,   27,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,
    -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,
    63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,
    82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,
    101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,
    120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,
    139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,
    158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,
    177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,
    -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,
    215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,
    -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,
    -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,
    291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,
    310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,
    329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,
    348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,
    367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,
    -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,
    -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,
    443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,
    462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,
    481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,
    52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,
    71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,
    109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,
    128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,
    147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,
    166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,
    185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,
    -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,
    242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,
    -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,
    280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,
    299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,
    318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,
    337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,
    356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,
    -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,
    -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,
    413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,
    -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,
    451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,
    470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,
    3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,
    22,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,
    41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,
    -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,
    79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,
    98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,
    -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,
    136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,
    -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,
    -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,
    -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,
    -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,
    250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,
    269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,
    307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,
    326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,
    345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,
    -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,
    383,  384,  385,  -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,
    -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,
    440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,
    459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,
    478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,
    49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,
    -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,
    87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,
    -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,
    125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,
    -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,
    163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,
    182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,
    201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,
    220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,
    239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,
    258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,
    277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
    296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,
    334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,
    353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,
    372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,
    391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,
    410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,
    448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
    467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,
    486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,
    19,   20,   21,   22,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,
    -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,
    57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,
    76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,
    114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,
    -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,
    152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,
    171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,
    190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,
    209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,
    247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,
    -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,
    285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,
    304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,
    342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,
    -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,
    380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,
    399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,
    437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
    456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
    475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,
    46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,
    65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,
    -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,
    122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,
    141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,
    160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,
    179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,
    -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,
    -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,
    -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,
    274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,
    293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,
    -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,
    331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
    350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,
    369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,
    388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,
    407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
    445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,
    464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,
    483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,
    16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,
    -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,
    -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,
    73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,
    111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,
    130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,
    -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,
    168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,
    187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,
    206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,
    -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,
    263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,
    282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,
    301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,
    320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,
    -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,
    358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,
    377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,
    -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,
    415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,
    434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,
    453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
    472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,
    24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,
    43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,
    62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,
    81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,
    100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,
    119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,
    138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,
    157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,
    176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,
    -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,
    214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,
    252,  -1,   254,  -1,   256,  257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,
    271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,
    290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
    -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,
    328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,
    347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,
    366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,
    -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,
    -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,
    442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,
    461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,
    480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,
    51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,
    70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,
    108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,
    -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,
    146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,
    165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,
    184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,
    203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,
    222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,
    -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,
    -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,
    279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,
    298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,
    317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,
    336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,
    355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,
    374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,
    393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,
    412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,
    431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,
    450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,
    469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,
    488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,
    21,   22,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,
    40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,
    59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,
    78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,
    97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,
    -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,
    135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,
    -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,
    173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,
    192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,
    211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,
    249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,
    268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,
    287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,
    306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,
    325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,
    344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,
    363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,
    382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,
    -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,
    439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,
    458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,
    477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,
    48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,
    -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,
    86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,
    105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,
    124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,
    143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,
    -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,
    -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,
    200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,
    238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,
    257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,
    276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
    295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,
    314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,
    333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,
    352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,
    371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,
    390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,
    409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,
    447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,
    466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,
    485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,
    18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,
    37,   38,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,
    56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,
    75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,
    113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,
    -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,
    -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,
    -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,
    189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,
    208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,
    -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,
    265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,
    284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,
    303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,
    322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,
    341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,
    360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,
    -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,
    398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,
    436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,
    455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,
    474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,
    45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,
    64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,
    83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,
    102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,
    121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,
    140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,
    -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,
    178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,
    197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,
    216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,
    254,  -1,   256,  257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,
    273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,
    292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,
    311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,
    -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,
    349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,
    368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,
    387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,
    406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,
    444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,
    463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,
    482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,
    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
    34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,
    -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,
    72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,
    110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,
    129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,
    -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,
    167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,
    186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,
    205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,
    243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,
    262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,
    281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,
    300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,
    319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,
    338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,
    357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,
    376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,
    395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,
    414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,
    433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,
    452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,
    471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   22,
    23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,
    42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,
    61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,
    80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,
    99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,
    118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,
    137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,
    156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,
    175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,
    194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,
    -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,
    251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,
    270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,
    289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
    308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,
    327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,
    346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,
    -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,
    384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,
    403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,
    441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,
    460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,
    479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,
    50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,
    69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,
    107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,
    126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,
    145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,
    -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,
    -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,
    202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,
    221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,
    240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,
    259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,
    -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
    -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,
    316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,
    -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,
    -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,
    373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,
    392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,
    411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
    -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,
    449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,
    468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,
    487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,
    20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,
    39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,
    58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,
    -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,
    96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,
    115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,
    134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,
    -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,
    172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,
    -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,
    -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,
    248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,
    267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,
    286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,
    305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
    -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,
    343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  354,  355,  356,  357,  358,  359,  360,  -1,
    362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,
    381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,
    400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,
    438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
    457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
    -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   5,    -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,
    -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,
    -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,
    -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,
    -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,
    -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,
    -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,
    161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,
    180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,
    199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,
    -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,
    237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,
    -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,
    -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
    294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,
    313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,
    332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
    -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,
    -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,
    389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,
    408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,
    446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,
    465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,
    484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,
    17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   31,   -1,   33,   34,   -1,
    36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,
    55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,
    -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,
    -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,
    131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,
    150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,
    169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,
    188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,
    -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,
    245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,
    -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,
    -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,
    302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,
    321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,
    340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,
    359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,
    -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,
    397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,
    435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,
    454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,
    473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,
    25,   -1,   -1,   -1,   -1,   -1,   31,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,
    -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,
    63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,
    82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,
    101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,
    120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,
    139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,
    158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,
    177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,
    -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,
    215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,
    -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,
    -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,
    291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,
    310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,
    329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,
    348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,
    367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,
    -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,
    -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,
    443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,
    462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,
    481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,
    52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,
    71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,  -1,   107,  108,
    109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,
    128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,
    147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,
    166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,
    185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,
    -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,
    242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,
    -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,
    280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,
    299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,
    318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,
    337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,
    356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,
    -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,
    -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,
    413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,
    -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,
    451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,
    470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,
    3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,
    -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,
    41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,
    -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,
    79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,
    98,   99,   100,  101,  102,  103,  104,  105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,
    -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,
    136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,
    -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,
    -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,
    -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,
    -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,
    250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,
    269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,
    307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,
    326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,
    345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,
    -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,
    383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,
    -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,
    440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,
    459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,
    478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,
    49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,
    -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,
    87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  104,  105,
    -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,
    125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,
    -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,
    163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,
    182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,
    201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,
    220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,
    239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,
    258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,
    277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
    296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,
    334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,
    353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,
    372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,
    391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,
    410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,
    448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
    467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,
    486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,
    19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,
    -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,
    57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,
    76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,
    114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,
    -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,
    152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,
    171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,
    190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,
    209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,
    247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,
    -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,
    285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,
    304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,
    342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,
    -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,
    380,  381,  382,  383,  384,  -1,   386,  387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,
    399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,
    437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
    456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
    475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,
    46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,
    65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,
    -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,
    122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,
    141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,
    160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,
    179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,
    -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  212,  -1,   214,  215,  216,
    -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,
    -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,
    274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,
    293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,
    -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,
    331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
    350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,
    369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,
    388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,
    407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
    445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,
    464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,
    483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,
    16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,
    -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,
    -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,
    73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,
    111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,
    130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,
    -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,
    168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,
    187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,
    206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,
    -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,
    263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,
    282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,
    301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,
    320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,
    -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,
    358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,
    377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,
    -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,
    415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,
    434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,
    453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
    472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,
    24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,
    43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,
    62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,
    81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,
    100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,
    119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,
    138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,
    157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,
    176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,
    -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,
    214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,
    252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,
    271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,
    290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
    -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,
    328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,
    347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,
    366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,
    -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,
    -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,
    442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,
    461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,
    480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,
    51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,
    70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,
    108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,
    -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,
    146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,
    165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,
    184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,
    203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,
    222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,
    -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,
    -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,
    279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,
    298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,
    317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,
    336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,
    355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,
    374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,
    393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,
    412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,
    431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,
    450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,
    469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,
    488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,
    21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,
    40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,
    59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,
    78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,
    97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,
    -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,
    135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,
    -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,
    173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,
    192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,
    211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,
    249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,
    268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,
    287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,
    306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,
    325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,
    344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,
    363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,
    382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,
    -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,
    439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,
    458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,
    477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,
    48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,
    -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,
    86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,
    105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,
    124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,
    143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,
    -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,
    -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,
    200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,
    238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,
    257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,
    276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
    295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,
    314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,
    333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,
    352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,
    371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,
    390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,
    409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,
    447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,
    466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,
    485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,
    18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,
    37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,
    56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,
    75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,
    113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,
    -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,
    -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,
    -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,
    189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,
    208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,
    -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,
    265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,
    284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,
    303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,
    322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,
    341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,
    360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,
    -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,
    398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,
    436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,
    455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,
    474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,
    45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,
    64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,
    83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,
    102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,
    121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,
    140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,
    -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,
    178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,
    197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,
    216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,
    254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,
    273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,
    292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,
    311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,
    -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,
    349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,
    368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,
    387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,
    406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,
    444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,
    463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,
    482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,
    15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
    34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,
    -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,
    72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,
    110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,
    129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,
    -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,
    167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,
    186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,
    205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,
    243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,
    262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,
    281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,
    300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,
    319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,
    338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,
    357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,
    376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,
    395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,
    414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,
    433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,
    452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,
    471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,
    23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,
    42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,
    61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,
    80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,
    99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,
    118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,
    137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,
    156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,
    175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,
    194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,
    -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,
    251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,
    270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,
    289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
    308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,
    327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,
    346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,
    -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,
    384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,
    403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,
    441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,
    460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,
    479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,
    50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,
    69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,
    107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,
    126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,
    145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,
    -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,
    -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,
    202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,
    221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,
    240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,
    259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,
    -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
    -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,
    316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,
    -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,
    -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,
    373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,
    392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,
    411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
    -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,
    449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,
    468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,
    487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,
    20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,
    39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,
    58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,
    -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,
    96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,
    115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,
    134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,
    -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,
    172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,
    -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,
    -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,
    248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,
    267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,
    286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,
    305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
    -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,
    343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,
    362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,
    381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,
    400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,
    438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
    457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
    -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,
    -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,
    -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,
    -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,
    -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,
    -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,
    -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,
    161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,
    180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,
    199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,
    -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,
    237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,
    -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,
    -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
    294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,
    313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,
    332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
    -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,
    -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,
    389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,
    408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,
    446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,
    465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,
    484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,
    17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,
    36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,
    55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,
    -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,
    -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,
    131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,
    150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,
    169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,
    188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,
    -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,
    245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,
    -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,
    -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,
    302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,
    321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,
    340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,
    359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,
    -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,
    397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,
    435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,
    454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,
    473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,
    25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,
    -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,
    63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,
    82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,
    101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,
    120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,
    139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,
    158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,
    177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,
    -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,
    215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,
    -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,
    -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,
    291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,
    310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,
    329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,
    348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,
    367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,
    -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,
    -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,
    443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,
    462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,
    481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,
    52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,
    71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,
    109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,
    128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,
    147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,
    166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,
    185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,
    -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,
    242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,
    -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,
    280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,
    299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,
    318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,
    337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,
    356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,
    -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,
    -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,
    413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,
    -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,
    451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,
    470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,
    3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,
    -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,
    41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,
    -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,
    79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,
    98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,
    -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,
    136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,
    -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,
    -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,
    -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,
    -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
    231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,
    250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,
    269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,
    288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,
    307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,
    326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,
    345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,
    -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,
    383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,
    -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
    421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,
    440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,
    459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,
    478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,
    49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,
    -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,
    87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,
    -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,
    125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,
    -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,
    163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,
    182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,
    201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,
    220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,
    239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,
    258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,
    277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
    296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,
    315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,
    334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,
    353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,
    372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,
    391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,
    410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
    429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,
    448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
    467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,
    486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,
    19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,
    -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,
    57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,
    76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,
    114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,
    -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,
    152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,
    171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,
    190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,
    209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,
    228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,
    247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,
    -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,
    285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,
    304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
    323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,
    342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,
    -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,
    380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,
    399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
    418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,
    437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
    456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
    475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,
    46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,
    65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,
    -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,
    122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,
    141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,
    160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,
    179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,
    -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,
    -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,
    -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,
    274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,
    293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,
    -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,
    331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
    350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,
    369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,
    388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,
    407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
    426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
    445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,
    464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,
    483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,
    16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,
    -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,
    -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,
    73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,
    111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,
    130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,
    -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,
    168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,
    187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,
    206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,
    225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,
    -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,
    263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,
    282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,
    301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,
    320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,
    -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,
    358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,
    377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,
    -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,
    415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,
    434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,
    453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
    472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,
    24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,
    43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,
    62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,
    81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,
    100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,
    119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,
    138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,
    157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,
    176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,
    -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,
    214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
    233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,
    252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,
    271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,
    290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
    -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,
    328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,
    347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,
    366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,
    -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,
    -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
    423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,
    442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,
    461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,
    480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,
    51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,
    70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,
    108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,
    -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,
    146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,
    165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,
    184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,
    203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,
    222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,
    -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,
    -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,
    279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,
    298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,
    317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,
    336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,
    355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,
    374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,
    393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,
    412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,
    431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,
    450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,
    469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,
    488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,
    21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,
    40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,
    59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,
    78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,
    97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,
    -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,
    135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,
    -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,
    173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,
    192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,
    211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
    230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,
    249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,
    268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,
    287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,
    306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,
    325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,
    344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,
    363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,
    382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,
    -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
    420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,
    439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,
    458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,
    477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,
    -1,   -1,   31,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,
    48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,
    -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,
    86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,
    105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,
    124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,
    143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,
    -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,
    -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,
    200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,
    238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,
    257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,
    276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
    295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,
    314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   -1,   332,
    333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,
    352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,
    371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,
    390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,
    409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
    428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,
    447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,
    466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,
    485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,
    18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,
    37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,
    56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,
    75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,
    113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,
    -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,
    -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,
    -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,
    189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,
    208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,
    227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,
    -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,
    265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,
    284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,
    303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,
    322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,
    341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,
    360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,
    -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,
    398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
    417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,
    436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,
    455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,
    474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,
    45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,
    64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,
    83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,
    102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,
    121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,
    140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,
    -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,
    178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,
    197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,
    216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,
    254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,
    273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,
    292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,
    311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,
    -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,
    349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,
    368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,
    387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,
    406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,
    444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,
    463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,
    482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,
    15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
    34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,
    -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,
    72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,
    110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,
    129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,
    -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,
    167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,
    186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,
    205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,
    224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,
    243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,
    262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,
    281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,
    300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,
    319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,
    338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,
    357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,
    376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,
    395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,
    414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,
    433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,
    452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,
    471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,
    23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,
    42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,
    61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,
    80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,
    99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,
    118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,
    137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,
    156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,
    175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,
    194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,
    -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,
    232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,
    251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,
    270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,
    289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
    308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,
    327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,
    346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,
    -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,
    384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,
    403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
    422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,
    441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,
    460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,
    479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,
    50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,
    69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,
    107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,
    126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,
    145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,
    -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,
    -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,
    202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,
    221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,
    240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,
    259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,
    -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
    -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,
    316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,
    -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,
    -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,
    373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,
    392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,
    411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
    -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,
    449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,
    468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,
    487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,
    20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,
    39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,
    58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,
    -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,
    96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,
    115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,
    134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,
    -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,
    172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,
    -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,
    -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
    229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,
    248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,
    267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,
    286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,
    305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
    -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,
    343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,
    362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,
    381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,
    400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
    419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,
    438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
    457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
    -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,
    -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,
    -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,
    -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,
    -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,
    -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,
    -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,
    161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,
    180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,
    199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,
    -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,
    237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,
    -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,
    -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
    294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,
    313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,
    332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
    -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,
    -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,
    389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,
    408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
    427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,
    446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,
    465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,
    484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,
    17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,
    36,   37,   -1,   39,   40,   41,   42,   43,   -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,
    55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,
    -1,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,
    -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,
    131,  -1,   -1,   134,  135,  136,  137,  138,  139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,
    150,  -1,   152,  -1,   -1,   -1,   156,  157,  158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,
    169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,
    188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,
    -1,   208,  209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,
    226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,
    245,  -1,   247,  248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,
    -1,   265,  -1,   267,  268,  269,  270,  271,  -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,
    -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,
    302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,
    321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,
    340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,
    359,  360,  -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,
    -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,
    397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
    416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,
    435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,
    454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,
    473,  474,  475,  -1,   477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,
    25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   -1,   39,   40,   41,   42,   43,
    -1,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,
    63,   64,   65,   -1,   -1,   -1,   69,   70,   71,   72,   73,   -1,   75,   76,   -1,   78,   79,   80,   81,
    82,   83,   -1,   -1,   86,   87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,
    101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,
    120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  137,  138,
    139,  140,  141,  -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   -1,   156,  157,
    158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  167,  168,  169,  -1,   171,  172,  173,  -1,   175,  176,
    177,  178,  179,  180,  -1,   182,  -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,
    -1,   197,  -1,   199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  209,  -1,   211,  -1,   -1,   214,
    215,  216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  252,
    -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  263,  -1,   265,  -1,   267,  268,  269,  270,  271,
    -1,   273,  274,  -1,   276,  277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  -1,
    291,  292,  293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,
    310,  311,  -1,   313,  314,  315,  -1,   317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,
    329,  -1,   331,  332,  333,  334,  -1,   336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,
    348,  349,  350,  -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,
    367,  368,  369,  -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,
    -1,   387,  388,  389,  390,  391,  392,  393,  -1,   395,  -1,   397,  398,  399,  400,  -1,   -1,   403,  -1,
    -1,   406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
    424,  425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  442,
    443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,
    462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  -1,   477,  478,  479,  480,
    481,  482,  483,  484,  485,  486,  487,  488,  3,    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    33,   34,   -1,   36,   37,   38,   39,   40,   41,   -1,   43,   44,   45,   46,   -1,   48,   49,   50,   51,
    52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   -1,   -1,   67,   -1,   69,   70,
    71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,   -1,
    -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,
    109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,  -1,
    128,  129,  130,  131,  -1,   -1,   134,  135,  136,  -1,   138,  139,  140,  -1,   -1,   143,  -1,   145,  146,
    147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  -1,   -1,   163,  -1,   165,
    166,  167,  168,  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  180,  -1,   182,  183,  184,
    185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,  203,
    -1,   205,  206,  -1,   208,  -1,   210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,  222,
    223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  -1,   -1,
    242,  243,  244,  245,  -1,   -1,   248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,  -1,
    -1,   262,  263,  264,  265,  266,  -1,   268,  269,  270,  271,  -1,   273,  274,  -1,   276,  -1,   -1,   -1,
    280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,   298,
    299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  -1,   316,  317,
    318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,  336,
    337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  -1,   -1,   352,  353,  -1,   355,
    356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  -1,   368,  -1,   -1,   371,  372,  373,  374,
    -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  -1,   393,
    394,  395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,   431,
    -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  -1,   -1,   444,  445,  446,  447,  448,  449,  450,
    451,  -1,   453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,
    470,  471,  472,  473,  -1,   475,  -1,   477,  478,  3,    480,  481,  482,  483,  484,  485,  486,  487,  488,
    -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   -1,   43,   44,   45,   46,   -1,   48,   49,   50,
    51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   -1,   -1,   67,   -1,   69,
    70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,   -1,
    -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,   107,
    108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,  126,
    -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  -1,   138,  139,  140,  -1,   -1,   143,  -1,   145,
    146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  -1,   -1,   163,  -1,
    165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,  183,
    -1,   185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,  202,
    203,  -1,   205,  206,  -1,   208,  -1,   210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,  221,
    222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  -1,
    -1,   242,  243,  244,  245,  246,  -1,   248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,  259,
    -1,   -1,   262,  -1,   264,  265,  266,  -1,   268,  269,  270,  271,  -1,   273,  274,  -1,   276,  -1,   -1,
    -1,   280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  -1,
    298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  -1,   316,
    317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,  335,
    336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  -1,   -1,   352,  353,  354,
    355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  -1,   368,  -1,   -1,   371,  372,  373,
    374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,  -1,
    393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,  411,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   421,  422,  423,  424,  425,  426,  427,  428,  429,  -1,
    431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  -1,   -1,   444,  445,  446,  447,  448,  449,
    450,  451,  -1,   453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,
    469,  470,  471,  472,  473,  -1,   475,  -1,   477,  478,  3,    480,  481,  482,  483,  484,  485,  486,  487,
    488,  -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   -1,   43,   44,   45,   46,   -1,   48,   49,
    50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   -1,   -1,   67,   -1,
    69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,   87,
    -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,  -1,
    107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,  125,
    126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  -1,   138,  139,  140,  -1,   -1,   143,  -1,
    145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  -1,   -1,   163,
    -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   182,
    183,  -1,   185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,  201,
    202,  203,  -1,   205,  206,  -1,   208,  -1,   210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,  220,
    221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,
    240,  -1,   242,  243,  244,  245,  -1,   -1,   248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,  258,
    259,  -1,   -1,   262,  -1,   264,  265,  266,  -1,   268,  269,  270,  271,  -1,   273,  274,  -1,   276,  -1,
    -1,   -1,   280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
    -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,  -1,
    316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,  334,
    335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  -1,   -1,   352,  353,
    -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  -1,   368,  -1,   -1,   371,  372,
    373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,  391,
    -1,   393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,  410,
    411,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   421,  422,  423,  424,  425,  426,  427,  428,  429,
    -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  -1,   -1,   444,  445,  446,  447,  448,
    449,  450,  451,  -1,   453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,
    468,  469,  470,  471,  472,  473,  -1,   475,  -1,   477,  478,  3,    480,  481,  482,  483,  484,  485,  486,
    487,  488,  -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   -1,   43,   44,   45,   46,   -1,   48,
    49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   -1,   -1,   67,
    -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,   86,
    87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,   105,
    -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,   124,
    125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  -1,   138,  139,  140,  -1,   -1,   143,
    -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  -1,   -1,
    163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,
    182,  183,  -1,   185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,  200,
    201,  202,  203,  -1,   205,  206,  -1,   208,  -1,   210,  211,  212,  -1,   214,  215,  216,  -1,   -1,   219,
    220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
    239,  240,  -1,   242,  243,  244,  245,  -1,   -1,   248,  249,  250,  251,  252,  -1,   254,  -1,   -1,   257,
    258,  259,  -1,   -1,   262,  -1,   264,  265,  266,  -1,   268,  269,  270,  271,  -1,   273,  274,  -1,   276,
    -1,   -1,   -1,   280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
    296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,  314,
    -1,   316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,  333,
    334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  -1,   -1,   352,
    353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  -1,   368,  -1,   -1,   371,
    372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,  390,
    391,  -1,   393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,  409,
    410,  411,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   421,  422,  423,  424,  425,  426,  427,  428,
    429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  -1,   -1,   444,  445,  446,  447,
    448,  449,  450,  451,  -1,   453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,
    467,  468,  469,  470,  471,  472,  473,  -1,   475,  -1,   477,  478,  3,    480,  481,  482,  483,  484,  485,
    486,  487,  488,  -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   -1,   43,   44,   45,   46,   -1,
    48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   -1,   -1,
    67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,   85,
    86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,  -1,
    105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,  -1,
    124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  -1,   138,  139,  140,  -1,   -1,
    143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,  -1,
    -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,
    -1,   182,  183,  -1,   185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,  199,
    200,  201,  202,  203,  -1,   205,  206,  -1,   208,  -1,   210,  211,  212,  -1,   214,  215,  216,  -1,   -1,
    219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
    238,  239,  -1,   -1,   242,  243,  244,  245,  -1,   -1,   248,  249,  250,  251,  252,  -1,   254,  -1,   -1,
    257,  258,  259,  -1,   -1,   262,  -1,   264,  265,  266,  -1,   268,  269,  270,  271,  -1,   273,  274,  -1,
    276,  -1,   -1,   -1,   280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
    295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,  313,
    314,  -1,   316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,  332,
    333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  -1,   -1,
    352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  -1,   368,  -1,   -1,
    371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,  389,
    390,  391,  -1,   393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,  408,
    409,  410,  411,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   421,  422,  423,  424,  425,  426,  427,
    428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  -1,   -1,   444,  445,  446,
    447,  448,  449,  450,  451,  -1,   453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,
    466,  467,  468,  469,  470,  471,  472,  473,  -1,   475,  -1,   477,  478,  3,    480,  481,  482,  483,  484,
    485,  486,  487,  488,  -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   -1,   43,   44,   45,   46,
    -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,   -1,
    -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,   -1,
    85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,  103,
    -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,  122,
    -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  -1,   138,  139,  140,  -1,
    -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,   160,
    -1,   -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,  179,
    180,  -1,   182,  183,  -1,   185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,  198,
    199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  -1,   210,  211,  212,  -1,   214,  215,  216,  -1,
    -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
    237,  238,  239,  -1,   -1,   242,  243,  244,  245,  -1,   -1,   248,  249,  250,  251,  252,  -1,   254,  -1,
    -1,   257,  258,  259,  -1,   -1,   262,  -1,   264,  265,  266,  -1,   268,  269,  270,  271,  -1,   273,  274,
    -1,   276,  -1,   -1,   -1,   280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
    294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,  312,
    313,  314,  -1,   316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,   331,
    332,  333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  -1,
    -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  -1,   368,  -1,
    -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,  388,
    389,  390,  391,  -1,   393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,  407,
    408,  409,  410,  411,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   421,  422,  423,  424,  425,  426,
    427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  -1,   -1,   444,  445,
    446,  447,  448,  449,  450,  451,  -1,   453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,
    465,  466,  467,  468,  469,  470,  471,  472,  473,  -1,   475,  -1,   477,  478,  3,    480,  481,  482,  483,
    484,  485,  486,  487,  488,  -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   -1,   43,   44,   45,
    46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   57,   58,   59,   -1,   61,   62,   63,   64,
    -1,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,   83,
    -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,  121,
    122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  -1,   138,  139,  140,
    -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,  -1,
    160,  -1,   -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,  178,
    179,  180,  -1,   182,  183,  -1,   185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  195,  196,  197,
    198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  -1,   210,  211,  212,  -1,   214,  215,  216,
    -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
    236,  237,  238,  239,  -1,   -1,   242,  243,  244,  245,  -1,   -1,   248,  249,  250,  251,  252,  -1,   254,
    -1,   -1,   257,  258,  259,  -1,   -1,   262,  -1,   264,  265,  266,  -1,   268,  269,  270,  271,  -1,   273,
    274,  -1,   276,  -1,   -1,   -1,   280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,  292,
    293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,  311,
    312,  313,  314,  -1,   316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,  -1,
    331,  -1,   333,  334,  335,  336,  337,  338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
    -1,   -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   362,  363,  -1,   -1,   366,  -1,   368,
    -1,   -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,   387,
    388,  389,  390,  391,  -1,   393,  -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,   406,
    407,  408,  409,  410,  411,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   421,  422,  423,  424,  425,
    426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  -1,   -1,   444,
    445,  446,  447,  448,  449,  450,  451,  -1,   453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,
    464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  -1,   475,  -1,   477,  478,  3,    480,  481,  482,
    483,  484,  485,  486,  487,  488,  -1,   14,   15,   16,   17,   18,   19,   20,   21,   -1,   23,   24,   25,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   37,   38,   39,   40,   41,   -1,   -1,   44,
    -1,   -1,   -1,   48,   49,   50,   51,   52,   -1,   -1,   55,   56,   -1,   -1,   59,   -1,   61,   62,   63,
    64,   -1,   -1,   67,   -1,   69,   70,   71,   72,   73,   74,   75,   76,   -1,   78,   79,   80,   81,   82,
    83,   -1,   85,   86,   87,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   96,   97,   98,   99,   100,  -1,
    -1,   103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   113,  114,  115,  -1,   -1,   118,  119,  120,
    121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  131,  -1,   -1,   134,  135,  136,  -1,   138,  139,
    140,  -1,   -1,   143,  -1,   145,  146,  -1,   -1,   -1,   150,  -1,   152,  153,  -1,   155,  156,  157,  158,
    -1,   160,  -1,   -1,   163,  -1,   165,  166,  167,  168,  169,  170,  171,  172,  173,  -1,   175,  176,  177,
    178,  179,  180,  -1,   182,  183,  -1,   185,  186,  187,  188,  -1,   -1,   -1,   -1,   -1,   194,  195,  196,
    197,  198,  199,  200,  201,  202,  203,  -1,   205,  206,  -1,   208,  -1,   210,  211,  212,  -1,   214,  215,
    216,  -1,   -1,   219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
    -1,   236,  -1,   238,  239,  -1,   -1,   242,  243,  244,  245,  -1,   -1,   248,  -1,   250,  251,  252,  -1,
    254,  -1,   -1,   257,  258,  259,  -1,   -1,   262,  -1,   264,  265,  266,  -1,   268,  269,  270,  271,  -1,
    273,  274,  -1,   276,  -1,   -1,   -1,   280,  281,  282,  -1,   284,  285,  286,  287,  288,  289,  290,  291,
    -1,   293,  294,  295,  296,  -1,   298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  -1,   310,
    311,  312,  313,  314,  -1,   316,  317,  318,  319,  320,  321,  322,  323,  -1,   325,  326,  327,  328,  329,
    -1,   331,  -1,   333,  334,  335,  336,  -1,   338,  -1,   340,  341,  342,  343,  344,  345,  346,  347,  348,
    349,  -1,   -1,   352,  353,  -1,   355,  356,  357,  358,  359,  360,  -1,   -1,   -1,   -1,   -1,   366,  -1,
    368,  -1,   -1,   371,  372,  373,  374,  -1,   376,  377,  -1,   -1,   380,  381,  382,  383,  384,  -1,   -1,
    387,  388,  389,  390,  391,  -1,   -1,   -1,   395,  396,  397,  398,  399,  400,  -1,   -1,   403,  -1,   -1,
    406,  407,  408,  409,  410,  411,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   421,  422,  423,  424,
    425,  426,  427,  428,  429,  -1,   431,  -1,   433,  434,  435,  436,  437,  438,  439,  440,  441,  -1,   -1,
    444,  445,  446,  447,  448,  449,  450,  451,  -1,   453,  454,  455,  456,  457,  458,  459,  460,  461,  462,
    463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  -1,   475,  -1,   477,  478,  3,    480,  481,
    482,  483,  484,  485,  486,  487,  488,  -1,   14,   15,   16,   17,   -1,   19,   20,   21,   -1,   23,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   -1,   -1,   38,   39,   40,   41,   -1,   43,
    44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   -1,   56,   -1,   -1,   59,   -1,   61,   62,
    63,   64,   65,   -1,   -1,   -1,   69,   -1,   71,   72,   73,   -1,   -1,   76,   -1,   78,   79,   -1,   81,
    82,   83,   -1,   -1,   86,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   -1,   98,   -1,   100,
    101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   -1,   114,  -1,   -1,   -1,   -1,   119,
    120,  121,  122,  -1,   124,  125,  126,  127,  128,  129,  130,  -1,   -1,   -1,   134,  135,  136,  137,  138,
    -1,   140,  141,  -1,   -1,   -1,   -1,   146,  147,  -1,   149,  150,  -1,   152,  153,  -1,   -1,   156,  -1,
    158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  -1,   -1,   169,  -1,   171,  172,  173,  -1,   175,  176,
    177,  178,  179,  180,  -1,   -1,   -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,
    -1,   197,  -1,   199,  -1,   201,  202,  203,  -1,   -1,   -1,   -1,   -1,   209,  -1,   211,  -1,   -1,   214,
    215,  216,  -1,   -1,   219,  220,  -1,   222,  -1,   224,  225,  226,  227,  -1,   229,  230,  -1,   232,  233,
    234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  -1,
    -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   -1,   263,  264,  -1,   -1,   267,  268,  269,  -1,   271,
    -1,   -1,   274,  -1,   -1,   277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  -1,   289,  290,
    291,  292,  293,  294,  -1,   -1,   -1,   -1,   299,  300,  301,  302,  303,  304,  -1,   306,  307,  308,  -1,
    310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  -1,   323,  -1,   325,  -1,   327,  -1,
    329,  -1,   331,  332,  333,  334,  -1,   336,  337,  -1,   -1,   340,  -1,   342,  343,  344,  345,  346,  347,
    348,  -1,   350,  -1,   352,  353,  -1,   -1,   -1,   357,  358,  359,  -1,   -1,   362,  363,  -1,   -1,   366,
    367,  368,  369,  -1,   371,  372,  373,  -1,   -1,   376,  377,  -1,   -1,   380,  381,  -1,   383,  384,  -1,
    -1,   387,  388,  -1,   390,  391,  392,  393,  -1,   -1,   396,  397,  398,  -1,   400,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   408,  -1,   410,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   423,
    424,  425,  426,  427,  428,  429,  -1,   -1,   -1,   -1,   434,  435,  436,  -1,   438,  439,  440,  -1,   442,
    443,  444,  445,  -1,   447,  -1,   449,  450,  451,  -1,   453,  454,  455,  -1,   457,  -1,   459,  460,  461,
    -1,   463,  464,  465,  466,  467,  -1,   -1,   -1,   -1,   -1,   473,  474,  3,    -1,   477,  478,  479,  480,
    481,  482,  483,  484,  -1,   14,   15,   16,   17,   -1,   19,   20,   21,   -1,   23,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   -1,   -1,   38,   39,   40,   41,   -1,   43,   44,   45,   46,
    -1,   48,   49,   50,   51,   52,   -1,   -1,   -1,   56,   -1,   -1,   59,   -1,   61,   62,   63,   64,   65,
    -1,   -1,   -1,   69,   -1,   71,   72,   73,   -1,   -1,   76,   -1,   78,   79,   -1,   81,   82,   83,   -1,
    -1,   86,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   -1,   98,   -1,   100,  101,  102,  103,
    -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   -1,   114,  -1,   -1,   -1,   -1,   119,  120,  121,  122,
    -1,   124,  125,  126,  -1,   128,  129,  130,  -1,   -1,   -1,   134,  135,  136,  137,  138,  -1,   140,  141,
    -1,   -1,   -1,   -1,   146,  147,  -1,   149,  150,  -1,   152,  153,  -1,   -1,   156,  -1,   158,  -1,   160,
    161,  -1,   163,  -1,   165,  166,  -1,   -1,   169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,
    180,  -1,   -1,   -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,
    199,  -1,   201,  202,  203,  -1,   -1,   -1,   -1,   -1,   209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,
    -1,   219,  220,  -1,   222,  -1,   224,  225,  226,  227,  -1,   229,  230,  -1,   232,  233,  234,  235,  -1,
    237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  -1,   -1,   254,  -1,
    -1,   257,  258,  259,  -1,   -1,   -1,   263,  264,  -1,   -1,   267,  268,  269,  -1,   271,  -1,   -1,   274,
    -1,   -1,   277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  -1,   289,  290,  291,  292,  293,
    294,  -1,   -1,   -1,   -1,   299,  300,  301,  302,  303,  304,  -1,   306,  307,  308,  -1,   310,  311,  -1,
    313,  314,  315,  316,  317,  318,  319,  320,  321,  -1,   323,  -1,   325,  -1,   327,  -1,   329,  -1,   331,
    332,  333,  334,  -1,   336,  337,  -1,   -1,   340,  -1,   342,  343,  344,  345,  346,  347,  348,  -1,   350,
    -1,   352,  353,  -1,   -1,   -1,   357,  358,  359,  -1,   -1,   362,  363,  -1,   -1,   366,  367,  368,  369,
    -1,   371,  372,  373,  -1,   -1,   376,  377,  -1,   -1,   380,  381,  -1,   383,  384,  -1,   -1,   387,  388,
    -1,   390,  391,  392,  393,  -1,   -1,   396,  397,  398,  -1,   400,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    408,  -1,   410,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   423,  424,  425,  426,
    427,  428,  429,  -1,   -1,   -1,   -1,   434,  435,  436,  -1,   438,  439,  440,  -1,   442,  443,  444,  445,
    -1,   447,  -1,   449,  450,  451,  -1,   453,  454,  455,  -1,   457,  -1,   459,  460,  461,  -1,   463,  464,
    465,  466,  467,  -1,   -1,   -1,   -1,   -1,   473,  474,  3,    -1,   477,  478,  479,  480,  481,  482,  483,
    484,  -1,   14,   15,   16,   17,   -1,   19,   20,   21,   -1,   23,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   33,   34,   -1,   -1,   -1,   38,   39,   40,   41,   -1,   43,   44,   45,   46,   -1,   48,   49,
    50,   51,   52,   -1,   -1,   -1,   56,   -1,   -1,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,
    69,   -1,   71,   72,   73,   -1,   -1,   76,   -1,   78,   79,   -1,   81,   82,   83,   -1,   -1,   86,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   -1,   98,   -1,   100,  101,  102,  103,  -1,   105,  -1,
    107,  108,  109,  110,  111,  -1,   -1,   114,  -1,   -1,   -1,   -1,   119,  120,  121,  122,  -1,   124,  125,
    126,  -1,   128,  129,  130,  -1,   -1,   -1,   134,  135,  136,  137,  138,  -1,   140,  141,  -1,   -1,   -1,
    -1,   146,  147,  -1,   149,  150,  -1,   152,  153,  -1,   -1,   156,  -1,   158,  -1,   160,  161,  -1,   163,
    -1,   165,  166,  -1,   -1,   169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   -1,
    -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  -1,   201,
    202,  203,  -1,   -1,   -1,   -1,   -1,   209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,
    -1,   222,  -1,   224,  225,  226,  227,  -1,   229,  230,  -1,   232,  233,  234,  235,  -1,   237,  238,  239,
    240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,  -1,   -1,   254,  -1,   -1,   257,  258,
    259,  -1,   -1,   -1,   263,  264,  -1,   -1,   267,  268,  269,  -1,   271,  -1,   -1,   274,  -1,   -1,   277,
    -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  -1,   289,  290,  291,  292,  293,  294,  -1,   -1,
    -1,   -1,   299,  300,  301,  302,  303,  304,  -1,   306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,
    316,  317,  318,  319,  320,  321,  -1,   323,  -1,   325,  -1,   327,  -1,   329,  -1,   331,  332,  333,  334,
    -1,   336,  337,  -1,   -1,   340,  -1,   342,  343,  344,  345,  346,  347,  348,  -1,   350,  -1,   352,  353,
    -1,   -1,   -1,   357,  358,  359,  -1,   -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,
    373,  -1,   -1,   376,  377,  -1,   -1,   380,  381,  -1,   383,  384,  -1,   -1,   387,  388,  -1,   390,  391,
    392,  393,  -1,   -1,   396,  397,  398,  -1,   400,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   408,  -1,   410,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   423,  424,  425,  426,  427,  428,  429,
    -1,   -1,   -1,   -1,   434,  435,  436,  -1,   438,  439,  440,  -1,   442,  443,  444,  445,  -1,   447,  -1,
    449,  450,  451,  -1,   453,  454,  455,  -1,   457,  -1,   459,  460,  461,  -1,   463,  464,  465,  466,  467,
    -1,   -1,   -1,   -1,   -1,   473,  474,  3,    -1,   477,  478,  479,  480,  481,  482,  483,  484,  -1,   14,
    15,   16,   17,   -1,   19,   20,   21,   -1,   23,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
    34,   -1,   -1,   -1,   38,   39,   40,   41,   -1,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,
    -1,   -1,   -1,   56,   -1,   -1,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   -1,   71,
    72,   73,   -1,   -1,   76,   -1,   78,   79,   -1,   81,   82,   83,   -1,   -1,   86,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   95,   96,   -1,   98,   -1,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,
    110,  111,  -1,   -1,   114,  -1,   -1,   -1,   -1,   119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,
    129,  130,  -1,   -1,   -1,   134,  135,  136,  137,  138,  -1,   140,  141,  -1,   -1,   -1,   -1,   146,  147,
    -1,   149,  150,  -1,   152,  153,  -1,   -1,   156,  -1,   158,  -1,   160,  161,  -1,   163,  -1,   165,  166,
    -1,   -1,   169,  -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   -1,   -1,   184,  185,
    186,  187,  188,  189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  -1,   201,  202,  203,  -1,
    -1,   -1,   -1,   -1,   209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  -1,   222,  -1,
    224,  225,  226,  227,  -1,   229,  230,  -1,   232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,
    243,  -1,   245,  -1,   247,  248,  249,  250,  251,  -1,   -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,
    -1,   263,  264,  -1,   -1,   267,  268,  269,  -1,   271,  -1,   -1,   274,  -1,   -1,   277,  -1,   279,  280,
    281,  282,  -1,   284,  285,  286,  287,  -1,   289,  290,  291,  292,  293,  294,  -1,   -1,   -1,   -1,   299,
    300,  301,  302,  303,  304,  -1,   306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,
    319,  320,  321,  -1,   323,  -1,   325,  -1,   327,  -1,   329,  -1,   331,  332,  333,  334,  -1,   336,  337,
    -1,   -1,   340,  -1,   342,  343,  344,  345,  346,  347,  348,  -1,   350,  -1,   352,  353,  -1,   -1,   -1,
    357,  358,  359,  -1,   -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  -1,   -1,
    376,  377,  -1,   -1,   380,  381,  -1,   383,  384,  -1,   -1,   387,  388,  -1,   390,  391,  392,  393,  -1,
    -1,   396,  397,  398,  -1,   400,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   408,  -1,   410,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   423,  424,  425,  426,  427,  428,  429,  -1,   -1,   -1,
    -1,   434,  435,  436,  -1,   438,  439,  440,  -1,   442,  443,  444,  445,  -1,   447,  -1,   449,  450,  451,
    -1,   453,  454,  455,  -1,   457,  -1,   459,  460,  461,  -1,   463,  464,  465,  466,  467,  -1,   -1,   -1,
    -1,   -1,   473,  474,  3,    -1,   477,  478,  479,  480,  481,  482,  483,  484,  -1,   14,   15,   16,   17,
    -1,   19,   20,   21,   -1,   23,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   -1,
    -1,   38,   39,   40,   41,   -1,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   -1,
    56,   -1,   -1,   59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   -1,   71,   72,   73,   -1,
    -1,   76,   -1,   78,   79,   -1,   81,   82,   83,   -1,   -1,   86,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   95,   96,   -1,   98,   -1,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,
    -1,   114,  -1,   -1,   -1,   -1,   119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  -1,
    -1,   -1,   134,  135,  136,  137,  138,  -1,   140,  141,  -1,   -1,   -1,   -1,   146,  147,  -1,   149,  150,
    -1,   152,  153,  -1,   -1,   156,  -1,   158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  -1,   -1,   169,
    -1,   171,  172,  173,  -1,   175,  176,  177,  178,  179,  180,  -1,   -1,   -1,   184,  185,  186,  187,  188,
    189,  190,  -1,   192,  -1,   194,  -1,   -1,   197,  -1,   199,  -1,   201,  202,  203,  -1,   -1,   -1,   -1,
    -1,   209,  -1,   211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  -1,   222,  -1,   224,  225,  226,
    227,  -1,   229,  230,  -1,   232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,
    -1,   247,  248,  249,  250,  251,  -1,   -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   -1,   263,  264,
    -1,   -1,   267,  268,  269,  -1,   271,  -1,   -1,   274,  -1,   -1,   277,  -1,   279,  280,  281,  282,  -1,
    284,  285,  286,  287,  -1,   289,  290,  291,  292,  293,  294,  -1,   -1,   -1,   -1,   299,  300,  301,  302,
    303,  304,  -1,   306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,
    -1,   323,  -1,   325,  -1,   327,  -1,   329,  -1,   331,  332,  333,  334,  -1,   336,  337,  -1,   -1,   340,
    -1,   342,  343,  344,  345,  346,  347,  348,  -1,   350,  -1,   352,  353,  -1,   -1,   -1,   357,  358,  359,
    -1,   -1,   362,  363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  -1,   -1,   376,  377,  -1,
    -1,   380,  381,  -1,   383,  384,  -1,   -1,   387,  388,  -1,   390,  391,  392,  393,  -1,   -1,   396,  397,
    398,  -1,   400,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   408,  -1,   410,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   423,  424,  425,  426,  427,  428,  429,  -1,   -1,   -1,   -1,   434,  435,
    436,  -1,   438,  439,  440,  -1,   442,  443,  444,  445,  -1,   447,  -1,   449,  450,  451,  -1,   453,  454,
    455,  -1,   457,  -1,   459,  460,  461,  -1,   463,  464,  465,  466,  467,  -1,   -1,   -1,   -1,   -1,   473,
    474,  3,    -1,   477,  478,  479,  480,  481,  482,  483,  484,  -1,   14,   15,   16,   17,   -1,   19,   20,
    21,   -1,   23,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   -1,   -1,   38,   39,
    40,   41,   -1,   43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   -1,   56,   -1,   -1,
    59,   -1,   61,   62,   63,   64,   65,   -1,   -1,   -1,   69,   -1,   71,   72,   73,   -1,   -1,   76,   -1,
    78,   79,   -1,   81,   82,   83,   -1,   -1,   86,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,
    -1,   98,   -1,   100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   -1,   114,  -1,
    -1,   -1,   -1,   119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  -1,   -1,   -1,   134,
    135,  136,  137,  138,  -1,   140,  141,  -1,   -1,   -1,   -1,   146,  147,  -1,   149,  150,  -1,   152,  153,
    -1,   -1,   156,  -1,   158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  -1,   -1,   169,  -1,   171,  172,
    173,  -1,   175,  176,  177,  178,  179,  180,  -1,   -1,   -1,   184,  185,  186,  187,  188,  189,  190,  -1,
    192,  -1,   194,  -1,   -1,   197,  -1,   199,  -1,   201,  202,  203,  -1,   -1,   -1,   -1,   -1,   209,  -1,
    211,  -1,   -1,   214,  215,  216,  -1,   -1,   219,  220,  -1,   222,  -1,   224,  225,  226,  227,  -1,   229,
    230,  -1,   232,  233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,
    249,  250,  251,  -1,   -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   -1,   263,  264,  -1,   -1,   267,
    268,  269,  -1,   271,  -1,   -1,   274,  -1,   -1,   277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,
    287,  -1,   289,  290,  291,  292,  293,  294,  -1,   -1,   -1,   -1,   299,  300,  301,  302,  303,  304,  -1,
    306,  307,  308,  -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  -1,   323,  -1,
    325,  -1,   327,  -1,   329,  -1,   -1,   332,  333,  334,  -1,   336,  337,  -1,   -1,   340,  -1,   342,  343,
    344,  345,  346,  347,  348,  -1,   350,  -1,   352,  353,  -1,   -1,   -1,   357,  358,  359,  -1,   -1,   362,
    363,  -1,   -1,   366,  367,  368,  369,  -1,   371,  372,  373,  -1,   -1,   376,  377,  -1,   -1,   380,  381,
    -1,   383,  384,  -1,   -1,   387,  388,  -1,   390,  391,  392,  393,  -1,   -1,   396,  397,  398,  -1,   400,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   408,  -1,   410,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   423,  424,  425,  426,  427,  428,  429,  -1,   -1,   -1,   -1,   434,  435,  436,  -1,   438,
    439,  440,  -1,   442,  443,  444,  445,  -1,   447,  -1,   449,  450,  451,  -1,   453,  454,  455,  -1,   457,
    -1,   459,  460,  461,  -1,   463,  464,  465,  466,  467,  -1,   -1,   -1,   -1,   -1,   473,  474,  3,    -1,
    477,  478,  479,  480,  481,  482,  483,  484,  -1,   14,   15,   16,   17,   -1,   19,   20,   21,   -1,   23,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   -1,   -1,   38,   39,   40,   41,   -1,
    43,   44,   45,   46,   -1,   48,   49,   50,   51,   52,   -1,   -1,   -1,   56,   -1,   -1,   59,   -1,   61,
    62,   63,   64,   65,   -1,   -1,   -1,   69,   -1,   71,   72,   73,   -1,   -1,   76,   -1,   78,   79,   -1,
    81,   82,   83,   -1,   -1,   86,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   -1,   98,   -1,
    100,  101,  102,  103,  -1,   105,  -1,   107,  108,  109,  110,  111,  -1,   -1,   114,  -1,   -1,   -1,   -1,
    119,  120,  121,  122,  -1,   124,  125,  126,  -1,   128,  129,  130,  -1,   -1,   -1,   134,  135,  136,  137,
    138,  -1,   140,  141,  -1,   -1,   -1,   -1,   146,  147,  -1,   -1,   150,  -1,   152,  153,  -1,   -1,   156,
    -1,   158,  -1,   160,  161,  -1,   163,  -1,   165,  166,  -1,   -1,   169,  -1,   171,  172,  173,  -1,   175,
    176,  177,  178,  179,  180,  -1,   -1,   -1,   184,  185,  186,  187,  188,  189,  190,  -1,   192,  -1,   194,
    -1,   -1,   197,  -1,   199,  -1,   201,  202,  203,  -1,   -1,   -1,   -1,   -1,   209,  -1,   211,  -1,   -1,
    214,  215,  216,  -1,   -1,   219,  220,  -1,   222,  -1,   224,  225,  226,  227,  -1,   229,  230,  -1,   232,
    233,  234,  235,  -1,   237,  238,  239,  240,  -1,   242,  243,  -1,   245,  -1,   247,  248,  249,  250,  251,
    -1,   -1,   254,  -1,   -1,   257,  258,  259,  -1,   -1,   -1,   263,  264,  -1,   -1,   267,  268,  269,  -1,
    271,  -1,   -1,   274,  -1,   -1,   277,  -1,   279,  280,  281,  282,  -1,   284,  285,  286,  287,  -1,   289,
    290,  291,  292,  293,  294,  -1,   -1,   -1,   -1,   299,  300,  301,  302,  303,  304,  -1,   306,  307,  308,
    -1,   310,  311,  -1,   313,  314,  315,  316,  317,  318,  319,  320,  321,  -1,   323,  -1,   325,  -1,   327,
    -1,   329,  -1,   331,  332,  333,  334,  -1,   336,  337,  -1,   -1,   340,  -1,   342,  343,  344,  345,  346,
    347,  348,  -1,   350,  -1,   352,  353,  -1,   -1,   -1,   357,  358,  359,  -1,   -1,   362,  363,  -1,   -1,
    366,  367,  368,  369,  -1,   371,  372,  373,  -1,   -1,   376,  377,  -1,   -1,   380,  381,  -1,   383,  384,
    -1,   -1,   387,  388,  -1,   390,  391,  392,  393,  -1,   -1,   396,  397,  398,  -1,   400,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   408,  -1,   410,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    423,  424,  425,  426,  427,  428,  429,  -1,   -1,   -1,   -1,   434,  435,  436,  -1,   438,  439,  440,  -1,
    442,  443,  444,  445,  -1,   447,  -1,   449,  450,  451,  -1,   453,  454,  455,  -1,   457,  -1,   459,  460,
    461,  -1,   463,  464,  465,  466,  467,  -1,   -1,   -1,   -1,   -1,   473,  474,  -1,   -1,   477,  478,  479,
    480,  481,  482,  483,  484};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] = {
    0,    14,   24,   26,   27,   41,   61,   63,   64,   69,   71,   82,   84,   100,  103,  115,  117,  121,  127,
    136,  138,  144,  159,  214,  215,  220,  232,  243,  281,  293,  298,  299,  301,  306,  311,  314,  318,  323,
    324,  331,  334,  342,  354,  371,  381,  387,  392,  405,  462,  506,  513,  514,  515,  516,  519,  520,  521,
    522,  523,  526,  541,  542,  544,  545,  546,  547,  548,  549,  550,  552,  553,  557,  569,  574,  575,  578,
    579,  580,  597,  600,  601,  618,  695,  698,  724,  727,  728,  729,  736,  742,  744,  746,  747,  750,  753,
    754,  758,  759,  768,  772,  773,  774,  775,  776,  778,  779,  780,  793,  794,  798,  800,  801,  802,  813,
    815,  822,  823,  826,  827,  828,  829,  830,  835,  837,  840,  844,  848,  849,  859,  860,  863,  868,  879,
    901,  904,  905,  906,  909,  912,  914,  916,  919,  920,  921,  924,  925,  926,  933,  934,  936,  937,  938,
    943,  945,  946,  950,  951,  954,  955,  956,  957,  959,  960,  961,  962,  964,  967,  968,  974,  981,  984,
    986,  989,  994,  996,  1001, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1051, 366,  408,  939,  21,
    67,   81,   98,   104,  119,  131,  139,  140,  151,  156,  162,  177,  202,  223,  257,  286,  313,  317,  319,
    325,  328,  353,  354,  356,  360,  368,  373,  385,  398,  466,  473,  743,  939,  3,    14,   15,   16,   17,
    18,   19,   20,   21,   22,   23,   24,   25,   33,   34,   36,   37,   39,   40,   41,   42,   43,   45,   46,
    48,   49,   50,   51,   52,   55,   56,   57,   58,   59,   61,   62,   63,   64,   65,   69,   70,   71,   72,
    73,   75,   76,   78,   79,   80,   81,   82,   83,   86,   87,   95,   96,   97,   98,   99,   100,  101,  102,
    103,  105,  107,  108,  109,  110,  111,  113,  114,  115,  118,  119,  120,  121,  122,  124,  125,  126,  128,
    129,  130,  131,  134,  135,  136,  137,  138,  139,  140,  141,  143,  145,  146,  147,  150,  152,  156,  157,
    158,  160,  161,  163,  165,  166,  167,  168,  169,  171,  172,  173,  175,  176,  177,  178,  179,  180,  182,
    184,  185,  186,  187,  188,  189,  190,  192,  194,  197,  199,  200,  201,  202,  203,  205,  206,  208,  209,
    211,  214,  215,  216,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
    234,  235,  237,  238,  239,  240,  242,  243,  245,  247,  248,  249,  250,  251,  252,  254,  257,  258,  259,
    262,  263,  265,  267,  268,  269,  270,  271,  273,  274,  276,  277,  279,  280,  281,  282,  284,  285,  286,
    287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  298,  299,  300,  301,  302,  303,  304,  305,  306,
    307,  308,  310,  311,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  325,  326,  327,  328,
    329,  331,  332,  333,  334,  336,  337,  338,  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
    352,  353,  355,  356,  357,  358,  359,  360,  362,  363,  366,  367,  368,  369,  371,  372,  373,  374,  376,
    377,  380,  381,  382,  383,  384,  387,  388,  389,  390,  391,  392,  393,  395,  397,  398,  399,  400,  403,
    406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
    425,  426,  427,  428,  429,  431,  433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,
    446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,
    465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  477,  478,  479,  480,  481,  482,  483,  484,
    485,  486,  487,  488,  1009, 1176, 1190, 1194, 1199, 396,  969,  255,  282,  939,  44,   609,  1014, 33,   54,
    67,   77,   98,   104,  119,  131,  139,  151,  158,  162,  216,  257,  260,  313,  319,  328,  356,  357,  359,
    360,  368,  373,  379,  382,  385,  458,  469,  473,  487,  619,  699,  726,  803,  818,  869,  880,  22,   281,
    1176, 1009, 22,   276,  326,  357,  359,  5,    201,  910,  911,  1185, 21,   33,   54,   67,   81,   98,   119,
    131,  139,  140,  151,  156,  162,  177,  223,  257,  268,  313,  317,  319,  325,  328,  354,  356,  360,  368,
    373,  385,  398,  466,  473,  743,  831,  939,  1176, 84,   396,  506,  618,  695,  724,  727,  968,  975,  984,
    989,  994,  1001, 1008, 1012, 9,    15,   22,   39,   146,  152,  154,  174,  203,  238,  284,  300,  497,  498,
    845,  846,  1009, 1184, 1189, 22,   84,   297,  324,  850,  851,  852,  1190, 1190, 1181, 1185, 354,  1024, 845,
    1190, 366,  1176, 268,  223,  98,   177,  353,  354,  917,  318,  1190, 22,   329,  362,  366,  561,  570,  571,
    1190, 19,   159,  850,  851,  282,  939,  1190, 200,  22,   116,  1026, 55,   78,   216,  234,  313,  319,  329,
    362,  366,  411,  558,  559,  560,  561,  22,   329,  362,  366,  561,  366,  256,  1062, 1174, 1190, 1024, 499,
    1190, 155,  506,  971,  506,  1169, 295,  1019, 1020, 1176, 22,   1189, 1014, 1015, 1018, 0,    509,  969,  132,
    191,  261,  378,  1027, 1028, 1014, 1016, 1017, 109,  187,  384,  510,  3,    38,   44,   67,   74,   85,   91,
    153,  155,  170,  183,  195,  196,  198,  210,  212,  236,  244,  264,  266,  312,  335,  396,  1182, 1190, 1191,
    1194, 1200, 833,  1190, 833,  1177, 1190, 285,  833,  368,  833,  1176, 1190, 354,  97,   354,  858,  1182, 3,
    1186, 1192, 1194, 1199, 1200, 22,   169,  1174, 250,  398,  8,    62,   143,  493,  494,  495,  497,  498,  499,
    500,  501,  502,  908,  1131, 1132, 1190, 22,   1186, 1176, 1176, 169,  1174, 1176, 306,  331,  22,   169,  1062,
    1176, 321,  1176, 833,  22,   221,  1186, 169,  1174, 833,  1176, 162,  467,  201,  106,  197,  241,  291,  940,
    941,  942,  1174, 1180, 1190, 21,   54,   67,   68,   77,   81,   98,   119,  131,  139,  151,  156,  177,  202,
    223,  257,  313,  317,  319,  325,  328,  354,  356,  360,  368,  373,  398,  473,  743,  838,  1185, 1174, 364,
    1176, 506,  833,  368,  1177, 833,  368,  169,  1176, 97,   354,  357,  359,  1186, 357,  359,  62,   143,  908,
    304,  1186, 169,  554,  1190, 1176, 1176, 321,  1176, 833,  221,  1186, 162,  467,  295,  325,  354,  398,  140,
    223,  21,   81,   177,  156,  317,  372,  737,  22,   1176, 1010, 568,  1185, 1192, 911,  169,  1182, 1176, 169,
    915,  169,  1177, 368,  354,  486,  97,   354,  169,  1182, 169,  1186, 1188, 74,   398,  62,   143,  169,  908,
    48,   169,  1188, 169,  1176, 169,  1176, 169,  1176, 321,  169,  1176, 169,  221,  1188, 162,  467,  201,  169,
    832,  833,  506,  985,  619,  433,  976,  392,  968,  977,  978,  979,  1192, 969,  1189, 846,  847,  22,   847,
    1189, 847,  22,   847,  1189, 847,  847,  847,  1189, 1184, 1184, 1009, 847,  285,  506,  506,  640,  640,  640,
    255,  364,  510,  640,  1062, 1063, 510,  935,  1185, 506,  982,  48,   398,  1176, 1176, 1174, 1190, 38,   423,
    197,  508,  258,  258,  255,  154,  1185, 364,  149,  841,  255,  4,    6,    7,    8,    10,   30,   43,   45,
    46,   53,   54,   57,   58,   65,   67,   88,   89,   90,   91,   92,   93,   94,   101,  102,  120,  137,  141,
    142,  147,  161,  189,  190,  192,  209,  217,  218,  235,  237,  241,  246,  247,  249,  257,  267,  277,  292,
    315,  330,  337,  350,  354,  362,  363,  367,  369,  370,  379,  385,  393,  413,  414,  415,  416,  417,  418,
    419,  420,  430,  442,  443,  452,  497,  498,  499,  506,  1014, 1078, 1081, 1084, 1085, 1086, 1088, 1089, 1090,
    1091, 1094, 1095, 1099, 1101, 1104, 1105, 1107, 1129, 1133, 1152, 1158, 1162, 1170, 1171, 1172, 1182, 1183, 1184,
    1185, 1190, 1185, 22,   576,  1173, 1174, 329,  558,  104,  567,  1185, 568,  1185, 38,   59,   558,  423,  338,
    941,  258,  154,  364,  493,  38,   423,  197,  942,  506,  1174, 499,  504,  508,  1163, 1164, 1063, 153,  155,
    396,  488,  965,  966,  968,  153,  972,  104,  1099, 1167, 1168, 1019, 510,  506,  973,  154,  154,  507,  507,
    515,  441,  475,  970,  1174, 22,   116,  1025, 1025, 48,   1025, 144,  149,  213,  253,  1031, 1033, 1034, 1045,
    1047, 1048, 1049, 1027, 1028, 154,  193,  1062, 1064, 1169, 506,  892,  1164, 269,  302,  331,  508,  834,  269,
    302,  331,  269,  302,  331,  405,  527,  569,  572,  864,  18,   121,  269,  302,  331,  389,  583,  1176, 331,
    18,   121,  384,  551,  1062, 409,  169,  1062, 50,   83,   136,  140,  172,  208,  239,  241,  269,  302,  310,
    316,  323,  331,  340,  348,  400,  425,  454,  470,  569,  573,  895,  902,  506,  881,  302,  551,  174,  137,
    18,   24,   64,   114,  121,  124,  179,  239,  241,  251,  259,  269,  302,  305,  306,  331,  371,  389,  436,
    437,  480,  581,  582,  596,  762,  4,    497,  498,  734,  1189, 22,   169,  1174, 833,  833,  506,  907,  508,
    174,  543,  302,  527,  543,  255,  269,  302,  137,  49,   96,   176,  224,  229,  239,  268,  302,  307,  331,
    342,  581,  731,  732,  269,  302,  397,  762,  770,  571,  559,  561,  174,  137,  302,  331,  581,  269,  302,
    306,  331,  75,   113,  270,  358,  255,  18,   24,   121,  269,  302,  331,  598,  599,  543,  149,  302,  527,
    543,  137,  302,  331,  581,  302,  269,  1176, 1187, 1192, 1176, 211,  106,  256,  410,  510,  940,  386,  963,
    255,  1182, 506,  1176, 368,  97,   354,  1182, 250,  398,  62,   143,  908,  1176, 321,  1176, 162,  467,  201,
    833,  640,  288,  603,  60,   3,    43,   45,   46,   57,   58,   101,  102,  147,  189,  190,  192,  235,  237,
    249,  292,  332,  337,  362,  363,  393,  1075, 1077, 1079, 1081, 1083, 1085, 1086, 1087, 1089, 1090, 1094, 1095,
    1191, 1194, 154,  506,  804,  1176, 527,  31,   958,  1176, 241,  527,  409,  169,  1174, 527,  833,  833,  804,
    382,  619,  527,  241,  38,   555,  373,  769,  269,  745,  75,   113,  270,  358,  20,   40,   188,  781,  31,
    804,  149,  527,  1176, 1187, 398,  1174, 169,  696,  1174, 1174, 486,  700,  398,  1182, 833,  74,   870,  1182,
    1176, 466,  743,  44,   95,   186,  239,  320,  461,  137,  892,  51,   308,  584,  137,  506,  137,  354,  409,
    137,  881,  137,  510,  169,  832,  169,  833,  169,  833,  137,  907,  1188, 137,  137,  255,  137,  584,  137,
    75,   113,  270,  358,  137,  255,  137,  149,  169,  1176, 1187, 169,  568,  137,  510,  584,  1099, 1136, 975,
    507,  510,  142,  255,  370,  565,  568,  734,  980,  976,  847,  1009, 847,  1009, 847,  1009, 847,  1009, 847,
    1009, 1009, 1009, 847,  1009, 506,  641,  642,  1190, 641,  22,   98,   119,  151,  156,  201,  202,  319,  325,
    354,  356,  373,  466,  853,  1173, 1188, 852,  174,  510,  997,  1185, 1075, 1139, 31,   1188, 870,  150,  918,
    918,  918,  211,  1190, 149,  149,  853,  1188, 318,  1190, 568,  255,  506,  1165, 504,  1014, 1140, 395,  1092,
    1099, 1157, 506,  1092, 1092, 506,  149,  506,  506,  506,  1080, 1080, 279,  1014, 506,  506,  1082, 506,  506,
    506,  506,  57,   58,   1092, 1099, 506,  1080, 506,  506,  506,  506,  506,  506,  407,  492,  506,  1096, 506,
    1096, 506,  506,  1014, 506,  506,  506,  506,  506,  506,  506,  506,  506,  506,  506,  506,  1099, 1099, 354,
    1014, 1099, 1136, 1164, 1185, 58,   506,  1093, 506,  1185, 3,    8,    11,   14,   15,   16,   17,   18,   19,
    20,   21,   23,   24,   28,   31,   33,   34,   36,   38,   39,   40,   41,   42,   43,   44,   45,   46,   48,
    49,   50,   51,   52,   56,   59,   61,   62,   63,   64,   65,   66,   69,   71,   72,   73,   76,   78,   79,
    81,   82,   83,   86,   95,   96,   98,   100,  101,  102,  103,  105,  107,  108,  109,  110,  111,  114,  119,
    120,  121,  122,  124,  125,  126,  128,  129,  130,  134,  135,  136,  137,  138,  140,  141,  146,  147,  150,
    152,  153,  156,  158,  160,  161,  163,  165,  166,  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
    179,  180,  184,  185,  186,  187,  188,  189,  190,  192,  194,  195,  196,  197,  199,  201,  202,  203,  209,
    211,  212,  214,  215,  216,  219,  220,  222,  224,  225,  226,  227,  229,  230,  232,  233,  234,  235,  237,
    238,  239,  240,  241,  242,  243,  244,  245,  247,  248,  249,  250,  251,  254,  257,  258,  259,  260,  263,
    264,  267,  268,  269,  271,  274,  277,  279,  280,  281,  282,  284,  285,  286,  287,  289,  290,  291,  292,
    293,  294,  299,  300,  301,  302,  303,  304,  306,  307,  308,  310,  311,  313,  314,  315,  316,  317,  318,
    319,  320,  321,  323,  325,  327,  329,  331,  332,  333,  334,  335,  336,  337,  340,  342,  343,  344,  345,
    346,  347,  348,  350,  352,  353,  356,  357,  358,  359,  362,  363,  366,  367,  368,  369,  371,  372,  373,
    376,  377,  380,  381,  383,  384,  387,  388,  390,  391,  392,  393,  396,  397,  398,  400,  408,  410,  423,
    424,  425,  426,  427,  428,  429,  434,  435,  436,  438,  439,  440,  442,  443,  444,  445,  447,  449,  450,
    451,  453,  454,  455,  457,  459,  460,  461,  463,  464,  465,  466,  467,  473,  474,  477,  478,  479,  480,
    481,  482,  483,  484,  493,  494,  495,  497,  498,  499,  500,  501,  502,  1131, 1133, 1135, 1195, 1196, 1198,
    406,  1116, 266,  1099, 193,  1022, 510,  506,  1185, 1164, 107,  171,  577,  510,  59,   104,  568,  31,   3,
    104,  216,  566,  734,  1095, 1185, 1185, 79,   118,  1113, 87,   104,  562,  563,  565,  734,  104,  562,  211,
    1174, 1099, 3,    22,   26,   27,   28,   29,   30,   31,   32,   35,   47,   53,   54,   60,   66,   68,   77,
    84,   88,   89,   90,   92,   93,   94,   104,  106,  112,  116,  117,  123,  127,  132,  133,  142,  144,  148,
    149,  151,  154,  159,  162,  164,  174,  181,  191,  193,  204,  207,  213,  217,  218,  241,  246,  253,  255,
    256,  260,  261,  272,  275,  278,  283,  297,  309,  324,  330,  339,  351,  354,  361,  364,  365,  370,  375,
    378,  379,  385,  386,  394,  401,  402,  404,  405,  430,  432,  476,  499,  1179, 1193, 1194, 1199, 1200, 1201,
    1163, 80,   307,  836,  507,  510,  969,  36,   257,  507,  510,  1020, 1175, 1176, 31,   128,  128,  1174, 22,
    1174, 973,  1016, 1016, 1029, 1030, 1099, 1016, 146,  238,  1040, 199,  239,  291,  333,  384,  22,   1035, 1099,
    497,  498,  1036, 1037, 1099, 1101, 1045, 1046, 1034, 1033, 1031, 1032, 149,  1048, 251,  1050, 1031, 1045, 1064,
    1174, 31,   1190, 331,  174,  184,  261,  263,  332,  394,  499,  885,  886,  887,  889,  891,  893,  1075, 1191,
    269,  302,  331,  364,  364,  319,  1179, 508,  364,  364,  319,  364,  364,  356,  558,  952,  149,  159,  174,
    311,  865,  866,  60,   77,   133,  151,  283,  379,  637,  638,  77,   104,  241,  364,  77,   364,  104,  241,
    319,  77,   114,  124,  269,  302,  799,  319,  751,  21,   54,   67,   81,   119,  131,  151,  156,  223,  257,
    319,  325,  328,  354,  360,  373,  398,  743,  302,  581,  1176, 137,  302,  331,  581,  255,  734,  255,  323,
    481,  208,  364,  364,  246,  734,  108,  194,  319,  329,  366,  560,  481,  481,  481,  308,  331,  895,  903,
    507,  882,  885,  364,  385,  356,  1174, 68,   104,  272,  627,  637,  1190, 68,   77,   104,  272,  595,  922,
    255,  317,  368,  77,   104,  272,  595,  922,  25,   305,  317,  368,  1174, 179,  251,  833,  506,  364,  364,
    595,  168,  506,  588,  356,  405,  407,  432,  482,  588,  660,  595,  77,   595,  272,  354,  104,  595,  510,
    4,    4,    269,  174,  137,  302,  331,  581,  386,  386,  240,  1075, 269,  331,  908,  98,   331,  572,  364,
    529,  572,  1174, 364,  364,  1174, 734,  48,   733,  734,  734,  96,   224,  229,  48,   364,  527,  319,  527,
    239,  732,  364,  364,  246,  1185, 762,  356,  1062, 77,   364,  922,  319,  364,  364,  588,  588,  833,  833,
    833,  833,  1174, 37,   391,  37,   37,   364,  37,   364,  104,  319,  510,  572,  94,   385,  777,  1186, 364,
    529,  572,  1174, 364,  319,  364,  364,  331,  517,  269,  302,  291,  303,  327,  564,  940,  1180, 1190, 1174,
    892,  1075, 255,  409,  881,  734,  833,  833,  907,  195,  255,  75,   113,  270,  358,  255,  833,  195,  405,
    610,  345,  346,  605,  1185, 506,  1077, 31,   30,   1076, 99,   167,  228,  231,  322,  421,  506,  1097, 1098,
    834,  1080, 833,  805,  806,  1193, 20,   947,  1075, 255,  137,  748,  1176, 241,  506,  528,  818,  386,  295,
    398,  528,  137,  1186, 84,   159,  556,  618,  728,  780,  848,  868,  943,  1185, 770,  771,  1176, 219,  833,
    833,  833,  833,  251,  109,  187,  371,  384,  782,  783,  129,  290,  506,  777,  528,  405,  517,  1174, 730,
    731,  241,  31,   251,  506,  640,  640,  619,  725,  1174, 506,  808,  892,  149,  871,  1180, 506,  883,  31,
    1176, 201,  405,  407,  1011, 320,  462,  1182, 584,  1075, 1177, 169,  1176, 1182, 584,  1188, 1186, 137,  584,
    137,  386,  137,  386,  908,  584,  584,  1188, 1176, 833,  1176, 1176, 1176, 833,  1188, 777,  137,  137,  584,
    832,  833,  507,  510,  975,  978,  975,  1009, 1009, 1009, 1009, 1009, 1009, 641,  507,  510,  507,  157,  326,
    355,  1175, 832,  97,   328,  857,  858,  1175, 250,  1175, 1173, 1173, 1175, 832,  1175, 364,  405,  861,  16,
    135,  315,  333,  998,  1062, 245,  999,  507,  510,  983,  989,  994,  1001, 1012, 364,  1174, 851,  850,  851,
    154,  160,  862,  1190, 21,   68,   98,   119,  131,  151,  156,  202,  223,  313,  319,  325,  354,  356,  373,
    398,  743,  842,  1136, 1163, 505,  1136, 1140, 1141, 506,  401,  1153, 1154, 1099, 1136, 506,  1184, 1184, 1136,
    3,    99,   167,  228,  231,  322,  421,  1142, 1143, 1185, 1184, 1136, 1136, 1184, 1184, 1092, 1092, 1099, 908,
    1099, 1144, 497,  498,  1100, 1101, 1129, 1133, 1146, 507,  1136, 1099, 1136, 1147, 1012, 1103, 362,  423,  1184,
    1184, 1099, 47,   154,  207,  365,  1099, 1136, 1150, 1136, 233,  1099, 1101, 1099, 1111, 1112, 1113, 233,  1099,
    1113, 1099, 507,  1136, 1099, 507,  510,  331,  1184, 1184, 1097, 1075, 1099, 1193, 362,  35,   351,  1166, 833,
    1099, 506,  1014, 1151, 116,  118,  142,  241,  246,  251,  370,  380,  1099, 42,   170,  174,  212,  335,  506,
    1099, 364,  1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 22,   29,   339,  1130, 162,  145,  1117,
    315,  506,  1129, 158,  216,  354,  357,  359,  382,  1023, 1174, 154,  1052, 1172, 22,   116,  394,  499,  507,
    887,  1099, 1137, 1138, 1191, 1174, 366,  506,  1185, 510,  507,  505,  511,  168,  168,  584,  1174, 966,  967,
    1174, 1167, 507,  510,  506,  1176, 1176, 973,  973,  510,  32,   112,  386,  877,  315,  316,  497,  498,  1037,
    1039, 1101, 333,  199,  256,  510,  4,    1038, 1184, 1038, 315,  316,  1039, 1173, 999,  1046, 1032, 386,  995,
    104,  506,  990,  1012, 1190, 506,  1002, 1003, 1004, 1005, 1006, 1190, 263,  48,   1191, 507,  887,  889,  886,
    889,  1191, 261,  507,  510,  834,  364,  364,  319,  1186, 1176, 1176, 1179, 1186, 1176, 1176, 1186, 1177, 1176,
    76,   953,  313,  385,  850,  319,  159,  850,  506,  1176, 386,  872,  199,  199,  386,  506,  658,  169,  1176,
    246,  1186, 1176, 1176, 1099, 246,  1176, 1176, 25,   305,  364,  364,  1176, 364,  752,  1182, 506,  833,  833,
    833,  368,  97,   354,  858,  398,  62,   143,  908,  1176, 833,  1176, 833,  321,  833,  833,  201,  163,  239,
    269,  302,  390,  755,  756,  757,  1062, 364,  922,  319,  246,  22,   29,   448,  451,  108,  194,  1186, 1176,
    255,  1176, 97,   97,   507,  510,  1186, 1188, 1176, 302,  581,  627,  272,  3,    127,  149,  257,  342,  392,
    594,  673,  674,  677,  678,  681,  1197, 1198, 1075, 1176, 272,  594,  582,  1190, 1176, 1176, 22,   385,  1176,
    169,  1176, 272,  169,  584,  169,  1190, 317,  368,  317,  368,  1176, 22,   385,  1176, 1174, 18,   121,  331,
    763,  764,  765,  766,  1193, 1186, 1176, 364,  104,  155,  242,  386,  587,  590,  591,  1193, 1176, 254,  804,
    64,   254,  48,   216,  468,  472,  358,  584,  1176, 405,  281,  272,  36,   582,  364,  356,  1174, 364,  922,
    319,  1178, 1190, 1178, 510,  507,  510,  364,  319,  1177, 1186, 3,    76,   121,  126,  179,  274,  377,  385,
    388,  428,  431,  456,  473,  530,  531,  533,  302,  1186, 1176, 302,  331,  581,  731,  734,  833,  1176, 734,
    1176, 734,  1186, 1176, 1176, 302,  331,  581,  1176, 1176, 1176, 1176, 1186, 1176, 18,   24,   121,  269,  302,
    331,  269,  302,  331,  804,  302,  331,  302,  331,  302,  1074, 1190, 169,  814,  1190, 169,  1190, 1186, 1176,
    1176, 125,  1176, 18,   599,  328,  1186, 302,  331,  581,  1176, 1176, 1176, 1186, 73,   225,  226,  227,  426,
    427,  524,  525,  83,   405,  407,  424,  446,  457,  460,  518,  364,  364,  72,   376,  291,  195,  31,   833,
    195,  195,  386,  386,  195,  246,  839,  1185, 833,  833,  195,  839,  254,  154,  364,  602,  527,  1099, 30,
    1076, 1075, 504,  504,  364,  364,  364,  506,  364,  1184, 1080, 507,  510,  493,  782,  76,   125,  205,  206,
    219,  269,  356,  358,  948,  629,  1193, 1176, 154,  319,  397,  749,  756,  757,  137,  68,   104,  212,  620,
    622,  624,  626,  627,  634,  637,  19,   174,  313,  352,  531,  532,  149,  1178, 398,  1174, 554,  1190, 555,
    260,  619,  151,  1185, 804,  804,  804,  804,  251,  255,  260,  506,  804,  1072, 1073, 1074, 328,  804,  405,
    506,  137,  136,  1012, 833,  620,  1190, 405,  407,  654,  405,  589,  354,  31,   640,  3,    809,  810,  804,
    1185, 255,  507,  884,  885,  890,  31,   201,  310,  404,  894,  895,  896,  255,  804,  568,  166,  166,  149,
    892,  31,   137,  584,  881,  832,  833,  1178, 833,  1178, 907,  255,  584,  584,  255,  584,  328,  149,  568,
    584,  1099, 507,  642,  174,  174,  174,  409,  1175, 510,  734,  735,  162,  854,  855,  1186, 19,   862,  135,
    333,  135,  333,  315,  384,  230,  451,  1000, 1075, 1176, 405,  697,  154,  255,  854,  48,   584,  1182, 368,
    354,  1182, 250,  398,  201,  833,  507,  505,  505,  510,  1136, 195,  1099, 1155, 123,  1154, 1156, 31,   507,
    1099, 507,  507,  507,  507,  154,  507,  507,  507,  507,  507,  510,  507,  275,  1145, 507,  1100, 1100, 11,
    174,  195,  257,  493,  494,  495,  497,  498,  499,  500,  501,  502,  1133, 1100, 507,  507,  149,  154,  1148,
    1149, 507,  476,  1102, 507,  423,  507,  507,  31,   1150, 1136, 1150, 1150, 154,  507,  507,  1193, 510,  273,
    1115, 31,   507,  510,  1099, 1193, 510,  1099, 510,  1159, 1160, 507,  507,  1165, 1099, 1190, 507,  507,  423,
    1100, 1100, 130,  1136, 154,  116,  118,  142,  246,  251,  370,  380,  506,  130,  351,  1166, 1099, 1151, 1099,
    364,  908,  1099, 506,  1014, 506,  506,  265,  1121, 357,  359,  357,  359,  1174, 1024, 1024, 1024, 204,  316,
    430,  506,  1014, 1053, 1054, 1055, 1062, 1065, 1104, 1106, 1107, 1182, 1190, 402,  1070, 1137, 1137, 1138, 507,
    13,   510,  1027, 1028, 941,  1184, 1097, 563,  1099, 973,  1176, 983,  1030, 257,  1131, 1134, 489,  490,  878,
    4,    1184, 1039, 256,  384,  1036, 1053, 402,  1071, 392,  991,  992,  1190, 309,  993,  1006, 1007, 510,  1052,
    493,  1165, 893,  834,  889,  889,  48,   891,  501,  1186, 1176, 1176, 213,  1188, 1188, 255,  1175, 258,  255,
    1099, 638,  1178, 506,  506,  506,  658,  177,  641,  791,  137,  584,  364,  1186, 1176, 568,  892,  1075, 1176,
    409,  833,  833,  833,  833,  907,  75,   113,  270,  358,  1176, 738,  1176, 163,  390,  364,  364,  738,  755,
    762,  302,  331,  581,  1176, 1176, 1176, 185,  478,  246,  885,  268,  331,  364,  594,  506,  506,  506,  506,
    342,  392,  678,  674,  676,  435,  675,  356,  405,  664,  259,  760,  791,  594,  121,  306,  331,  583,  762,
    923,  137,  584,  169,  137,  137,  584,  1176, 1176, 1176, 1176, 765,  766,  765,  507,  510,  767,  1185, 3,
    177,  507,  510,  493,  508,  660,  506,  478,  659,  506,  354,  673,  506,  1186, 1176, 302,  331,  581,  1176,
    1176, 1176, 269,  302,  331,  18,   121,  269,  302,  331,  1075, 240,  1075, 1186, 1176, 213,  431,  274,  246,
    1185, 274,  1188, 383,  506,  538,  42,   99,   534,  536,  538,  162,  467,  364,  364,  319,  268,  331,  364,
    922,  319,  364,  364,  221,  221,  221,  364,  364,  319,  364,  364,  319,  364,  319,  364,  319,  364,  584,
    1075, 241,  1185, 331,  923,  137,  584,  364,  804,  1176, 364,  319,  1189, 1189, 1189, 1189, 1185, 1189, 483,
    804,  804,  483,  483,  1186, 1176, 839,  1075, 195,  839,  839,  1178, 1178, 839,  195,  195,  839,  603,  506,
    606,  607,  507,  504,  507,  1184, 505,  1184, 167,  228,  1098, 228,  1098, 1098, 1184, 231,  507,  806,  240,
    257,  315,  497,  498,  734,  807,  889,  1134, 1185, 1201, 255,  213,  493,  949,  949,  949,  949,  949,  949,
    949,  60,   66,   77,   104,  106,  181,  241,  246,  283,  297,  379,  630,  632,  633,  136,  401,  527,  568,
    1176, 568,  760,  1174, 1190, 68,   1174, 507,  510,  1188, 162,  313,  1188, 1184, 373,  1174, 640,  38,   555,
    304,  354,  97,   589,  641,  1174, 783,  811,  812,  1185, 507,  510,  1176, 804,  641,  1174, 1176, 697,  506,
    621,  507,  254,  588,  254,  255,  655,  588,  31,   1174, 1012, 589,  493,  507,  510,  364,  1174, 507,  510,
    104,  493,  897,  1185, 568,  354,  888,  889,  405,  896,  898,  109,  187,  324,  384,  931,  163,  1012, 584,
    1075, 1176, 584,  584,  386,  584,  386,  584,  584,  833,  833,  1176, 777,  584,  319,  319,  319,  1175, 858,
    510,  1186, 405,  510,  856,  258,  135,  135,  256,  97,   239,  1188, 853,  584,  1186, 892,  881,  734,  833,
    195,  1140, 507,  241,  361,  1099, 127,  1075, 507,  1099, 1099, 1099, 1148, 1075, 1100, 116,  118,  241,  251,
    1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1099, 1099, 1149, 1148, 48,   468,  1096, 1096, 1075,
    507,  507,  507,  1136, 507,  510,  1099, 48,   1101, 507,  1193, 1112, 280,  349,  1114, 507,  510,  397,  1108,
    31,   1099, 510,  1160, 1161, 507,  1093, 1185, 1099, 28,   28,   1099, 507,  1099, 154,  506,  1139, 1099, 1100,
    1100, 130,  130,  1099, 507,  130,  1099, 1028, 402,  506,  1122, 1190, 1024, 1024, 1024, 1024, 1174, 1174, 1174,
    1014, 1065, 154,  506,  1014, 1054, 1055, 31,   1056, 1057, 1190, 510,  85,   155,  183,  198,  210,  236,  312,
    1059, 1057, 31,   1056, 1058, 1190, 491,  1069, 506,  1164, 1099, 162,  1041, 510,  1027, 1027, 1027, 1099, 394,
    1138, 507,  507,  505,  507,  506,  878,  256,  87,   1099, 993,  507,  510,  1165, 1171, 507,  510,  1003, 1071,
    1167, 507,  501,  893,  373,  949,  157,  326,  355,  374,  867,  149,  867,  507,  506,  646,  647,  874,  1106,
    1190, 641,  641,  791,  1180, 507,  106,  181,  239,  241,  792,  1176, 1176, 31,   1176, 386,  386,  833,  833,
    833,  833,  834,  1186, 1176, 364,  922,  319,  364,  185,  48,   356,  1176, 678,  54,   498,  506,  669,  670,
    671,  1182, 1183, 671,  1182, 671,  506,  669,  679,  680,  664,  675,  506,  1176, 804,  506,  666,  506,  629,
    241,  588,  97,   241,  344,  347,  588,  373,  1176, 137,  594,  1190, 764,  1176, 591,  807,  1193, 643,  644,
    1190, 9,    104,  482,  507,  626,  668,  677,  684,  687,  688,  1174, 674,  392,  671,  681,  682,  268,  331,
    364,  922,  319,  364,  364,  364,  319,  156,  257,  347,  816,  817,  156,  257,  824,  825,  364,  364,  319,
    507,  507,  507,  1189, 149,  1185, 1185, 1185, 539,  540,  1193, 536,  535,  1184, 1185, 833,  833,  1176, 1176,
    1176, 48,   356,  1176, 1176, 1176, 1176, 1176, 149,  149,  304,  149,  169,  1186, 1176, 1176, 1186, 1176, 1176,
    1176, 1176, 1176, 1176, 1176, 66,   585,  137,  20,   40,   373,  1190, 1176, 762,  1176, 1176, 734,  407,  734,
    734,  507,  839,  195,  195,  839,  839,  605,  613,  614,  1193, 44,   86,   110,  125,  130,  150,  153,  165,
    246,  254,  255,  289,  439,  455,  608,  791,  1184, 405,  407,  505,  505,  507,  1097, 1174, 949,  104,  1184,
    1185, 104,  1185, 104,  1185, 104,  1185, 104,  1176, 104,  1176, 104,  1176, 506,  833,  1176, 1100, 107,  171,
    106,  246,  199,  1174, 898,  287,  795,  796,  1190, 748,  506,  125,  125,  635,  328,  624,  1188, 1188, 1075,
    506,  589,  1186, 1174, 409,  149,  784,  507,  510,  1074, 760,  507,  251,  506,  985,  660,  661,  623,  625,
    628,  637,  1190, 654,  180,  653,  71,   356,  656,  1012, 506,  697,  656,  807,  3,    810,  1185, 872,  890,
    1099, 1099, 510,  506,  894,  804,  364,  738,  507,  584,  1178, 1178, 584,  584,  328,  1175, 1175, 1175, 734,
    159,  855,  97,   862,  154,  195,  195,  195,  195,  246,  843,  1185, 116,  1099, 507,  507,  1149, 154,  116,
    118,  251,  506,  1136, 507,  412,  1110, 1136, 507,  296,  48,   403,  403,  507,  1099, 239,  1099, 510,  1109,
    1077, 507,  510,  1099, 507,  1097, 1100, 1100, 1099, 1139, 507,  28,   28,   1099, 1099, 130,  1099, 507,  507,
    1099, 1123, 1190, 1174, 1174, 1174, 1174, 1057, 1058, 506,  1099, 507,  1190, 506,  1054, 198,  264,  1060, 1054,
    1060, 198,  1059, 1060, 198,  506,  1190, 506,  1137, 48,   164,  1044, 507,  507,  507,  1138, 1185, 1185, 908,
    251,  1012, 992,  493,  1006, 993,  373,  507,  1189, 364,  850,  154,  791,  1099, 507,  510,  405,  66,   875,
    875,  507,  507,  898,  107,  171,  179,  106,  388,  584,  1075, 1178, 1178, 1176, 1176, 1176, 1176, 1188, 1176,
    664,  506,  669,  669,  11,   507,  510,  506,  507,  506,  507,  680,  507,  510,  507,  510,  666,  671,  356,
    668,  761,  765,  125,  631,  246,  246,  1189, 1190, 1075, 584,  584,  584,  584,  493,  507,  510,  386,  833,
    876,  482,  1197, 507,  510,  664,  678,  678,  405,  407,  593,  193,  592,  507,  48,   356,  1176, 1176, 1176,
    1176, 1186, 1176, 1176, 1184, 1184, 1075, 510,  1184, 1184, 510,  1186, 1176, 1176, 536,  507,  510,  493,  28,
    362,  537,  1188, 1176, 364,  1175, 1175, 833,  1175, 137,  833,  1185, 1185, 1075, 584,  584,  804,  195,  839,
    839,  386,  611,  612,  507,  510,  499,  506,  565,  615,  734,  958,  1185, 958,  241,  246,  289,  958,  477,
    958,  453,  958,  505,  156,  184,  156,  154,  790,  1189, 1099, 241,  632,  898,  640,  386,  657,  1182, 28,
    136,  174,  620,  804,  804,  134,  175,  1176, 386,  641,  31,   555,  506,  1176, 122,  785,  401,  787,  1185,
    589,  833,  620,  697,  272,  690,  507,  510,  405,  655,  506,  654,  109,  121,  280,  1176, 405,  944,  634,
    713,  714,  715,  716,  1190, 661,  154,  506,  1185, 887,  899,  900,  1191, 898,  1174, 182,  739,  584,  584,
    584,  1176, 258,  584,  854,  843,  843,  843,  843,  154,  1100, 154,  506,  1139, 506,  507,  510,  507,  1101,
    296,  507,  391,  341,  507,  507,  1099, 507,  1100, 1100, 1099, 507,  272,  1124, 1066, 1067, 1106, 510,  1056,
    506,  1175, 1054, 255,  386,  1061, 1054, 198,  1054, 1073, 506,  1073, 1190, 1027, 429,  443,  474,  506,  1042,
    1043, 1099, 1099, 404,  1118, 1027, 1097, 507,  1009, 1169, 854,  255,  854,  507,  898,  647,  257,  908,  833,
    876,  876,  297,  898,  657,  507,  364,  331,  999,  666,  670,  507,  1075, 135,  447,  672,  670,  1137, 1137,
    672,  507,  506,  669,  507,  1176, 507,  507,  510,  804,  585,  807,  659,  644,  833,  1197, 684,  626,  662,
    663,  664,  664,  485,  485,  506,  592,  1188, 1176, 364,  506,  1182, 908,  817,  506,  506,  825,  540,  1185,
    536,  1185, 331,  999,  1176, 405,  304,  405,  405,  149,  585,  839,  527,  111,  614,  565,  616,  617,  1185,
    1185, 246,  641,  499,  641,  1185, 1185, 438,  1185, 858,  31,   913,  913,  1174, 791,  507,  657,  222,  645,
    177,  506,  796,  287,  506,  507,  22,   70,   78,   105,  178,  347,  636,  636,  760,  1178, 507,  1012, 760,
    315,  343,  786,  506,  136,  31,   621,  507,  48,   625,  259,  656,  1173, 655,  316,  316,  52,   60,   216,
    507,  510,  1075, 833,  873,  874,  889,  507,  510,  1070, 738,  239,  390,  740,  741,  584,  1099, 1100, 1139,
    507,  1111, 1136, 48,   239,  422,  48,   1027, 507,  510,  31,   1068, 1099, 1175, 507,  1099, 506,  1054, 1061,
    507,  1073, 507,  507,  506,  479,  506,  507,  510,  1119, 1120, 1190, 507,  856,  867,  584,  875,  657,  506,
    877,  877,  1174, 657,  791,  1176, 356,  31,   11,   1027, 1027, 680,  765,  386,  586,  666,  626,  662,  662,
    595,  331,  999,  1176, 1139, 881,  149,  820,  907,  1139, 1139, 356,  832,  833,  832,  833,  1175, 584,  606,
    1185, 507,  510,  641,  913,  34,   173,  149,  239,  639,  155,  271,  336,  255,  649,  650,  651,  356,  507,
    1182, 5,    797,  328,  143,  819,  589,  944,  1099, 287,  1012, 654,  653,  290,  449,  689,  629,  661,  507,
    656,  60,   258,  60,   136,  219,  701,  715,  507,  510,  894,  899,  117,  390,  738,  507,  507,  507,  296,
    391,  1029, 290,  316,  1125, 1069, 1066, 506,  507,  1175, 507,  1136, 506,  1136, 1043, 510,  31,   154,  876,
    402,  648,  908,  878,  878,  640,  791,  1176, 1075, 1075, 507,  507,  507,  1099, 666,  666,  510,  356,  507,
    261,  321,  294,  821,  820,  507,  507,  1176, 405,  450,  717,  718,  617,  122,  179,  109,  384,  255,  651,
    255,  650,  1176, 506,  507,  510,  1176, 833,  31,   31,   507,  1182, 944,  655,  654,  506,  690,  661,  258,
    258,  1185, 506,  440,  589,  874,  898,  23,   188,  932,  42,   87,   375,  1099, 1126, 1127, 1126, 507,  1073,
    507,  507,  1042, 507,  1120, 1122, 854,  877,  506,  791,  507,  645,  999,  507,  507,  595,  1176, 1182, 48,
    821,  999,  833,  434,  446,  604,  477,  315,  51,   239,  308,  331,  652,  652,  507,  5,    760,  816,  1012,
    506,  656,  655,  641,  690,  702,  987,  988,  1185, 1185, 656,  242,  506,  927,  929,  934,  989,  994,  1001,
    1012, 1127, 315,  148,  278,  148,  278,  133,  1128, 1128, 507,  507,  584,  878,  1099, 649,  507,  999,  881,
    833,  193,  140,  471,  787,  17,   104,  246,  944,  4,    788,  789,  1184, 1185, 1193, 661,  656,  507,  255,
    703,  507,  510,  506,  704,  1070, 928,  929,  930,  1014, 1015, 28,   87,   162,  239,  484,  507,  791,  1174,
    463,  213,  136,  507,  510,  690,  661,  482,  692,  693,  694,  22,   445,  451,  477,  1184, 702,  988,  86,
    110,  130,  150,  165,  246,  289,  439,  455,  507,  705,  706,  707,  708,  1193, 259,  709,  507,  509,  1127,
    315,  459,  1184, 287,  789,  690,  48,   506,  665,  482,  691,  694,  1185, 1184, 958,  958,  241,  289,  958,
    958,  453,  958,  86,   110,  130,  150,  165,  246,  289,  439,  455,  507,  708,  507,  510,  493,  506,  710,
    722,  930,  316,  464,  721,  1182, 689,  104,  272,  626,  667,  677,  683,  685,  686,  358,  694,  1185, 1185,
    246,  499,  641,  1185, 1185, 438,  1185, 707,  506,  807,  507,  711,  712,  1193, 125,  450,  718,  719,  720,
    723,  506,  506,  272,  1197, 507,  510,  664,  678,  678,  506,  641,  641,  507,  510,  1185, 949,  434,  661,
    477,  788,  641,  1197, 683,  662,  664,  664,  668,  507,  712,  1184, 1185, 465,  471,  507,  507,  666,  662,
    662,  507,  213,  666,  666,  1184, 721};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] = {
    0,    512,  513,  514,  514,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
    515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
    515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
    515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
    515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
    515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
    515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,  516,  516,
    517,  517,  518,  518,  518,  518,  518,  519,  519,  519,  519,  520,  521,  522,  523,  524,  525,  525,  525,
    525,  525,  525,  526,  527,  527,  528,  528,  529,  529,  530,  530,  531,  531,  531,  531,  531,  531,  531,
    531,  531,  531,  531,  531,  531,  531,  532,  532,  532,  532,  532,  532,  533,  533,  534,  535,  535,  536,
    537,  537,  538,  538,  539,  539,  540,  541,  542,  543,  543,  544,  544,  545,  546,  546,  547,  547,  548,
    548,  549,  550,  551,  551,  552,  552,  553,  553,  553,  553,  554,  554,  555,  555,  556,  556,  556,  556,
    556,  556,  557,  557,  557,  558,  558,  558,  559,  559,  559,  559,  560,  560,  560,  560,  560,  560,  560,
    560,  560,  560,  560,  561,  561,  562,  562,  563,  563,  564,  564,  564,  564,  565,  565,  565,  565,  566,
    566,  566,  566,  566,  566,  566,  567,  567,  567,  568,  568,  569,  570,  570,  570,  570,  571,  571,  572,
    572,  573,  573,  574,  574,  574,  574,  574,  575,  576,  576,  577,  577,  578,  579,  579,  579,  579,  579,
    580,  580,  580,  580,  580,  580,  580,  580,  580,  580,  580,  580,  580,  580,  580,  580,  580,  581,  581,
    582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
    582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
    582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,  583,  583,  584,  584,  584,  585,  585,
    586,  586,  587,  587,  587,  587,  588,  589,  589,  590,  590,  591,  591,  591,  591,  592,  592,  593,  593,
    593,  594,  594,  594,  595,  595,  595,  596,  596,  596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
    596,  596,  596,  597,  598,  598,  599,  599,  599,  599,  600,  600,  601,  601,  602,  602,  603,  603,  604,
    604,  605,  605,  605,  606,  606,  607,  607,  608,  608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
    608,  608,  608,  608,  608,  608,  609,  609,  610,  610,  611,  611,  612,  612,  613,  613,  614,  615,  615,
    615,  615,  615,  616,  616,  617,  618,  618,  618,  618,  619,  619,  619,  619,  619,  619,  619,  619,  620,
    620,  621,  621,  622,  622,  623,  623,  624,  624,  624,  624,  625,  625,  626,  626,  627,  628,  629,  629,
    630,  630,  630,  630,  631,  631,  632,  632,  632,  632,  632,  632,  632,  633,  633,  633,  633,  634,  635,
    635,  635,  636,  636,  636,  636,  636,  636,  637,  637,  638,  638,  638,  638,  638,  638,  638,  639,  639,
    640,  640,  641,  641,  642,  643,  643,  644,  645,  645,  645,  645,  646,  646,  647,  647,  648,  648,  649,
    649,  649,  649,  649,  650,  651,  652,  652,  652,  652,  652,  653,  653,  654,  654,  654,  654,  655,  655,
    655,  655,  656,  656,  657,  657,  658,  659,  659,  660,  660,  660,  660,  661,  661,  662,  662,  663,  663,
    664,  664,  664,  664,  665,  665,  666,  666,  667,  667,  668,  668,  669,  669,  669,  669,  670,  670,  670,
    671,  671,  672,  672,  672,  673,  674,  675,  675,  676,  676,  677,  677,  677,  678,  678,  679,  679,  680,
    680,  681,  681,  682,  682,  683,  683,  683,  683,  684,  684,  684,  684,  685,  686,  687,  688,  689,  689,
    689,  690,  690,  691,  692,  692,  693,  694,  694,  694,  694,  695,  696,  697,  697,  697,  698,  699,  699,
    699,  700,  700,  701,  701,  702,  702,  703,  703,  703,  703,  703,  703,  704,  704,  704,  704,  705,  705,
    706,  706,  707,  707,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  709,  709,  710,  710,
    711,  711,  712,  713,  713,  714,  714,  715,  715,  716,  717,  717,  718,  718,  718,  719,  719,  720,  720,
    721,  721,  721,  722,  722,  723,  723,  724,  725,  726,  726,  727,  728,  729,  729,  730,  730,  731,  731,
    732,  732,  732,  732,  732,  732,  732,  732,  732,  732,  732,  732,  733,  733,  734,  734,  734,  734,  735,
    735,  736,  736,  737,  737,  738,  738,  739,  739,  740,  740,  741,  741,  742,  742,  743,  743,  744,  745,
    745,  746,  746,  747,  747,  748,  748,  749,  749,  749,  750,  751,  751,  752,  753,  753,  753,  753,  753,
    753,  753,  753,  753,  753,  753,  753,  753,  753,  753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
    754,  755,  755,  755,  755,  756,  756,  757,  757,  758,  758,  759,  759,  760,  760,  761,  761,  762,  763,
    763,  764,  764,  764,  764,  765,  766,  767,  768,  769,  769,  770,  770,  771,  771,  772,  772,  773,  773,
    773,  774,  774,  775,  775,  776,  777,  777,  777,  778,  778,  779,  780,  780,  781,  781,  781,  782,  782,
    783,  783,  783,  783,  783,  784,  784,  785,  785,  786,  786,  787,  787,  788,  788,  788,  789,  789,  789,
    789,  790,  790,  791,  791,  792,  792,  792,  792,  792,  792,  793,  793,  794,  794,  795,  795,  796,  797,
    797,  798,  799,  799,  799,  799,  800,  801,  802,  802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
    802,  802,  802,  802,  803,  803,  804,  805,  805,  806,  806,  807,  807,  807,  807,  807,  807,  807,  808,
    809,  809,  810,  811,  811,  812,  812,  813,  813,  813,  814,  814,  815,  816,  816,  817,  817,  817,  817,
    817,  818,  818,  819,  819,  820,  820,  820,  821,  821,  822,  823,  823,  824,  824,  825,  825,  826,  826,
    827,  827,  828,  829,  830,  830,  830,  830,  831,  831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
    831,  831,  831,  831,  831,  831,  831,  831,  831,  832,  832,  833,  833,  834,  834,  835,  836,  836,  836,
    837,  837,  837,  837,  837,  837,  837,  837,  837,  837,  837,  837,  837,  838,  838,  838,  838,  838,  838,
    838,  838,  838,  838,  838,  838,  838,  838,  838,  838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
    839,  839,  840,  840,  840,  840,  840,  841,  841,  842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
    842,  842,  842,  843,  843,  844,  844,  845,  845,  845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
    845,  845,  845,  845,  846,  846,  847,  847,  848,  849,  849,  850,  850,  850,  850,  850,  851,  851,  852,
    852,  852,  852,  853,  853,  853,  853,  853,  853,  853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  854,  854,  855,  855,  856,  856,  857,  857,  858,  859,  860,  860,  861,  861,  862,  862,  863,  864,
    864,  865,  865,  865,  866,  866,  866,  867,  867,  867,  867,  868,  869,  869,  870,  870,  871,  871,  872,
    872,  873,  873,  874,  874,  874,  875,  875,  876,  876,  876,  877,  877,  877,  878,  878,  878,  879,  879,
    879,  880,  880,  881,  881,  882,  882,  883,  883,  884,  884,  885,  885,  885,  885,  885,  886,  886,  886,
    886,  886,  887,  888,  889,  889,  889,  890,  890,  890,  891,  892,  892,  892,  892,  893,  893,  894,  894,
    895,  895,  895,  895,  895,  895,  895,  895,  895,  895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
    895,  895,  895,  895,  896,  896,  896,  896,  897,  897,  898,  898,  899,  900,  900,  901,  902,  902,  903,
    903,  904,  904,  905,  905,  906,  906,  907,  907,  907,  907,  908,  908,  909,  910,  910,  911,  911,  912,
    912,  912,  913,  913,  913,  914,  915,  915,  916,  916,  916,  917,  917,  918,  918,  919,  920,  920,  921,
    921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
    921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
    921,  921,  921,  921,  921,  921,  921,  922,  922,  923,  923,  924,  924,  924,  924,  924,  924,  924,  924,
    924,  924,  924,  924,  924,  924,  924,  924,  924,  924,  924,  924,  924,  924,  924,  924,  925,  925,  925,
    925,  925,  925,  925,  925,  925,  925,  925,  925,  925,  925,  925,  925,  925,  925,  925,  925,  926,  927,
    927,  927,  928,  928,  929,  929,  929,  929,  929,  930,  930,  931,  931,  931,  931,  932,  932,  932,  933,
    933,  934,  935,  935,  936,  937,  937,  938,  938,  938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
    938,  938,  939,  939,  939,  940,  940,  940,  940,  940,  941,  941,  941,  942,  942,  943,  943,  943,  943,
    944,  944,  944,  944,  945,  946,  947,  947,  948,  948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
    948,  948,  948,  948,  948,  949,  949,  950,  950,  951,  952,  952,  953,  954,  954,  955,  955,  956,  957,
    957,  957,  957,  957,  957,  957,  958,  958,  959,  960,  960,  960,  960,  960,  960,  961,  962,  962,  962,
    963,  963,  964,  964,  964,  964,  964,  965,  965,  966,  966,  966,  966,  966,  967,  967,  967,  967,  968,
    968,  969,  969,  970,  970,  971,  971,  972,  972,  973,  973,  974,  974,  974,  974,  975,  975,  975,  975,
    975,  975,  975,  975,  975,  975,  976,  976,  977,  977,  978,  979,  979,  980,  980,  980,  981,  982,  982,
    983,  983,  983,  983,  984,  984,  985,  985,  986,  986,  986,  986,  987,  987,  988,  989,  990,  990,  990,
    991,  991,  992,  993,  993,  994,  995,  995,  996,  997,  997,  998,  998,  998,  998,  998,  998,  998,  998,
    999,  999,  1000, 1000, 1001, 1002, 1002, 1003, 1003, 1004, 1005, 1006, 1007, 1007, 1008, 1009, 1010, 1010, 1010,
    1010, 1010, 1010, 1011, 1011, 1011, 1012, 1012, 1013, 1013, 1014, 1014, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
    1015, 1016, 1016, 1017, 1017, 1017, 1017, 1017, 1017, 1018, 1018, 1019, 1019, 1020, 1021, 1021, 1022, 1022, 1023,
    1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1024, 1024, 1025, 1025, 1025, 1026, 1026, 1026, 1026, 1027, 1027,
    1028, 1029, 1029, 1030, 1030, 1031, 1031, 1031, 1031, 1032, 1032, 1033, 1033, 1033, 1033, 1034, 1034, 1035, 1035,
    1036, 1037, 1037, 1037, 1038, 1038, 1039, 1039, 1040, 1040, 1041, 1041, 1042, 1042, 1043, 1043, 1043, 1043, 1043,
    1044, 1044, 1045, 1045, 1046, 1046, 1047, 1047, 1048, 1049, 1049, 1049, 1049, 1050, 1050, 1051, 1051, 1052, 1052,
    1053, 1053, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1055, 1055, 1055, 1055, 1055, 1055, 1056, 1056, 1056, 1056,
    1057, 1057, 1058, 1058, 1058, 1058, 1058, 1059, 1059, 1059, 1059, 1060, 1060, 1061, 1061, 1062, 1062, 1062, 1062,
    1063, 1063, 1064, 1064, 1064, 1065, 1065, 1066, 1067, 1067, 1068, 1068, 1069, 1069, 1070, 1070, 1071, 1071, 1071,
    1072, 1072, 1073, 1073, 1074, 1075, 1075, 1075, 1075, 1075, 1075, 1076, 1076, 1076, 1077, 1077, 1077, 1077, 1077,
    1077, 1077, 1078, 1078, 1078, 1078, 1079, 1079, 1080, 1080, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
    1081, 1081, 1082, 1082, 1083, 1083, 1084, 1084, 1085, 1086, 1087, 1087, 1088, 1088, 1089, 1090, 1091, 1091, 1091,
    1091, 1091, 1091, 1092, 1092, 1093, 1093, 1094, 1094, 1094, 1094, 1095, 1096, 1096, 1096, 1097, 1097, 1097, 1097,
    1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1098, 1098, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
    1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
    1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
    1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1100, 1100, 1100, 1100, 1100,
    1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1101, 1101,
    1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1102, 1102, 1102, 1103, 1104, 1104, 1104,
    1104, 1104, 1104, 1104, 1105, 1105, 1106, 1106, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
    1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
    1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1108, 1108,
    1109, 1109, 1109, 1109, 1110, 1111, 1111, 1112, 1112, 1113, 1113, 1114, 1114, 1114, 1115, 1115, 1115, 1115, 1116,
    1116, 1117, 1117, 1118, 1118, 1119, 1119, 1120, 1121, 1121, 1121, 1122, 1123, 1123, 1124, 1124, 1125, 1125, 1125,
    1126, 1126, 1127, 1127, 1127, 1127, 1127, 1128, 1128, 1128, 1128, 1128, 1129, 1129, 1129, 1130, 1130, 1130, 1131,
    1131, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1133, 1133, 1134, 1134, 1135, 1135, 1135, 1135, 1135,
    1135, 1136, 1136, 1137, 1137, 1138, 1138, 1139, 1139, 1140, 1140, 1140, 1141, 1141, 1142, 1142, 1143, 1143, 1143,
    1143, 1143, 1143, 1143, 1143, 1144, 1144, 1145, 1146, 1146, 1147, 1147, 1147, 1147, 1147, 1147, 1148, 1149, 1150,
    1150, 1150, 1151, 1151, 1152, 1153, 1153, 1154, 1155, 1155, 1156, 1156, 1157, 1157, 1158, 1159, 1159, 1160, 1161,
    1161, 1162, 1162, 1163, 1163, 1163, 1163, 1164, 1164, 1165, 1165, 1166, 1166, 1167, 1167, 1168, 1168, 1169, 1170,
    1170, 1171, 1171, 1172, 1172, 1172, 1172, 1172, 1173, 1173, 1174, 1174, 1175, 1175, 1176, 1177, 1178, 1179, 1180,
    1181, 1182, 1182, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1184, 1185, 1186,
    1187, 1188, 1188, 1189, 1189, 1189, 1190, 1190, 1190, 1191, 1191, 1191, 1192, 1192, 1192, 1192, 1193, 1193, 1193,
    1193, 1193, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1195, 1196, 1196, 1196, 1196,
    1196, 1197, 1197, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
    1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
    1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
    1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
    1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
    1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
    1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
    1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
    1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
    1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
    1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
    1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
    1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
    1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
    1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1199, 1199, 1199, 1199,
    1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
    1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
    1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
    1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1201, 1201, 1201, 1201, 1201, 1201,
    1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
    1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
    1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
    1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
    1201, 1201, 1201};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] = {
    0,  2,  1,  3,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  5,  7,  2,  0,  3,  3,  3,  1, 1,  5,  7,  7,  9,  4, 6,  4,  6, 1, 2,
    2,  2,  2,  2,  2,  5,  1,  0,  2,  0,  2,  0,  1,  4,  2,  2,  3,  3,  1, 3,  3,  3,  3,  2,  2, 2,  1,  1, 1, 2,
    2,  2,  3,  3,  2,  2,  4,  1,  1,  3,  2,  0,  3,  0,  1,  3,  3,  5,  5, 0,  3,  5,  5,  5,  5, 5,  3,  5, 3, 5,
    5,  6,  1,  1,  3,  5,  6,  4,  9,  7,  1,  0,  2,  0,  1,  1,  1,  1,  1, 1,  2,  3,  3,  2,  5, 1,  3,  3, 3, 3,
    1,  3,  3,  2,  2,  2,  2,  3,  3,  3,  3,  1,  3,  1,  3,  1,  1,  2,  2, 2,  1,  1,  1,  1,  1, 1,  1,  3, 6, 1,
    1,  1,  1,  1,  0,  1,  1,  2,  1,  2,  3,  2,  1,  1,  2,  1,  2,  1,  2, 3,  4,  3,  2,  4,  1, 1,  1,  1, 1, 2,
    2,  2,  2,  2,  4,  6,  5,  10, 13, 4,  6,  10, 13, 4,  6,  4,  6,  5,  7, 11, 14, 1,  3,  2,  3, 4,  6,  6, 6, 5,
    5,  6,  6,  4,  8,  4,  2,  4,  3,  6,  4,  3,  3,  3,  3,  3,  4,  4,  3, 3,  3,  3,  3,  3,  4, 4,  3,  2, 3, 2,
    4,  3,  1,  2,  3,  2,  2,  3,  3,  2,  2,  3,  1,  3,  2,  1,  1,  0,  2, 0,  2,  0,  1,  1,  1, 3,  3,  2, 0, 1,
    3,  3,  1,  5,  3,  6,  0,  2,  2,  0,  1,  4,  8,  2,  3,  2,  5,  7,  6, 3,  6,  6,  3,  2,  6, 4,  6,  5, 6, 7,
    3,  4,  1,  3,  4,  6,  4,  8,  2,  2,  13, 7,  1,  1,  1,  0,  3,  0,  1, 1,  1,  1,  3,  2,  0, 1,  1,  1, 3, 3,
    1,  1,  3,  3,  3,  3,  4,  3,  2,  3,  3,  2,  1,  0,  2,  0,  3,  0,  1, 0,  1,  3,  2,  1,  1, 1,  3,  0, 1, 3,
    1,  13, 16, 12, 15, 1,  1,  2,  2,  2,  2,  1,  0,  1,  0,  3,  0,  1,  3, 1,  3,  1,  1,  1,  1, 1,  1,  4, 4, 5,
    4,  2,  0,  3,  1,  1,  2,  2,  0,  2,  1,  3,  4,  5,  2,  5,  1,  2,  2, 2,  3,  3,  3,  0,  1, 1,  1,  1, 1, 1,
    3,  1,  5,  7,  3,  8,  4,  9,  11, 2,  0,  3,  0,  1,  3,  1,  1,  3,  2, 2,  2,  2,  0,  1,  3, 3,  6,  4, 0, 1,
    1,  2,  2,  0,  3,  3,  2,  1,  1,  2,  2,  4,  0,  2,  2,  2,  0,  3,  4, 4,  0,  2,  0,  4,  0, 3,  2,  0, 6, 3,
    2,  2,  1,  0,  1,  0,  1,  2,  4,  2,  2,  0,  3,  0,  3,  0,  1,  3,  1, 3,  1,  6,  3,  2,  1, 3,  5,  1, 3, 1,
    1,  0,  5,  5,  4,  0,  1,  0,  1,  3,  2,  1,  0,  3,  5,  1,  3,  4,  4, 1,  1,  5,  5,  4,  1, 5,  5,  4, 1, 2,
    3,  2,  3,  1,  1,  0,  8,  0,  5,  1,  0,  6,  2,  1,  2,  3,  9,  5,  2, 3,  0,  18, 1,  1,  0, 1,  0,  5, 3, 2,
    0,  2,  3,  2,  2,  3,  2,  3,  3,  2,  0,  1,  2,  1,  3,  3,  5,  3,  3, 1,  1,  3,  3,  4,  3, 3,  3,  3, 2, 0,
    3,  2,  1,  3,  2,  1,  0,  1,  3,  1,  1,  2,  6,  0,  4,  2,  0,  6,  0, 1,  3,  1,  1,  0,  2, 0,  3,  3, 9, 4,
    1,  0,  6,  5,  4,  6,  1,  0,  1,  2,  2,  1,  2,  3,  2,  2,  2,  2,  3, 3,  1,  3,  1,  0,  1, 2,  2,  1, 1, 3,
    6,  10, 1,  0,  1,  2,  2,  0,  2,  2,  1,  0,  5,  7,  1,  0,  7,  2,  0, 3,  5,  5,  8,  2,  0, 2,  2,  2, 5, 2,
    0,  2,  7,  10, 6,  6,  6,  6,  7,  7,  9,  9,  6,  7,  6,  8,  8,  8,  8, 6,  6,  7,  7,  8,  6, 6,  7,  2, 2, 2,
    2,  1,  2,  1,  0,  6,  8,  7,  6,  4,  0,  1,  3,  4,  1,  3,  1,  2,  2, 2,  2,  1,  1,  10, 2, 0,  2,  2, 1, 0,
    4,  6,  5,  4,  4,  10, 13, 5,  7,  8,  1,  1,  1,  7,  9,  8,  15, 20, 1, 1,  2,  1,  3,  1,  1, 1,  3,  1, 3, 0,
    1,  0,  1,  1,  4,  0,  1,  3,  0,  1,  1,  1,  1,  2,  0,  0,  2,  2,  1, 2,  2,  2,  2,  6,  8, 11, 13, 1, 3, 5,
    1,  3,  5,  1,  2,  2,  1,  8,  4,  6,  5,  4,  4,  3,  7,  6,  8,  6,  6, 6,  6,  6,  4,  5,  1, 0,  3,  1, 3, 3,
    1,  1,  1,  1,  1,  1,  1,  1,  3,  1,  3,  3,  1,  0,  1,  3,  7,  9,  9, 3,  0,  13, 1,  3,  5, 6,  4,  7, 2, 1,
    0,  2,  0,  2,  4,  0,  1,  0,  6,  8,  8,  1,  3,  5,  5,  7,  9,  7,  9, 5,  6,  6,  4,  5,  7, 1,  2,  3, 1, 1,
    2,  1,  2,  2,  1,  1,  1,  1,  1,  1,  3,  3,  3,  3,  1,  1,  3,  1,  2, 2,  3,  5,  2,  2,  0, 6,  7,  7, 7, 8,
    8,  6,  8,  9,  9,  7,  10, 7,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1, 1,  1,  1,  1,  2,  1, 3,  2,  3, 3, 3,
    3,  2,  2,  1,  1,  8,  9,  9,  9,  9,  2,  0,  1,  1,  2,  2,  1,  1,  1, 1,  1,  1,  1,  1,  2, 1,  1,  2, 2, 1,
    2,  3,  3,  3,  3,  4,  4,  3,  3,  3,  4,  4,  3,  4,  4,  1,  1,  1,  0, 7,  7,  10, 1,  1,  2, 4,  5,  1, 3, 2,
    2,  2,  2,  1,  2,  2,  4,  3,  2,  2,  2,  2,  3,  2,  2,  2,  2,  5,  5, 5,  1,  3,  1,  2,  3, 0,  1,  3, 2, 6,
    6,  9,  3,  0,  3,  0,  5,  2,  0,  3,  3,  3,  7,  7,  10, 1,  1,  1,  1, 14, 1,  0,  1,  0,  1, 0,  2,  0, 1, 3,
    5,  5,  7,  2,  0,  1,  2,  0,  1,  1,  0,  1,  1,  0,  9,  12, 7,  2,  0, 3,  2,  1,  3,  3,  2, 1,  3,  3, 3, 2,
    2,  1,  1,  1,  1,  2,  1,  1,  1,  1,  4,  5,  1,  3,  3,  1,  3,  3,  5, 6,  1,  3,  1,  2,  4, 5,  1,  1, 1, 1,
    3,  3,  2,  2,  1,  2,  2,  2,  1,  2,  2,  3,  3,  3,  3,  3,  4,  2,  2, 1,  1,  1,  3,  2,  0, 2,  1,  3, 5, 1,
    2,  1,  0,  5,  7,  5,  7,  5,  7,  3,  5,  5,  5,  1,  3,  2,  1,  2,  1, 2,  11, 10, 10, 2,  2, 0,  9,  2, 0, 4,
    4,  4,  1,  1,  1,  0,  7,  5,  5,  7,  6,  6,  6,  6,  8,  8,  6,  6,  7, 9,  9,  6,  6,  6,  8, 6,  8,  6, 8, 7,
    9,  6,  8,  7,  9,  8,  10, 9,  11, 8,  9,  11, 8,  8,  7,  6,  6,  6,  8, 8,  8,  8,  6,  9,  6, 1,  0,  2, 0, 7,
    6,  6,  6,  6,  6,  7,  9,  9,  6,  8,  8,  8,  8,  8,  6,  8,  6,  8,  7, 9,  7,  9,  6,  7,  6, 6,  6,  6, 6, 7,
    7,  7,  9,  9,  6,  6,  6,  6,  8,  8,  8,  6,  7,  13, 1,  1,  3,  3,  1, 1,  1,  1,  1,  1,  1, 0,  1,  1, 1, 1,
    1,  1,  0,  6,  8,  3,  2,  0,  2,  2,  2,  2,  3,  3,  2,  2,  2,  2,  3, 2,  5,  4,  3,  3,  3, 1,  1,  0, 3, 2,
    2,  1,  2,  1,  3,  2,  1,  0,  9,  11, 12, 14, 3,  4,  4,  0,  2,  5,  2, 0,  3,  3,  3,  3,  3, 3,  3,  3, 3, 3,
    3,  3,  3,  4,  3,  3,  1,  0,  5,  6,  4,  2,  0,  4,  3,  5,  4,  4,  6, 4,  6,  6,  5,  7,  9, 6,  1,  0, 6, 11,
    11, 11, 13, 9,  11, 10, 4,  2,  5,  2,  0,  4,  5,  5,  4,  6,  1,  3,  1, 1,  1,  1,  1,  3,  4, 5,  5,  1, 1, 1,
    0,  2,  0,  1,  0,  1,  0,  3,  0,  2,  5,  4,  5,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  0, 1,  3,  2, 1, 1,
    1,  1,  0,  5,  3,  0,  1,  1,  1,  1,  3,  9,  3,  0,  2,  3,  2,  3,  1, 3,  1,  6,  1,  4,  2, 1,  3,  2, 2, 0,
    7,  2,  0,  6,  3,  0,  2,  2,  2,  3,  1,  3,  1,  2,  1,  0,  2,  0,  8, 1,  3,  1,  1,  3,  5, 2,  1,  3, 7, 1,
    0,  3,  2,  2,  2,  3,  0,  2,  2,  1,  1,  5,  5,  3,  3,  1,  2,  4,  4, 2,  3,  5,  5,  1,  1, 9,  1,  2, 4, 4,
    4,  2,  3,  1,  3,  6,  1,  0,  2,  0,  3,  3,  4,  4,  4,  4,  3,  2,  1, 1,  0,  1,  1,  0,  1, 5,  1,  0, 1, 0,
    3,  1,  3,  4,  3,  2,  2,  1,  1,  1,  0,  2,  4,  5,  4,  2,  3,  1,  1, 1,  1,  2,  2,  1,  1, 1,  1,  1, 1, 3,
    0,  1,  3,  1,  4,  4,  5,  2,  2,  0,  1,  3,  1,  0,  1,  2,  3,  2,  4, 2,  3,  2,  0,  2,  3, 2,  0,  1, 3, 2,
    2,  3,  2,  3,  1,  4,  3,  4,  5,  4,  5,  4,  5,  2,  4,  1,  1,  0,  1, 4,  5,  4,  0,  2,  2, 2,  1,  1, 0, 4,
    2,  1,  2,  2,  4,  1,  3,  1,  2,  3,  2,  6,  2,  1,  3,  4,  0,  1,  0, 2,  0,  2,  4,  0,  1, 0,  1,  3, 3, 2,
    3,  5,  6,  2,  3,  3,  4,  0,  1,  1,  1,  1,  1,  2,  5,  1,  1,  1,  1, 2,  3,  3,  0,  1,  1, 1,  1,  1, 2, 2,
    2,  2,  2,  1,  3,  0,  1,  1,  1,  1,  5,  2,  1,  1,  1,  1,  5,  2,  2, 2,  1,  3,  3,  2,  1, 0,  3,  0, 5, 2,
    5,  2,  1,  2,  3,  0,  1,  1,  1,  1,  1,  1,  3,  3,  3,  3,  3,  3,  3, 0,  1,  4,  1,  3,  3, 5,  2,  2, 3, 3,
    3,  3,  3,  3,  3,  3,  3,  3,  2,  2,  3,  3,  2,  3,  5,  4,  6,  3,  5, 4,  6,  4,  6,  5,  7, 3,  2,  4, 2, 3,
    3,  4,  3,  4,  3,  4,  5,  6,  6,  7,  6,  7,  6,  7,  3,  4,  4,  6,  2, 3,  4,  1,  3,  2,  2, 3,  3,  3, 3, 3,
    3,  3,  3,  3,  3,  2,  2,  5,  6,  6,  7,  3,  4,  1,  1,  2,  4,  1,  1, 1,  1,  2,  2,  2,  2, 4,  1,  0, 2, 3,
    2,  3,  5,  6,  8,  6,  6,  4,  4,  1,  1,  1,  5,  1,  1,  4,  1,  4,  1, 4,  1,  4,  1,  1,  1, 1,  1,  1, 6, 4,
    4,  4,  4,  6,  5,  5,  5,  4,  6,  4,  4,  4,  4,  3,  4,  6,  4,  5,  7, 7,  9,  5,  6,  4,  6, 5,  7,  7, 7, 2,
    3,  3,  3,  4,  0,  4,  1,  3,  3,  1,  1,  1,  2,  2,  0,  2,  4,  4,  6, 5,  0,  5,  0,  2,  0, 1,  3,  3, 2, 2,
    0,  6,  1,  0,  3,  0,  3,  3,  0,  1,  4,  2,  2,  2,  2,  2,  3,  2,  2, 3,  0,  4,  3,  5,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  4,  1,  4,  1,  4,  1,  2,  1,  2,  1, 3,  1,  3,  1,  3,  1, 3,  3,  3, 2, 1,
    3,  3,  0,  1,  1,  1,  1,  1,  1,  1,  1,  4,  3,  2,  3,  0,  3,  3,  2, 2,  1,  0,  2,  2,  3, 2,  1,  1, 3, 5,
    1,  2,  4,  1,  5,  2,  0,  1,  0,  6,  1,  2,  4,  2,  0,  1,  2,  2,  2, 3,  5,  1,  2,  0,  2, 1,  0,  1, 1, 1,
    3,  3,  1,  0,  1,  3,  3,  2,  2,  1,  1,  1,  3,  1,  2,  1,  3,  1,  1, 1,  1,  1,  1,  1,  2, 1,  1,  1, 1, 1,
    2,  6,  2,  3,  6,  1,  1,  1,  1,  1,  1,  1,  1,  3,  1,  2,  2,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1, 1, 1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1};

enum
{
    YYENOMEM = -2
};

#define yyerrok (yyerrstatus = 0)
#define yyclearin (yychar = YYEMPTY)

#define YYACCEPT goto yyacceptlab
#define YYABORT goto yyabortlab
#define YYERROR goto yyerrorlab
#define YYNOMEM goto yyexhaustedlab

#define YYRECOVERING() (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                                                                         \
    do                                                                                                                 \
        if (yychar == YYEMPTY) {                                                                                       \
            yychar = (Token);                                                                                          \
            yylval = (Value);                                                                                          \
            YYPOPSTACK(yylen);                                                                                         \
            yystate = *yyssp;                                                                                          \
            goto yybackup;                                                                                             \
        } else {                                                                                                       \
            yyerror(&yylloc, yyscanner, YY_("syntax error: cannot back up"));                                          \
            YYERROR;                                                                                                   \
        }                                                                                                              \
    while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
#define YYLLOC_DEFAULT(Current, Rhs, N)                                                                                \
    do                                                                                                                 \
        if (N) {                                                                                                       \
            (Current).first_line = YYRHSLOC(Rhs, 1).first_line;                                                        \
            (Current).first_column = YYRHSLOC(Rhs, 1).first_column;                                                    \
            (Current).last_line = YYRHSLOC(Rhs, N).last_line;                                                          \
            (Current).last_column = YYRHSLOC(Rhs, N).last_column;                                                      \
        } else {                                                                                                       \
            (Current).first_line = (Current).last_line = YYRHSLOC(Rhs, 0).last_line;                                   \
            (Current).first_column = (Current).last_column = YYRHSLOC(Rhs, 0).last_column;                             \
        }                                                                                                              \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])

/* Enable debugging if requested.  */
#if YYDEBUG

#ifndef YYFPRINTF
#include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#define YYFPRINTF fprintf
#endif

#define YYDPRINTF(Args)                                                                                                \
    do {                                                                                                               \
        if (yydebug)                                                                                                   \
            YYFPRINTF Args;                                                                                            \
    } while (0)

/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YYLOCATION_PRINT

#if defined YY_LOCATION_PRINT

/* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#define YYLOCATION_PRINT(File, Loc) YY_LOCATION_PRINT(File, *(Loc))

#elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int yy_location_print_(FILE* yyo, YYLTYPE const* const yylocp) {
    int res = 0;
    int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
    if (0 <= yylocp->first_line) {
        res += YYFPRINTF(yyo, "%d", yylocp->first_line);
        if (0 <= yylocp->first_column)
            res += YYFPRINTF(yyo, ".%d", yylocp->first_column);
    }
    if (0 <= yylocp->last_line) {
        if (yylocp->first_line < yylocp->last_line) {
            res += YYFPRINTF(yyo, "-%d", yylocp->last_line);
            if (0 <= end_col)
                res += YYFPRINTF(yyo, ".%d", end_col);
        } else if (0 <= end_col && yylocp->first_column < end_col)
            res += YYFPRINTF(yyo, "-%d", end_col);
    }
    return res;
}

#define YYLOCATION_PRINT yy_location_print_

/* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#define YY_LOCATION_PRINT(File, Loc) YYLOCATION_PRINT(File, &(Loc))

#else

#define YYLOCATION_PRINT(File, Loc) ((void) 0)
/* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#define YY_LOCATION_PRINT YYLOCATION_PRINT

#endif
#endif /* !defined YYLOCATION_PRINT */

#define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                                                                  \
    do {                                                                                                               \
        if (yydebug) {                                                                                                 \
            YYFPRINTF(stderr, "%s ", Title);                                                                           \
            yy_symbol_print(stderr, Kind, Value, Location, yyscanner);                                                 \
            YYFPRINTF(stderr, "\n");                                                                                   \
        }                                                                                                              \
    } while (0)

/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void yy_symbol_value_print(FILE* yyo,
                                  yysymbol_kind_t yykind,
                                  YYSTYPE const* const yyvaluep,
                                  YYLTYPE const* const yylocationp,
                                  core_yyscan_t yyscanner) {
    FILE* yyoutput = yyo;
    YY_USE(yyoutput);
    YY_USE(yylocationp);
    YY_USE(yyscanner);
    if (!yyvaluep)
        return;
    YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
    YY_USE(yykind);
    YY_IGNORE_MAYBE_UNINITIALIZED_END
}

/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void yy_symbol_print(FILE* yyo,
                            yysymbol_kind_t yykind,
                            YYSTYPE const* const yyvaluep,
                            YYLTYPE const* const yylocationp,
                            core_yyscan_t yyscanner) {
    YYFPRINTF(yyo, "%s %s (", yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name(yykind));

    YYLOCATION_PRINT(yyo, yylocationp);
    YYFPRINTF(yyo, ": ");
    yy_symbol_value_print(yyo, yykind, yyvaluep, yylocationp, yyscanner);
    YYFPRINTF(yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void yy_stack_print(yy_state_t* yybottom, yy_state_t* yytop) {
    YYFPRINTF(stderr, "Stack now");
    for (; yybottom <= yytop; yybottom++) {
        int yybot = *yybottom;
        YYFPRINTF(stderr, " %d", yybot);
    }
    YYFPRINTF(stderr, "\n");
}

#define YY_STACK_PRINT(Bottom, Top)                                                                                    \
    do {                                                                                                               \
        if (yydebug)                                                                                                   \
            yy_stack_print((Bottom), (Top));                                                                           \
    } while (0)

/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void yy_reduce_print(yy_state_t* yyssp, YYSTYPE* yyvsp, YYLTYPE* yylsp, int yyrule, core_yyscan_t yyscanner) {
    int yylno = yyrline[yyrule];
    int yynrhs = yyr2[yyrule];
    int yyi;
    YYFPRINTF(stderr, "Reducing stack by rule %d (line %d):\n", yyrule - 1, yylno);
    /* The symbols being reduced.  */
    for (yyi = 0; yyi < yynrhs; yyi++) {
        YYFPRINTF(stderr, "   $%d = ", yyi + 1);
        yy_symbol_print(stderr,
                        YY_ACCESSING_SYMBOL(+yyssp[yyi + 1 - yynrhs]),
                        &yyvsp[(yyi + 1) - (yynrhs)],
                        &(yylsp[(yyi + 1) - (yynrhs)]),
                        yyscanner);
        YYFPRINTF(stderr, "\n");
    }
}

#define YY_REDUCE_PRINT(Rule)                                                                                          \
    do {                                                                                                               \
        if (yydebug)                                                                                                   \
            yy_reduce_print(yyssp, yyvsp, yylsp, Rule, yyscanner);                                                     \
    } while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
#define YYDPRINTF(Args) ((void) 0)
#define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
#define YY_STACK_PRINT(Bottom, Top)
#define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void yydestruct(const char* yymsg,
                       yysymbol_kind_t yykind,
                       YYSTYPE* yyvaluep,
                       YYLTYPE* yylocationp,
                       core_yyscan_t yyscanner) {
    YY_USE(yyvaluep);
    YY_USE(yylocationp);
    YY_USE(yyscanner);
    if (!yymsg)
        yymsg = "Deleting";
    YY_SYMBOL_PRINT(yymsg, yykind, yyvaluep, yylocationp);

    YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
    YY_USE(yykind);
    YY_IGNORE_MAYBE_UNINITIALIZED_END
}

/*----------.
| yyparse.  |
`----------*/

int yyparse(core_yyscan_t yyscanner) {
    /* Lookahead token kind.  */
    int yychar;

    /* The semantic value of the lookahead symbol.  */
    /* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
    YY_INITIAL_VALUE(static YYSTYPE yyval_default;)
    YYSTYPE yylval YY_INITIAL_VALUE(= yyval_default);

    /* Location data for the lookahead symbol.  */
    static YYLTYPE yyloc_default
#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
        = { 1,
            1,
            1,
            1 }
#endif
    ;
    YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t* yyss = yyssa;
    yy_state_t* yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE* yyvs = yyvsa;
    YYSTYPE* yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE* yyls = yylsa;
    YYLTYPE* yylsp = yyls;

    int yyn;
    /* The return value of yyparse.  */
    int yyresult;
    /* Lookahead symbol kind.  */
    yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
    /* The variables used to return semantic value and location from the
     action routines.  */
    YYSTYPE yyval;
    YYLTYPE yyloc;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

#define YYPOPSTACK(N) (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

    /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
    int yylen = 0;

    YYDPRINTF((stderr, "Starting parse\n"));

    yychar = YYEMPTY; /* Cause a token to be read.  */

    yylsp[0] = yylloc;
    goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
    /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
    yyssp++;

/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
    YYDPRINTF((stderr, "Entering state %d\n", yystate));
    YY_ASSERT(0 <= yystate && yystate < YYNSTATES);
    YY_IGNORE_USELESS_CAST_BEGIN
    *yyssp = YY_CAST(yy_state_t, yystate);
    YY_IGNORE_USELESS_CAST_END
    YY_STACK_PRINT(yyss, yyssp);

    if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
        YYNOMEM;
#else
    {
        /* Get the current used size of the three stacks, in elements.  */
        YYPTRDIFF_T yysize = yyssp - yyss + 1;

#if defined yyoverflow
        {
            /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
            yy_state_t* yyss1 = yyss;
            YYSTYPE* yyvs1 = yyvs;
            YYLTYPE* yyls1 = yyls;

            /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
            yyoverflow(YY_("memory exhausted"),
                       &yyss1,
                       yysize * YYSIZEOF(*yyssp),
                       &yyvs1,
                       yysize * YYSIZEOF(*yyvsp),
                       &yyls1,
                       yysize * YYSIZEOF(*yylsp),
                       &yystacksize);
            yyss = yyss1;
            yyvs = yyvs1;
            yyls = yyls1;
        }
#else /* defined YYSTACK_RELOCATE */
        /* Extend the stack our own way.  */
        if (YYMAXDEPTH <= yystacksize)
            YYNOMEM;
        yystacksize *= 2;
        if (YYMAXDEPTH < yystacksize)
            yystacksize = YYMAXDEPTH;

        {
            yy_state_t* yyss1 = yyss;
            union yyalloc* yyptr =
                YY_CAST(union yyalloc*, YYSTACK_ALLOC(YY_CAST(YYSIZE_T, YYSTACK_BYTES(yystacksize))));
            if (!yyptr)
                YYNOMEM;
            YYSTACK_RELOCATE(yyss_alloc, yyss);
            YYSTACK_RELOCATE(yyvs_alloc, yyvs);
            YYSTACK_RELOCATE(yyls_alloc, yyls);
#undef YYSTACK_RELOCATE
            if (yyss1 != yyssa)
                YYSTACK_FREE(yyss1);
        }
#endif

        yyssp = yyss + yysize - 1;
        yyvsp = yyvs + yysize - 1;
        yylsp = yyls + yysize - 1;

        YY_IGNORE_USELESS_CAST_BEGIN
        YYDPRINTF((stderr, "Stack size increased to %ld\n", YY_CAST(long, yystacksize)));
        YY_IGNORE_USELESS_CAST_END

        if (yyss + yystacksize - 1 <= yyssp)
            YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

    if (yystate == YYFINAL)
        YYACCEPT;

    goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:
    /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

    /* First try to decide what to do without reference to lookahead token.  */
    yyn = yypact[yystate];
    if (yypact_value_is_default(yyn))
        goto yydefault;

    /* Not known => get a lookahead token if don't already have one.  */

    /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
    if (yychar == YYEMPTY) {
        YYDPRINTF((stderr, "Reading a token\n"));
        yychar = yylex(&yylval, &yylloc, yyscanner);
    }

    if (yychar <= YYEOF) {
        yychar = YYEOF;
        yytoken = YYSYMBOL_YYEOF;
        YYDPRINTF((stderr, "Now at end of input.\n"));
    } else if (yychar == YYerror) {
        /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
        yychar = YYUNDEF;
        yytoken = YYSYMBOL_YYerror;
        yyerror_range[1] = yylloc;
        goto yyerrlab1;
    } else {
        yytoken = YYTRANSLATE(yychar);
        YY_SYMBOL_PRINT("Next token is", yytoken, &yylval, &yylloc);
    }

    /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
    yyn += yytoken;
    if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
        goto yydefault;
    yyn = yytable[yyn];
    if (yyn <= 0) {
        if (yytable_value_is_error(yyn))
            goto yyerrlab;
        yyn = -yyn;
        goto yyreduce;
    }

    /* Count tokens shifted since error; after three, turn off error
     status.  */
    if (yyerrstatus)
        yyerrstatus--;

    /* Shift the lookahead token.  */
    YY_SYMBOL_PRINT("Shifting", yytoken, &yylval, &yylloc);
    yystate = yyn;
    YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
    *++yyvsp = yylval;
    YY_IGNORE_MAYBE_UNINITIALIZED_END
    *++yylsp = yylloc;

    /* Discard the shifted token.  */
    yychar = YYEMPTY;
    goto yynewstate;

/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
    yyn = yydefact[yystate];
    if (yyn == 0)
        goto yyerrlab;
    goto yyreduce;

/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
    /* yyn is the number of a rule to reduce with.  */
    yylen = yyr2[yyn];

    /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
    yyval = yyvsp[1 - yylen];

    /* Default location. */
    YYLLOC_DEFAULT(yyloc, (yylsp - yylen), yylen);
    yyerror_range[1] = yyloc;
    YY_REDUCE_PRINT(yyn);
    switch (yyn) {
        case 2: /* stmtblock: stmtmulti  */
#line 1135 "gram.y"
        {
            pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
        }
#line 26872 "gram.cpp"
        break;

        case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 1142 "gram.y"
        {
            if ((yyvsp[0].node) != NULL)
                (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
            else
                (yyval.list) = (yyvsp[-2].list);
        }
#line 26883 "gram.cpp"
        break;

        case 4: /* stmtmulti: stmt  */
#line 1149 "gram.y"
        {
            if ((yyvsp[0].node) != NULL)
                (yyval.list) = list_make1((yyvsp[0].node));
            else
                (yyval.list) = NIL;
        }
#line 26894 "gram.cpp"
        break;

        case 130: /* stmt: %empty  */
#line 1284 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 26900 "gram.cpp"
        break;

        case 131: /* CreateQueueStmt: CREATE RESOURCE QUEUE QueueId OptQueueList  */
#line 1295 "gram.y"
        {
            CreateQueueStmt* n = makeNode(CreateQueueStmt);
            DefElem* def1 = /* mark start of WITH items */
                makeDefElem("withliststart", (Node*) makeInteger(TRUE));
            n->queue = (yyvsp[-1].str);
            n->options = list_concat(lappend((yyvsp[0].list), def1), NULL);
            (yyval.node) = (Node*) n;
        }
#line 26914 "gram.cpp"
        break;

        case 132: /* CreateQueueStmt: CREATE RESOURCE QUEUE QueueId OptQueueList WITH definition  */
#line 1305 "gram.y"
        {
            CreateQueueStmt* n = makeNode(CreateQueueStmt);
            DefElem* def1 = /* mark start of WITH items */
                makeDefElem("withliststart", (Node*) makeInteger(TRUE));
            n->queue = (yyvsp[-3].str);
            n->options = list_concat(lappend((yyvsp[-2].list), def1), (yyvsp[0].list));
            (yyval.node) = (Node*) n;
        }
#line 26928 "gram.cpp"
        break;

        case 133: /* OptQueueList: OptQueueList OptQueueElem  */
#line 1320 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 26934 "gram.cpp"
        break;

        case 134: /* OptQueueList: %empty  */
#line 1321 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 26940 "gram.cpp"
        break;

        case 135: /* OptQueueElem: ACTIVE THRESHOLD NumericOnly  */
#line 1326 "gram.y"
        {
            /* was "activelimit" */
            (yyval.defelt) = makeDefElem("active_statements", (Node*) (yyvsp[0].value));
        }
#line 26949 "gram.cpp"
        break;

        case 136: /* OptQueueElem: COST THRESHOLD NumericOnly  */
#line 1331 "gram.y"
        {
            /* was "costlimit" */
            (yyval.defelt) = makeDefElem("max_cost", (Node*) (yyvsp[0].value));
        }
#line 26958 "gram.cpp"
        break;

        case 137: /* OptQueueElem: IGNORE_P THRESHOLD NumericOnly  */
#line 1336 "gram.y"
        {
            /* was "ignorecostlimit" */
            (yyval.defelt) = makeDefElem("min_cost", (Node*) (yyvsp[0].value));
        }
#line 26967 "gram.cpp"
        break;

        case 138: /* OptQueueElem: OVERCOMMIT  */
#line 1341 "gram.y"
        {
            /* was "overcommit" */
            (yyval.defelt) = makeDefElem("cost_overcommit", (Node*) makeInteger(TRUE));
        }
#line 26976 "gram.cpp"
        break;

        case 139: /* OptQueueElem: NOOVERCOMMIT  */
#line 1346 "gram.y"
        {
            /* was "overcommit" */
            (yyval.defelt) = makeDefElem("cost_overcommit", (Node*) makeInteger(FALSE));
        }
#line 26985 "gram.cpp"
        break;

        case 140: /* AlterQueueStmt: ALTER RESOURCE QUEUE QueueId OptQueueList  */
#line 1360 "gram.y"
        {
            AlterQueueStmt* n = makeNode(AlterQueueStmt);
            n->queue = (yyvsp[-1].str);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 26996 "gram.cpp"
        break;

        case 141: /* AlterQueueStmt: ALTER RESOURCE QUEUE QueueId OptQueueList WITH definition  */
#line 1367 "gram.y"
        {
            AlterQueueStmt* n = makeNode(AlterQueueStmt);
            DefElem* def1 = /* mark start of WITH items */
                makeDefElem("withliststart", (Node*) makeInteger(TRUE));
            DefElem* def2 = /* mark start of WITHOUT items */
                makeDefElem("withoutliststart", (Node*) makeInteger(TRUE));
            n->queue = (yyvsp[-3].str);
            n->options = list_concat(lappend((yyvsp[-2].list), def1), (yyvsp[0].list));
            n->options = lappend(n->options, def2);
            (yyval.node) = (Node*) n;
        }
#line 27014 "gram.cpp"
        break;

        case 142: /* AlterQueueStmt: ALTER RESOURCE QUEUE QueueId OptQueueList WITHOUT definition  */
#line 1381 "gram.y"
        {
            AlterQueueStmt* n = makeNode(AlterQueueStmt);
            DefElem* def1 = /* mark start of WITH items */
                makeDefElem("withliststart", (Node*) makeInteger(TRUE));
            DefElem* def2 = /* mark start of WITHOUT items */
                makeDefElem("withoutliststart", (Node*) makeInteger(TRUE));
            n->queue = (yyvsp[-3].str);
            n->options = lappend((yyvsp[-2].list), def1);
            n->options = list_concat(lappend(n->options, def2), (yyvsp[0].list));
            (yyval.node) = (Node*) n;
        }
#line 27032 "gram.cpp"
        break;

        case 143: /* AlterQueueStmt: ALTER RESOURCE QUEUE QueueId OptQueueList WITH definition WITHOUT definition  */
#line 1396 "gram.y"
        {
            AlterQueueStmt* n = makeNode(AlterQueueStmt);
            DefElem* def1 = /* mark start of WITH items */
                makeDefElem("withliststart", (Node*) makeInteger(TRUE));
            DefElem* def2 = /* mark start of WITHOUT items */
                makeDefElem("withoutliststart", (Node*) makeInteger(TRUE));
            n->queue = (yyvsp[-5].str);
            n->options = list_concat(lappend((yyvsp[-4].list), def1), (yyvsp[-2].list));
            n->options = list_concat(lappend(n->options, def2), (yyvsp[0].list));
            (yyval.node) = (Node*) n;
        }
#line 27050 "gram.cpp"
        break;

        case 144: /* DropQueueStmt: DROP RESOURCE QUEUE QueueId  */
#line 1419 "gram.y"
        {
            DropQueueStmt* n = makeNode(DropQueueStmt);
            n->queue = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 27060 "gram.cpp"
        break;

        case 145: /* CreateResourceGroupStmt: CREATE RESOURCE GROUP_P name WITH definition  */
#line 1434 "gram.y"
        {
            CreateResourceGroupStmt* n = makeNode(CreateResourceGroupStmt);
            n->name = (yyvsp[-2].str);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 27071 "gram.cpp"
        break;

        case 146: /* DropResourceGroupStmt: DROP RESOURCE GROUP_P name  */
#line 1450 "gram.y"
        {
            DropResourceGroupStmt* n = makeNode(DropResourceGroupStmt);
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 27081 "gram.cpp"
        break;

        case 147: /* AlterResourceGroupStmt: ALTER RESOURCE GROUP_P name SET OptResourceGroupList  */
#line 1464 "gram.y"
        {
            AlterResourceGroupStmt* n = makeNode(AlterResourceGroupStmt);
            n->name = (yyvsp[-2].str);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 27092 "gram.cpp"
        break;

        case 148: /* OptResourceGroupList: OptResourceGroupElem  */
#line 1475 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 27098 "gram.cpp"
        break;

        case 149: /* OptResourceGroupElem: CONCURRENCY SignedIconst  */
#line 1480 "gram.y"
        {
            /* was "concurrency" */
            (yyval.defelt) = makeDefElem("concurrency", (Node*) makeInteger((yyvsp[0].ival)));
        }
#line 27107 "gram.cpp"
        break;

        case 150: /* OptResourceGroupElem: CPU_RATE_LIMIT SignedIconst  */
#line 1485 "gram.y"
        {
            (yyval.defelt) = makeDefElem("cpu_rate_limit", (Node*) makeInteger((yyvsp[0].ival)));
        }
#line 27115 "gram.cpp"
        break;

        case 151: /* OptResourceGroupElem: CPUSET Sconst  */
#line 1489 "gram.y"
        {
            (yyval.defelt) = makeDefElem("cpuset", (Node*) makeString((yyvsp[0].str)));
        }
#line 27123 "gram.cpp"
        break;

        case 152: /* OptResourceGroupElem: MEMORY_SHARED_QUOTA SignedIconst  */
#line 1493 "gram.y"
        {
            (yyval.defelt) = makeDefElem("memory_shared_quota", (Node*) makeInteger((yyvsp[0].ival)));
        }
#line 27131 "gram.cpp"
        break;

        case 153: /* OptResourceGroupElem: MEMORY_LIMIT SignedIconst  */
#line 1497 "gram.y"
        {
            (yyval.defelt) = makeDefElem("memory_limit", (Node*) makeInteger((yyvsp[0].ival)));
        }
#line 27139 "gram.cpp"
        break;

        case 154: /* OptResourceGroupElem: MEMORY_SPILL_RATIO SignedIconst  */
#line 1501 "gram.y"
        {
            (yyval.defelt) = makeDefElem("memory_spill_ratio", (Node*) makeInteger((yyvsp[0].ival)));
        }
#line 27147 "gram.cpp"
        break;

        case 155: /* CreateRoleStmt: CREATE ROLE RoleId opt_with OptRoleList  */
#line 1514 "gram.y"
        {
            CreateRoleStmt* n = makeNode(CreateRoleStmt);
            n->stmt_type = ROLESTMT_ROLE;
            n->role = (yyvsp[-2].str);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 27159 "gram.cpp"
        break;

        case 156: /* opt_with: WITH  */
#line 1524 "gram.y"
        {
        }
#line 27165 "gram.cpp"
        break;

        case 157: /* opt_with: %empty  */
#line 1525 "gram.y"
        {
        }
#line 27171 "gram.cpp"
        break;

        case 158: /* OptRoleList: OptRoleList CreateOptRoleElem  */
#line 1534 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 27177 "gram.cpp"
        break;

        case 159: /* OptRoleList: %empty  */
#line 1535 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 27183 "gram.cpp"
        break;

        case 160: /* AlterOptRoleList: AlterOptRoleList AlterOnlyOptRoleElem  */
#line 1539 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 27189 "gram.cpp"
        break;

        case 161: /* AlterOptRoleList: %empty  */
#line 1540 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 27195 "gram.cpp"
        break;

        case 162: /* AlterOnlyOptRoleElem: AlterOptRoleElem  */
#line 1550 "gram.y"
        {
            (yyval.defelt) = (yyvsp[0].defelt);
        }
#line 27201 "gram.cpp"
        break;

        case 163: /* AlterOnlyOptRoleElem: DROP DENY FOR deny_point  */
#line 1551 "gram.y"
        {
            (yyval.defelt) = makeDefElem("drop_deny", (yyvsp[0].node));
        }
#line 27207 "gram.cpp"
        break;

        case 164: /* AlterOptRoleElem: PASSWORD Sconst  */
#line 1556 "gram.y"
        {
            (yyval.defelt) = makeDefElem("password", (Node*) makeString((yyvsp[0].str)));
        }
#line 27216 "gram.cpp"
        break;

        case 165: /* AlterOptRoleElem: PASSWORD NULL_P  */
#line 1561 "gram.y"
        {
            (yyval.defelt) = makeDefElem("password", NULL);
        }
#line 27224 "gram.cpp"
        break;

        case 166: /* AlterOptRoleElem: ENCRYPTED PASSWORD Sconst  */
#line 1565 "gram.y"
        {
            (yyval.defelt) = makeDefElem("encryptedPassword", (Node*) makeString((yyvsp[0].str)));
        }
#line 27233 "gram.cpp"
        break;

        case 167: /* AlterOptRoleElem: UNENCRYPTED PASSWORD Sconst  */
#line 1570 "gram.y"
        {
            (yyval.defelt) = makeDefElem("unencryptedPassword", (Node*) makeString((yyvsp[0].str)));
        }
#line 27242 "gram.cpp"
        break;

        case 168: /* AlterOptRoleElem: INHERIT  */
#line 1575 "gram.y"
        {
            (yyval.defelt) = makeDefElem("inherit", (Node*) makeInteger(TRUE));
        }
#line 27250 "gram.cpp"
        break;

        case 169: /* AlterOptRoleElem: CONNECTION LIMIT SignedIconst  */
#line 1579 "gram.y"
        {
            (yyval.defelt) = makeDefElem("connectionlimit", (Node*) makeInteger((yyvsp[0].ival)));
        }
#line 27258 "gram.cpp"
        break;

        case 170: /* AlterOptRoleElem: VALID UNTIL Sconst  */
#line 1583 "gram.y"
        {
            (yyval.defelt) = makeDefElem("validUntil", (Node*) makeString((yyvsp[0].str)));
        }
#line 27266 "gram.cpp"
        break;

        case 171: /* AlterOptRoleElem: RESOURCE QUEUE any_name  */
#line 1587 "gram.y"
        {
            (yyval.defelt) = makeDefElem("resourceQueue", (Node*) (yyvsp[0].list));
        }
#line 27274 "gram.cpp"
        break;

        case 172: /* AlterOptRoleElem: RESOURCE GROUP_P any_name  */
#line 1591 "gram.y"
        {
            (yyval.defelt) = makeDefElem("resourceGroup", (Node*) (yyvsp[0].list));
        }
#line 27282 "gram.cpp"
        break;

        case 173: /* AlterOptRoleElem: CREATEEXTTABLE exttab_auth_list  */
#line 1595 "gram.y"
        {
            (yyval.defelt) = makeDefElem("exttabauth", (Node*) (yyvsp[0].list));
        }
#line 27290 "gram.cpp"
        break;

        case 174: /* AlterOptRoleElem: NOCREATEEXTTABLE exttab_auth_list  */
#line 1599 "gram.y"
        {
            (yyval.defelt) = makeDefElem("exttabnoauth", (Node*) (yyvsp[0].list));
        }
#line 27298 "gram.cpp"
        break;

        case 175: /* AlterOptRoleElem: USER role_list  */
#line 1604 "gram.y"
        {
            (yyval.defelt) = makeDefElem("rolemembers", (Node*) (yyvsp[0].list));
        }
#line 27306 "gram.cpp"
        break;

        case 176: /* AlterOptRoleElem: deny_login_role  */
#line 1608 "gram.y"
        {
            (yyval.defelt) = makeDefElem("deny", (Node*) (yyvsp[0].node));
        }
#line 27314 "gram.cpp"
        break;

        case 177: /* AlterOptRoleElem: IDENT  */
#line 1612 "gram.y"
        {
            /*
					 * We handle identifiers that aren't parser keywords with
					 * the following special-case codes, to avoid bloating the
					 * size of the main parser.
					 */
            if (strcmp((yyvsp[0].str), "superuser") == 0)
                (yyval.defelt) = makeDefElem("superuser", (Node*) makeInteger(TRUE));
            else if (strcmp((yyvsp[0].str), "nosuperuser") == 0)
                (yyval.defelt) = makeDefElem("superuser", (Node*) makeInteger(FALSE));
            else if (strcmp((yyvsp[0].str), "createuser") == 0) {
                /* For backwards compatibility, synonym for SUPERUSER */
                (yyval.defelt) = makeDefElem("superuser", (Node*) makeInteger(TRUE));
            } else if (strcmp((yyvsp[0].str), "nocreateuser") == 0) {
                /* For backwards compatibility, synonym for SUPERUSER */
                (yyval.defelt) = makeDefElem("superuser", (Node*) makeInteger(FALSE));
            } else if (strcmp((yyvsp[0].str), "createrole") == 0)
                (yyval.defelt) = makeDefElem("createrole", (Node*) makeInteger(TRUE));
            else if (strcmp((yyvsp[0].str), "nocreaterole") == 0)
                (yyval.defelt) = makeDefElem("createrole", (Node*) makeInteger(FALSE));
            else if (strcmp((yyvsp[0].str), "replication") == 0)
                (yyval.defelt) = makeDefElem("isreplication", (Node*) makeInteger(TRUE));
            else if (strcmp((yyvsp[0].str), "noreplication") == 0)
                (yyval.defelt) = makeDefElem("isreplication", (Node*) makeInteger(FALSE));
            else if (strcmp((yyvsp[0].str), "createdb") == 0)
                (yyval.defelt) = makeDefElem("createdb", (Node*) makeInteger(TRUE));
            else if (strcmp((yyvsp[0].str), "nocreatedb") == 0)
                (yyval.defelt) = makeDefElem("createdb", (Node*) makeInteger(FALSE));
            else if (strcmp((yyvsp[0].str), "login") == 0)
                (yyval.defelt) = makeDefElem("canlogin", (Node*) makeInteger(TRUE));
            else if (strcmp((yyvsp[0].str), "nologin") == 0)
                (yyval.defelt) = makeDefElem("canlogin", (Node*) makeInteger(FALSE));
            else if (strcmp((yyvsp[0].str), "noinherit") == 0) {
                /*
						 * Note that INHERIT is a keyword, so it's handled by main parser, but
						 * NOINHERIT is handled here.
						 */
                (yyval.defelt) = makeDefElem("inherit", (Node*) makeInteger(FALSE));
            } else
                ereport(ERROR,
                        errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("unrecognized role option \"%s\"", (yyvsp[0].str)),
                        parser_errposition((yylsp[0])));
        }
#line 27369 "gram.cpp"
        break;

        case 178: /* CreateOptRoleElem: AlterOptRoleElem  */
#line 1665 "gram.y"
        {
            (yyval.defelt) = (yyvsp[0].defelt);
        }
#line 27375 "gram.cpp"
        break;

        case 179: /* CreateOptRoleElem: SYSID Iconst  */
#line 1668 "gram.y"
        {
            (yyval.defelt) = makeDefElem("sysid", (Node*) makeInteger((yyvsp[0].ival)));
        }
#line 27383 "gram.cpp"
        break;

        case 180: /* CreateOptRoleElem: ADMIN role_list  */
#line 1672 "gram.y"
        {
            (yyval.defelt) = makeDefElem("adminmembers", (Node*) (yyvsp[0].list));
        }
#line 27391 "gram.cpp"
        break;

        case 181: /* CreateOptRoleElem: ROLE role_list  */
#line 1676 "gram.y"
        {
            (yyval.defelt) = makeDefElem("rolemembers", (Node*) (yyvsp[0].list));
        }
#line 27399 "gram.cpp"
        break;

        case 182: /* CreateOptRoleElem: IN_P ROLE role_list  */
#line 1680 "gram.y"
        {
            (yyval.defelt) = makeDefElem("addroleto", (Node*) (yyvsp[0].list));
        }
#line 27407 "gram.cpp"
        break;

        case 183: /* CreateOptRoleElem: IN_P GROUP_P role_list  */
#line 1684 "gram.y"
        {
            (yyval.defelt) = makeDefElem("addroleto", (Node*) (yyvsp[0].list));
        }
#line 27415 "gram.cpp"
        break;

        case 184: /* deny_login_role: DENY deny_interval  */
#line 1689 "gram.y"
        {
            (yyval.node) = (Node*) (yyvsp[0].node);
        }
#line 27421 "gram.cpp"
        break;

        case 185: /* deny_login_role: DENY deny_point  */
#line 1690 "gram.y"
        {
            (yyval.node) = (Node*) (yyvsp[0].node);
        }
#line 27427 "gram.cpp"
        break;

        case 186: /* deny_interval: BETWEEN deny_point AND deny_point  */
#line 1694 "gram.y"
        {
            DenyLoginInterval* n = makeNode(DenyLoginInterval);
            n->start = (DenyLoginPoint*) (yyvsp[-2].node);
            n->end = (DenyLoginPoint*) (yyvsp[0].node);
            (yyval.node) = (Node*) n;
        }
#line 27438 "gram.cpp"
        break;

        case 187: /* deny_day_specifier: Sconst  */
#line 1702 "gram.y"
        {
            (yyval.node) = (Node*) makeString((yyvsp[0].str));
        }
#line 27444 "gram.cpp"
        break;

        case 188: /* deny_day_specifier: Iconst  */
#line 1703 "gram.y"
        {
            (yyval.node) = (Node*) makeInteger((yyvsp[0].ival));
        }
#line 27450 "gram.cpp"
        break;

        case 189: /* deny_point: DAY_P deny_day_specifier opt_time  */
#line 1707 "gram.y"
        {
            DenyLoginPoint* n = makeNode(DenyLoginPoint);
            n->day = (Value*) (yyvsp[-1].node);
            n->time = (Value*) (yyvsp[0].node);
            (yyval.node) = (Node*) n;
        }
#line 27461 "gram.cpp"
        break;

        case 190: /* opt_time: TIME Sconst  */
#line 1715 "gram.y"
        {
            (yyval.node) = (Node*) makeString((yyvsp[0].str));
        }
#line 27467 "gram.cpp"
        break;

        case 191: /* opt_time: %empty  */
#line 1716 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 27473 "gram.cpp"
        break;

        case 192: /* exttab_auth_list: '(' keyvalue_list ')'  */
#line 1720 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 27479 "gram.cpp"
        break;

        case 193: /* exttab_auth_list: %empty  */
#line 1721 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 27485 "gram.cpp"
        break;

        case 194: /* keyvalue_list: keyvalue_pair  */
#line 1725 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 27491 "gram.cpp"
        break;

        case 195: /* keyvalue_list: keyvalue_list ',' keyvalue_pair  */
#line 1726 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
        }
#line 27497 "gram.cpp"
        break;

        case 196: /* keyvalue_pair: ColLabel '=' Sconst  */
#line 1731 "gram.y"
        {
            (yyval.defelt) = makeDefElem((yyvsp[-2].str), (Node*) makeString((yyvsp[0].str)));
        }
#line 27505 "gram.cpp"
        break;

        case 197: /* CreateUserStmt: CREATE USER RoleId opt_with OptRoleList  */
#line 1745 "gram.y"
        {
            CreateRoleStmt* n = makeNode(CreateRoleStmt);
            n->stmt_type = ROLESTMT_USER;
            n->role = (yyvsp[-2].str);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 27517 "gram.cpp"
        break;

        case 198: /* AlterRoleStmt: ALTER ROLE RoleId opt_with AlterOptRoleList  */
#line 1763 "gram.y"
        {
            AlterRoleStmt* n = makeNode(AlterRoleStmt);
            n->role = (yyvsp[-2].str);
            n->action = +1; /* add, if there are members */
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 27529 "gram.cpp"
        break;

        case 199: /* opt_in_database: %empty  */
#line 1773 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 27535 "gram.cpp"
        break;

        case 200: /* opt_in_database: IN_P DATABASE database_name  */
#line 1774 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 27541 "gram.cpp"
        break;

        case 201: /* AlterRoleSetStmt: ALTER ROLE RoleId opt_in_database SetResetClause  */
#line 1779 "gram.y"
        {
            AlterRoleSetStmt* n = makeNode(AlterRoleSetStmt);
            n->role = (yyvsp[-2].str);
            n->database = (yyvsp[-1].str);
            n->setstmt = (yyvsp[0].vsetstmt);
            (yyval.node) = (Node*) n;
        }
#line 27553 "gram.cpp"
        break;

        case 202: /* AlterRoleSetStmt: ALTER ROLE ALL opt_in_database SetResetClause  */
#line 1787 "gram.y"
        {
            AlterRoleSetStmt* n = makeNode(AlterRoleSetStmt);
            n->role = NULL;
            n->database = (yyvsp[-1].str);
            n->setstmt = (yyvsp[0].vsetstmt);
            (yyval.node) = (Node*) n;
        }
#line 27565 "gram.cpp"
        break;

        case 203: /* AlterUserStmt: ALTER USER RoleId opt_with AlterOptRoleList  */
#line 1805 "gram.y"
        {
            AlterRoleStmt* n = makeNode(AlterRoleStmt);
            n->role = (yyvsp[-2].str);
            n->action = +1; /* add, if there are members */
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 27577 "gram.cpp"
        break;

        case 204: /* AlterUserSetStmt: ALTER USER RoleId opt_in_database SetResetClause  */
#line 1817 "gram.y"
        {
            AlterRoleSetStmt* n = makeNode(AlterRoleSetStmt);
            n->role = (yyvsp[-2].str);
            n->database = (yyvsp[-1].str);
            n->setstmt = (yyvsp[0].vsetstmt);
            (yyval.node) = (Node*) n;
        }
#line 27589 "gram.cpp"
        break;

        case 205: /* AlterUserSetStmt: ALTER USER ALL opt_in_database SetResetClause  */
#line 1825 "gram.y"
        {
            AlterRoleSetStmt* n = makeNode(AlterRoleSetStmt);
            n->role = NULL;
            n->database = (yyvsp[-1].str);
            n->setstmt = (yyvsp[0].vsetstmt);
            (yyval.node) = (Node*) n;
        }
#line 27601 "gram.cpp"
        break;

        case 206: /* DropRoleStmt: DROP ROLE role_list  */
#line 1846 "gram.y"
        {
            DropRoleStmt* n = makeNode(DropRoleStmt);
            n->missing_ok = FALSE;
            n->roles = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 27612 "gram.cpp"
        break;

        case 207: /* DropRoleStmt: DROP ROLE IF_P EXISTS role_list  */
#line 1853 "gram.y"
        {
            DropRoleStmt* n = makeNode(DropRoleStmt);
            n->missing_ok = TRUE;
            n->roles = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 27623 "gram.cpp"
        break;

        case 208: /* DropUserStmt: DROP USER role_list  */
#line 1872 "gram.y"
        {
            DropRoleStmt* n = makeNode(DropRoleStmt);
            n->missing_ok = FALSE;
            n->roles = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 27634 "gram.cpp"
        break;

        case 209: /* DropUserStmt: DROP USER IF_P EXISTS role_list  */
#line 1879 "gram.y"
        {
            DropRoleStmt* n = makeNode(DropRoleStmt);
            n->roles = (yyvsp[0].list);
            n->missing_ok = TRUE;
            (yyval.node) = (Node*) n;
        }
#line 27645 "gram.cpp"
        break;

        case 210: /* CreateGroupStmt: CREATE GROUP_P RoleId opt_with OptRoleList  */
#line 1896 "gram.y"
        {
            CreateRoleStmt* n = makeNode(CreateRoleStmt);
            n->stmt_type = ROLESTMT_GROUP;
            n->role = (yyvsp[-2].str);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 27657 "gram.cpp"
        break;

        case 211: /* AlterGroupStmt: ALTER GROUP_P RoleId add_drop USER role_list  */
#line 1914 "gram.y"
        {
            AlterRoleStmt* n = makeNode(AlterRoleStmt);
            n->role = (yyvsp[-3].str);
            n->action = (yyvsp[-2].ival);
            n->options = list_make1(makeDefElem("rolemembers", (Node*) (yyvsp[0].list)));
            (yyval.node) = (Node*) n;
        }
#line 27670 "gram.cpp"
        break;

        case 212: /* add_drop: ADD_P  */
#line 1924 "gram.y"
        {
            (yyval.ival) = +1;
        }
#line 27676 "gram.cpp"
        break;

        case 213: /* add_drop: DROP  */
#line 1925 "gram.y"
        {
            (yyval.ival) = -1;
        }
#line 27682 "gram.cpp"
        break;

        case 214: /* DropGroupStmt: DROP GROUP_P role_list  */
#line 1938 "gram.y"
        {
            DropRoleStmt* n = makeNode(DropRoleStmt);
            n->missing_ok = FALSE;
            n->roles = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 27693 "gram.cpp"
        break;

        case 215: /* DropGroupStmt: DROP GROUP_P IF_P EXISTS role_list  */
#line 1945 "gram.y"
        {
            DropRoleStmt* n = makeNode(DropRoleStmt);
            n->missing_ok = TRUE;
            n->roles = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 27704 "gram.cpp"
        break;

        case 216: /* CreateSchemaStmt: CREATE SCHEMA OptSchemaName AUTHORIZATION RoleId OptSchemaEltList  */
#line 1962 "gram.y"
        {
            CreateSchemaStmt* n = makeNode(CreateSchemaStmt);
            /* One can omit the schema name or the authorization id. */
            if ((yyvsp[-3].str) != NULL)
                n->schemaname = (yyvsp[-3].str);
            else
                n->schemaname = (yyvsp[-1].str);
            n->authid = (yyvsp[-1].str);
            n->schemaElts = (yyvsp[0].list);
            n->if_not_exists = false;
            (yyval.node) = (Node*) n;
        }
#line 27721 "gram.cpp"
        break;

        case 217: /* CreateSchemaStmt: CREATE SCHEMA ColId OptSchemaEltList  */
#line 1975 "gram.y"
        {
            CreateSchemaStmt* n = makeNode(CreateSchemaStmt);
            /* ...but not both */
            n->schemaname = (yyvsp[-1].str);
            n->authid = NULL;
            n->schemaElts = (yyvsp[0].list);
            n->if_not_exists = false;
            (yyval.node) = (Node*) n;
        }
#line 27735 "gram.cpp"
        break;

        case 218: /* CreateSchemaStmt: CREATE SCHEMA IF_P NOT EXISTS OptSchemaName AUTHORIZATION RoleId OptSchemaEltList  */
#line 1985 "gram.y"
        {
            CreateSchemaStmt* n = makeNode(CreateSchemaStmt);
            /* One can omit the schema name or the authorization id. */
            if ((yyvsp[-3].str) != NULL)
                n->schemaname = (yyvsp[-3].str);
            else
                n->schemaname = (yyvsp[-1].str);
            n->authid = (yyvsp[-1].str);
            if ((yyvsp[0].list) != NIL)
                ereport(ERROR,
                        errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                        errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
                        parser_errposition((yylsp[0])));
            n->schemaElts = (yyvsp[0].list);
            n->if_not_exists = true;
            (yyval.node) = (Node*) n;
        }
#line 27757 "gram.cpp"
        break;

        case 219: /* CreateSchemaStmt: CREATE SCHEMA IF_P NOT EXISTS ColId OptSchemaEltList  */
#line 2003 "gram.y"
        {
            CreateSchemaStmt* n = makeNode(CreateSchemaStmt);
            /* ...but not both */
            n->schemaname = (yyvsp[-1].str);
            n->authid = NULL;
            if ((yyvsp[0].list) != NIL)
                ereport(ERROR,
                        errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                        errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
                        parser_errposition((yylsp[0])));
            n->schemaElts = (yyvsp[0].list);
            n->if_not_exists = true;
            (yyval.node) = (Node*) n;
        }
#line 27776 "gram.cpp"
        break;

        case 220: /* OptSchemaName: ColId  */
#line 2020 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 27782 "gram.cpp"
        break;

        case 221: /* OptSchemaName: %empty  */
#line 2021 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 27788 "gram.cpp"
        break;

        case 222: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 2026 "gram.y"
        {
            if ((yyloc) < 0) /* see comments for YYLLOC_DEFAULT */
                (yyloc) = (yylsp[0]);
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
        }
#line 27798 "gram.cpp"
        break;

        case 223: /* OptSchemaEltList: %empty  */
#line 2032 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 27804 "gram.cpp"
        break;

        case 230: /* VariableSetStmt: SET set_rest  */
#line 2060 "gram.y"
        {
            VariableSetStmt* n = (yyvsp[0].vsetstmt);
            n->is_local = false;
            (yyval.node) = (Node*) n;
        }
#line 27814 "gram.cpp"
        break;

        case 231: /* VariableSetStmt: SET LOCAL set_rest  */
#line 2066 "gram.y"
        {
            VariableSetStmt* n = (yyvsp[0].vsetstmt);
            n->is_local = true;
            (yyval.node) = (Node*) n;
        }
#line 27824 "gram.cpp"
        break;

        case 232: /* VariableSetStmt: SET SESSION set_rest  */
#line 2072 "gram.y"
        {
            VariableSetStmt* n = (yyvsp[0].vsetstmt);
            n->is_local = false;
            (yyval.node) = (Node*) n;
        }
#line 27834 "gram.cpp"
        break;

        case 233: /* set_rest: TRANSACTION transaction_mode_list  */
#line 2081 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_SET_MULTI;
            n->name = "TRANSACTION";
            n->args = (yyvsp[0].list);
            (yyval.vsetstmt) = n;
        }
#line 27846 "gram.cpp"
        break;

        case 234: /* set_rest: SESSION CHARACTERISTICS AS TRANSACTION transaction_mode_list  */
#line 2089 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_SET_MULTI;
            n->name = "SESSION CHARACTERISTICS";
            n->args = (yyvsp[0].list);
            (yyval.vsetstmt) = n;
        }
#line 27858 "gram.cpp"
        break;

        case 236: /* generic_set: var_name TO var_list  */
#line 2101 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_SET_VALUE;
            n->name = (yyvsp[-2].str);
            n->args = (yyvsp[0].list);
            (yyval.vsetstmt) = n;
        }
#line 27870 "gram.cpp"
        break;

        case 237: /* generic_set: var_name '=' var_list  */
#line 2109 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_SET_VALUE;
            n->name = (yyvsp[-2].str);
            n->args = (yyvsp[0].list);
            (yyval.vsetstmt) = n;
        }
#line 27882 "gram.cpp"
        break;

        case 238: /* generic_set: var_name TO DEFAULT  */
#line 2117 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_SET_DEFAULT;
            n->name = (yyvsp[-2].str);
            (yyval.vsetstmt) = n;
        }
#line 27893 "gram.cpp"
        break;

        case 239: /* generic_set: var_name '=' DEFAULT  */
#line 2124 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_SET_DEFAULT;
            n->name = (yyvsp[-2].str);
            (yyval.vsetstmt) = n;
        }
#line 27904 "gram.cpp"
        break;

        case 240: /* set_rest_more: generic_set  */
#line 2133 "gram.y"
        {
            (yyval.vsetstmt) = (yyvsp[0].vsetstmt);
        }
#line 27910 "gram.cpp"
        break;

        case 241: /* set_rest_more: var_name FROM CURRENT_P  */
#line 2135 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_SET_CURRENT;
            n->name = (yyvsp[-2].str);
            (yyval.vsetstmt) = n;
        }
#line 27921 "gram.cpp"
        break;

        case 242: /* set_rest_more: TIME ZONE zone_value  */
#line 2143 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_SET_VALUE;
            n->name = "timezone";
            if ((yyvsp[0].node) != NULL)
                n->args = list_make1((yyvsp[0].node));
            else
                n->kind = VAR_SET_DEFAULT;
            (yyval.vsetstmt) = n;
        }
#line 27936 "gram.cpp"
        break;

        case 243: /* set_rest_more: CATALOG_P Sconst  */
#line 2154 "gram.y"
        {
            ereport(ERROR,
                    errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                    errmsg("current database cannot be changed"),
                    parser_errposition((yylsp[0])));
            (yyval.vsetstmt) = NULL; /*not reached*/
        }
#line 27948 "gram.cpp"
        break;

        case 244: /* set_rest_more: SCHEMA Sconst  */
#line 2162 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_SET_VALUE;
            n->name = "search_path";
            n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
            (yyval.vsetstmt) = n;
        }
#line 27960 "gram.cpp"
        break;

        case 245: /* set_rest_more: NAMES opt_encoding  */
#line 2170 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_SET_VALUE;
            n->name = "client_encoding";
            if ((yyvsp[0].str) != NULL)
                n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
            else
                n->kind = VAR_SET_DEFAULT;
            (yyval.vsetstmt) = n;
        }
#line 27975 "gram.cpp"
        break;

        case 246: /* set_rest_more: ROLE NonReservedWord_or_Sconst  */
#line 2181 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_SET_VALUE;
            n->name = "role";
            n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
            (yyval.vsetstmt) = n;
        }
#line 27987 "gram.cpp"
        break;

        case 247: /* set_rest_more: SESSION AUTHORIZATION NonReservedWord_or_Sconst  */
#line 2189 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_SET_VALUE;
            n->name = "session_authorization";
            n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
            (yyval.vsetstmt) = n;
        }
#line 27999 "gram.cpp"
        break;

        case 248: /* set_rest_more: SESSION AUTHORIZATION DEFAULT  */
#line 2197 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_SET_DEFAULT;
            n->name = "session_authorization";
            (yyval.vsetstmt) = n;
        }
#line 28010 "gram.cpp"
        break;

        case 249: /* set_rest_more: XML_P OPTION document_or_content  */
#line 2204 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_SET_VALUE;
            n->name = "xmloption";
            n->args = list_make1(
                makeStringConst((yyvsp[0].ival) == XMLOPTION_DOCUMENT ? pstrdup("DOCUMENT") : pstrdup("CONTENT"),
                                (yylsp[0])));
            (yyval.vsetstmt) = n;
        }
#line 28022 "gram.cpp"
        break;

        case 250: /* set_rest_more: TRANSACTION SNAPSHOT Sconst  */
#line 2213 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_SET_MULTI;
            n->name = "TRANSACTION SNAPSHOT";
            n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
            (yyval.vsetstmt) = n;
        }
#line 28034 "gram.cpp"
        break;

        case 251: /* var_name: ColId  */
#line 2222 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 28040 "gram.cpp"
        break;

        case 252: /* var_name: var_name '.' ColId  */
#line 2224 "gram.y"
        {
            (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str));
        }
#line 28046 "gram.cpp"
        break;

        case 253: /* var_list: var_value  */
#line 2227 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 28052 "gram.cpp"
        break;

        case 254: /* var_list: var_list ',' var_value  */
#line 2228 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 28058 "gram.cpp"
        break;

        case 255: /* var_value: opt_boolean_or_string  */
#line 2232 "gram.y"
        {
            (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
        }
#line 28064 "gram.cpp"
        break;

        case 256: /* var_value: NumericOnly  */
#line 2234 "gram.y"
        {
            (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0]));
        }
#line 28070 "gram.cpp"
        break;

        case 257: /* iso_level: READ UNCOMMITTED  */
#line 2237 "gram.y"
        {
            (yyval.str) = "read uncommitted";
        }
#line 28076 "gram.cpp"
        break;

        case 258: /* iso_level: READ COMMITTED  */
#line 2238 "gram.y"
        {
            (yyval.str) = "read committed";
        }
#line 28082 "gram.cpp"
        break;

        case 259: /* iso_level: REPEATABLE READ  */
#line 2239 "gram.y"
        {
            (yyval.str) = "repeatable read";
        }
#line 28088 "gram.cpp"
        break;

        case 260: /* iso_level: SERIALIZABLE  */
#line 2240 "gram.y"
        {
            (yyval.str) = "serializable";
        }
#line 28094 "gram.cpp"
        break;

        case 261: /* opt_boolean_or_string: TRUE_P  */
#line 2244 "gram.y"
        {
            (yyval.str) = "true";
        }
#line 28100 "gram.cpp"
        break;

        case 262: /* opt_boolean_or_string: FALSE_P  */
#line 2245 "gram.y"
        {
            (yyval.str) = "false";
        }
#line 28106 "gram.cpp"
        break;

        case 263: /* opt_boolean_or_string: ON  */
#line 2246 "gram.y"
        {
            (yyval.str) = "on";
        }
#line 28112 "gram.cpp"
        break;

        case 264: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 2252 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 28118 "gram.cpp"
        break;

        case 265: /* zone_value: Sconst  */
#line 2265 "gram.y"
        {
            (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
        }
#line 28126 "gram.cpp"
        break;

        case 266: /* zone_value: IDENT  */
#line 2269 "gram.y"
        {
            (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
        }
#line 28134 "gram.cpp"
        break;

        case 267: /* zone_value: ConstInterval Sconst opt_interval  */
#line 2273 "gram.y"
        {
            TypeName* t = (yyvsp[-2].typnam);
            if ((yyvsp[0].list) != NIL) {
                A_Const* n = (A_Const*) linitial((yyvsp[0].list));
                if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
                    ereport(ERROR,
                            errcode(ERRCODE_SYNTAX_ERROR),
                            errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
                            parser_errposition((yylsp[0])));
            }
            t->typmods = (yyvsp[0].list);
            (yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
        }
#line 28153 "gram.cpp"
        break;

        case 268: /* zone_value: ConstInterval '(' Iconst ')' Sconst opt_interval  */
#line 2288 "gram.y"
        {
            TypeName* t = (yyvsp[-5].typnam);
            if ((yyvsp[0].list) != NIL) {
                A_Const* n = (A_Const*) linitial((yyvsp[0].list));
                if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
                    ereport(ERROR,
                            errcode(ERRCODE_SYNTAX_ERROR),
                            errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
                            parser_errposition((yylsp[0])));
                if (list_length((yyvsp[0].list)) != 1)
                    ereport(ERROR,
                            errcode(ERRCODE_SYNTAX_ERROR),
                            errmsg("interval precision specified twice"),
                            parser_errposition((yylsp[-5])));
                t->typmods = lappend((yyvsp[0].list), makeIntConst((yyvsp[-3].ival), (yylsp[-3])));
            } else
                t->typmods =
                    list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1), makeIntConst((yyvsp[-3].ival), (yylsp[-3])));
            (yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
        }
#line 28180 "gram.cpp"
        break;

        case 269: /* zone_value: NumericOnly  */
#line 2310 "gram.y"
        {
            (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0]));
        }
#line 28186 "gram.cpp"
        break;

        case 270: /* zone_value: DEFAULT  */
#line 2311 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 28192 "gram.cpp"
        break;

        case 271: /* zone_value: LOCAL  */
#line 2312 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 28198 "gram.cpp"
        break;

        case 272: /* opt_encoding: Sconst  */
#line 2316 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 28204 "gram.cpp"
        break;

        case 273: /* opt_encoding: DEFAULT  */
#line 2317 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 28210 "gram.cpp"
        break;

        case 274: /* opt_encoding: %empty  */
#line 2318 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 28216 "gram.cpp"
        break;

        case 275: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 2322 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 28222 "gram.cpp"
        break;

        case 276: /* NonReservedWord_or_Sconst: Sconst  */
#line 2323 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 28228 "gram.cpp"
        break;

        case 277: /* VariableResetStmt: RESET reset_rest  */
#line 2327 "gram.y"
        {
            (yyval.node) = (Node*) (yyvsp[0].vsetstmt);
        }
#line 28234 "gram.cpp"
        break;

        case 278: /* reset_rest: generic_reset  */
#line 2331 "gram.y"
        {
            (yyval.vsetstmt) = (yyvsp[0].vsetstmt);
        }
#line 28240 "gram.cpp"
        break;

        case 279: /* reset_rest: TIME ZONE  */
#line 2333 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_RESET;
            n->name = "timezone";
            (yyval.vsetstmt) = n;
        }
#line 28251 "gram.cpp"
        break;

        case 280: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 2340 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_RESET;
            n->name = "transaction_isolation";
            (yyval.vsetstmt) = n;
        }
#line 28262 "gram.cpp"
        break;

        case 281: /* reset_rest: SESSION AUTHORIZATION  */
#line 2347 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_RESET;
            n->name = "session_authorization";
            (yyval.vsetstmt) = n;
        }
#line 28273 "gram.cpp"
        break;

        case 282: /* generic_reset: var_name  */
#line 2357 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_RESET;
            n->name = (yyvsp[0].str);
            (yyval.vsetstmt) = n;
        }
#line 28284 "gram.cpp"
        break;

        case 283: /* generic_reset: ALL  */
#line 2364 "gram.y"
        {
            VariableSetStmt* n = makeNode(VariableSetStmt);
            n->kind = VAR_RESET_ALL;
            (yyval.vsetstmt) = n;
        }
#line 28294 "gram.cpp"
        break;

        case 284: /* SetResetClause: SET set_rest  */
#line 2373 "gram.y"
        {
            (yyval.vsetstmt) = (yyvsp[0].vsetstmt);
        }
#line 28300 "gram.cpp"
        break;

        case 285: /* SetResetClause: VariableResetStmt  */
#line 2374 "gram.y"
        {
            (yyval.vsetstmt) = (VariableSetStmt*) (yyvsp[0].node);
        }
#line 28306 "gram.cpp"
        break;

        case 286: /* FunctionSetResetClause: SET set_rest_more  */
#line 2379 "gram.y"
        {
            (yyval.vsetstmt) = (yyvsp[0].vsetstmt);
        }
#line 28312 "gram.cpp"
        break;

        case 287: /* FunctionSetResetClause: VariableResetStmt  */
#line 2380 "gram.y"
        {
            (yyval.vsetstmt) = (VariableSetStmt*) (yyvsp[0].node);
        }
#line 28318 "gram.cpp"
        break;

        case 288: /* VariableShowStmt: SHOW var_name  */
#line 2386 "gram.y"
        {
            VariableShowStmt* n = makeNode(VariableShowStmt);
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 28328 "gram.cpp"
        break;

        case 289: /* VariableShowStmt: SHOW TIME ZONE  */
#line 2392 "gram.y"
        {
            VariableShowStmt* n = makeNode(VariableShowStmt);
            n->name = "timezone";
            (yyval.node) = (Node*) n;
        }
#line 28338 "gram.cpp"
        break;

        case 290: /* VariableShowStmt: SHOW TRANSACTION ISOLATION LEVEL  */
#line 2398 "gram.y"
        {
            VariableShowStmt* n = makeNode(VariableShowStmt);
            n->name = "transaction_isolation";
            (yyval.node) = (Node*) n;
        }
#line 28348 "gram.cpp"
        break;

        case 291: /* VariableShowStmt: SHOW SESSION AUTHORIZATION  */
#line 2404 "gram.y"
        {
            VariableShowStmt* n = makeNode(VariableShowStmt);
            n->name = "session_authorization";
            (yyval.node) = (Node*) n;
        }
#line 28358 "gram.cpp"
        break;

        case 292: /* VariableShowStmt: SHOW ALL  */
#line 2410 "gram.y"
        {
            VariableShowStmt* n = makeNode(VariableShowStmt);
            n->name = "all";
            (yyval.node) = (Node*) n;
        }
#line 28368 "gram.cpp"
        break;

        case 293: /* ConstraintsSetStmt: SET CONSTRAINTS constraints_set_list constraints_set_mode  */
#line 2420 "gram.y"
        {
            ConstraintsSetStmt* n = makeNode(ConstraintsSetStmt);
            n->constraints = (yyvsp[-1].list);
            n->deferred = (yyvsp[0].boolean);
            (yyval.node) = (Node*) n;
        }
#line 28379 "gram.cpp"
        break;

        case 294: /* constraints_set_list: ALL  */
#line 2429 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 28385 "gram.cpp"
        break;

        case 295: /* constraints_set_list: qualified_name_list  */
#line 2430 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 28391 "gram.cpp"
        break;

        case 296: /* constraints_set_mode: DEFERRED  */
#line 2434 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 28397 "gram.cpp"
        break;

        case 297: /* constraints_set_mode: IMMEDIATE  */
#line 2435 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 28403 "gram.cpp"
        break;

        case 298: /* CheckPointStmt: CHECKPOINT  */
#line 2444 "gram.y"
        {
            CheckPointStmt* n = makeNode(CheckPointStmt);
            (yyval.node) = (Node*) n;
        }
#line 28412 "gram.cpp"
        break;

        case 299: /* DiscardStmt: DISCARD ALL  */
#line 2459 "gram.y"
        {
            DiscardStmt* n = makeNode(DiscardStmt);
            n->target = DISCARD_ALL;
            (yyval.node) = (Node*) n;
        }
#line 28422 "gram.cpp"
        break;

        case 300: /* DiscardStmt: DISCARD TEMP  */
#line 2465 "gram.y"
        {
            DiscardStmt* n = makeNode(DiscardStmt);
            n->target = DISCARD_TEMP;
            (yyval.node) = (Node*) n;
        }
#line 28432 "gram.cpp"
        break;

        case 301: /* DiscardStmt: DISCARD TEMPORARY  */
#line 2471 "gram.y"
        {
            DiscardStmt* n = makeNode(DiscardStmt);
            n->target = DISCARD_TEMP;
            (yyval.node) = (Node*) n;
        }
#line 28442 "gram.cpp"
        break;

        case 302: /* DiscardStmt: DISCARD PLANS  */
#line 2477 "gram.y"
        {
            DiscardStmt* n = makeNode(DiscardStmt);
            n->target = DISCARD_PLANS;
            (yyval.node) = (Node*) n;
        }
#line 28452 "gram.cpp"
        break;

        case 303: /* DiscardStmt: DISCARD SEQUENCES  */
#line 2483 "gram.y"
        {
            DiscardStmt* n = makeNode(DiscardStmt);
            n->target = DISCARD_SEQUENCES;
            (yyval.node) = (Node*) n;
        }
#line 28462 "gram.cpp"
        break;

        case 304: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 2502 "gram.y"
        {
            AlterTableStmt* n = makeNode(AlterTableStmt);
            n->relation = (yyvsp[-1].range);
            n->cmds = (yyvsp[0].list);
            n->relkind = OBJECT_TABLE;
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 28475 "gram.cpp"
        break;

        case 305: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 2511 "gram.y"
        {
            AlterTableStmt* n = makeNode(AlterTableStmt);
            n->relation = (yyvsp[-1].range);
            n->cmds = (yyvsp[0].list);
            n->relkind = OBJECT_TABLE;
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 28488 "gram.cpp"
        break;

        case 306: /* AlterTableStmt: ALTER EXTERNAL TABLE relation_expr alter_table_cmds  */
#line 2520 "gram.y"
        {
            AlterTableStmt* n = makeNode(AlterTableStmt);
            n->relation = (yyvsp[-1].range);
            n->cmds = (yyvsp[0].list);
            n->relkind = OBJECT_EXTTABLE;
            (yyval.node) = (Node*) n;
        }
#line 28500 "gram.cpp"
        break;

        case 307: /* AlterTableStmt: ALTER TABLE ALL IN_P TABLESPACE name SET TABLESPACE name opt_nowait  */
#line 2528 "gram.y"
        {
            AlterTableMoveAllStmt* n = makeNode(AlterTableMoveAllStmt);
            n->orig_tablespacename = (yyvsp[-4].str);
            n->objtype = OBJECT_TABLE;
            n->roles = NIL;
            n->new_tablespacename = (yyvsp[-1].str);
            n->nowait = (yyvsp[0].boolean);
            (yyval.node) = (Node*) n;
        }
#line 28515 "gram.cpp"
        break;

        case 308: /* AlterTableStmt: ALTER TABLE ALL IN_P TABLESPACE name OWNED BY role_list SET TABLESPACE name opt_nowait  */
#line 2539 "gram.y"
        {
            AlterTableMoveAllStmt* n = makeNode(AlterTableMoveAllStmt);
            n->orig_tablespacename = (yyvsp[-7].str);
            n->objtype = OBJECT_TABLE;
            n->roles = (yyvsp[-4].list);
            n->new_tablespacename = (yyvsp[-1].str);
            n->nowait = (yyvsp[0].boolean);
            (yyval.node) = (Node*) n;
        }
#line 28530 "gram.cpp"
        break;

        case 309: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 2550 "gram.y"
        {
            AlterTableStmt* n = makeNode(AlterTableStmt);
            n->relation = (yyvsp[-1].range);
            n->cmds = (yyvsp[0].list);
            n->relkind = OBJECT_INDEX;
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 28543 "gram.cpp"
        break;

        case 310: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 2559 "gram.y"
        {
            AlterTableStmt* n = makeNode(AlterTableStmt);
            n->relation = (yyvsp[-1].range);
            n->cmds = (yyvsp[0].list);
            n->relkind = OBJECT_INDEX;
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 28556 "gram.cpp"
        break;

        case 311: /* AlterTableStmt: ALTER INDEX ALL IN_P TABLESPACE name SET TABLESPACE name opt_nowait  */
#line 2568 "gram.y"
        {
            AlterTableMoveAllStmt* n = makeNode(AlterTableMoveAllStmt);
            n->orig_tablespacename = (yyvsp[-4].str);
            n->objtype = OBJECT_INDEX;
            n->roles = NIL;
            n->new_tablespacename = (yyvsp[-1].str);
            n->nowait = (yyvsp[0].boolean);
            (yyval.node) = (Node*) n;
        }
#line 28571 "gram.cpp"
        break;

        case 312: /* AlterTableStmt: ALTER INDEX ALL IN_P TABLESPACE name OWNED BY role_list SET TABLESPACE name opt_nowait  */
#line 2579 "gram.y"
        {
            AlterTableMoveAllStmt* n = makeNode(AlterTableMoveAllStmt);
            n->orig_tablespacename = (yyvsp[-7].str);
            n->objtype = OBJECT_INDEX;
            n->roles = (yyvsp[-4].list);
            n->new_tablespacename = (yyvsp[-1].str);
            n->nowait = (yyvsp[0].boolean);
            (yyval.node) = (Node*) n;
        }
#line 28586 "gram.cpp"
        break;

        case 313: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 2590 "gram.y"
        {
            AlterTableStmt* n = makeNode(AlterTableStmt);
            n->relation = (yyvsp[-1].range);
            n->cmds = (yyvsp[0].list);
            n->relkind = OBJECT_SEQUENCE;
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 28599 "gram.cpp"
        break;

        case 314: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 2599 "gram.y"
        {
            AlterTableStmt* n = makeNode(AlterTableStmt);
            n->relation = (yyvsp[-1].range);
            n->cmds = (yyvsp[0].list);
            n->relkind = OBJECT_SEQUENCE;
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 28612 "gram.cpp"
        break;

        case 315: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 2608 "gram.y"
        {
            AlterTableStmt* n = makeNode(AlterTableStmt);
            n->relation = (yyvsp[-1].range);
            n->cmds = (yyvsp[0].list);
            n->relkind = OBJECT_VIEW;
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 28625 "gram.cpp"
        break;

        case 316: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 2617 "gram.y"
        {
            AlterTableStmt* n = makeNode(AlterTableStmt);
            n->relation = (yyvsp[-1].range);
            n->cmds = (yyvsp[0].list);
            n->relkind = OBJECT_VIEW;
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 28638 "gram.cpp"
        break;

        case 317: /* AlterTableStmt: ALTER MATERIALIZED VIEW qualified_name alter_table_cmds  */
#line 2626 "gram.y"
        {
            AlterTableStmt* n = makeNode(AlterTableStmt);
            n->relation = (yyvsp[-1].range);
            n->cmds = (yyvsp[0].list);
            n->relkind = OBJECT_MATVIEW;
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 28651 "gram.cpp"
        break;

        case 318: /* AlterTableStmt: ALTER MATERIALIZED VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 2635 "gram.y"
        {
            AlterTableStmt* n = makeNode(AlterTableStmt);
            n->relation = (yyvsp[-1].range);
            n->cmds = (yyvsp[0].list);
            n->relkind = OBJECT_MATVIEW;
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 28664 "gram.cpp"
        break;

        case 319: /* AlterTableStmt: ALTER MATERIALIZED VIEW ALL IN_P TABLESPACE name SET TABLESPACE name opt_nowait  */
#line 2644 "gram.y"
        {
            AlterTableMoveAllStmt* n = makeNode(AlterTableMoveAllStmt);
            n->orig_tablespacename = (yyvsp[-4].str);
            n->objtype = OBJECT_MATVIEW;
            n->roles = NIL;
            n->new_tablespacename = (yyvsp[-1].str);
            n->nowait = (yyvsp[0].boolean);
            (yyval.node) = (Node*) n;
        }
#line 28679 "gram.cpp"
        break;

        case 320: /* AlterTableStmt: ALTER MATERIALIZED VIEW ALL IN_P TABLESPACE name OWNED BY role_list SET TABLESPACE name opt_nowait  */
#line 2655 "gram.y"
        {
            AlterTableMoveAllStmt* n = makeNode(AlterTableMoveAllStmt);
            n->orig_tablespacename = (yyvsp[-7].str);
            n->objtype = OBJECT_MATVIEW;
            n->roles = (yyvsp[-4].list);
            n->new_tablespacename = (yyvsp[-1].str);
            n->nowait = (yyvsp[0].boolean);
            (yyval.node) = (Node*) n;
        }
#line 28694 "gram.cpp"
        break;

        case 321: /* alter_table_cmds: alter_table_cmd  */
#line 2668 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 28700 "gram.cpp"
        break;

        case 322: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 2669 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 28706 "gram.cpp"
        break;

        case 323: /* alter_table_cmd: ADD_P columnDef  */
#line 2675 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_AddColumn;
            n->def = (yyvsp[0].node);
            (yyval.node) = (Node*) n;
        }
#line 28717 "gram.cpp"
        break;

        case 324: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 2683 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_AddColumn;
            n->def = (yyvsp[0].node);
            (yyval.node) = (Node*) n;
        }
#line 28728 "gram.cpp"
        break;

        case 325: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 2691 "gram.y"
        {
            ColumnDef* colDef = makeNode(ColumnDef);
            colDef->raw_default = (yyvsp[0].node);

            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_ColumnDefault;
            n->name = (yyvsp[-1].str);
            n->def = (Node*) colDef;
            (yyval.node) = (Node*) n;
        }
#line 28743 "gram.cpp"
        break;

        case 326: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 2703 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_DropNotNull;
            n->name = (yyvsp[-3].str);
            (yyval.node) = (Node*) n;
        }
#line 28754 "gram.cpp"
        break;

        case 327: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 2711 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_SetNotNull;
            n->name = (yyvsp[-3].str);
            (yyval.node) = (Node*) n;
        }
#line 28765 "gram.cpp"
        break;

        case 328: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 2719 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_SetStatistics;
            n->name = (yyvsp[-3].str);
            n->def = (Node*) makeInteger((yyvsp[0].ival));
            (yyval.node) = (Node*) n;
        }
#line 28777 "gram.cpp"
        break;

        case 329: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 2728 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_SetOptions;
            n->name = (yyvsp[-2].str);
            n->def = (Node*) (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 28789 "gram.cpp"
        break;

        case 330: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 2737 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_ResetOptions;
            n->name = (yyvsp[-2].str);
            n->def = (Node*) (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 28801 "gram.cpp"
        break;

        case 331: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 2746 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_SetStorage;
            n->name = (yyvsp[-3].str);
            n->def = (Node*) makeString((yyvsp[0].str));
            (yyval.node) = (Node*) n;
        }
#line 28813 "gram.cpp"
        break;

        case 332: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 2755 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_DropColumn;
            n->name = (yyvsp[-1].str);
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = TRUE;
            (yyval.node) = (Node*) n;
        }
#line 28826 "gram.cpp"
        break;

        case 333: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 2765 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_DropColumn;
            n->name = (yyvsp[-1].str);
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = FALSE;
            (yyval.node) = (Node*) n;
        }
#line 28839 "gram.cpp"
        break;

        case 334: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 2778 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            ColumnDef* def = makeNode(ColumnDef);
            n->subtype = AT_AlterColumnType;
            n->name = (yyvsp[-5].str);
            n->def = (Node*) def;
            /* We only use these fields of the ColumnDef node */
            def->typeName = (yyvsp[-2].typnam);
            def->collClause = (CollateClause*) (yyvsp[-1].node);
            def->raw_default = (yyvsp[0].node);
            def->location = (yylsp[-5]);
            (yyval.node) = (Node*) n;
        }
#line 28857 "gram.cpp"
        break;

        case 335: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 2793 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_AlterColumnGenericOptions;
            n->name = (yyvsp[-1].str);
            n->def = (Node*) (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 28869 "gram.cpp"
        break;

        case 336: /* alter_table_cmd: ADD_P TableConstraint  */
#line 2802 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_AddConstraint;
            n->def = (yyvsp[0].node);
            (yyval.node) = (Node*) n;
        }
#line 28880 "gram.cpp"
        break;

        case 337: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 2810 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            Constraint* c = makeNode(Constraint);
            n->subtype = AT_AlterConstraint;
            n->def = (Node*) c;
            c->contype = CONSTR_FOREIGN; /* others not supported, yet */
            c->conname = (yyvsp[-1].str);
            processCASbits((yyvsp[0].ival),
                           (yylsp[0]),
                           "ALTER CONSTRAINT statement",
                           &c->deferrable,
                           &c->initdeferred,
                           NULL,
                           NULL,
                           yyscanner);
            (yyval.node) = (Node*) n;
        }
#line 28898 "gram.cpp"
        break;

        case 338: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 2825 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_ValidateConstraint;
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 28909 "gram.cpp"
        break;

        case 339: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 2833 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_DropConstraint;
            n->name = (yyvsp[-1].str);
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = TRUE;
            (yyval.node) = (Node*) n;
        }
#line 28922 "gram.cpp"
        break;

        case 340: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 2843 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_DropConstraint;
            n->name = (yyvsp[-1].str);
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = FALSE;
            (yyval.node) = (Node*) n;
        }
#line 28935 "gram.cpp"
        break;

        case 341: /* alter_table_cmd: SET WITH OIDS  */
#line 2853 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_AddOids;
            (yyval.node) = (Node*) n;
        }
#line 28945 "gram.cpp"
        break;

        case 342: /* alter_table_cmd: SET WITHOUT OIDS  */
#line 2860 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_DropOids;
            (yyval.node) = (Node*) n;
        }
#line 28955 "gram.cpp"
        break;

        case 343: /* alter_table_cmd: CLUSTER ON name  */
#line 2867 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_ClusterOn;
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 28966 "gram.cpp"
        break;

        case 344: /* alter_table_cmd: SET WITHOUT CLUSTER  */
#line 2875 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_DropCluster;
            n->name = NULL;
            (yyval.node) = (Node*) n;
        }
#line 28977 "gram.cpp"
        break;

        case 345: /* alter_table_cmd: ENABLE_P TRIGGER name  */
#line 2883 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_EnableTrig;
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 28988 "gram.cpp"
        break;

        case 346: /* alter_table_cmd: ENABLE_P ALWAYS TRIGGER name  */
#line 2891 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_EnableAlwaysTrig;
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 28999 "gram.cpp"
        break;

        case 347: /* alter_table_cmd: ENABLE_P REPLICA TRIGGER name  */
#line 2899 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_EnableReplicaTrig;
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 29010 "gram.cpp"
        break;

        case 348: /* alter_table_cmd: ENABLE_P TRIGGER ALL  */
#line 2907 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_EnableTrigAll;
            (yyval.node) = (Node*) n;
        }
#line 29020 "gram.cpp"
        break;

        case 349: /* alter_table_cmd: ENABLE_P TRIGGER USER  */
#line 2914 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_EnableTrigUser;
            (yyval.node) = (Node*) n;
        }
#line 29030 "gram.cpp"
        break;

        case 350: /* alter_table_cmd: DISABLE_P TRIGGER name  */
#line 2921 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_DisableTrig;
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 29041 "gram.cpp"
        break;

        case 351: /* alter_table_cmd: DISABLE_P TRIGGER ALL  */
#line 2929 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_DisableTrigAll;
            (yyval.node) = (Node*) n;
        }
#line 29051 "gram.cpp"
        break;

        case 352: /* alter_table_cmd: DISABLE_P TRIGGER USER  */
#line 2936 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_DisableTrigUser;
            (yyval.node) = (Node*) n;
        }
#line 29061 "gram.cpp"
        break;

        case 353: /* alter_table_cmd: ENABLE_P RULE name  */
#line 2943 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_EnableRule;
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 29072 "gram.cpp"
        break;

        case 354: /* alter_table_cmd: ENABLE_P ALWAYS RULE name  */
#line 2951 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_EnableAlwaysRule;
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 29083 "gram.cpp"
        break;

        case 355: /* alter_table_cmd: ENABLE_P REPLICA RULE name  */
#line 2959 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_EnableReplicaRule;
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 29094 "gram.cpp"
        break;

        case 356: /* alter_table_cmd: DISABLE_P RULE name  */
#line 2967 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_DisableRule;
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 29105 "gram.cpp"
        break;

        case 357: /* alter_table_cmd: INHERIT qualified_name  */
#line 2975 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_AddInherit;
            n->def = (Node*) (yyvsp[0].range);
            (yyval.node) = (Node*) n;
        }
#line 29116 "gram.cpp"
        break;

        case 358: /* alter_table_cmd: NO INHERIT qualified_name  */
#line 2983 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_DropInherit;
            n->def = (Node*) (yyvsp[0].range);
            (yyval.node) = (Node*) n;
        }
#line 29127 "gram.cpp"
        break;

        case 359: /* alter_table_cmd: SET DistributedBy  */
#line 2992 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_SetDistributedBy;
            n->def = (Node*) list_make2(NULL, (yyvsp[0].node));
            (yyval.node) = (Node*) n;
        }
#line 29138 "gram.cpp"
        break;

        case 360: /* alter_table_cmd: SET WITH definition DistributedBy  */
#line 3000 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_SetDistributedBy;
            n->def = (Node*) list_make2((yyvsp[-1].list), (yyvsp[0].node));
            (yyval.node) = (Node*) n;
        }
#line 29149 "gram.cpp"
        break;

        case 361: /* alter_table_cmd: SET WITH definition  */
#line 3008 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_SetDistributedBy;
            n->def = (Node*) list_make2((yyvsp[0].list), NULL);
            (yyval.node) = (Node*) n;
        }
#line 29160 "gram.cpp"
        break;

        case 362: /* alter_table_cmd: alter_table_partition_cmd  */
#line 3015 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 29168 "gram.cpp"
        break;

        case 363: /* alter_table_cmd: EXPAND TABLE  */
#line 3020 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_ExpandTable;
            (yyval.node) = (Node*) n;
        }
#line 29178 "gram.cpp"
        break;

        case 364: /* alter_table_cmd: EXPAND PARTITION PREPARE  */
#line 3027 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_ExpandPartitionTablePrepare;
            (yyval.node) = (Node*) n;
        }
#line 29188 "gram.cpp"
        break;

        case 365: /* alter_table_cmd: OF any_name  */
#line 3034 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            TypeName* def = makeTypeNameFromNameList((yyvsp[0].list));
            def->location = (yylsp[0]);
            n->subtype = AT_AddOf;
            n->def = (Node*) def;
            (yyval.node) = (Node*) n;
        }
#line 29201 "gram.cpp"
        break;

        case 366: /* alter_table_cmd: NOT OF  */
#line 3044 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_DropOf;
            (yyval.node) = (Node*) n;
        }
#line 29211 "gram.cpp"
        break;

        case 367: /* alter_table_cmd: OWNER TO RoleId  */
#line 3051 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_ChangeOwner;
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 29222 "gram.cpp"
        break;

        case 368: /* alter_table_cmd: SET TABLESPACE name  */
#line 3059 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_SetTableSpace;
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 29233 "gram.cpp"
        break;

        case 369: /* alter_table_cmd: SET reloptions  */
#line 3067 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_SetRelOptions;
            n->def = (Node*) (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 29244 "gram.cpp"
        break;

        case 370: /* alter_table_cmd: RESET reloptions  */
#line 3075 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_ResetRelOptions;
            n->def = (Node*) (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 29255 "gram.cpp"
        break;

        case 371: /* alter_table_cmd: REPLICA IDENTITY_P replica_identity  */
#line 3083 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_ReplicaIdentity;
            n->def = (yyvsp[0].node);
            (yyval.node) = (Node*) n;
        }
#line 29266 "gram.cpp"
        break;

        case 372: /* alter_table_cmd: alter_generic_options  */
#line 3090 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_GenericOptions;
            n->def = (Node*) (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 29277 "gram.cpp"
        break;

        case 373: /* alter_column_default: SET DEFAULT a_expr  */
#line 3099 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 29283 "gram.cpp"
        break;

        case 374: /* alter_column_default: DROP DEFAULT  */
#line 3100 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 29289 "gram.cpp"
        break;

        case 375: /* opt_drop_behavior: CASCADE  */
#line 3104 "gram.y"
        {
            (yyval.dbehavior) = DROP_CASCADE;
        }
#line 29295 "gram.cpp"
        break;

        case 376: /* opt_drop_behavior: RESTRICT  */
#line 3105 "gram.y"
        {
            (yyval.dbehavior) = DROP_RESTRICT;
        }
#line 29301 "gram.cpp"
        break;

        case 377: /* opt_drop_behavior: %empty  */
#line 3106 "gram.y"
        {
            (yyval.dbehavior) = DROP_RESTRICT; /* default */
        }
#line 29307 "gram.cpp"
        break;

        case 378: /* opt_collate_clause: COLLATE any_name  */
#line 3111 "gram.y"
        {
            CollateClause* n = makeNode(CollateClause);
            n->arg = NULL;
            n->collname = (yyvsp[0].list);
            n->location = (yylsp[-1]);
            (yyval.node) = (Node*) n;
        }
#line 29319 "gram.cpp"
        break;

        case 379: /* opt_collate_clause: %empty  */
#line 3118 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 29325 "gram.cpp"
        break;

        case 380: /* alter_using: USING a_expr  */
#line 3122 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 29331 "gram.cpp"
        break;

        case 381: /* alter_using: %empty  */
#line 3123 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 29337 "gram.cpp"
        break;

        case 382: /* replica_identity: NOTHING  */
#line 3128 "gram.y"
        {
            ReplicaIdentityStmt* n = makeNode(ReplicaIdentityStmt);
            n->identity_type = REPLICA_IDENTITY_NOTHING;
            n->name = NULL;
            (yyval.node) = (Node*) n;
        }
#line 29348 "gram.cpp"
        break;

        case 383: /* replica_identity: FULL  */
#line 3135 "gram.y"
        {
            ReplicaIdentityStmt* n = makeNode(ReplicaIdentityStmt);
            n->identity_type = REPLICA_IDENTITY_FULL;
            n->name = NULL;
            (yyval.node) = (Node*) n;
        }
#line 29359 "gram.cpp"
        break;

        case 384: /* replica_identity: DEFAULT  */
#line 3142 "gram.y"
        {
            ReplicaIdentityStmt* n = makeNode(ReplicaIdentityStmt);
            n->identity_type = REPLICA_IDENTITY_DEFAULT;
            n->name = NULL;
            (yyval.node) = (Node*) n;
        }
#line 29370 "gram.cpp"
        break;

        case 385: /* replica_identity: USING INDEX name  */
#line 3149 "gram.y"
        {
            ReplicaIdentityStmt* n = makeNode(ReplicaIdentityStmt);
            n->identity_type = REPLICA_IDENTITY_INDEX;
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 29381 "gram.cpp"
        break;

        case 386: /* reloptions: '(' reloption_list ')'  */
#line 3158 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 29387 "gram.cpp"
        break;

        case 387: /* opt_reloptions: WITH reloptions  */
#line 3161 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 29393 "gram.cpp"
        break;

        case 388: /* opt_reloptions: %empty  */
#line 3162 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 29399 "gram.cpp"
        break;

        case 389: /* reloption_list: reloption_elem  */
#line 3166 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 29405 "gram.cpp"
        break;

        case 390: /* reloption_list: reloption_list ',' reloption_elem  */
#line 3167 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
        }
#line 29411 "gram.cpp"
        break;

        case 391: /* reloption_elem: ColLabel '=' def_arg  */
#line 3173 "gram.y"
        {
            /*
					 * appendoptimized is an alias for appendonly in order to
					 * provide a reloption syntax which better reflects the
					 * featureset of AO tables. It is implemented as a very
					 * thin alias, the reloptions and messaging will still
					 * say appendonly.
					 */
            if (strcmp((yyvsp[-2].str), "appendoptimized") == 0)
                (yyval.defelt) = makeDefElem("appendonly", (Node*) (yyvsp[0].node));
            else
                (yyval.defelt) = makeDefElem((yyvsp[-2].str), (Node*) (yyvsp[0].node));
        }
#line 29429 "gram.cpp"
        break;

        case 392: /* reloption_elem: ColLabel  */
#line 3187 "gram.y"
        {
            /*
					 * Similarly to the above, translate 'appendoptimized' to
					 * 'appendonly'. Also, adding the implicit 'true' in case 
					 * we don't handle that properly in parse analysis.
					 * See: https://github.com/greenplum-db/gpdb/issues/14510.
					 */
            if (strcmp((yyvsp[0].str), "appendonly") == 0 || strcmp((yyvsp[0].str), "appendoptimized") == 0)
                (yyval.defelt) = makeDefElem("appendonly", (Node*) makeString(pstrdup("true")));
            else
                (yyval.defelt) = makeDefElem((yyvsp[0].str), NULL);
        }
#line 29446 "gram.cpp"
        break;

        case 393: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 3200 "gram.y"
        {
            (yyval.defelt) =
                makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (Node*) (yyvsp[0].node), DEFELEM_UNSPEC);
        }
#line 29455 "gram.cpp"
        break;

        case 394: /* reloption_elem: ColLabel '.' ColLabel  */
#line 3205 "gram.y"
        {
            (yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, DEFELEM_UNSPEC);
        }
#line 29463 "gram.cpp"
        break;

        case 395: /* opt_table_partition_split_into: INTO '(' alter_table_partition_id_spec_with_opt_default ',' alter_table_partition_id_spec_with_opt_default ')'  */
#line 3214 "gram.y"
        {
            /* re-use alterpartitioncmd struct here... */
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            pc->partid = (Node*) (yyvsp[-3].node);
            pc->arg1 = (Node*) (yyvsp[-1].node);
            pc->arg2 = NULL;
            pc->location = (yylsp[-1]);
            (yyval.node) = (Node*) pc;
        }
#line 29477 "gram.cpp"
        break;

        case 396: /* opt_table_partition_split_into: %empty  */
#line 3223 "gram.y"
        {
            (yyval.node) = NULL; /* default */
        }
#line 29483 "gram.cpp"
        break;

        case 397: /* opt_table_partition_exchange_validate: WITH VALIDATION  */
#line 3227 "gram.y"
        {
            (yyval.ival) = +1;
        }
#line 29489 "gram.cpp"
        break;

        case 398: /* opt_table_partition_exchange_validate: WITHOUT VALIDATION  */
#line 3228 "gram.y"
        {
            (yyval.ival) = +0;
        }
#line 29495 "gram.cpp"
        break;

        case 399: /* opt_table_partition_exchange_validate: %empty  */
#line 3229 "gram.y"
        {
            (yyval.ival) = +1; /* default */
        }
#line 29501 "gram.cpp"
        break;

        case 400: /* alter_table_partition_id_spec: PartitionColId  */
#line 3234 "gram.y"
        {
            AlterPartitionId* n = makeNode(AlterPartitionId);
            n->idtype = AT_AP_IDName;
            n->partiddef = (Node*) makeString((yyvsp[0].str));
            n->location = (yylsp[0]);
            (yyval.node) = (Node*) n;
        }
#line 29513 "gram.cpp"
        break;

        case 401: /* alter_table_partition_id_spec: FOR '(' TabPartitionBoundarySpecValList ')'  */
#line 3243 "gram.y"
        {
            AlterPartitionId* n = makeNode(AlterPartitionId);
            n->idtype = AT_AP_IDValue;
            n->partiddef = (Node*) (yyvsp[-1].list);
            n->location = (yylsp[-1]);
            (yyval.node) = reinterpret_cast<Node*>(n);
        }
#line 29525 "gram.cpp"
        break;

        case 402: /* alter_table_partition_id_spec: FOR '(' func_name '(' func_arg_list opt_sort_clause ')' ')'  */
#line 3273 "gram.y"
        {
            Node* arg;
            Value* val;
            Node* fname;
            AlterPartitionId* n;

            /* allow RANK only */
            if (list_length((yyvsp[-5].list)) != 1)
                parser_yyerror("syntax error");
            fname = reinterpret_cast<Node*>(linitial((yyvsp[-5].list)));
            if (!(strcmp(strVal(linitial((yyvsp[-5].list))), "rank") == 0))
                parser_yyerror("syntax error");

            /* expr_list must be a single numeric constant */
            if (list_length((yyvsp[-3].list)) != 1)
                parser_yyerror("syntax error");

            arg = reinterpret_cast<Node*>(linitial((yyvsp[-3].list)));
            if (!IsA(arg, A_Const))
                parser_yyerror("syntax error");
            val = &((A_Const*) arg)->val;
            if (!IsA(val, Integer) && !IsA(val, Float))
                parser_yyerror("syntax error");

            /* we don't want a sort clause */
            if ((yyvsp[-2].list))
                parser_yyerror("syntax error");

            n = makeNode(AlterPartitionId);
            n->idtype = AT_AP_IDRank;
            n->partiddef = (Node*) val;
            n->location = (yylsp[-3]);

            (yyval.node) = (Node*) n;
        }
#line 29565 "gram.cpp"
        break;

        case 403: /* alter_table_partition_id_spec_with_opt_default: PARTITION alter_table_partition_id_spec  */
#line 3312 "gram.y"
        {
            AlterPartitionId* n = (AlterPartitionId*) (yyvsp[0].node);
            (yyval.node) = (Node*) n;
        }
#line 29574 "gram.cpp"
        break;

        case 404: /* alter_table_partition_id_spec_with_opt_default: DEFAULT PARTITION alter_table_partition_id_spec  */
#line 3317 "gram.y"
        {
            ereport(ERROR,
                    errcode(ERRCODE_SYNTAX_ERROR),
                    errmsg("cannot specify a name, rank, or value for a DEFAULT partition in this context"));
        }
#line 29584 "gram.cpp"
        break;

        case 405: /* alter_table_partition_id_spec_with_opt_default: DEFAULT PARTITION  */
#line 3323 "gram.y"
        {
            AlterPartitionId* n = makeNode(AlterPartitionId);
            n->idtype = AT_AP_IDDefault;
            n->partiddef = NULL;
            n->location = (yylsp[-1]);
            (yyval.node) = (Node*) n;
        }
#line 29596 "gram.cpp"
        break;

        case 406: /* alter_table_partition_cmd: ADD_P PARTITION OptTabPartitionBoundarySpec OptTabPartitionStorageAttr OptTabSubPartitionSpec  */
#line 3338 "gram.y"
        {
            AlterPartitionId* pid = makeNode(AlterPartitionId);
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            AlterTableCmd* n = makeNode(AlterTableCmd);
            PartitionElem* pelem = makeNode(PartitionElem);

            pid->idtype = AT_AP_IDNone;
            pid->location = (yylsp[-2]);
            pid->partiddef = NULL;

            pc->partid = (Node*) pid;

            pelem->partName = NULL;
            pelem->boundSpec = (yyvsp[-2].node);
            pelem->subSpec = (yyvsp[0].node);
            pelem->location = (yylsp[-2]);
            pelem->isDefault = false; /* not default */
            pelem->storeAttr = (yyvsp[-1].node);
            pelem->AddPartDesc = NULL;
            pc->arg1 = (Node*) pelem;

            pc->location = (yylsp[-2]);

            n->subtype = AT_PartAdd;
            n->def = (Node*) pc;
            (yyval.node) = (Node*) n;
        }
#line 29628 "gram.cpp"
        break;

        case 407: /* alter_table_partition_cmd: ADD_P DEFAULT PARTITION alter_table_partition_id_spec OptTabPartitionBoundarySpec OptTabPartitionStorageAttr OptTabSubPartitionSpec  */
#line 3370 "gram.y"
        {
            AlterPartitionId* pid = (AlterPartitionId*) (yyvsp[-3].node);
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            AlterTableCmd* n = makeNode(AlterTableCmd);
            PartitionElem* pelem = makeNode(PartitionElem);

            if (pid->idtype != AT_AP_IDName)
                ereport(ERROR, errcode(ERRCODE_SYNTAX_ERROR), errmsg("can only ADD a partition by name"));

            pc->partid = (Node*) pid;

            pelem->partName = NULL;
            pelem->boundSpec = (yyvsp[-2].node);
            pelem->subSpec = (yyvsp[0].node);
            pelem->location = (yylsp[-2]);
            pelem->isDefault = true;
            pelem->storeAttr = (yyvsp[-1].node);
            pelem->AddPartDesc = NULL;
            pc->arg1 = (Node*) pelem;
            pc->location = (yylsp[-2]);

            n->subtype = AT_PartAdd;
            n->def = (Node*) pc;
            (yyval.node) = (Node*) n;
        }
#line 29660 "gram.cpp"
        break;

        case 408: /* alter_table_partition_cmd: ADD_P PARTITION alter_table_partition_id_spec OptTabPartitionBoundarySpec OptTabPartitionStorageAttr OptTabSubPartitionSpec  */
#line 3402 "gram.y"
        {
            AlterPartitionId* pid = (AlterPartitionId*) (yyvsp[-3].node);
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            AlterTableCmd* n = makeNode(AlterTableCmd);
            PartitionElem* pelem = makeNode(PartitionElem);

            if (pid->idtype != AT_AP_IDName)
                ereport(ERROR, errcode(ERRCODE_SYNTAX_ERROR), errmsg("can only ADD a partition by name"));

            pc->partid = (Node*) pid;

            pelem->partName = NULL;
            pelem->boundSpec = (yyvsp[-2].node);
            pelem->subSpec = (yyvsp[0].node);
            pelem->location = (yylsp[-2]);
            pelem->isDefault = false;
            pelem->storeAttr = (yyvsp[-1].node);
            pelem->AddPartDesc = NULL;
            pc->arg1 = (Node*) pelem;

            pc->location = (yylsp[-2]);

            n->subtype = AT_PartAdd;
            n->def = (Node*) pc;
            (yyval.node) = (Node*) n;
        }
#line 29693 "gram.cpp"
        break;

        case 409: /* alter_table_partition_cmd: ALTER alter_table_partition_id_spec_with_opt_default alter_table_cmd  */
#line 3433 "gram.y"
        {
            /* NOTE: only allow a subset of valid ALTER TABLE
                       cmds for partitions.
                    */

            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            AlterTableCmd* n = makeNode(AlterTableCmd);

            pc->partid = (Node*) (yyvsp[-1].node);
            pc->arg1 = (Node*) (yyvsp[0].node);
            pc->arg2 = NULL;
            pc->location = (yylsp[0]);

            n->subtype = AT_PartAlter;
            n->def = (Node*) pc;
            (yyval.node) = (Node*) n;
        }
#line 29715 "gram.cpp"
        break;

        case 410: /* alter_table_partition_cmd: DROP PARTITION IF_P EXISTS alter_table_partition_id_spec opt_drop_behavior  */
#line 3453 "gram.y"
        {
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            AlterTableCmd* n = makeNode(AlterTableCmd);
            DropStmt* ds = makeNode(DropStmt);

            ds->missing_ok = TRUE;
            ds->behavior = (yyvsp[0].dbehavior);

            /* 
                       build an (incomplete) drop statement for arg1: 
                       fill in the rest after the partition id spec is
                       validated
                    */

            pc->partid = (Node*) (yyvsp[-1].node);
            pc->arg1 = (Node*) ds;
            pc->arg2 = NULL;
            pc->location = (yylsp[-1]);

            n->subtype = AT_PartDrop;
            n->def = (Node*) pc;
            (yyval.node) = (Node*) n;
        }
#line 29743 "gram.cpp"
        break;

        case 411: /* alter_table_partition_cmd: DROP DEFAULT PARTITION IF_P EXISTS opt_drop_behavior  */
#line 3478 "gram.y"
        {
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            AlterTableCmd* n = makeNode(AlterTableCmd);
            DropStmt* ds = makeNode(DropStmt);
            AlterPartitionId* pid = makeNode(AlterPartitionId);

            pid->idtype = AT_AP_IDDefault;
            pid->partiddef = NULL;
            pid->location = (yylsp[-4]);

            ds->missing_ok = TRUE;
            ds->behavior = (yyvsp[0].dbehavior);

            /* 
                       build an (incomplete) drop statement for arg1: 
                       fill in the rest after the partition id spec is
                       validated
                    */

            pc->partid = (Node*) pid;
            pc->arg1 = (Node*) ds;
            pc->arg2 = NULL;
            pc->location = (yylsp[-3]);

            n->subtype = AT_PartDrop;
            n->def = (Node*) pc;
            (yyval.node) = (Node*) n;
        }
#line 29776 "gram.cpp"
        break;

        case 412: /* alter_table_partition_cmd: DROP alter_table_partition_id_spec_with_opt_default opt_drop_behavior  */
#line 3509 "gram.y"
        {
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            AlterTableCmd* n = makeNode(AlterTableCmd);
            DropStmt* ds = makeNode(DropStmt);

            ds->missing_ok = FALSE;
            ds->behavior = (yyvsp[0].dbehavior);

            /* 
                       build an (incomplete) drop statement for arg1: 
                       fill in the rest after the partition id spec is
                       validated
                    */

            pc->partid = (Node*) (yyvsp[-1].node);
            pc->arg1 = (Node*) ds;
            pc->arg2 = NULL;
            pc->location = (yylsp[-1]);

            n->subtype = AT_PartDrop;
            n->def = (Node*) pc;
            (yyval.node) = (Node*) n;
        }
#line 29804 "gram.cpp"
        break;

        case 413: /* alter_table_partition_cmd: DROP PARTITION  */
#line 3533 "gram.y"
        {
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            AlterTableCmd* n = makeNode(AlterTableCmd);
            DropStmt* ds = makeNode(DropStmt);
            AlterPartitionId* pid = makeNode(AlterPartitionId);

            ds->missing_ok = FALSE;
            ds->behavior = DROP_RESTRICT; /* default */

            /* 
                       build an (incomplete) drop statement for arg1: 
                       fill in the rest after the partition id spec is
                       validated
                    */

            /* just try to drop the first partition if not specified */
            pid->idtype = AT_AP_IDNone;
            pid->location = (yylsp[0]);

            pc->partid = (Node*) pid;
            pc->arg1 = (Node*) ds;
            pc->arg2 = NULL;
            pc->location = (yylsp[0]);

            n->subtype = AT_PartDrop;
            n->def = (Node*) pc;
            (yyval.node) = (Node*) n;
        }
#line 29837 "gram.cpp"
        break;

        case 414: /* alter_table_partition_cmd: EXCHANGE alter_table_partition_id_spec_with_opt_default WITH TABLE qualified_name opt_table_partition_exchange_validate  */
#line 3565 "gram.y"
        {
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            AlterPartitionCmd* pc2 = makeNode(AlterPartitionCmd);
            AlterTableCmd* n = makeNode(AlterTableCmd);

            pc->partid = (Node*) (yyvsp[-4].node);
            pc->arg1 = (Node*) (yyvsp[-1].range);
            pc->arg2 = (Node*) pc2;
            pc2->arg1 = (Node*) makeInteger((yyvsp[0].ival));
            pc->location = (yylsp[-1]);

            n->subtype = AT_PartExchange;
            n->def = (Node*) pc;
            (yyval.node) = (Node*) n;
        }
#line 29857 "gram.cpp"
        break;

        case 415: /* alter_table_partition_cmd: RENAME alter_table_partition_id_spec_with_opt_default TO IDENT  */
#line 3582 "gram.y"
        {
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            AlterTableCmd* n = makeNode(AlterTableCmd);

            pc->partid = (Node*) (yyvsp[-2].node);
            pc->arg1 = (Node*) makeString((yyvsp[0].str));
            pc->arg2 = NULL;
            pc->location = (yylsp[0]);

            n->subtype = AT_PartRename;
            n->def = (Node*) pc;
            (yyval.node) = (Node*) n;
        }
#line 29875 "gram.cpp"
        break;

        case 416: /* alter_table_partition_cmd: SET SUBPARTITION TEMPLATE '(' TabSubPartitionElemList ')'  */
#line 3597 "gram.y"
        {
            AlterPartitionId* pid = makeNode(AlterPartitionId);
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            AlterTableCmd* n = makeNode(AlterTableCmd);
            PartitionElem* pelem = makeNode(PartitionElem);
            PartitionSpec* ps = makeNode(PartitionSpec);

            /* treat this case as similar to ADD PARTITION */

            pid->idtype = AT_AP_IDName;
            pid->location = (yylsp[-3]);
            pid->partiddef = (Node*) makeString("subpartition_template");

            pc->partid = (Node*) pid;

            /* build a subpartition spec and add it to CREATE TABLE */
            ps->partElem = (yyvsp[-1].list);
            ps->subSpec = NULL;
            ps->istemplate = true;
            ps->location = (yylsp[-2]);

            pelem->partName = NULL;
            pelem->boundSpec = NULL;
            pelem->subSpec = (Node*) ps;
            pelem->location = (yylsp[-2]);
            pelem->isDefault = true;
            pelem->storeAttr = NULL;
            pelem->AddPartDesc = NULL;
            pc->arg1 = (Node*) pelem;

            /* a little (temporary?) syntax check on templates */
            if (ps->partElem) {
                List* elems;
                ListCell* lc;
                Assert(IsA(ps->partElem, List));

                elems = (List*) ps->partElem;
                foreach (lc, elems) {
                    PartitionElem* e = reinterpret_cast<PartitionElem*>(lfirst(lc));

                    if (!IsA(e, PartitionElem))
                        continue;

                    if (e->subSpec)
                        ereport(ERROR,
                                errcode(ERRCODE_SYNTAX_ERROR),
                                errmsg("template cannot contain "
                                       "specification for child "
                                       "partition"));
                }
            }

            pc->location = (yylsp[-1]);

            n->subtype = AT_PartSetTemplate;
            n->def = (Node*) pc;
            (yyval.node) = (Node*) n;
        }
#line 29941 "gram.cpp"
        break;

        case 417: /* alter_table_partition_cmd: SET SUBPARTITION TEMPLATE '(' ')'  */
#line 3660 "gram.y"
        {
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            AlterTableCmd* n = makeNode(AlterTableCmd);

            pc->partid = NULL;
            pc->arg1 = NULL;
            pc->arg2 = NULL;
            pc->location = (yylsp[-1]);

            n->subtype = AT_PartSetTemplate;
            n->def = (Node*) pc;
            (yyval.node) = (Node*) n;
        }
#line 29959 "gram.cpp"
        break;

        case 418: /* alter_table_partition_cmd: SPLIT DEFAULT PARTITION TabPartitionBoundarySpecStart TabPartitionBoundarySpecEnd opt_table_partition_split_into  */
#line 3677 "gram.y"
        {
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            AlterTableCmd* n = makeNode(AlterTableCmd);
            AlterPartitionId* pid = makeNode(AlterPartitionId);

            pid->idtype = AT_AP_IDDefault;
            pid->partiddef = NULL;
            pid->location = (yylsp[-4]);

            pc->partid = (Node*) pid;
            pc->arg1 = (Node*) list_make2((yyvsp[-2].node), (yyvsp[-1].node));
            pc->arg2 = (Node*) (yyvsp[0].node);
            pc->location = (yylsp[-1]);

            n->subtype = AT_PartSplit;
            n->def = (Node*) pc;
            (yyval.node) = (Node*) n;
        }
#line 29982 "gram.cpp"
        break;

        case 419: /* alter_table_partition_cmd: SPLIT alter_table_partition_id_spec_with_opt_default AT '(' part_values_or_spec_list ')' opt_table_partition_split_into  */
#line 3699 "gram.y"
        {
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            AlterTableCmd* n = makeNode(AlterTableCmd);

            pc->partid = (Node*) (yyvsp[-5].node);

            /* 
					 * The first element of the list is only defined if
					 * we're doing default splits for range partitioning.
				 	 */
            pc->arg1 = (Node*) list_make2(NULL, (yyvsp[-2].list));
            pc->arg2 = (Node*) (yyvsp[0].node);
            pc->location = (yylsp[-2]);

            n->subtype = AT_PartSplit;
            n->def = (Node*) pc;
            (yyval.node) = (Node*) n;
        }
#line 30005 "gram.cpp"
        break;

        case 420: /* alter_table_partition_cmd: TRUNCATE alter_table_partition_id_spec_with_opt_default opt_drop_behavior  */
#line 3720 "gram.y"
        {
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            AlterTableCmd* n = makeNode(AlterTableCmd);
            TruncateStmt* ts = makeNode(TruncateStmt);

            /* 
                       build an (incomplete) truncate statement for arg1: 
                       fill in the rest after the partition id spec is
                       validated
                    */
            ts->relations = NULL;
            ts->behavior = (yyvsp[0].dbehavior);

            pc->partid = (Node*) (yyvsp[-1].node);
            pc->arg1 = (Node*) ts;
            pc->arg2 = NULL;
            pc->location = (yylsp[-1]);

            n->subtype = AT_PartTruncate;
            n->def = (Node*) pc;
            (yyval.node) = (Node*) n;
        }
#line 30032 "gram.cpp"
        break;

        case 421: /* AlterCompositeTypeStmt: ALTER TYPE_P any_name alter_type_cmds  */
#line 3754 "gram.y"
        {
            AlterTableStmt* n = makeNode(AlterTableStmt);

            /* can't use qualified_name, sigh */
            n->relation = makeRangeVarFromAnyName((yyvsp[-1].list), (yylsp[-1]), yyscanner);
            n->cmds = (yyvsp[0].list);
            n->relkind = OBJECT_TYPE;
            (yyval.node) = (Node*) n;
        }
#line 30046 "gram.cpp"
        break;

        case 422: /* alter_type_cmds: alter_type_cmd  */
#line 3766 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 30052 "gram.cpp"
        break;

        case 423: /* alter_type_cmds: alter_type_cmds ',' alter_type_cmd  */
#line 3767 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 30058 "gram.cpp"
        break;

        case 424: /* alter_type_cmd: ADD_P ATTRIBUTE TableFuncElement opt_drop_behavior  */
#line 3773 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_AddColumn;
            n->def = (yyvsp[-1].node);
            n->behavior = (yyvsp[0].dbehavior);
            (yyval.node) = (Node*) n;
        }
#line 30070 "gram.cpp"
        break;

        case 425: /* alter_type_cmd: DROP ATTRIBUTE IF_P EXISTS ColId opt_drop_behavior  */
#line 3782 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_DropColumn;
            n->name = (yyvsp[-1].str);
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = TRUE;
            (yyval.node) = (Node*) n;
        }
#line 30083 "gram.cpp"
        break;

        case 426: /* alter_type_cmd: DROP ATTRIBUTE ColId opt_drop_behavior  */
#line 3792 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            n->subtype = AT_DropColumn;
            n->name = (yyvsp[-1].str);
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = FALSE;
            (yyval.node) = (Node*) n;
        }
#line 30096 "gram.cpp"
        break;

        case 427: /* alter_type_cmd: ALTER ATTRIBUTE ColId opt_set_data TYPE_P Typename opt_collate_clause opt_drop_behavior  */
#line 3802 "gram.y"
        {
            AlterTableCmd* n = makeNode(AlterTableCmd);
            ColumnDef* def = makeNode(ColumnDef);
            n->subtype = AT_AlterColumnType;
            n->name = (yyvsp[-5].str);
            n->def = (Node*) def;
            n->behavior = (yyvsp[0].dbehavior);
            /* We only use these fields of the ColumnDef node */
            def->typeName = (yyvsp[-2].typnam);
            def->collClause = (CollateClause*) (yyvsp[-1].node);
            def->raw_default = NULL;
            def->location = (yylsp[-5]);
            (yyval.node) = (Node*) n;
        }
#line 30115 "gram.cpp"
        break;

        case 428: /* ClosePortalStmt: CLOSE cursor_name  */
#line 3828 "gram.y"
        {
            ClosePortalStmt* n = makeNode(ClosePortalStmt);
            n->portalname = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 30125 "gram.cpp"
        break;

        case 429: /* ClosePortalStmt: CLOSE ALL  */
#line 3834 "gram.y"
        {
            ClosePortalStmt* n = makeNode(ClosePortalStmt);
            n->portalname = NULL;
            (yyval.node) = (Node*) n;
        }
#line 30135 "gram.cpp"
        break;

        case 430: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options OptSingleRowErrorHandling skip_external_partition  */
#line 3866 "gram.y"
        {
            CopyStmt* n = makeNode(CopyStmt);
            n->relation = (yyvsp[-10].range);
            n->query = NULL;
            n->attlist = (yyvsp[-9].list);
            n->is_from = (yyvsp[-7].boolean);
            n->is_program = (yyvsp[-6].boolean);
            n->filename = (yyvsp[-5].str);
            n->sreh = reinterpret_cast<Node*>((yyvsp[-1].list));
            n->partitions = NULL;
            n->ao_segnos = NIL;

            if (n->is_program && n->filename == NULL)
                ereport(ERROR,
                        errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("STDIN/STDOUT not allowed with PROGRAM"),
                        parser_errposition((yylsp[-5])));

            // -- non-upstream patch begin
            if (n->is_program) {
                /*
						* MDB-21297: forbit usage of COPY TO PROGRAM and COPY FROM PROGRAM at all
						*/
                // ereport(ERROR,
                // 	errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),
                // 		errmsg("forbidden to COPY to or from an external program or file in Yandex Cloud"),
                // 		errhint("Anyone can COPY to stdout or from stdin. "
                // 				"psql's \\copy command also works for anyone."));
            }
            // --- non-upstream patch end

            n->options = NIL;
            n->skip_ext_partition = (yyvsp[0].boolean);

            /* Concatenate user-supplied flags */
            if ((yyvsp[-11].defelt))
                n->options = lappend(n->options, (yyvsp[-11].defelt));
            if ((yyvsp[-8].defelt))
                n->options = lappend(n->options, (yyvsp[-8].defelt));
            if ((yyvsp[-4].defelt))
                n->options = lappend(n->options, (yyvsp[-4].defelt));
            if ((yyvsp[-2].list))
                n->options = list_concat(n->options, (yyvsp[-2].list));
            if ((yyvsp[-1].list)) {
                n->options = list_concat(n->options, (yyvsp[-1].list));
            }
            (yyval.node) = (Node*) n;
        }
#line 30189 "gram.cpp"
        break;

        case 431: /* CopyStmt: COPY select_with_parens TO opt_program copy_file_name opt_with copy_options  */
#line 3916 "gram.y"
        {
            CopyStmt* n = makeNode(CopyStmt);
            n->relation = NULL;
            n->query = (yyvsp[-5].node);
            n->attlist = NIL;
            n->is_from = false;
            n->is_program = (yyvsp[-3].boolean);
            n->filename = (yyvsp[-2].str);
            n->options = (yyvsp[0].list);
            n->partitions = NULL;
            n->ao_segnos = NIL;
            n->skip_ext_partition = false;

            if (n->is_program && n->filename == NULL)
                ereport(ERROR,
                        errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("STDIN/STDOUT not allowed with PROGRAM"),
                        parser_errposition((yylsp[-2])));

            // -- non-upstream patch begin
            if (n->is_program) {
                /*
						* MDB-21297: forbit usage of COPY TO PROGRAM and COPY FROM PROGRAM at all
						*/
                // ereport(ERROR,
                // 	errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),
                // 		errmsg("forbidden to COPY to or from an external program or file in Yandex Cloud"),
                // 		errhint("Anyone can COPY to stdout or from stdin. "
                // 				"psql's \\copy command also works for anyone."));
            }
            // --- non-upstream patch end

            (yyval.node) = (Node*) n;
        }
#line 30229 "gram.cpp"
        break;

        case 432: /* copy_from: FROM  */
#line 3954 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 30235 "gram.cpp"
        break;

        case 433: /* copy_from: TO  */
#line 3955 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 30241 "gram.cpp"
        break;

        case 434: /* opt_program: PROGRAM  */
#line 3959 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 30247 "gram.cpp"
        break;

        case 435: /* opt_program: %empty  */
#line 3960 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 30253 "gram.cpp"
        break;

        case 436: /* skip_external_partition: IGNORE_P EXTERNAL PARTITIONS  */
#line 3964 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 30259 "gram.cpp"
        break;

        case 437: /* skip_external_partition: %empty  */
#line 3965 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 30265 "gram.cpp"
        break;

        case 438: /* copy_file_name: Sconst  */
#line 3974 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 30271 "gram.cpp"
        break;

        case 439: /* copy_file_name: STDIN  */
#line 3975 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 30277 "gram.cpp"
        break;

        case 440: /* copy_file_name: STDOUT  */
#line 3976 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 30283 "gram.cpp"
        break;

        case 441: /* copy_options: copy_opt_list  */
#line 3979 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 30289 "gram.cpp"
        break;

        case 442: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 3980 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 30295 "gram.cpp"
        break;

        case 443: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 3985 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 30301 "gram.cpp"
        break;

        case 444: /* copy_opt_list: %empty  */
#line 3986 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 30307 "gram.cpp"
        break;

        case 445: /* copy_opt_item: BINARY  */
#line 3991 "gram.y"
        {
            (yyval.defelt) = makeDefElem("format", (Node*) makeString("binary"));
        }
#line 30315 "gram.cpp"
        break;

        case 446: /* copy_opt_item: OIDS  */
#line 3995 "gram.y"
        {
            (yyval.defelt) = makeDefElem("oids", (Node*) makeInteger(TRUE));
        }
#line 30323 "gram.cpp"
        break;

        case 447: /* copy_opt_item: FREEZE  */
#line 3999 "gram.y"
        {
            (yyval.defelt) = makeDefElem("freeze", (Node*) makeInteger(TRUE));
        }
#line 30331 "gram.cpp"
        break;

        case 448: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 4003 "gram.y"
        {
            (yyval.defelt) = makeDefElem("delimiter", (Node*) makeString((yyvsp[0].str)));
        }
#line 30339 "gram.cpp"
        break;

        case 449: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 4007 "gram.y"
        {
            (yyval.defelt) = makeDefElem("null", (Node*) makeString((yyvsp[0].str)));
        }
#line 30347 "gram.cpp"
        break;

        case 450: /* copy_opt_item: CSV  */
#line 4011 "gram.y"
        {
            (yyval.defelt) = makeDefElem("format", (Node*) makeString("csv"));
        }
#line 30355 "gram.cpp"
        break;

        case 451: /* copy_opt_item: HEADER_P  */
#line 4015 "gram.y"
        {
            (yyval.defelt) = makeDefElem("header", (Node*) makeInteger(TRUE));
        }
#line 30363 "gram.cpp"
        break;

        case 452: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 4019 "gram.y"
        {
            (yyval.defelt) = makeDefElem("quote", (Node*) makeString((yyvsp[0].str)));
        }
#line 30371 "gram.cpp"
        break;

        case 453: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 4023 "gram.y"
        {
            (yyval.defelt) = makeDefElem("escape", (Node*) makeString((yyvsp[0].str)));
        }
#line 30379 "gram.cpp"
        break;

        case 454: /* copy_opt_item: FORCE QUOTE columnList  */
#line 4027 "gram.y"
        {
            (yyval.defelt) = makeDefElem("force_quote", (Node*) (yyvsp[0].list));
        }
#line 30387 "gram.cpp"
        break;

        case 455: /* copy_opt_item: FORCE QUOTE '*'  */
#line 4031 "gram.y"
        {
            (yyval.defelt) = makeDefElem("force_quote", (Node*) makeNode(A_Star));
        }
#line 30395 "gram.cpp"
        break;

        case 456: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 4035 "gram.y"
        {
            (yyval.defelt) = makeDefElem("force_not_null", (Node*) (yyvsp[0].list));
        }
#line 30403 "gram.cpp"
        break;

        case 457: /* copy_opt_item: FORCE NULL_P columnList  */
#line 4039 "gram.y"
        {
            (yyval.defelt) = makeDefElem("force_null", (Node*) (yyvsp[0].list));
        }
#line 30411 "gram.cpp"
        break;

        case 458: /* copy_opt_item: ENCODING Sconst  */
#line 4043 "gram.y"
        {
            (yyval.defelt) = makeDefElem("encoding", (Node*) makeString((yyvsp[0].str)));
        }
#line 30419 "gram.cpp"
        break;

        case 459: /* copy_opt_item: FILL MISSING FIELDS  */
#line 4047 "gram.y"
        {
            (yyval.defelt) = makeDefElem("fill_missing_fields", (Node*) makeInteger(TRUE));
        }
#line 30427 "gram.cpp"
        break;

        case 460: /* copy_opt_item: NEWLINE opt_as Sconst  */
#line 4051 "gram.y"
        {
            (yyval.defelt) = makeDefElem("newline", (Node*) makeString((yyvsp[0].str)));
        }
#line 30435 "gram.cpp"
        break;

        case 461: /* copy_opt_item: ON SEGMENT  */
#line 4055 "gram.y"
        {
            (yyval.defelt) = makeDefElem("on_segment", (Node*) makeInteger(TRUE));
        }
#line 30443 "gram.cpp"
        break;

        case 462: /* opt_binary: BINARY  */
#line 4064 "gram.y"
        {
            (yyval.defelt) = makeDefElem("format", (Node*) makeString("binary"));
        }
#line 30451 "gram.cpp"
        break;

        case 463: /* opt_binary: %empty  */
#line 4067 "gram.y"
        {
            (yyval.defelt) = NULL;
        }
#line 30457 "gram.cpp"
        break;

        case 464: /* opt_oids: WITH OIDS  */
#line 4072 "gram.y"
        {
            (yyval.defelt) = makeDefElem("oids", (Node*) makeInteger(TRUE));
        }
#line 30465 "gram.cpp"
        break;

        case 465: /* opt_oids: %empty  */
#line 4075 "gram.y"
        {
            (yyval.defelt) = NULL;
        }
#line 30471 "gram.cpp"
        break;

        case 466: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 4080 "gram.y"
        {
            (yyval.defelt) = makeDefElem("delimiter", (Node*) makeString((yyvsp[0].str)));
        }
#line 30479 "gram.cpp"
        break;

        case 467: /* copy_delimiter: %empty  */
#line 4083 "gram.y"
        {
            (yyval.defelt) = NULL;
        }
#line 30485 "gram.cpp"
        break;

        case 468: /* opt_using: USING  */
#line 4087 "gram.y"
        {
        }
#line 30491 "gram.cpp"
        break;

        case 469: /* opt_using: %empty  */
#line 4088 "gram.y"
        {
        }
#line 30497 "gram.cpp"
        break;

        case 470: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 4094 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 30505 "gram.cpp"
        break;

        case 471: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 4098 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
        }
#line 30513 "gram.cpp"
        break;

        case 472: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 4105 "gram.y"
        {
            (yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node));
        }
#line 30521 "gram.cpp"
        break;

        case 473: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 4111 "gram.y"
        {
            (yyval.node) = (Node*) makeString((yyvsp[0].str));
        }
#line 30527 "gram.cpp"
        break;

        case 474: /* copy_generic_opt_arg: NumericOnly  */
#line 4112 "gram.y"
        {
            (yyval.node) = (Node*) (yyvsp[0].value);
        }
#line 30533 "gram.cpp"
        break;

        case 475: /* copy_generic_opt_arg: '*'  */
#line 4113 "gram.y"
        {
            (yyval.node) = (Node*) makeNode(A_Star);
        }
#line 30539 "gram.cpp"
        break;

        case 476: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 4114 "gram.y"
        {
            (yyval.node) = (Node*) (yyvsp[-1].list);
        }
#line 30545 "gram.cpp"
        break;

        case 477: /* copy_generic_opt_arg: %empty  */
#line 4115 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 30551 "gram.cpp"
        break;

        case 478: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 4120 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 30559 "gram.cpp"
        break;

        case 479: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 4124 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 30567 "gram.cpp"
        break;

        case 480: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 4131 "gram.y"
        {
            (yyval.node) = (Node*) makeString((yyvsp[0].str));
        }
#line 30573 "gram.cpp"
        break;

        case 481: /* CreateStmt: CREATE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptInherit OptWith OnCommitOption OptTableSpace OptDistributedBy OptTabPartitionBy  */
#line 4145 "gram.y"
        {
            CreateStmt* n = makeNode(CreateStmt);
            (yyvsp[-9].range)->relpersistence = (yyvsp[-11].ival);
            n->relation = (yyvsp[-9].range);
            n->tableElts = (yyvsp[-7].list);
            n->inhRelations = (yyvsp[-5].list);
            n->constraints = NIL;
            n->options = (yyvsp[-4].list);
            n->oncommit = (yyvsp[-3].oncommit);
            n->tablespacename = (yyvsp[-2].str);
            n->if_not_exists = false;
            n->distributedBy = (DistributedBy*) (yyvsp[-1].node);
            n->partitionBy = (yyvsp[0].node);
            n->relKind = RELKIND_RELATION;
            (yyval.node) = (Node*) n;
        }
#line 30594 "gram.cpp"
        break;

        case 482: /* CreateStmt: CREATE OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptInherit OptWith OnCommitOption OptTableSpace OptDistributedBy OptTabPartitionBy  */
#line 4165 "gram.y"
        {
            CreateStmt* n = makeNode(CreateStmt);
            (yyvsp[-9].range)->relpersistence = (yyvsp[-14].ival);
            n->relation = (yyvsp[-9].range);
            n->tableElts = (yyvsp[-7].list);
            n->inhRelations = (yyvsp[-5].list);
            n->constraints = NIL;
            n->options = (yyvsp[-4].list);
            n->oncommit = (yyvsp[-3].oncommit);
            n->tablespacename = (yyvsp[-2].str);
            n->if_not_exists = true;
            n->distributedBy = (DistributedBy*) (yyvsp[-1].node);
            n->partitionBy = (yyvsp[0].node);
            n->relKind = RELKIND_RELATION;
            (yyval.node) = (Node*) n;
        }
#line 30615 "gram.cpp"
        break;

        case 483: /* CreateStmt: CREATE OptTemp TABLE qualified_name OF any_name OptTypedTableElementList OptWith OnCommitOption OptTableSpace OptDistributedBy OptTabPartitionBy  */
#line 4184 "gram.y"
        {
            CreateStmt* n = makeNode(CreateStmt);
            (yyvsp[-8].range)->relpersistence = (yyvsp[-10].ival);
            n->relation = (yyvsp[-8].range);
            n->tableElts = (yyvsp[-5].list);
            n->ofTypename = makeTypeNameFromNameList((yyvsp[-6].list));
            n->ofTypename->location = (yylsp[-6]);
            n->constraints = NIL;
            n->options = (yyvsp[-4].list);
            n->oncommit = (yyvsp[-3].oncommit);
            n->tablespacename = (yyvsp[-2].str);
            n->if_not_exists = false;
            n->distributedBy = (DistributedBy*) (yyvsp[-1].node);
            n->partitionBy = (yyvsp[0].node);
            n->relKind = RELKIND_RELATION;
            (yyval.node) = (Node*) n;
        }
#line 30637 "gram.cpp"
        break;

        case 484: /* CreateStmt: CREATE OptTemp TABLE IF_P NOT EXISTS qualified_name OF any_name OptTypedTableElementList OptWith OnCommitOption OptTableSpace OptDistributedBy OptTabPartitionBy  */
#line 4204 "gram.y"
        {
            CreateStmt* n = makeNode(CreateStmt);
            (yyvsp[-8].range)->relpersistence = (yyvsp[-13].ival);
            n->relation = (yyvsp[-8].range);
            n->tableElts = (yyvsp[-5].list);
            n->ofTypename = makeTypeNameFromNameList((yyvsp[-6].list));
            n->ofTypename->location = (yylsp[-6]);
            n->constraints = NIL;
            n->options = (yyvsp[-4].list);
            n->oncommit = (yyvsp[-3].oncommit);
            n->tablespacename = (yyvsp[-2].str);
            n->if_not_exists = true;
            n->distributedBy = (DistributedBy*) (yyvsp[-1].node);
            n->partitionBy = (yyvsp[0].node);
            n->relKind = RELKIND_RELATION;
            (yyval.node) = (Node*) n;
        }
#line 30659 "gram.cpp"
        break;

        case 485: /* OptTemp: TEMPORARY  */
#line 4234 "gram.y"
        {
            (yyval.ival) = RELPERSISTENCE_TEMP;
        }
#line 30665 "gram.cpp"
        break;

        case 486: /* OptTemp: TEMP  */
#line 4235 "gram.y"
        {
            (yyval.ival) = RELPERSISTENCE_TEMP;
        }
#line 30671 "gram.cpp"
        break;

        case 487: /* OptTemp: LOCAL TEMPORARY  */
#line 4236 "gram.y"
        {
            (yyval.ival) = RELPERSISTENCE_TEMP;
        }
#line 30677 "gram.cpp"
        break;

        case 488: /* OptTemp: LOCAL TEMP  */
#line 4237 "gram.y"
        {
            (yyval.ival) = RELPERSISTENCE_TEMP;
        }
#line 30683 "gram.cpp"
        break;

        case 489: /* OptTemp: GLOBAL TEMPORARY  */
#line 4239 "gram.y"
        {
            ereport(WARNING,
                    errmsg("GLOBAL is deprecated in temporary table creation"),
                    parser_errposition((yylsp[-1])));
            (yyval.ival) = RELPERSISTENCE_TEMP;
        }
#line 30694 "gram.cpp"
        break;

        case 490: /* OptTemp: GLOBAL TEMP  */
#line 4246 "gram.y"
        {
            ereport(WARNING,
                    errmsg("GLOBAL is deprecated in temporary table creation"),
                    parser_errposition((yylsp[-1])));
            (yyval.ival) = RELPERSISTENCE_TEMP;
        }
#line 30705 "gram.cpp"
        break;

        case 491: /* OptTemp: UNLOGGED  */
#line 4252 "gram.y"
        {
            (yyval.ival) = RELPERSISTENCE_UNLOGGED;
        }
#line 30711 "gram.cpp"
        break;

        case 492: /* OptTemp: %empty  */
#line 4253 "gram.y"
        {
            (yyval.ival) = RELPERSISTENCE_PERMANENT;
        }
#line 30717 "gram.cpp"
        break;

        case 493: /* OptTableElementList: TableElementList  */
#line 4257 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 30723 "gram.cpp"
        break;

        case 494: /* OptTableElementList: %empty  */
#line 4258 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 30729 "gram.cpp"
        break;

        case 495: /* OptTypedTableElementList: '(' TypedTableElementList ')'  */
#line 4262 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 30735 "gram.cpp"
        break;

        case 496: /* OptTypedTableElementList: %empty  */
#line 4263 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 30741 "gram.cpp"
        break;

        case 497: /* TableElementList: TableElement  */
#line 4268 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 30749 "gram.cpp"
        break;

        case 498: /* TableElementList: TableElementList ',' TableElement  */
#line 4272 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 30757 "gram.cpp"
        break;

        case 499: /* TypedTableElementList: TypedTableElement  */
#line 4279 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 30765 "gram.cpp"
        break;

        case 500: /* TypedTableElementList: TypedTableElementList ',' TypedTableElement  */
#line 4283 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 30773 "gram.cpp"
        break;

        case 501: /* TableElement: columnDef  */
#line 4289 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 30779 "gram.cpp"
        break;

        case 502: /* TableElement: TableLikeClause  */
#line 4290 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 30785 "gram.cpp"
        break;

        case 503: /* TableElement: TableConstraint  */
#line 4291 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 30791 "gram.cpp"
        break;

        case 504: /* TableElement: column_reference_storage_directive  */
#line 4292 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 30797 "gram.cpp"
        break;

        case 505: /* TypedTableElement: columnOptions  */
#line 4296 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 30803 "gram.cpp"
        break;

        case 506: /* TypedTableElement: TableConstraint  */
#line 4297 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 30809 "gram.cpp"
        break;

        case 507: /* column_reference_storage_directive: COLUMN ColId ENCODING definition  */
#line 4302 "gram.y"
        {
            ColumnReferenceStorageDirective* n = makeNode(ColumnReferenceStorageDirective);

            n->column = (yyvsp[-2].str);
            n->encoding = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 30822 "gram.cpp"
        break;

        case 508: /* column_reference_storage_directive: DEFAULT COLUMN ENCODING definition  */
#line 4311 "gram.y"
        {
            ColumnReferenceStorageDirective* n = makeNode(ColumnReferenceStorageDirective);

            n->deflt = true;
            n->encoding = (yyvsp[0].list);

            (yyval.node) = (Node*) n;
        }
#line 30836 "gram.cpp"
        break;

        case 509: /* columnDef: ColId Typename create_generic_options ColQualList opt_storage_encoding  */
#line 4323 "gram.y"
        {
            ColumnDef* n = makeNode(ColumnDef);
            n->colname = (yyvsp[-4].str);
            n->typeName = (yyvsp[-3].typnam);
            n->inhcount = 0;
            n->is_local = true;
            n->encoding = (yyvsp[0].list);
            n->is_not_null = false;
            n->is_from_type = false;
            n->storage = 0;
            n->raw_default = NULL;
            n->cooked_default = NULL;
            n->collOid = InvalidOid;
            n->fdwoptions = (yyvsp[-2].list);
            SplitColQualList((yyvsp[-1].list), &n->constraints, &n->collClause, yyscanner);
            n->location = (yylsp[-4]);
            (yyval.node) = (Node*) n;
        }
#line 30860 "gram.cpp"
        break;

        case 510: /* columnOptions: ColId WITH OPTIONS ColQualList  */
#line 4345 "gram.y"
        {
            ColumnDef* n = makeNode(ColumnDef);
            n->colname = (yyvsp[-3].str);
            n->typeName = NULL;
            n->inhcount = 0;
            n->is_local = true;
            n->is_not_null = false;
            n->is_from_type = false;
            n->storage = 0;
            n->raw_default = NULL;
            n->cooked_default = NULL;
            n->collOid = InvalidOid;
            SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause, yyscanner);
            n->location = (yylsp[-3]);
            (yyval.node) = (Node*) n;
        }
#line 30882 "gram.cpp"
        break;

        case 511: /* ColQualList: ColQualList ColConstraint  */
#line 4365 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
        }
#line 30888 "gram.cpp"
        break;

        case 512: /* ColQualList: %empty  */
#line 4366 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 30894 "gram.cpp"
        break;

        case 513: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 4371 "gram.y"
        {
            Constraint* n = (Constraint*) (yyvsp[0].node);
            Assert(IsA(n, Constraint));
            n->conname = (yyvsp[-1].str);
            n->location = (yylsp[-2]);
            (yyval.node) = (Node*) n;
        }
#line 30906 "gram.cpp"
        break;

        case 514: /* ColConstraint: ColConstraintElem  */
#line 4378 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 30912 "gram.cpp"
        break;

        case 515: /* ColConstraint: ConstraintAttr  */
#line 4379 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 30918 "gram.cpp"
        break;

        case 516: /* ColConstraint: COLLATE any_name  */
#line 4381 "gram.y"
        {
            /*
					 * Note: the CollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
            CollateClause* n = makeNode(CollateClause);
            n->arg = NULL;
            n->collname = (yyvsp[0].list);
            n->location = (yylsp[-1]);
            (yyval.node) = (Node*) n;
        }
#line 30935 "gram.cpp"
        break;

        case 517: /* opt_storage_encoding: ENCODING definition  */
#line 4395 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 30941 "gram.cpp"
        break;

        case 518: /* opt_storage_encoding: %empty  */
#line 4396 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 30947 "gram.cpp"
        break;

        case 519: /* ColConstraintElem: NOT NULL_P  */
#line 4416 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_NOTNULL;
            n->location = (yylsp[-1]);
            (yyval.node) = (Node*) n;
        }
#line 30958 "gram.cpp"
        break;

        case 520: /* ColConstraintElem: NULL_P  */
#line 4423 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_NULL;
            n->location = (yylsp[0]);
            (yyval.node) = (Node*) n;
        }
#line 30969 "gram.cpp"
        break;

        case 521: /* ColConstraintElem: UNIQUE opt_definition OptConsTableSpace  */
#line 4430 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_UNIQUE;
            n->location = (yylsp[-2]);
            n->keys = NULL;
            n->options = (yyvsp[-1].list);
            n->indexname = NULL;
            n->indexspace = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 30984 "gram.cpp"
        break;

        case 522: /* ColConstraintElem: PRIMARY KEY opt_definition OptConsTableSpace  */
#line 4441 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_PRIMARY;
            n->location = (yylsp[-3]);
            n->keys = NULL;
            n->options = (yyvsp[-1].list);
            n->indexname = NULL;
            n->indexspace = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 30999 "gram.cpp"
        break;

        case 523: /* ColConstraintElem: CHECK '(' a_expr ')' opt_no_inherit  */
#line 4452 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_CHECK;
            n->location = (yylsp[-4]);
            n->is_no_inherit = (yyvsp[0].boolean);
            n->raw_expr = (yyvsp[-2].node);
            n->cooked_expr = NULL;
            (yyval.node) = (Node*) n;
        }
#line 31013 "gram.cpp"
        break;

        case 524: /* ColConstraintElem: DEFAULT b_expr  */
#line 4462 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_DEFAULT;
            n->location = (yylsp[-1]);
            n->raw_expr = (yyvsp[0].node);
            n->cooked_expr = NULL;
            (yyval.node) = (Node*) n;
        }
#line 31026 "gram.cpp"
        break;

        case 525: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 4471 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_FOREIGN;
            n->location = (yylsp[-4]);
            n->pktable = (yyvsp[-3].range);
            n->fk_attrs = NIL;
            n->pk_attrs = (yyvsp[-2].list);
            n->fk_matchtype = (yyvsp[-1].ival);
            n->fk_upd_action = (char) ((yyvsp[0].ival) >> 8);
            n->fk_del_action = (char) ((yyvsp[0].ival) & 0xFF);
            n->skip_validation = false;
            n->initially_valid = true;
            (yyval.node) = (Node*) n;
        }
#line 31045 "gram.cpp"
        break;

        case 526: /* ConstraintAttr: DEFERRABLE  */
#line 4504 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_ATTR_DEFERRABLE;
            n->location = (yylsp[0]);
            (yyval.node) = (Node*) n;
        }
#line 31056 "gram.cpp"
        break;

        case 527: /* ConstraintAttr: NOT DEFERRABLE  */
#line 4511 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_ATTR_NOT_DEFERRABLE;
            n->location = (yylsp[-1]);
            (yyval.node) = (Node*) n;
        }
#line 31067 "gram.cpp"
        break;

        case 528: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 4518 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_ATTR_DEFERRED;
            n->location = (yylsp[-1]);
            (yyval.node) = (Node*) n;
        }
#line 31078 "gram.cpp"
        break;

        case 529: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 4525 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_ATTR_IMMEDIATE;
            n->location = (yylsp[-1]);
            (yyval.node) = (Node*) n;
        }
#line 31089 "gram.cpp"
        break;

        case 530: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 4536 "gram.y"
        {
            TableLikeClause* n = makeNode(TableLikeClause);
            n->relation = (yyvsp[-1].range);
            n->options = (yyvsp[0].ival);
            (yyval.node) = (Node*) n;
        }
#line 31100 "gram.cpp"
        break;

        case 531: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 4545 "gram.y"
        {
            (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival);
        }
#line 31106 "gram.cpp"
        break;

        case 532: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 4546 "gram.y"
        {
            (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival);
        }
#line 31112 "gram.cpp"
        break;

        case 533: /* TableLikeOptionList: %empty  */
#line 4547 "gram.y"
        {
            (yyval.ival) = 0;
        }
#line 31118 "gram.cpp"
        break;

        case 534: /* TableLikeOption: DEFAULTS  */
#line 4551 "gram.y"
        {
            (yyval.ival) = CREATE_TABLE_LIKE_DEFAULTS;
        }
#line 31124 "gram.cpp"
        break;

        case 535: /* TableLikeOption: CONSTRAINTS  */
#line 4552 "gram.y"
        {
            (yyval.ival) = CREATE_TABLE_LIKE_CONSTRAINTS;
        }
#line 31130 "gram.cpp"
        break;

        case 536: /* TableLikeOption: INDEXES  */
#line 4553 "gram.y"
        {
            (yyval.ival) = CREATE_TABLE_LIKE_INDEXES;
        }
#line 31136 "gram.cpp"
        break;

        case 537: /* TableLikeOption: STORAGE  */
#line 4554 "gram.y"
        {
            (yyval.ival) = CREATE_TABLE_LIKE_STORAGE;
        }
#line 31142 "gram.cpp"
        break;

        case 538: /* TableLikeOption: COMMENTS  */
#line 4555 "gram.y"
        {
            (yyval.ival) = CREATE_TABLE_LIKE_COMMENTS;
        }
#line 31148 "gram.cpp"
        break;

        case 539: /* TableLikeOption: ALL  */
#line 4556 "gram.y"
        {
            (yyval.ival) = CREATE_TABLE_LIKE_ALL;
        }
#line 31154 "gram.cpp"
        break;

        case 540: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 4566 "gram.y"
        {
            Constraint* n = (Constraint*) (yyvsp[0].node);
            Assert(IsA(n, Constraint));
            n->conname = (yyvsp[-1].str);
            n->location = (yylsp[-2]);
            (yyval.node) = (Node*) n;
        }
#line 31166 "gram.cpp"
        break;

        case 541: /* TableConstraint: ConstraintElem  */
#line 4573 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 31172 "gram.cpp"
        break;

        case 542: /* ConstraintElem: CHECK '(' a_expr ')' ConstraintAttributeSpec  */
#line 4578 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_CHECK;
            n->location = (yylsp[-4]);
            n->raw_expr = (yyvsp[-2].node);
            n->cooked_expr = NULL;
            processCASbits((yyvsp[0].ival),
                           (yylsp[0]),
                           "CHECK",
                           NULL,
                           NULL,
                           &n->skip_validation,
                           &n->is_no_inherit,
                           yyscanner);
            n->initially_valid = !n->skip_validation;
            (yyval.node) = (Node*) n;
        }
#line 31189 "gram.cpp"
        break;

        case 543: /* ConstraintElem: UNIQUE '(' columnList ')' opt_definition OptConsTableSpace ConstraintAttributeSpec  */
#line 4592 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_UNIQUE;
            n->location = (yylsp[-6]);
            n->keys = (yyvsp[-4].list);
            n->options = (yyvsp[-2].list);
            n->indexname = NULL;
            n->indexspace = (yyvsp[-1].str);
            processCASbits((yyvsp[0].ival),
                           (yylsp[0]),
                           "UNIQUE",
                           &n->deferrable,
                           &n->initdeferred,
                           NULL,
                           NULL,
                           yyscanner);
            (yyval.node) = (Node*) n;
        }
#line 31207 "gram.cpp"
        break;

        case 544: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 4606 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_UNIQUE;
            n->location = (yylsp[-2]);
            n->keys = NIL;
            n->options = NIL;
            n->indexname = (yyvsp[-1].str);
            n->indexspace = NULL;
            processCASbits((yyvsp[0].ival),
                           (yylsp[0]),
                           "UNIQUE",
                           &n->deferrable,
                           &n->initdeferred,
                           NULL,
                           NULL,
                           yyscanner);
            (yyval.node) = (Node*) n;
        }
#line 31225 "gram.cpp"
        break;

        case 545: /* ConstraintElem: PRIMARY KEY '(' columnList ')' opt_definition OptConsTableSpace ConstraintAttributeSpec  */
#line 4621 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_PRIMARY;
            n->location = (yylsp[-7]);
            n->keys = (yyvsp[-4].list);
            n->options = (yyvsp[-2].list);
            n->indexname = NULL;
            n->indexspace = (yyvsp[-1].str);
            processCASbits((yyvsp[0].ival),
                           (yylsp[0]),
                           "PRIMARY KEY",
                           &n->deferrable,
                           &n->initdeferred,
                           NULL,
                           NULL,
                           yyscanner);
            (yyval.node) = (Node*) n;
        }
#line 31243 "gram.cpp"
        break;

        case 546: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 4635 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_PRIMARY;
            n->location = (yylsp[-3]);
            n->keys = NIL;
            n->options = NIL;
            n->indexname = (yyvsp[-1].str);
            n->indexspace = NULL;
            processCASbits((yyvsp[0].ival),
                           (yylsp[0]),
                           "PRIMARY KEY",
                           &n->deferrable,
                           &n->initdeferred,
                           NULL,
                           NULL,
                           yyscanner);
            (yyval.node) = (Node*) n;
        }
#line 31261 "gram.cpp"
        break;

        case 547: /* ConstraintElem: EXCLUDE access_method_clause '(' ExclusionConstraintList ')' opt_definition OptConsTableSpace ExclusionWhereClause ConstraintAttributeSpec  */
#line 4651 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_EXCLUSION;
            n->location = (yylsp[-8]);
            n->access_method = (yyvsp[-7].str);
            n->exclusions = (yyvsp[-5].list);
            n->options = (yyvsp[-3].list);
            n->indexname = NULL;
            n->indexspace = (yyvsp[-2].str);
            n->where_clause = (yyvsp[-1].node);
            processCASbits((yyvsp[0].ival),
                           (yylsp[0]),
                           "EXCLUDE",
                           &n->deferrable,
                           &n->initdeferred,
                           NULL,
                           NULL,
                           yyscanner);
            (yyval.node) = (Node*) n;
        }
#line 31281 "gram.cpp"
        break;

        case 548: /* ConstraintElem: FOREIGN KEY '(' columnList ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 4668 "gram.y"
        {
            Constraint* n = makeNode(Constraint);
            n->contype = CONSTR_FOREIGN;
            n->location = (yylsp[-10]);
            n->pktable = (yyvsp[-4].range);
            n->fk_attrs = (yyvsp[-7].list);
            n->pk_attrs = (yyvsp[-3].list);
            n->fk_matchtype = (yyvsp[-2].ival);
            n->fk_upd_action = (char) ((yyvsp[-1].ival) >> 8);
            n->fk_del_action = (char) ((yyvsp[-1].ival) & 0xFF);
            processCASbits((yyvsp[0].ival),
                           (yylsp[0]),
                           "FOREIGN KEY",
                           &n->deferrable,
                           &n->initdeferred,
                           &n->skip_validation,
                           NULL,
                           yyscanner);
            n->initially_valid = !n->skip_validation;
            (yyval.node) = (Node*) n;
        }
#line 31303 "gram.cpp"
        break;

        case 549: /* opt_no_inherit: NO INHERIT  */
#line 4687 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 31309 "gram.cpp"
        break;

        case 550: /* opt_no_inherit: %empty  */
#line 4688 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 31315 "gram.cpp"
        break;

        case 551: /* opt_column_list: '(' columnList ')'  */
#line 4692 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 31321 "gram.cpp"
        break;

        case 552: /* opt_column_list: %empty  */
#line 4693 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 31327 "gram.cpp"
        break;

        case 553: /* columnList: columnElem  */
#line 4697 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 31333 "gram.cpp"
        break;

        case 554: /* columnList: columnList ',' columnElem  */
#line 4698 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 31339 "gram.cpp"
        break;

        case 555: /* columnElem: ColId  */
#line 4702 "gram.y"
        {
            (yyval.node) = (Node*) makeString((yyvsp[0].str));
        }
#line 31347 "gram.cpp"
        break;

        case 556: /* distributed_by_list: distributed_by_elem  */
#line 4708 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].ielem));
        }
#line 31353 "gram.cpp"
        break;

        case 557: /* distributed_by_list: distributed_by_list ',' distributed_by_elem  */
#line 4710 "gram.y"
        {
            IndexElem* newelem = (yyvsp[0].ielem);
            ListCell* lc;

            foreach (lc, (yyvsp[-2].list)) {
                IndexElem* oldelem = (IndexElem*) lfirst(lc);

                if (strcmp(oldelem->name, newelem->name) == 0)
                    ereport(ERROR,
                            errcode(ERRCODE_DUPLICATE_COLUMN),
                            errmsg("duplicate column in DISTRIBUTED BY clause"),
                            parser_errposition((yylsp[0])));
            }

            (yyval.list) = lappend((yyvsp[-2].list), newelem);
        }
#line 31375 "gram.cpp"
        break;

        case 558: /* distributed_by_elem: ColId opt_class  */
#line 4730 "gram.y"
        {
            /*
					 * only these fields are used, leave others as 0/NULL
					 */
            (yyval.ielem) = makeNode(IndexElem);
            (yyval.ielem)->name = (yyvsp[-1].str);
            (yyval.ielem)->opclass = (yyvsp[0].list);
        }
#line 31388 "gram.cpp"
        break;

        case 559: /* key_match: MATCH FULL  */
#line 4741 "gram.y"
        {
            (yyval.ival) = FKCONSTR_MATCH_FULL;
        }
#line 31396 "gram.cpp"
        break;

        case 560: /* key_match: MATCH PARTIAL  */
#line 4745 "gram.y"
        {
            ereport(ERROR,
                    errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                    errmsg("MATCH PARTIAL not yet implemented"),
                    parser_errposition((yylsp[-1])));
            (yyval.ival) = FKCONSTR_MATCH_PARTIAL;
        }
#line 31408 "gram.cpp"
        break;

        case 561: /* key_match: MATCH SIMPLE  */
#line 4753 "gram.y"
        {
            (yyval.ival) = FKCONSTR_MATCH_SIMPLE;
        }
#line 31416 "gram.cpp"
        break;

        case 562: /* key_match: %empty  */
#line 4757 "gram.y"
        {
            (yyval.ival) = FKCONSTR_MATCH_SIMPLE;
        }
#line 31424 "gram.cpp"
        break;

        case 563: /* ExclusionConstraintList: ExclusionConstraintElem  */
#line 4763 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].list));
        }
#line 31430 "gram.cpp"
        break;

        case 564: /* ExclusionConstraintList: ExclusionConstraintList ',' ExclusionConstraintElem  */
#line 4765 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list));
        }
#line 31436 "gram.cpp"
        break;

        case 565: /* ExclusionConstraintElem: index_elem WITH any_operator  */
#line 4769 "gram.y"
        {
            (yyval.list) = list_make2((yyvsp[-2].ielem), (yyvsp[0].list));
        }
#line 31444 "gram.cpp"
        break;

        case 566: /* ExclusionConstraintElem: index_elem WITH OPERATOR '(' any_operator ')'  */
#line 4774 "gram.y"
        {
            (yyval.list) = list_make2((yyvsp[-5].ielem), (yyvsp[-1].list));
        }
#line 31452 "gram.cpp"
        break;

        case 567: /* ExclusionWhereClause: WHERE '(' a_expr ')'  */
#line 4780 "gram.y"
        {
            (yyval.node) = (yyvsp[-1].node);
        }
#line 31458 "gram.cpp"
        break;

        case 568: /* ExclusionWhereClause: %empty  */
#line 4781 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 31464 "gram.cpp"
        break;

        case 569: /* key_actions: key_update  */
#line 4792 "gram.y"
        {
            (yyval.ival) = ((yyvsp[0].ival) << 8) | (FKCONSTR_ACTION_NOACTION & 0xFF);
        }
#line 31470 "gram.cpp"
        break;

        case 570: /* key_actions: key_delete  */
#line 4794 "gram.y"
        {
            (yyval.ival) = (FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF);
        }
#line 31476 "gram.cpp"
        break;

        case 571: /* key_actions: key_update key_delete  */
#line 4796 "gram.y"
        {
            (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF);
        }
#line 31482 "gram.cpp"
        break;

        case 572: /* key_actions: key_delete key_update  */
#line 4798 "gram.y"
        {
            (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF);
        }
#line 31488 "gram.cpp"
        break;

        case 573: /* key_actions: %empty  */
#line 4800 "gram.y"
        {
            (yyval.ival) = (FKCONSTR_ACTION_NOACTION << 8) | (FKCONSTR_ACTION_NOACTION & 0xFF);
        }
#line 31494 "gram.cpp"
        break;

        case 574: /* key_update: ON UPDATE key_action  */
#line 4803 "gram.y"
        {
            (yyval.ival) = (yyvsp[0].ival);
        }
#line 31500 "gram.cpp"
        break;

        case 575: /* key_delete: ON DELETE_P key_action  */
#line 4806 "gram.y"
        {
            (yyval.ival) = (yyvsp[0].ival);
        }
#line 31506 "gram.cpp"
        break;

        case 576: /* key_action: NO ACTION  */
#line 4810 "gram.y"
        {
            (yyval.ival) = FKCONSTR_ACTION_NOACTION;
        }
#line 31512 "gram.cpp"
        break;

        case 577: /* key_action: RESTRICT  */
#line 4811 "gram.y"
        {
            (yyval.ival) = FKCONSTR_ACTION_RESTRICT;
        }
#line 31518 "gram.cpp"
        break;

        case 578: /* key_action: CASCADE  */
#line 4812 "gram.y"
        {
            (yyval.ival) = FKCONSTR_ACTION_CASCADE;
        }
#line 31524 "gram.cpp"
        break;

        case 579: /* key_action: SET NULL_P  */
#line 4813 "gram.y"
        {
            (yyval.ival) = FKCONSTR_ACTION_SETNULL;
        }
#line 31530 "gram.cpp"
        break;

        case 580: /* key_action: SET DEFAULT  */
#line 4814 "gram.y"
        {
            (yyval.ival) = FKCONSTR_ACTION_SETDEFAULT;
        }
#line 31536 "gram.cpp"
        break;

        case 581: /* OptInherit: INHERITS '(' qualified_name_list ')'  */
#line 4817 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 31542 "gram.cpp"
        break;

        case 582: /* OptInherit: %empty  */
#line 4818 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 31548 "gram.cpp"
        break;

        case 583: /* OptWith: WITH reloptions  */
#line 4823 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 31554 "gram.cpp"
        break;

        case 584: /* OptWith: WITH OIDS  */
#line 4824 "gram.y"
        {
            (yyval.list) = list_make1(defWithOids(true));
        }
#line 31560 "gram.cpp"
        break;

        case 585: /* OptWith: WITHOUT OIDS  */
#line 4825 "gram.y"
        {
            (yyval.list) = list_make1(defWithOids(false));
        }
#line 31566 "gram.cpp"
        break;

        case 586: /* OptWith: %empty  */
#line 4826 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 31572 "gram.cpp"
        break;

        case 587: /* OnCommitOption: ON COMMIT DROP  */
#line 4829 "gram.y"
        {
            (yyval.oncommit) = ONCOMMIT_DROP;
        }
#line 31578 "gram.cpp"
        break;

        case 588: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 4830 "gram.y"
        {
            (yyval.oncommit) = ONCOMMIT_DELETE_ROWS;
        }
#line 31584 "gram.cpp"
        break;

        case 589: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 4831 "gram.y"
        {
            (yyval.oncommit) = ONCOMMIT_PRESERVE_ROWS;
        }
#line 31590 "gram.cpp"
        break;

        case 590: /* OnCommitOption: %empty  */
#line 4832 "gram.y"
        {
            (yyval.oncommit) = ONCOMMIT_NOOP;
        }
#line 31596 "gram.cpp"
        break;

        case 591: /* OptTableSpace: TABLESPACE name  */
#line 4835 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 31602 "gram.cpp"
        break;

        case 592: /* OptTableSpace: %empty  */
#line 4836 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 31608 "gram.cpp"
        break;

        case 593: /* OptConsTableSpace: USING INDEX TABLESPACE name  */
#line 4839 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 31614 "gram.cpp"
        break;

        case 594: /* OptConsTableSpace: %empty  */
#line 4840 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 31620 "gram.cpp"
        break;

        case 595: /* ExistingIndex: USING INDEX index_name  */
#line 4843 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 31626 "gram.cpp"
        break;

        case 596: /* optNumsegments: SEGMENTS ICONST  */
#line 4848 "gram.y"
        {
            (yyval.ival) = (yyvsp[0].ival);
        }
#line 31634 "gram.cpp"
        break;

        case 597: /* optNumsegments: %empty  */
#line 4852 "gram.y"
        {
            (yyval.ival) = -1;
        }
#line 31642 "gram.cpp"
        break;

        case 598: /* DistributedBy: DISTRIBUTED BY '(' distributed_by_list ')' optNumsegments  */
#line 4858 "gram.y"
        {
            DistributedBy* distributedBy = makeNode(DistributedBy);
            distributedBy->ptype = POLICYTYPE_PARTITIONED;
            distributedBy->numsegments = (yyvsp[0].ival);
            distributedBy->keyCols = (yyvsp[-2].list);
            (yyval.node) = (Node*) distributedBy;
        }
#line 31654 "gram.cpp"
        break;

        case 599: /* DistributedBy: DISTRIBUTED RANDOMLY optNumsegments  */
#line 4866 "gram.y"
        {
            DistributedBy* distributedBy = makeNode(DistributedBy);
            distributedBy->ptype = POLICYTYPE_PARTITIONED;
            distributedBy->numsegments = (yyvsp[0].ival);
            distributedBy->keyCols = NIL;
            (yyval.node) = (Node*) distributedBy;
        }
#line 31666 "gram.cpp"
        break;

        case 600: /* DistributedBy: DISTRIBUTED REPLICATED  */
#line 4874 "gram.y"
        {
            DistributedBy* distributedBy = makeNode(DistributedBy);
            distributedBy->ptype = POLICYTYPE_REPLICATED;
            distributedBy->numsegments = -1;
            distributedBy->keyCols = NIL;
            (yyval.node) = (Node*) distributedBy;
        }
#line 31678 "gram.cpp"
        break;

        case 601: /* DistributedBy: DISTRIBUTED LOCAL  */
#line 4882 "gram.y"
        {
            DistributedBy* distributedBy = makeNode(DistributedBy);
            distributedBy->ptype = POLICYTYPE_LOCAL;
            distributedBy->numsegments = -1;
            distributedBy->keyCols = NIL;
            (yyval.node) = (Node*) distributedBy;

        }
#line 31691 "gram.cpp"
        break;

        case 602: /* OptDistributedBy: DistributedBy  */
#line 4892 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 31697 "gram.cpp"
        break;

        case 603: /* OptDistributedBy: %empty  */
#line 4893 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 31703 "gram.cpp"
        break;

        case 604: /* OptTabPartitionColumnEncList: TabPartitionColumnEncList  */
#line 4898 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 31709 "gram.cpp"
        break;

        case 605: /* OptTabPartitionColumnEncList: %empty  */
#line 4899 "gram.y"
        {
            (yyval.list) = NULL;
        }
#line 31715 "gram.cpp"
        break;

        case 606: /* TabPartitionColumnEncList: column_reference_storage_directive  */
#line 4903 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 31721 "gram.cpp"
        break;

        case 607: /* TabPartitionColumnEncList: TabPartitionColumnEncList column_reference_storage_directive  */
#line 4905 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
        }
#line 31729 "gram.cpp"
        break;

        case 608: /* OptTabPartitionStorageAttr: WITH definition TABLESPACE name  */
#line 4911 "gram.y"
        {
            /* re-use alterpartitioncmd struct here... */
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            pc->partid = NULL;
            pc->arg1 = (Node*) (yyvsp[-2].list);
            pc->arg2 = (Node*) makeString((yyvsp[0].str));
            pc->location = (yylsp[-3]);
            (yyval.node) = (Node*) pc;
        }
#line 31743 "gram.cpp"
        break;

        case 609: /* OptTabPartitionStorageAttr: WITH definition  */
#line 4921 "gram.y"
        {
            /* re-use alterpartitioncmd struct here... */
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            pc->partid = NULL;
            pc->arg1 = (Node*) (yyvsp[0].list);
            pc->arg2 = NULL;
            pc->location = (yylsp[-1]);
            (yyval.node) = (Node*) pc;
        }
#line 31757 "gram.cpp"
        break;

        case 610: /* OptTabPartitionStorageAttr: TABLESPACE name  */
#line 4931 "gram.y"
        {
            /* re-use alterpartitioncmd struct here... */
            AlterPartitionCmd* pc = makeNode(AlterPartitionCmd);
            pc->partid = NULL;
            pc->arg1 = NULL;
            pc->arg2 = (Node*) makeString((yyvsp[0].str));
            pc->location = (yylsp[-1]);
            (yyval.node) = (Node*) pc;
        }
#line 31771 "gram.cpp"
        break;

        case 611: /* OptTabPartitionStorageAttr: %empty  */
#line 4940 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 31777 "gram.cpp"
        break;

        case 612: /* OptTabPartitionSpec: '(' TabPartitionElemList ')'  */
#line 4944 "gram.y"
        {
            PartitionSpec* n = makeNode(PartitionSpec);
            n->partElem = (yyvsp[-1].list);
            n->subSpec = NULL;
            n->location = (yylsp[-1]);
            (yyval.node) = (Node*) n;
        }
#line 31789 "gram.cpp"
        break;

        case 613: /* OptTabPartitionSpec: %empty  */
#line 4951 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 31795 "gram.cpp"
        break;

        case 614: /* OptTabSubPartitionSpec: '(' TabSubPartitionElemList ')'  */
#line 4956 "gram.y"
        {
            PartitionSpec* n = makeNode(PartitionSpec);
            n->partElem = (yyvsp[-1].list);
            n->subSpec = NULL;
            n->location = (yylsp[-1]);
            (yyval.node) = (Node*) n;
        }
#line 31807 "gram.cpp"
        break;

        case 615: /* OptTabSubPartitionSpec: %empty  */
#line 4963 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 31813 "gram.cpp"
        break;

        case 616: /* TabPartitionElemList: TabPartitionElem  */
#line 4967 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 31819 "gram.cpp"
        break;

        case 617: /* TabPartitionElemList: TabPartitionElemList ',' TabPartitionElem  */
#line 4969 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 31825 "gram.cpp"
        break;

        case 618: /* TabSubPartitionElemList: TabSubPartitionElem  */
#line 4972 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 31831 "gram.cpp"
        break;

        case 619: /* TabSubPartitionElemList: TabSubPartitionElemList ',' TabSubPartitionElem  */
#line 4974 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 31837 "gram.cpp"
        break;

        case 620: /* tab_part_val_no_paran: AexprConst  */
#line 4977 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 31843 "gram.cpp"
        break;

        case 621: /* tab_part_val_no_paran: CAST '(' tab_part_val AS Typename ')'  */
#line 4979 "gram.y"
        {
            (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), (yylsp[-2]));
        }
#line 31851 "gram.cpp"
        break;

        case 622: /* tab_part_val_no_paran: tab_part_val_no_paran TYPECAST Typename  */
#line 4983 "gram.y"
        {
            (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1]));
        }
#line 31859 "gram.cpp"
        break;

        case 623: /* tab_part_val_no_paran: '-' tab_part_val_no_paran  */
#line 4986 "gram.y"
        {
            (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1]));
        }
#line 31865 "gram.cpp"
        break;

        case 624: /* tab_part_val: tab_part_val_no_paran  */
#line 4989 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 31871 "gram.cpp"
        break;

        case 625: /* tab_part_val: '(' tab_part_val_no_paran ')'  */
#line 4990 "gram.y"
        {
            (yyval.node) = (yyvsp[-1].node);
        }
#line 31877 "gram.cpp"
        break;

        case 626: /* tab_part_val: '(' tab_part_val_no_paran ')' TYPECAST Typename  */
#line 4992 "gram.y"
        {
            (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[0].typnam), (yylsp[-1]));
        }
#line 31885 "gram.cpp"
        break;

        case 627: /* TabPartitionBoundarySpecValList: tab_part_val  */
#line 4998 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 31891 "gram.cpp"
        break;

        case 628: /* TabPartitionBoundarySpecValList: TabPartitionBoundarySpecValList ',' tab_part_val  */
#line 5000 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 31897 "gram.cpp"
        break;

        case 629: /* OptTabPartitionRangeInclusive: INCLUSIVE  */
#line 5004 "gram.y"
        {
            (yyval.ival) = PART_EDGE_INCLUSIVE;
        }
#line 31903 "gram.cpp"
        break;

        case 630: /* OptTabPartitionRangeInclusive: EXCLUSIVE  */
#line 5005 "gram.y"
        {
            (yyval.ival) = PART_EDGE_EXCLUSIVE;
        }
#line 31909 "gram.cpp"
        break;

        case 631: /* OptTabPartitionRangeInclusive: %empty  */
#line 5006 "gram.y"
        {
            (yyval.ival) = PART_EDGE_UNSPECIFIED;
        }
#line 31915 "gram.cpp"
        break;

        case 632: /* TabPartitionBoundarySpecStart: START '(' TabPartitionBoundarySpecValList ')' OptTabPartitionRangeInclusive  */
#line 5013 "gram.y"
        {
            PartitionRangeItem* n = makeNode(PartitionRangeItem);
            n->partRangeVal = (yyvsp[-2].list);
            if (!((yyvsp[0].ival)))
                n->partedge = PART_EDGE_INCLUSIVE;
            else
                n->partedge = static_cast<PartitionEdgeBounding>((yyvsp[0].ival));
            n->location = (yylsp[-4]);
            (yyval.node) = (Node*) n;
        }
#line 31930 "gram.cpp"
        break;

        case 633: /* TabPartitionBoundarySpecEnd: END_P '(' TabPartitionBoundarySpecValList ')' OptTabPartitionRangeInclusive  */
#line 5029 "gram.y"
        {
            PartitionRangeItem* n = makeNode(PartitionRangeItem);
            n->partRangeVal = (yyvsp[-2].list);
            if (!((yyvsp[0].ival)))
                n->partedge = PART_EDGE_EXCLUSIVE;
            else
                n->partedge = static_cast<PartitionEdgeBounding>((yyvsp[0].ival));
            n->location = (yylsp[-4]);
            (yyval.node) = (Node*) n;
        }
#line 31945 "gram.cpp"
        break;

        case 634: /* OptTabPartitionBoundarySpecEvery: EVERY '(' TabPartitionBoundarySpecValList ')'  */
#line 5043 "gram.y"
        {
            PartitionRangeItem* n = makeNode(PartitionRangeItem);
            n->partRangeVal = (yyvsp[-1].list);
            n->location = (yylsp[-3]);

            (yyval.node) = (Node*) n;
        }
#line 31957 "gram.cpp"
        break;

        case 635: /* OptTabPartitionBoundarySpecEvery: %empty  */
#line 5050 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 31963 "gram.cpp"
        break;

        case 636: /* OptTabPartitionBoundarySpecEnd: TabPartitionBoundarySpecEnd  */
#line 5054 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 31969 "gram.cpp"
        break;

        case 637: /* OptTabPartitionBoundarySpecEnd: %empty  */
#line 5055 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 31975 "gram.cpp"
        break;

        case 638: /* TabPartitionBoundarySpec: part_values_clause  */
#line 5061 "gram.y"
        {
            PartitionValuesSpec* n = makeNode(PartitionValuesSpec);

            n->partValues = (yyvsp[0].list);
            n->location = (yylsp[0]);
            (yyval.node) = (Node*) n;
        }
#line 31987 "gram.cpp"
        break;

        case 639: /* TabPartitionBoundarySpec: TabPartitionBoundarySpecStart OptTabPartitionBoundarySpecEnd OptTabPartitionBoundarySpecEvery  */
#line 5071 "gram.y"
        {
            PartitionBoundSpec* n = makeNode(PartitionBoundSpec);
            n->partStart = (yyvsp[-2].node);
            n->partEnd = (yyvsp[-1].node);
            n->partEvery = (yyvsp[0].node);
            n->everyGenList = NIL;
            n->pWithTnameStr = NULL;
            n->location = (yylsp[-2]);
            (yyval.node) = (Node*) n;
        }
#line 32002 "gram.cpp"
        break;

        case 640: /* TabPartitionBoundarySpec: TabPartitionBoundarySpecEnd OptTabPartitionBoundarySpecEvery  */
#line 5083 "gram.y"
        {
            PartitionBoundSpec* n = makeNode(PartitionBoundSpec);
            n->partStart = NULL;
            n->partEnd = (yyvsp[-1].node);
            n->partEvery = (yyvsp[0].node);
            n->everyGenList = NIL;
            n->pWithTnameStr = NULL;
            n->location = (yylsp[-1]);
            (yyval.node) = (Node*) n;
        }
#line 32017 "gram.cpp"
        break;

        case 641: /* OptTabPartitionBoundarySpec: TabPartitionBoundarySpec  */
#line 5096 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 32023 "gram.cpp"
        break;

        case 642: /* OptTabPartitionBoundarySpec: %empty  */
#line 5097 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 32029 "gram.cpp"
        break;

        case 643: /* multi_spec_value_list: '(' part_values_single ')'  */
#line 5101 "gram.y"
        {
            ListCell* lc;
            List* out = NIL;

            foreach (lc, (yyvsp[-1].list))
                out = lappend(out, linitial(reinterpret_cast<const PGList*>(lfirst(lc))));

            (yyval.list) = list_make1(out);
        }
#line 32043 "gram.cpp"
        break;

        case 644: /* multi_spec_value_list: multi_spec_value_list ',' '(' part_values_single ')'  */
#line 5111 "gram.y"
        {
            ListCell* lc;
            List* out = NIL;

            foreach (lc, (yyvsp[-1].list))
                out = lappend(out, linitial(reinterpret_cast<const PGList*>(lfirst(lc))));

            (yyval.list) = lappend((yyvsp[-4].list), out);
        }
#line 32057 "gram.cpp"
        break;

        case 645: /* part_values_single: tab_part_val_no_paran  */
#line 5123 "gram.y"
        {
            (yyval.list) = list_make1(list_make1((yyvsp[0].node)));
        }
#line 32065 "gram.cpp"
        break;

        case 646: /* part_values_single: part_values_single ',' tab_part_val_no_paran  */
#line 5127 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), list_make1((yyvsp[0].node)));
        }
#line 32073 "gram.cpp"
        break;

        case 647: /* part_values_clause: VALUES '(' part_values_single ')'  */
#line 5134 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 32081 "gram.cpp"
        break;

        case 648: /* part_values_clause: VALUES '(' multi_spec_value_list ')'  */
#line 5138 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 32089 "gram.cpp"
        break;

        case 649: /* part_values_or_spec_list: TabPartitionBoundarySpecValList  */
#line 5143 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 32095 "gram.cpp"
        break;

        case 650: /* part_values_or_spec_list: part_values_clause  */
#line 5144 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 32101 "gram.cpp"
        break;

        case 651: /* TabPartitionElem: TabPartitionNameDecl OptTabPartitionBoundarySpec OptTabPartitionStorageAttr OptTabPartitionColumnEncList OptTabSubPartitionSpec  */
#line 5153 "gram.y"
        {
            PartitionElem* n = makeNode(PartitionElem);
            n->partName = (yyvsp[-4].str);
            n->boundSpec = (yyvsp[-3].node);
            n->subSpec = (yyvsp[0].node);
            n->location = (yylsp[-4]);
            n->isDefault = 0;
            n->storeAttr = (yyvsp[-2].node);
            n->colencs = (yyvsp[-1].list);
            n->AddPartDesc = NULL;
            (yyval.node) = (Node*) n;
        }
#line 32118 "gram.cpp"
        break;

        case 652: /* TabPartitionElem: TabPartitionDefaultNameDecl OptTabPartitionBoundarySpec OptTabPartitionStorageAttr OptTabPartitionColumnEncList OptTabSubPartitionSpec  */
#line 5172 "gram.y"
        {
            PartitionElem* n = makeNode(PartitionElem);
            n->partName = (yyvsp[-4].str);
            n->boundSpec = (yyvsp[-3].node);
            n->subSpec = (yyvsp[0].node);
            n->location = (yylsp[-4]);
            n->isDefault = true;
            n->storeAttr = (yyvsp[-2].node);
            n->colencs = (yyvsp[-1].list);
            (yyval.node) = (Node*) n;
        }
#line 32134 "gram.cpp"
        break;

        case 653: /* TabPartitionElem: TabPartitionBoundarySpec OptTabPartitionStorageAttr OptTabPartitionColumnEncList OptTabSubPartitionSpec  */
#line 5187 "gram.y"
        {
            PartitionElem* n = makeNode(PartitionElem);
            n->partName = NULL;
            n->boundSpec = (yyvsp[-3].node);
            n->subSpec = (yyvsp[0].node);
            n->location = (yylsp[-3]);
            n->isDefault = 0;
            n->storeAttr = (yyvsp[-2].node);
            n->colencs = (yyvsp[-1].list);
            n->AddPartDesc = NULL;
            (yyval.node) = (Node*) n;
        }
#line 32151 "gram.cpp"
        break;

        case 654: /* TabPartitionElem: column_reference_storage_directive  */
#line 5200 "gram.y"
        {
            (yyval.node) = (Node*) (yyvsp[0].node);
        }
#line 32159 "gram.cpp"
        break;

        case 655: /* TabSubPartitionElem: TabSubPartitionNameDecl OptTabPartitionBoundarySpec OptTabPartitionStorageAttr OptTabPartitionColumnEncList OptTabSubPartitionSpec  */
#line 5210 "gram.y"
        {
            PartitionElem* n = makeNode(PartitionElem);
            n->partName = (yyvsp[-4].str);
            n->boundSpec = (yyvsp[-3].node);
            n->subSpec = (yyvsp[0].node);
            n->location = (yylsp[-4]);
            n->isDefault = 0;
            n->storeAttr = (yyvsp[-2].node);
            n->colencs = (yyvsp[-1].list);
            n->AddPartDesc = NULL;
            (yyval.node) = (Node*) n;
        }
#line 32176 "gram.cpp"
        break;

        case 656: /* TabSubPartitionElem: TabSubPartitionDefaultNameDecl OptTabPartitionBoundarySpec OptTabPartitionStorageAttr OptTabPartitionColumnEncList OptTabSubPartitionSpec  */
#line 5227 "gram.y"
        {
            PartitionElem* n = makeNode(PartitionElem);
            n->partName = (yyvsp[-4].str);
            n->boundSpec = (yyvsp[-3].node);
            n->subSpec = (yyvsp[0].node);
            n->location = (yylsp[-4]);
            n->isDefault = true;
            n->storeAttr = (yyvsp[-2].node);
            n->colencs = (yyvsp[-1].list);
            n->AddPartDesc = NULL;
            (yyval.node) = (Node*) n;
        }
#line 32193 "gram.cpp"
        break;

        case 657: /* TabSubPartitionElem: TabPartitionBoundarySpec OptTabPartitionStorageAttr OptTabPartitionColumnEncList OptTabSubPartitionSpec  */
#line 5243 "gram.y"
        {
            PartitionElem* n = makeNode(PartitionElem);
            n->partName = NULL;
            n->boundSpec = (yyvsp[-3].node);
            n->subSpec = (yyvsp[0].node);
            n->location = (yylsp[-3]);
            n->isDefault = false;
            n->colencs = (yyvsp[-1].list);
            n->storeAttr = (yyvsp[-2].node);
            n->AddPartDesc = NULL;
            (yyval.node) = (Node*) n;
        }
#line 32210 "gram.cpp"
        break;

        case 658: /* TabSubPartitionElem: column_reference_storage_directive  */
#line 5256 "gram.y"
        {
            (yyval.node) = (Node*) (yyvsp[0].node);
        }
#line 32218 "gram.cpp"
        break;

        case 659: /* TabPartitionNameDecl: PARTITION PartitionColId  */
#line 5262 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 32226 "gram.cpp"
        break;

        case 660: /* TabPartitionDefaultNameDecl: DEFAULT PARTITION PartitionColId  */
#line 5267 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 32234 "gram.cpp"
        break;

        case 661: /* TabSubPartitionNameDecl: SUBPARTITION PartitionColId  */
#line 5273 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 32242 "gram.cpp"
        break;

        case 662: /* TabSubPartitionDefaultNameDecl: DEFAULT SUBPARTITION PartitionColId  */
#line 5279 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 32250 "gram.cpp"
        break;

        case 663: /* TabPartitionByType: RANGE  */
#line 5285 "gram.y"
        {
            (yyval.ival) = PARTTYP_RANGE;
        }
#line 32256 "gram.cpp"
        break;

        case 664: /* TabPartitionByType: LIST  */
#line 5286 "gram.y"
        {
            (yyval.ival) = PARTTYP_LIST;
        }
#line 32262 "gram.cpp"
        break;

        case 665: /* TabPartitionByType: %empty  */
#line 5288 "gram.y"
        {
            (yyval.ival) = PARTTYP_RANGE;

            ereport(ERROR, errcode(ERRCODE_SYNTAX_ERROR), errmsg("PARTITION BY must specify RANGE or LIST"));
        }
#line 32274 "gram.cpp"
        break;

        case 666: /* OptTabPartitionBy: PARTITION BY TabPartitionByType '(' columnList ')' opt_list_subparts OptTabPartitionSpec  */
#line 5302 "gram.y"
        {
            PartitionBy* n = makeNode(PartitionBy);

            n->partType = static_cast<PartitionByType>((yyvsp[-5].ival));
            n->keys = (yyvsp[-3].list);
            n->subPart = (yyvsp[-1].node);
            if (PointerIsValid(n->subPart) && !IsA(n->subPart, PartitionBy))
                parser_yyerror("syntax error");

            n->partSpec = (yyvsp[0].node);
            n->partDepth = 0;
            n->partQuiet = PART_VERBO_NODISTRO;
            n->location = (yylsp[-5]);
            n->partDefault = NULL;
            (yyval.node) = (Node*) n;
        }
#line 32296 "gram.cpp"
        break;

        case 667: /* OptTabPartitionBy: %empty  */
#line 5319 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 32302 "gram.cpp"
        break;

        case 668: /* TabSubPartitionTemplate: SUBPARTITION TEMPLATE '(' TabSubPartitionElemList ')'  */
#line 5325 "gram.y"
        {
            PartitionSpec* n = makeNode(PartitionSpec);
            n->partElem = (yyvsp[-1].list);
            n->subSpec = NULL;
            n->istemplate = true;
            n->location = (yylsp[-2]);
            (yyval.node) = (Node*) n;

            /* a little (temporary?) syntax check on templates */
            if (n->partElem) {
                List* elems;
                ListCell* lc;
                Assert(IsA(n->partElem, List));

                elems = (List*) n->partElem;
                foreach (lc, elems) {
                    PartitionElem* e = reinterpret_cast<PartitionElem*>(lfirst(lc));

                    if (!IsA(e, PartitionElem))
                        continue;

                    if (e->subSpec)
                        ereport(ERROR,
                                errcode(ERRCODE_SYNTAX_ERROR),
                                errmsg("template cannot contain "
                                       "specification for child "
                                       "partition"));
                }
            }
        }
#line 32339 "gram.cpp"
        break;

        case 669: /* opt_list_subparts: TabSubPartition  */
#line 5359 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 32345 "gram.cpp"
        break;

        case 670: /* opt_list_subparts: %empty  */
#line 5360 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 32351 "gram.cpp"
        break;

        case 671: /* TabSubPartitionBy: SUBPARTITION BY TabPartitionByType '(' columnList ')'  */
#line 5366 "gram.y"
        {
            PartitionBy* n = makeNode(PartitionBy);
            n->partType = static_cast<PartitionByType>((yyvsp[-3].ival));
            n->keys = (yyvsp[-1].list);
            n->subPart = NULL;
            n->partSpec = NULL;
            n->partDepth = 0;
            n->partQuiet = PART_VERBO_NODISTRO;
            n->location = (yylsp[-3]);
            n->partDefault = NULL;
            (yyval.node) = (Node*) n;
        }
#line 32368 "gram.cpp"
        break;

        case 672: /* TabSubPartition: TabSubPartitionBy TabSubPartitionTemplate  */
#line 5382 "gram.y"
        {
            PartitionBy* pby = (PartitionBy*) (yyvsp[-1].node);

            ((PartitionBy*) pby)->partSpec = (yyvsp[0].node);

            (yyval.node) = (yyvsp[-1].node);
        }
#line 32380 "gram.cpp"
        break;

        case 673: /* TabSubPartition: TabSubPartitionBy  */
#line 5389 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 32386 "gram.cpp"
        break;

        case 674: /* TabSubPartition: TabSubPartitionBy TabSubPartition  */
#line 5391 "gram.y"
        {
            PartitionBy* pby = (PartitionBy*) (yyvsp[-1].node);
            pby->subPart = (yyvsp[0].node);
            (yyval.node) = (Node*) pby;
        }
#line 32396 "gram.cpp"
        break;

        case 675: /* TabSubPartition: TabSubPartitionBy TabSubPartitionTemplate TabSubPartition  */
#line 5397 "gram.y"
        {
            PartitionBy* pby = (PartitionBy*) (yyvsp[-2].node);
            pby->partSpec = (yyvsp[-1].node);
            pby->subPart = (yyvsp[0].node);
            (yyval.node) = (Node*) pby;
        }
#line 32407 "gram.cpp"
        break;

        case 676: /* CreateAsStmt: CREATE OptTemp TABLE create_as_target AS SelectStmt opt_with_data OptDistributedBy OptTabPartitionBy  */
#line 5419 "gram.y"
        {
            CreateTableAsStmt* ctas = makeNode(CreateTableAsStmt);
            ctas->query = (yyvsp[-3].node);
            ctas->into = (yyvsp[-5].into);
            ctas->relkind = OBJECT_TABLE;
            ctas->is_select_into = false;
            /* cram additional flags into the IntoClause */
            (yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
            ctas->into->distributedBy = (yyvsp[-1].node);

            if ((yyvsp[0].node))
                ereport(ERROR,
                        errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                        errmsg("Cannot create a partitioned table using CREATE TABLE AS SELECT"),
                        errhint("Use CREATE TABLE...LIKE (followed by INSERT...SELECT) instead"));

            (yyvsp[-5].into)->skipData = !((yyvsp[-2].boolean));
            (yyval.node) = (Node*) ctas;
        }
#line 32431 "gram.cpp"
        break;

        case 677: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption OptTableSpace  */
#line 5442 "gram.y"
        {
            (yyval.into) = makeNode(IntoClause);
            (yyval.into)->rel = (yyvsp[-4].range);
            (yyval.into)->colNames = (yyvsp[-3].list);
            (yyval.into)->options = (yyvsp[-2].list);
            (yyval.into)->onCommit = (yyvsp[-1].oncommit);
            (yyval.into)->tableSpaceName = (yyvsp[0].str);
            (yyval.into)->viewQuery = NULL;
            (yyval.into)->skipData = false; /* might get changed later */
        }
#line 32446 "gram.cpp"
        break;

        case 678: /* opt_with_data: WITH DATA_P  */
#line 5455 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 32452 "gram.cpp"
        break;

        case 679: /* opt_with_data: WITH NO DATA_P  */
#line 5456 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 32458 "gram.cpp"
        break;

        case 680: /* opt_with_data: %empty  */
#line 5457 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 32464 "gram.cpp"
        break;

        case 681: /* CreateExternalStmt: CREATE OptWritable EXTERNAL OptWeb OptTemp TABLE qualified_name '(' OptExtTableElementList ')' ExtTypedesc FORMAT Sconst format_opt ext_options_opt ext_opt_encoding_list ExtSingleRowErrorHandling OptDistributedBy  */
#line 5469 "gram.y"
        {
            CreateExternalStmt* n = makeNode(CreateExternalStmt);
            n->iswritable = (yyvsp[-16].boolean);
            n->isweb = (yyvsp[-14].boolean);
            (yyvsp[-11].range)->relpersistence = (yyvsp[-13].ival);
            n->relation = (yyvsp[-11].range);
            n->tableElts = (yyvsp[-9].list);
            n->exttypedesc = (ExtTableTypeDesc*) (yyvsp[-7].node);
            n->format = (yyvsp[-5].str);
            n->formatOpts = (yyvsp[-4].list);
            n->extOptions = (yyvsp[-3].list);
            n->encoding = (yyvsp[-2].list);
            n->sreh = (yyvsp[-1].node);
            n->distributedBy = (DistributedBy*) (yyvsp[0].node);

            /* various syntax checks for EXECUTE external table */
            if (((ExtTableTypeDesc*) n->exttypedesc)->exttabletype == EXTTBL_TYPE_EXECUTE) {
                ExtTableTypeDesc* extdesc = (ExtTableTypeDesc*) n->exttypedesc;

                if (!n->isweb)
                    ereport(ERROR,
                            errcode(ERRCODE_SYNTAX_ERROR),
                            errmsg("EXECUTE may not be used with a regular external table"),
                            errhint("Use CREATE EXTERNAL WEB TABLE instead"));

                /* if no ON clause specified, default to "ON ALL" */
                if (extdesc->on_clause == NIL) {
                    extdesc->on_clause = lappend(extdesc->on_clause, makeDefElem("all", (Node*) makeInteger(TRUE)));
                } else if (n->iswritable) {
                    ereport(ERROR,
                            errcode(ERRCODE_SYNTAX_ERROR),
                            errmsg("ON clause may not be used with a writable external table"));
                }
            }

            if (n->sreh) {
                if (n->iswritable)
                    ereport(ERROR,
                            errcode(ERRCODE_SYNTAX_ERROR),
                            errmsg("Single row error handling may not be used with a writable external table"));

                if (((SingleRowErrorDesc*) n->sreh)->log_errors_type == LOG_ERRORS_PERSISTENTLY) {
                    n->extOptions =
                        lappend(n->extOptions, makeDefElem("error_log_persistent", (Node*) makeString("true")));
                }
            }

            (yyval.node) = (Node*) n;
        }
#line 32525 "gram.cpp"
        break;

        case 682: /* OptWritable: WRITABLE  */
#line 5527 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 32531 "gram.cpp"
        break;

        case 683: /* OptWritable: READABLE  */
#line 5528 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 32537 "gram.cpp"
        break;

        case 684: /* OptWritable: %empty  */
#line 5529 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 32543 "gram.cpp"
        break;

        case 685: /* OptWeb: WEB  */
#line 5532 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 32549 "gram.cpp"
        break;

        case 686: /* OptWeb: %empty  */
#line 5533 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 32555 "gram.cpp"
        break;

        case 687: /* ExtTypedesc: LOCATION '(' cdb_string_list ')' ext_on_clause_list  */
#line 5538 "gram.y"
        {
            ExtTableTypeDesc* n = makeNode(ExtTableTypeDesc);
            n->exttabletype = EXTTBL_TYPE_LOCATION;
            n->location_list = (yyvsp[-2].list);
            n->on_clause = (yyvsp[0].list);
            n->command_string = NULL;
            (yyval.node) = (Node*) n;

        }
#line 32569 "gram.cpp"
        break;

        case 688: /* ExtTypedesc: EXECUTE Sconst ext_on_clause_list  */
#line 5548 "gram.y"
        {
            ExtTableTypeDesc* n = makeNode(ExtTableTypeDesc);
            n->exttabletype = EXTTBL_TYPE_EXECUTE;
            n->location_list = NIL;
            n->command_string = (yyvsp[-1].str);
            n->on_clause = (yyvsp[0].list); /* default will get set later if needed */

            (yyval.node) = (Node*) n;
        }
#line 32583 "gram.cpp"
        break;

        case 689: /* ext_on_clause_list: ext_on_clause_list ext_on_clause_item  */
#line 5560 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 32589 "gram.cpp"
        break;

        case 690: /* ext_on_clause_list: %empty  */
#line 5561 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 32595 "gram.cpp"
        break;

        case 691: /* ext_on_clause_item: ON ALL  */
#line 5566 "gram.y"
        {
            (yyval.defelt) = makeDefElem("all", (Node*) makeInteger(TRUE));
        }
#line 32603 "gram.cpp"
        break;

        case 692: /* ext_on_clause_item: ON HOST Sconst  */
#line 5570 "gram.y"
        {
            (yyval.defelt) = makeDefElem("hostname", (Node*) makeString((yyvsp[0].str)));
        }
#line 32611 "gram.cpp"
        break;

        case 693: /* ext_on_clause_item: ON HOST  */
#line 5574 "gram.y"
        {
            (yyval.defelt) = makeDefElem("eachhost", (Node*) makeInteger(TRUE));
        }
#line 32619 "gram.cpp"
        break;

        case 694: /* ext_on_clause_item: ON MASTER  */
#line 5578 "gram.y"
        {
            (yyval.defelt) = makeDefElem("master", (Node*) makeInteger(TRUE));
        }
#line 32627 "gram.cpp"
        break;

        case 695: /* ext_on_clause_item: ON SEGMENT Iconst  */
#line 5582 "gram.y"
        {
            (yyval.defelt) = makeDefElem("segment", (Node*) makeInteger((yyvsp[0].ival)));
        }
#line 32635 "gram.cpp"
        break;

        case 696: /* ext_on_clause_item: ON Iconst  */
#line 5586 "gram.y"
        {
            (yyval.defelt) = makeDefElem("random", (Node*) makeInteger((yyvsp[0].ival)));
        }
#line 32643 "gram.cpp"
        break;

        case 697: /* format_opt: '(' format_opt_list ')'  */
#line 5592 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 32649 "gram.cpp"
        break;

        case 698: /* format_opt: '(' format_def_list ')'  */
#line 5593 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 32655 "gram.cpp"
        break;

        case 699: /* format_opt: '(' ')'  */
#line 5594 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 32661 "gram.cpp"
        break;

        case 700: /* format_opt: %empty  */
#line 5595 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 32667 "gram.cpp"
        break;

        case 701: /* format_opt_list: format_opt_item  */
#line 5600 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 32675 "gram.cpp"
        break;

        case 702: /* format_opt_list: format_opt_list format_opt_item  */
#line 5604 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 32683 "gram.cpp"
        break;

        case 703: /* format_def_list: format_def_item  */
#line 5611 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 32691 "gram.cpp"
        break;

        case 704: /* format_def_list: format_def_list ',' format_def_item  */
#line 5615 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
        }
#line 32699 "gram.cpp"
        break;

        case 705: /* format_def_item: ColLabel '=' def_arg  */
#line 5622 "gram.y"
        {
            (yyval.defelt) = makeDefElem((yyvsp[-2].str), (yyvsp[0].node));
        }
#line 32707 "gram.cpp"
        break;

        case 706: /* format_def_item: ColLabel '=' '(' columnList ')'  */
#line 5626 "gram.y"
        {
            (yyval.defelt) = makeDefElem((yyvsp[-4].str), (Node*) (yyvsp[-1].list));
        }
#line 32715 "gram.cpp"
        break;

        case 707: /* format_opt_item: DELIMITER opt_as Sconst  */
#line 5633 "gram.y"
        {
            (yyval.defelt) = makeDefElem("delimiter", (Node*) makeString((yyvsp[0].str)));
        }
#line 32723 "gram.cpp"
        break;

        case 708: /* format_opt_item: NULL_P opt_as Sconst  */
#line 5637 "gram.y"
        {
            (yyval.defelt) = makeDefElem("null", (Node*) makeString((yyvsp[0].str)));
        }
#line 32731 "gram.cpp"
        break;

        case 709: /* format_opt_item: CSV  */
#line 5641 "gram.y"
        {
            (yyval.defelt) = makeDefElem("csv", (Node*) makeInteger(TRUE));
        }
#line 32739 "gram.cpp"
        break;

        case 710: /* format_opt_item: HEADER_P  */
#line 5645 "gram.y"
        {
            (yyval.defelt) = makeDefElem("header", (Node*) makeInteger(TRUE));
        }
#line 32747 "gram.cpp"
        break;

        case 711: /* format_opt_item: QUOTE opt_as Sconst  */
#line 5649 "gram.y"
        {
            (yyval.defelt) = makeDefElem("quote", (Node*) makeString((yyvsp[0].str)));
        }
#line 32755 "gram.cpp"
        break;

        case 712: /* format_opt_item: ESCAPE opt_as Sconst  */
#line 5653 "gram.y"
        {
            (yyval.defelt) = makeDefElem("escape", (Node*) makeString((yyvsp[0].str)));
        }
#line 32763 "gram.cpp"
        break;

        case 713: /* format_opt_item: FORCE NOT NULL_P columnList  */
#line 5657 "gram.y"
        {
            (yyval.defelt) = makeDefElem("force_not_null", (Node*) (yyvsp[0].list));
        }
#line 32771 "gram.cpp"
        break;

        case 714: /* format_opt_item: FORCE QUOTE columnList  */
#line 5661 "gram.y"
        {
            (yyval.defelt) = makeDefElem("force_quote", (Node*) (yyvsp[0].list));
        }
#line 32779 "gram.cpp"
        break;

        case 715: /* format_opt_item: FORCE QUOTE '*'  */
#line 5665 "gram.y"
        {
            (yyval.defelt) = makeDefElem("force_quote", (Node*) makeNode(A_Star));
        }
#line 32787 "gram.cpp"
        break;

        case 716: /* format_opt_item: FILL MISSING FIELDS  */
#line 5669 "gram.y"
        {
            (yyval.defelt) = makeDefElem("fill_missing_fields", (Node*) makeInteger(TRUE));
        }
#line 32795 "gram.cpp"
        break;

        case 717: /* format_opt_item: NEWLINE opt_as Sconst  */
#line 5673 "gram.y"
        {
            (yyval.defelt) = makeDefElem("newline", (Node*) makeString((yyvsp[0].str)));
        }
#line 32803 "gram.cpp"
        break;

        case 718: /* ext_options_opt: OPTIONS ext_options  */
#line 5679 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 32809 "gram.cpp"
        break;

        case 719: /* ext_options_opt: %empty  */
#line 5680 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 32815 "gram.cpp"
        break;

        case 720: /* ext_options: '(' ext_options_list ')'  */
#line 5684 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 32821 "gram.cpp"
        break;

        case 721: /* ext_options: '(' ')'  */
#line 5685 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 32827 "gram.cpp"
        break;

        case 722: /* ext_options_list: ext_options_item  */
#line 5690 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 32835 "gram.cpp"
        break;

        case 723: /* ext_options_list: ext_options_list ',' ext_options_item  */
#line 5694 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
        }
#line 32843 "gram.cpp"
        break;

        case 724: /* ext_options_item: ColLabel Sconst  */
#line 5701 "gram.y"
        {
            (yyval.defelt) = makeDefElem((yyvsp[-1].str), (Node*) makeString((yyvsp[0].str)));
        }
#line 32851 "gram.cpp"
        break;

        case 725: /* OptExtTableElementList: ExtTableElementList  */
#line 5707 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 32857 "gram.cpp"
        break;

        case 726: /* OptExtTableElementList: %empty  */
#line 5708 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 32863 "gram.cpp"
        break;

        case 727: /* ExtTableElementList: ExtTableElement  */
#line 5713 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 32871 "gram.cpp"
        break;

        case 728: /* ExtTableElementList: ExtTableElementList ',' ExtTableElement  */
#line 5717 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 32879 "gram.cpp"
        break;

        case 729: /* ExtTableElement: ExtcolumnDef  */
#line 5723 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 32885 "gram.cpp"
        break;

        case 730: /* ExtTableElement: TableLikeClause  */
#line 5724 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 32891 "gram.cpp"
        break;

        case 731: /* ExtcolumnDef: ColId Typename  */
#line 5729 "gram.y"
        {
            ColumnDef* n = makeNode(ColumnDef);
            n->colname = (yyvsp[-1].str);
            n->typeName = (yyvsp[0].typnam);
            n->is_local = true;
            n->is_not_null = false;
            n->constraints = NIL;
            (yyval.node) = (Node*) n;
        }
#line 32905 "gram.cpp"
        break;

        case 732: /* OptSingleRowErrorHandling: OptLogErrorTable SEGMENT REJECT_P LIMIT Iconst OptSrehLimitType  */
#line 5745 "gram.y"
        {
            SingleRowErrorDesc* n = makeNode(SingleRowErrorDesc);
            n->into_file = (yyvsp[-5].ival) == LOG_ERRORS_DISABLE ? false : true;
            n->log_errors_type = n->into_file ? LOG_ERRORS_ENABLE : LOG_ERRORS_DISABLE;
            n->rejectlimit = (yyvsp[-1].ival);
            n->is_limit_in_rows = (yyvsp[0].boolean); /* true for ROWS false for PERCENT */

            /* PERCENT value check */
            if (!n->is_limit_in_rows && (n->rejectlimit < 1 || n->rejectlimit > 100))
                ereport(ERROR,
                        errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                        errmsg("invalid PERCENT value. Should be (1 - 100)"));

            /* ROW values check */
            if (n->is_limit_in_rows && n->rejectlimit < 2)
                ereport(ERROR,
                        errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                        errmsg("invalid (ROWS) reject limit. Should be 2 or larger"));

            (yyval.list) = lappend(NULL, makeDefElem("sreh", (Node*) n));
        }
#line 32931 "gram.cpp"
        break;

        case 733: /* OptSingleRowErrorHandling: %empty  */
#line 5766 "gram.y"
        {
            (yyval.list) = NULL;
        }
#line 32937 "gram.cpp"
        break;

        case 734: /* OptLogErrorTable: LOG_P ERRORS INTO qualified_name  */
#line 5771 "gram.y"
        {
            if (gp_ignore_error_table) /* ignore the [INTO error-table] clause for backward compatibility */
            {
                ereport(WARNING,
                        errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                        errmsg("error table is not supported"),
                        errhint("Use gp_read_error_log() and gp_truncate_error_log() to view and manage the internal "
                                "error log associated with your table."));
            } else {
                ereport(ERROR,
                        errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                        errmsg("error table is not supported"),
                        errhint("Set gp_ignore_error_table to ignore the [INTO error-table] clause for backward "
                                "compatibility."),
                        parser_errposition((yylsp[-1])));
            }
            (yyval.ival) = LOG_ERRORS_ENABLE;
        }
#line 32960 "gram.cpp"
        break;

        case 735: /* OptLogErrorTable: LOG_P ERRORS  */
#line 5789 "gram.y"
        {
            (yyval.ival) = LOG_ERRORS_ENABLE;
        }
#line 32966 "gram.cpp"
        break;

        case 736: /* OptLogErrorTable: %empty  */
#line 5790 "gram.y"
        {
            (yyval.ival) = LOG_ERRORS_DISABLE;
        }
#line 32972 "gram.cpp"
        break;

        case 737: /* ExtSingleRowErrorHandling: ExtLogErrorTable SEGMENT REJECT_P LIMIT Iconst OptSrehLimitType  */
#line 5794 "gram.y"
        {
            SingleRowErrorDesc* n = makeNode(SingleRowErrorDesc);
            n->log_errors_type = static_cast<LogErrorsType>((yyvsp[-5].ival));
            n->into_file = n->log_errors_type == LOG_ERRORS_DISABLE ? false : true;
            n->rejectlimit = (yyvsp[-1].ival);
            n->is_limit_in_rows = (yyvsp[0].boolean); /* true for ROWS false for PERCENT */

            /* PERCENT value check */
            if (!n->is_limit_in_rows && (n->rejectlimit < 1 || n->rejectlimit > 100))
                ereport(ERROR,
                        errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                        errmsg("invalid PERCENT value. Should be (1 - 100)"));

            /* ROW values check */
            if (n->is_limit_in_rows && n->rejectlimit < 2)
                ereport(ERROR,
                        errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                        errmsg("invalid (ROWS) reject limit. Should be 2 or larger"));

            (yyval.node) = (Node*) n;
        }
#line 32998 "gram.cpp"
        break;

        case 738: /* ExtSingleRowErrorHandling: %empty  */
#line 5815 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 33004 "gram.cpp"
        break;

        case 739: /* ExtLogErrorTable: OptLogErrorTable  */
#line 5819 "gram.y"
        {
            (yyval.ival) = (yyvsp[0].ival);
        }
#line 33010 "gram.cpp"
        break;

        case 740: /* ExtLogErrorTable: LOG_P ERRORS PERSISTENTLY  */
#line 5820 "gram.y"
        {
            (yyval.ival) = LOG_ERRORS_PERSISTENTLY;
        }
#line 33016 "gram.cpp"
        break;

        case 741: /* OptSrehLimitType: ROWS  */
#line 5824 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 33022 "gram.cpp"
        break;

        case 742: /* OptSrehLimitType: PERCENT  */
#line 5825 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 33028 "gram.cpp"
        break;

        case 743: /* OptSrehLimitType: %empty  */
#line 5826 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 33034 "gram.cpp"
        break;

        case 744: /* ext_opt_encoding_list: ext_opt_encoding_list ext_opt_encoding_item  */
#line 5833 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 33040 "gram.cpp"
        break;

        case 745: /* ext_opt_encoding_list: %empty  */
#line 5834 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 33046 "gram.cpp"
        break;

        case 746: /* ext_opt_encoding_item: ENCODING opt_equal Sconst  */
#line 5839 "gram.y"
        {
            (yyval.defelt) = makeDefElem("encoding", (Node*) makeString((yyvsp[0].str)));
        }
#line 33054 "gram.cpp"
        break;

        case 747: /* ext_opt_encoding_item: ENCODING opt_equal Iconst  */
#line 5843 "gram.y"
        {
            (yyval.defelt) = makeDefElem("encoding", (Node*) makeInteger((yyvsp[0].ival)));
        }
#line 33062 "gram.cpp"
        break;

        case 748: /* CreateMatViewStmt: CREATE OptNoLog MATERIALIZED VIEW create_mv_target AS SelectStmt opt_with_data OptDistributedBy  */
#line 5857 "gram.y"
        {
            CreateTableAsStmt* ctas = makeNode(CreateTableAsStmt);
            ctas->query = (yyvsp[-2].node);
            ctas->into = (yyvsp[-4].into);
            ctas->relkind = OBJECT_MATVIEW;
            ctas->is_select_into = false;
            /* cram additional flags into the IntoClause */
            (yyvsp[-4].into)->rel->relpersistence = (yyvsp[-7].ival);
            (yyvsp[-4].into)->skipData = !((yyvsp[-1].boolean));
            ctas->into->distributedBy = (yyvsp[0].node);

            (yyval.node) = (Node*) ctas;
        }
#line 33080 "gram.cpp"
        break;

        case 749: /* create_mv_target: qualified_name opt_column_list opt_reloptions OptTableSpace  */
#line 5874 "gram.y"
        {
            (yyval.into) = makeNode(IntoClause);
            (yyval.into)->rel = (yyvsp[-3].range);
            (yyval.into)->colNames = (yyvsp[-2].list);
            (yyval.into)->options = (yyvsp[-1].list);
            (yyval.into)->onCommit = ONCOMMIT_NOOP;
            (yyval.into)->tableSpaceName = (yyvsp[0].str);
            (yyval.into)->viewQuery = NULL; /* filled at analysis time */
            (yyval.into)->skipData = false; /* might get changed later */
        }
#line 33095 "gram.cpp"
        break;

        case 750: /* OptNoLog: UNLOGGED  */
#line 5886 "gram.y"
        {
            (yyval.ival) = RELPERSISTENCE_UNLOGGED;
        }
#line 33101 "gram.cpp"
        break;

        case 751: /* OptNoLog: %empty  */
#line 5887 "gram.y"
        {
            (yyval.ival) = RELPERSISTENCE_PERMANENT;
        }
#line 33107 "gram.cpp"
        break;

        case 752: /* RefreshMatViewStmt: REFRESH MATERIALIZED VIEW opt_concurrently qualified_name opt_with_data  */
#line 5900 "gram.y"
        {
            RefreshMatViewStmt* n = makeNode(RefreshMatViewStmt);
            n->concurrent = (yyvsp[-2].boolean);
            n->relation = (yyvsp[-1].range);
            n->skipData = !((yyvsp[0].boolean));
            (yyval.node) = (Node*) n;
        }
#line 33119 "gram.cpp"
        break;

        case 753: /* CreateSeqStmt: CREATE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 5920 "gram.y"
        {
            CreateSeqStmt* n = makeNode(CreateSeqStmt);
            (yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
            n->sequence = (yyvsp[-1].range);
            n->options = (yyvsp[0].list);
            n->ownerId = InvalidOid;
            (yyval.node) = (Node*) n;
        }
#line 33132 "gram.cpp"
        break;

        case 754: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 5932 "gram.y"
        {
            AlterSeqStmt* n = makeNode(AlterSeqStmt);
            n->sequence = (yyvsp[-1].range);
            n->options = (yyvsp[0].list);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 33144 "gram.cpp"
        break;

        case 755: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 5940 "gram.y"
        {
            AlterSeqStmt* n = makeNode(AlterSeqStmt);
            n->sequence = (yyvsp[-1].range);
            n->options = (yyvsp[0].list);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 33156 "gram.cpp"
        break;

        case 756: /* OptSeqOptList: SeqOptList  */
#line 5950 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 33162 "gram.cpp"
        break;

        case 757: /* OptSeqOptList: %empty  */
#line 5951 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 33168 "gram.cpp"
        break;

        case 758: /* SeqOptList: SeqOptElem  */
#line 5954 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 33174 "gram.cpp"
        break;

        case 759: /* SeqOptList: SeqOptList SeqOptElem  */
#line 5955 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 33180 "gram.cpp"
        break;

        case 760: /* SeqOptElem: CACHE NumericOnly  */
#line 5959 "gram.y"
        {
            (yyval.defelt) = makeDefElem("cache", (Node*) (yyvsp[0].value));
        }
#line 33188 "gram.cpp"
        break;

        case 761: /* SeqOptElem: CYCLE  */
#line 5963 "gram.y"
        {
            (yyval.defelt) = makeDefElem("cycle", (Node*) makeInteger(TRUE));
        }
#line 33196 "gram.cpp"
        break;

        case 762: /* SeqOptElem: NO CYCLE  */
#line 5967 "gram.y"
        {
            (yyval.defelt) = makeDefElem("cycle", (Node*) makeInteger(FALSE));
        }
#line 33204 "gram.cpp"
        break;

        case 763: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 5971 "gram.y"
        {
            (yyval.defelt) = makeDefElem("increment", (Node*) (yyvsp[0].value));
        }
#line 33212 "gram.cpp"
        break;

        case 764: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 5975 "gram.y"
        {
            (yyval.defelt) = makeDefElem("maxvalue", (Node*) (yyvsp[0].value));
        }
#line 33220 "gram.cpp"
        break;

        case 765: /* SeqOptElem: MINVALUE NumericOnly  */
#line 5979 "gram.y"
        {
            (yyval.defelt) = makeDefElem("minvalue", (Node*) (yyvsp[0].value));
        }
#line 33228 "gram.cpp"
        break;

        case 766: /* SeqOptElem: NO MAXVALUE  */
#line 5983 "gram.y"
        {
            (yyval.defelt) = makeDefElem("maxvalue", NULL);
        }
#line 33236 "gram.cpp"
        break;

        case 767: /* SeqOptElem: NO MINVALUE  */
#line 5987 "gram.y"
        {
            (yyval.defelt) = makeDefElem("minvalue", NULL);
        }
#line 33244 "gram.cpp"
        break;

        case 768: /* SeqOptElem: OWNED BY any_name  */
#line 5991 "gram.y"
        {
            (yyval.defelt) = makeDefElem("owned_by", (Node*) (yyvsp[0].list));
        }
#line 33252 "gram.cpp"
        break;

        case 769: /* SeqOptElem: START opt_with NumericOnly  */
#line 5995 "gram.y"
        {
            (yyval.defelt) = makeDefElem("start", (Node*) (yyvsp[0].value));
        }
#line 33260 "gram.cpp"
        break;

        case 770: /* SeqOptElem: RESTART  */
#line 5999 "gram.y"
        {
            (yyval.defelt) = makeDefElem("restart", NULL);
        }
#line 33268 "gram.cpp"
        break;

        case 771: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 6003 "gram.y"
        {
            (yyval.defelt) = makeDefElem("restart", (Node*) (yyvsp[0].value));
        }
#line 33276 "gram.cpp"
        break;

        case 772: /* opt_by: BY  */
#line 6008 "gram.y"
        {
        }
#line 33282 "gram.cpp"
        break;

        case 773: /* opt_by: %empty  */
#line 6009 "gram.y"
        {
        }
#line 33288 "gram.cpp"
        break;

        case 774: /* NumericOnly: FCONST  */
#line 6013 "gram.y"
        {
            (yyval.value) = makeFloat((yyvsp[0].str));
        }
#line 33294 "gram.cpp"
        break;

        case 775: /* NumericOnly: '+' FCONST  */
#line 6014 "gram.y"
        {
            (yyval.value) = makeFloat((yyvsp[0].str));
        }
#line 33300 "gram.cpp"
        break;

        case 776: /* NumericOnly: '-' FCONST  */
#line 6016 "gram.y"
        {
            (yyval.value) = makeFloat((yyvsp[0].str));
            doNegateFloat((yyval.value));
        }
#line 33309 "gram.cpp"
        break;

        case 777: /* NumericOnly: SignedIconst  */
#line 6020 "gram.y"
        {
            (yyval.value) = makeInteger((yyvsp[0].ival));
        }
#line 33315 "gram.cpp"
        break;

        case 778: /* NumericOnly_list: NumericOnly  */
#line 6023 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].value));
        }
#line 33321 "gram.cpp"
        break;

        case 779: /* NumericOnly_list: NumericOnly_list ',' NumericOnly  */
#line 6024 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].value));
        }
#line 33327 "gram.cpp"
        break;

        case 780: /* CreatePLangStmt: CREATE opt_or_replace opt_trusted opt_procedural LANGUAGE NonReservedWord_or_Sconst  */
#line 6037 "gram.y"
        {
            CreatePLangStmt* n = makeNode(CreatePLangStmt);
            n->replace = (yyvsp[-4].boolean);
            n->plname = (yyvsp[0].str);
            /* parameters are all to be supplied by system */
            n->plhandler = NIL;
            n->plinline = NIL;
            n->plvalidator = NIL;
            n->pltrusted = false;
            (yyval.node) = (Node*) n;
        }
#line 33343 "gram.cpp"
        break;

        case 781: /* CreatePLangStmt: CREATE opt_or_replace opt_trusted opt_procedural LANGUAGE NonReservedWord_or_Sconst HANDLER handler_name opt_inline_handler opt_validator  */
#line 6050 "gram.y"
        {
            CreatePLangStmt* n = makeNode(CreatePLangStmt);
            n->replace = (yyvsp[-8].boolean);
            n->plname = (yyvsp[-4].str);
            n->plhandler = (yyvsp[-2].list);
            n->plinline = (yyvsp[-1].list);
            n->plvalidator = (yyvsp[0].list);
            n->pltrusted = (yyvsp[-7].boolean);
            (yyval.node) = (Node*) n;
        }
#line 33358 "gram.cpp"
        break;

        case 782: /* opt_trusted: TRUSTED  */
#line 6063 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 33364 "gram.cpp"
        break;

        case 783: /* opt_trusted: %empty  */
#line 6064 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 33370 "gram.cpp"
        break;

        case 784: /* handler_name: name  */
#line 6072 "gram.y"
        {
            (yyval.list) = list_make1(makeString((yyvsp[0].str)));
        }
#line 33376 "gram.cpp"
        break;

        case 785: /* handler_name: name attrs  */
#line 6073 "gram.y"
        {
            (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list));
        }
#line 33382 "gram.cpp"
        break;

        case 786: /* opt_inline_handler: INLINE_P handler_name  */
#line 6077 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 33388 "gram.cpp"
        break;

        case 787: /* opt_inline_handler: %empty  */
#line 6078 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 33394 "gram.cpp"
        break;

        case 788: /* validator_clause: VALIDATOR handler_name  */
#line 6082 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 33400 "gram.cpp"
        break;

        case 789: /* validator_clause: NO VALIDATOR  */
#line 6083 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 33406 "gram.cpp"
        break;

        case 790: /* opt_validator: validator_clause  */
#line 6087 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 33412 "gram.cpp"
        break;

        case 791: /* opt_validator: %empty  */
#line 6088 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 33418 "gram.cpp"
        break;

        case 792: /* DropPLangStmt: DROP opt_procedural LANGUAGE NonReservedWord_or_Sconst opt_drop_behavior  */
#line 6093 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_LANGUAGE;
            n->objects = list_make1(list_make1(makeString((yyvsp[-1].str))));
            n->arguments = NIL;
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = false;
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 33433 "gram.cpp"
        break;

        case 793: /* DropPLangStmt: DROP opt_procedural LANGUAGE IF_P EXISTS NonReservedWord_or_Sconst opt_drop_behavior  */
#line 6104 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_LANGUAGE;
            n->objects = list_make1(list_make1(makeString((yyvsp[-1].str))));
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = true;
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 33447 "gram.cpp"
        break;

        case 794: /* opt_procedural: PROCEDURAL  */
#line 6116 "gram.y"
        {
        }
#line 33453 "gram.cpp"
        break;

        case 795: /* opt_procedural: %empty  */
#line 6117 "gram.y"
        {
        }
#line 33459 "gram.cpp"
        break;

        case 796: /* CreateTableSpaceStmt: CREATE TABLESPACE name OptTableSpaceOwner LOCATION Sconst opt_reloptions  */
#line 6128 "gram.y"
        {
            CreateTableSpaceStmt* n = makeNode(CreateTableSpaceStmt);
            n->tablespacename = (yyvsp[-4].str);
            n->owner = (yyvsp[-3].str);
            n->location = (yyvsp[-1].str);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33472 "gram.cpp"
        break;

        case 797: /* OptTableSpaceOwner: OWNER name  */
#line 6138 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 33478 "gram.cpp"
        break;

        case 798: /* OptTableSpaceOwner: %empty  */
#line 6139 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 33484 "gram.cpp"
        break;

        case 799: /* DropTableSpaceStmt: DROP TABLESPACE name  */
#line 6153 "gram.y"
        {
            DropTableSpaceStmt* n = makeNode(DropTableSpaceStmt);
            n->tablespacename = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 33495 "gram.cpp"
        break;

        case 800: /* DropTableSpaceStmt: DROP TABLESPACE IF_P EXISTS name  */
#line 6160 "gram.y"
        {
            DropTableSpaceStmt* n = makeNode(DropTableSpaceStmt);
            n->tablespacename = (yyvsp[0].str);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 33506 "gram.cpp"
        break;

        case 801: /* CreateExtensionStmt: CREATE EXTENSION name opt_with create_extension_opt_list  */
#line 6177 "gram.y"
        {
            CreateExtensionStmt* n = makeNode(CreateExtensionStmt);
            n->extname = (yyvsp[-2].str);
            n->if_not_exists = false;
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33518 "gram.cpp"
        break;

        case 802: /* CreateExtensionStmt: CREATE EXTENSION IF_P NOT EXISTS name opt_with create_extension_opt_list  */
#line 6185 "gram.y"
        {
            CreateExtensionStmt* n = makeNode(CreateExtensionStmt);
            n->extname = (yyvsp[-2].str);
            n->if_not_exists = true;
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33530 "gram.cpp"
        break;

        case 803: /* create_extension_opt_list: create_extension_opt_list create_extension_opt_item  */
#line 6196 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 33536 "gram.cpp"
        break;

        case 804: /* create_extension_opt_list: %empty  */
#line 6198 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 33542 "gram.cpp"
        break;

        case 805: /* create_extension_opt_item: SCHEMA name  */
#line 6203 "gram.y"
        {
            (yyval.defelt) = makeDefElem("schema", (Node*) makeString((yyvsp[0].str)));
        }
#line 33550 "gram.cpp"
        break;

        case 806: /* create_extension_opt_item: VERSION_P NonReservedWord_or_Sconst  */
#line 6207 "gram.y"
        {
            (yyval.defelt) = makeDefElem("new_version", (Node*) makeString((yyvsp[0].str)));
        }
#line 33558 "gram.cpp"
        break;

        case 807: /* create_extension_opt_item: FROM NonReservedWord_or_Sconst  */
#line 6211 "gram.y"
        {
            (yyval.defelt) = makeDefElem("old_version", (Node*) makeString((yyvsp[0].str)));
        }
#line 33566 "gram.cpp"
        break;

        case 808: /* AlterExtensionStmt: ALTER EXTENSION name UPDATE alter_extension_opt_list  */
#line 6223 "gram.y"
        {
            AlterExtensionStmt* n = makeNode(AlterExtensionStmt);
            n->extname = (yyvsp[-2].str);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33577 "gram.cpp"
        break;

        case 809: /* alter_extension_opt_list: alter_extension_opt_list alter_extension_opt_item  */
#line 6233 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 33583 "gram.cpp"
        break;

        case 810: /* alter_extension_opt_list: %empty  */
#line 6235 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 33589 "gram.cpp"
        break;

        case 811: /* alter_extension_opt_item: TO NonReservedWord_or_Sconst  */
#line 6240 "gram.y"
        {
            (yyval.defelt) = makeDefElem("new_version", (Node*) makeString((yyvsp[0].str)));
        }
#line 33597 "gram.cpp"
        break;

        case 812: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop AGGREGATE func_name aggr_args  */
#line 6253 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-4].str);
            n->action = (yyvsp[-3].ival);
            n->objtype = OBJECT_AGGREGATE;
            n->objname = (yyvsp[-1].list);
            n->objargs = extractAggrArgTypes((yyvsp[0].list));
            (yyval.node) = (Node*) n;
        }
#line 33611 "gram.cpp"
        break;

        case 813: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop CAST '(' Typename AS Typename ')'  */
#line 6263 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-7].str);
            n->action = (yyvsp[-6].ival);
            n->objtype = OBJECT_CAST;
            n->objname = list_make1((yyvsp[-3].typnam));
            n->objargs = list_make1((yyvsp[-1].typnam));
            (yyval.node) = (Node*) n;
        }
#line 33625 "gram.cpp"
        break;

        case 814: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop COLLATION any_name  */
#line 6273 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-3].str);
            n->action = (yyvsp[-2].ival);
            n->objtype = OBJECT_COLLATION;
            n->objname = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33638 "gram.cpp"
        break;

        case 815: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop CONVERSION_P any_name  */
#line 6282 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-3].str);
            n->action = (yyvsp[-2].ival);
            n->objtype = OBJECT_CONVERSION;
            n->objname = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33651 "gram.cpp"
        break;

        case 816: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop DOMAIN_P any_name  */
#line 6291 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-3].str);
            n->action = (yyvsp[-2].ival);
            n->objtype = OBJECT_DOMAIN;
            n->objname = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33664 "gram.cpp"
        break;

        case 817: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop FUNCTION function_with_argtypes  */
#line 6300 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-3].str);
            n->action = (yyvsp[-2].ival);
            n->objtype = OBJECT_FUNCTION;
            n->objname = (yyvsp[0].funwithargs)->funcname;
            n->objargs = (yyvsp[0].funwithargs)->funcargs;
            (yyval.node) = (Node*) n;
        }
#line 33678 "gram.cpp"
        break;

        case 818: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop opt_procedural LANGUAGE name  */
#line 6310 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-4].str);
            n->action = (yyvsp[-3].ival);
            n->objtype = OBJECT_LANGUAGE;
            n->objname = list_make1(makeString((yyvsp[0].str)));
            (yyval.node) = (Node*) n;
        }
#line 33691 "gram.cpp"
        break;

        case 819: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop OPERATOR any_operator oper_argtypes  */
#line 6319 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-4].str);
            n->action = (yyvsp[-3].ival);
            n->objtype = OBJECT_OPERATOR;
            n->objname = (yyvsp[-1].list);
            n->objargs = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33705 "gram.cpp"
        break;

        case 820: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop OPERATOR CLASS any_name USING access_method  */
#line 6329 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-6].str);
            n->action = (yyvsp[-5].ival);
            n->objtype = OBJECT_OPCLASS;
            n->objname = (yyvsp[-2].list);
            n->objargs = list_make1(makeString((yyvsp[0].str)));
            (yyval.node) = (Node*) n;
        }
#line 33719 "gram.cpp"
        break;

        case 821: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop OPERATOR FAMILY any_name USING access_method  */
#line 6339 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-6].str);
            n->action = (yyvsp[-5].ival);
            n->objtype = OBJECT_OPFAMILY;
            n->objname = (yyvsp[-2].list);
            n->objargs = list_make1(makeString((yyvsp[0].str)));
            (yyval.node) = (Node*) n;
        }
#line 33733 "gram.cpp"
        break;

        case 822: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop SCHEMA name  */
#line 6349 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-3].str);
            n->action = (yyvsp[-2].ival);
            n->objtype = OBJECT_SCHEMA;
            n->objname = list_make1(makeString((yyvsp[0].str)));
            (yyval.node) = (Node*) n;
        }
#line 33746 "gram.cpp"
        break;

        case 823: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop EVENT TRIGGER name  */
#line 6358 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-4].str);
            n->action = (yyvsp[-3].ival);
            n->objtype = OBJECT_EVENT_TRIGGER;
            n->objname = list_make1(makeString((yyvsp[0].str)));
            (yyval.node) = (Node*) n;
        }
#line 33759 "gram.cpp"
        break;

        case 824: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop TABLE any_name  */
#line 6367 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-3].str);
            n->action = (yyvsp[-2].ival);
            n->objtype = OBJECT_TABLE;
            n->objname = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33772 "gram.cpp"
        break;

        case 825: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop TEXT_P SEARCH PARSER any_name  */
#line 6376 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-5].str);
            n->action = (yyvsp[-4].ival);
            n->objtype = OBJECT_TSPARSER;
            n->objname = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33785 "gram.cpp"
        break;

        case 826: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop TEXT_P SEARCH DICTIONARY any_name  */
#line 6385 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-5].str);
            n->action = (yyvsp[-4].ival);
            n->objtype = OBJECT_TSDICTIONARY;
            n->objname = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33798 "gram.cpp"
        break;

        case 827: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop TEXT_P SEARCH TEMPLATE any_name  */
#line 6394 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-5].str);
            n->action = (yyvsp[-4].ival);
            n->objtype = OBJECT_TSTEMPLATE;
            n->objname = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33811 "gram.cpp"
        break;

        case 828: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop TEXT_P SEARCH CONFIGURATION any_name  */
#line 6403 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-5].str);
            n->action = (yyvsp[-4].ival);
            n->objtype = OBJECT_TSCONFIGURATION;
            n->objname = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33824 "gram.cpp"
        break;

        case 829: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop SEQUENCE any_name  */
#line 6412 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-3].str);
            n->action = (yyvsp[-2].ival);
            n->objtype = OBJECT_SEQUENCE;
            n->objname = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33837 "gram.cpp"
        break;

        case 830: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop VIEW any_name  */
#line 6421 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-3].str);
            n->action = (yyvsp[-2].ival);
            n->objtype = OBJECT_VIEW;
            n->objname = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33850 "gram.cpp"
        break;

        case 831: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop MATERIALIZED VIEW any_name  */
#line 6430 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-4].str);
            n->action = (yyvsp[-3].ival);
            n->objtype = OBJECT_MATVIEW;
            n->objname = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33863 "gram.cpp"
        break;

        case 832: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop FOREIGN TABLE any_name  */
#line 6439 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-4].str);
            n->action = (yyvsp[-3].ival);
            n->objtype = OBJECT_FOREIGN_TABLE;
            n->objname = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33876 "gram.cpp"
        break;

        case 833: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop FOREIGN DATA_P WRAPPER name  */
#line 6448 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-5].str);
            n->action = (yyvsp[-4].ival);
            n->objtype = OBJECT_FDW;
            n->objname = list_make1(makeString((yyvsp[0].str)));
            (yyval.node) = (Node*) n;
        }
#line 33889 "gram.cpp"
        break;

        case 834: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop SERVER name  */
#line 6457 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-3].str);
            n->action = (yyvsp[-2].ival);
            n->objtype = OBJECT_FOREIGN_SERVER;
            n->objname = list_make1(makeString((yyvsp[0].str)));
            (yyval.node) = (Node*) n;
        }
#line 33902 "gram.cpp"
        break;

        case 835: /* AlterExtensionContentsStmt: ALTER EXTENSION name add_drop TYPE_P any_name  */
#line 6466 "gram.y"
        {
            AlterExtensionContentsStmt* n = makeNode(AlterExtensionContentsStmt);
            n->extname = (yyvsp[-3].str);
            n->action = (yyvsp[-2].ival);
            n->objtype = OBJECT_TYPE;
            n->objname = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33915 "gram.cpp"
        break;

        case 836: /* CreateFdwStmt: CREATE FOREIGN DATA_P WRAPPER name opt_fdw_options create_generic_options  */
#line 6484 "gram.y"
        {
            CreateFdwStmt* n = makeNode(CreateFdwStmt);
            n->fdwname = (yyvsp[-2].str);
            n->func_options = (yyvsp[-1].list);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 33927 "gram.cpp"
        break;

        case 837: /* fdw_option: HANDLER handler_name  */
#line 6494 "gram.y"
        {
            (yyval.defelt) = makeDefElem("handler", (Node*) (yyvsp[0].list));
        }
#line 33933 "gram.cpp"
        break;

        case 838: /* fdw_option: NO HANDLER  */
#line 6495 "gram.y"
        {
            (yyval.defelt) = makeDefElem("handler", NULL);
        }
#line 33939 "gram.cpp"
        break;

        case 839: /* fdw_option: VALIDATOR handler_name  */
#line 6496 "gram.y"
        {
            (yyval.defelt) = makeDefElem("validator", (Node*) (yyvsp[0].list));
        }
#line 33945 "gram.cpp"
        break;

        case 840: /* fdw_option: NO VALIDATOR  */
#line 6497 "gram.y"
        {
            (yyval.defelt) = makeDefElem("validator", NULL);
        }
#line 33951 "gram.cpp"
        break;

        case 841: /* fdw_options: fdw_option  */
#line 6501 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 33957 "gram.cpp"
        break;

        case 842: /* fdw_options: fdw_options fdw_option  */
#line 6502 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 33963 "gram.cpp"
        break;

        case 843: /* opt_fdw_options: fdw_options  */
#line 6506 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 33969 "gram.cpp"
        break;

        case 844: /* opt_fdw_options: %empty  */
#line 6507 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 33975 "gram.cpp"
        break;

        case 845: /* DropFdwStmt: DROP FOREIGN DATA_P WRAPPER name opt_drop_behavior  */
#line 6518 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_FDW;
            n->objects = list_make1(list_make1(makeString((yyvsp[-1].str))));
            n->arguments = NIL;
            n->missing_ok = false;
            n->behavior = (yyvsp[0].dbehavior);
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 33990 "gram.cpp"
        break;

        case 846: /* DropFdwStmt: DROP FOREIGN DATA_P WRAPPER IF_P EXISTS name opt_drop_behavior  */
#line 6529 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_FDW;
            n->objects = list_make1(list_make1(makeString((yyvsp[-1].str))));
            n->arguments = NIL;
            n->missing_ok = true;
            n->behavior = (yyvsp[0].dbehavior);
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 34005 "gram.cpp"
        break;

        case 847: /* AlterFdwStmt: ALTER FOREIGN DATA_P WRAPPER name opt_fdw_options alter_generic_options  */
#line 6549 "gram.y"
        {
            AlterFdwStmt* n = makeNode(AlterFdwStmt);
            n->fdwname = (yyvsp[-2].str);
            n->func_options = (yyvsp[-1].list);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 34017 "gram.cpp"
        break;

        case 848: /* AlterFdwStmt: ALTER FOREIGN DATA_P WRAPPER name fdw_options  */
#line 6557 "gram.y"
        {
            AlterFdwStmt* n = makeNode(AlterFdwStmt);
            n->fdwname = (yyvsp[-1].str);
            n->func_options = (yyvsp[0].list);
            n->options = NIL;
            (yyval.node) = (Node*) n;
        }
#line 34029 "gram.cpp"
        break;

        case 849: /* create_generic_options: OPTIONS '(' generic_option_list ')'  */
#line 6568 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 34035 "gram.cpp"
        break;

        case 850: /* create_generic_options: %empty  */
#line 6569 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 34041 "gram.cpp"
        break;

        case 851: /* generic_option_list: generic_option_elem  */
#line 6574 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 34049 "gram.cpp"
        break;

        case 852: /* generic_option_list: generic_option_list ',' generic_option_elem  */
#line 6578 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
        }
#line 34057 "gram.cpp"
        break;

        case 853: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 6585 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 34063 "gram.cpp"
        break;

        case 854: /* alter_generic_option_list: alter_generic_option_elem  */
#line 6590 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 34071 "gram.cpp"
        break;

        case 855: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 6594 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
        }
#line 34079 "gram.cpp"
        break;

        case 856: /* alter_generic_option_elem: generic_option_elem  */
#line 6601 "gram.y"
        {
            (yyval.defelt) = (yyvsp[0].defelt);
        }
#line 34087 "gram.cpp"
        break;

        case 857: /* alter_generic_option_elem: SET generic_option_elem  */
#line 6605 "gram.y"
        {
            (yyval.defelt) = (yyvsp[0].defelt);
            (yyval.defelt)->defaction = DEFELEM_SET;
        }
#line 34096 "gram.cpp"
        break;

        case 858: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 6610 "gram.y"
        {
            (yyval.defelt) = (yyvsp[0].defelt);
            (yyval.defelt)->defaction = DEFELEM_ADD;
        }
#line 34105 "gram.cpp"
        break;

        case 859: /* alter_generic_option_elem: DROP generic_option_name  */
#line 6615 "gram.y"
        {
            (yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP);
        }
#line 34113 "gram.cpp"
        break;

        case 860: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 6622 "gram.y"
        {
            (yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node));
        }
#line 34121 "gram.cpp"
        break;

        case 861: /* generic_option_name: ColLabel  */
#line 6628 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 34127 "gram.cpp"
        break;

        case 862: /* generic_option_arg: Sconst  */
#line 6633 "gram.y"
        {
            (yyval.node) = (Node*) makeString((yyvsp[0].str));
        }
#line 34133 "gram.cpp"
        break;

        case 863: /* CreateForeignServerStmt: CREATE SERVER name opt_type opt_foreign_server_version FOREIGN DATA_P WRAPPER name create_generic_options  */
#line 6645 "gram.y"
        {
            CreateForeignServerStmt* n = makeNode(CreateForeignServerStmt);
            n->servername = (yyvsp[-7].str);
            n->servertype = (yyvsp[-6].str);
            n->version = (yyvsp[-5].str);
            n->fdwname = (yyvsp[-1].str);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 34147 "gram.cpp"
        break;

        case 864: /* opt_type: TYPE_P Sconst  */
#line 6657 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 34153 "gram.cpp"
        break;

        case 865: /* opt_type: %empty  */
#line 6658 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 34159 "gram.cpp"
        break;

        case 866: /* foreign_server_version: VERSION_P Sconst  */
#line 6663 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 34165 "gram.cpp"
        break;

        case 867: /* foreign_server_version: VERSION_P NULL_P  */
#line 6664 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 34171 "gram.cpp"
        break;

        case 868: /* opt_foreign_server_version: foreign_server_version  */
#line 6668 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 34177 "gram.cpp"
        break;

        case 869: /* opt_foreign_server_version: %empty  */
#line 6669 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 34183 "gram.cpp"
        break;

        case 870: /* DropForeignServerStmt: DROP SERVER name opt_drop_behavior  */
#line 6680 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_FOREIGN_SERVER;
            n->objects = list_make1(list_make1(makeString((yyvsp[-1].str))));
            n->arguments = NIL;
            n->missing_ok = false;
            n->behavior = (yyvsp[0].dbehavior);
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 34198 "gram.cpp"
        break;

        case 871: /* DropForeignServerStmt: DROP SERVER IF_P EXISTS name opt_drop_behavior  */
#line 6691 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_FOREIGN_SERVER;
            n->objects = list_make1(list_make1(makeString((yyvsp[-1].str))));
            n->arguments = NIL;
            n->missing_ok = true;
            n->behavior = (yyvsp[0].dbehavior);
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 34213 "gram.cpp"
        break;

        case 872: /* AlterForeignServerStmt: ALTER SERVER name foreign_server_version alter_generic_options  */
#line 6711 "gram.y"
        {
            AlterForeignServerStmt* n = makeNode(AlterForeignServerStmt);
            n->servername = (yyvsp[-2].str);
            n->version = (yyvsp[-1].str);
            n->options = (yyvsp[0].list);
            n->has_version = true;
            (yyval.node) = (Node*) n;
        }
#line 34226 "gram.cpp"
        break;

        case 873: /* AlterForeignServerStmt: ALTER SERVER name foreign_server_version  */
#line 6720 "gram.y"
        {
            AlterForeignServerStmt* n = makeNode(AlterForeignServerStmt);
            n->servername = (yyvsp[-1].str);
            n->version = (yyvsp[0].str);
            n->has_version = true;
            (yyval.node) = (Node*) n;
        }
#line 34238 "gram.cpp"
        break;

        case 874: /* AlterForeignServerStmt: ALTER SERVER name alter_generic_options  */
#line 6728 "gram.y"
        {
            AlterForeignServerStmt* n = makeNode(AlterForeignServerStmt);
            n->servername = (yyvsp[-1].str);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 34249 "gram.cpp"
        break;

        case 875: /* CreateForeignTableStmt: CREATE FOREIGN TABLE qualified_name '(' OptTableElementList ')' SERVER name create_generic_options  */
#line 6747 "gram.y"
        {
            CreateForeignTableStmt* n = makeNode(CreateForeignTableStmt);
            (yyvsp[-6].range)->relpersistence = RELPERSISTENCE_PERMANENT;
            n->base.relation = (yyvsp[-6].range);
            n->base.tableElts = (yyvsp[-4].list);
            n->base.inhRelations = NIL;
            n->base.if_not_exists = false;
            /* FDW-specific data */
            n->servername = (yyvsp[-1].str);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 34266 "gram.cpp"
        break;

        case 876: /* CreateForeignTableStmt: CREATE FOREIGN TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' SERVER name create_generic_options  */
#line 6762 "gram.y"
        {
            CreateForeignTableStmt* n = makeNode(CreateForeignTableStmt);
            (yyvsp[-6].range)->relpersistence = RELPERSISTENCE_PERMANENT;
            n->base.relation = (yyvsp[-6].range);
            n->base.tableElts = (yyvsp[-4].list);
            n->base.inhRelations = NIL;
            n->base.if_not_exists = true;
            /* FDW-specific data */
            n->servername = (yyvsp[-1].str);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 34283 "gram.cpp"
        break;

        case 877: /* AlterForeignTableStmt: ALTER FOREIGN TABLE relation_expr alter_table_cmds  */
#line 6785 "gram.y"
        {
            AlterTableStmt* n = makeNode(AlterTableStmt);
            n->relation = (yyvsp[-1].range);
            n->cmds = (yyvsp[0].list);
            n->relkind = OBJECT_FOREIGN_TABLE;
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 34296 "gram.cpp"
        break;

        case 878: /* AlterForeignTableStmt: ALTER FOREIGN TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 6794 "gram.y"
        {
            AlterTableStmt* n = makeNode(AlterTableStmt);
            n->relation = (yyvsp[-1].range);
            n->cmds = (yyvsp[0].list);
            n->relkind = OBJECT_FOREIGN_TABLE;
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 34309 "gram.cpp"
        break;

        case 879: /* CreateUserMappingStmt: CREATE USER MAPPING FOR auth_ident SERVER name create_generic_options  */
#line 6812 "gram.y"
        {
            CreateUserMappingStmt* n = makeNode(CreateUserMappingStmt);
            n->username = (yyvsp[-3].str);
            n->servername = (yyvsp[-1].str);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 34321 "gram.cpp"
        break;

        case 880: /* auth_ident: CURRENT_USER  */
#line 6823 "gram.y"
        {
            (yyval.str) = "current_user";
        }
#line 34327 "gram.cpp"
        break;

        case 881: /* auth_ident: USER  */
#line 6824 "gram.y"
        {
            (yyval.str) = "current_user";
        }
#line 34333 "gram.cpp"
        break;

        case 882: /* auth_ident: RoleId  */
#line 6825 "gram.y"
        {
            (yyval.str) = (strcmp((yyvsp[0].str), "public") == 0) ? NULL : (yyvsp[0].str);
        }
#line 34339 "gram.cpp"
        break;

        case 883: /* DropUserMappingStmt: DROP USER MAPPING FOR auth_ident SERVER name  */
#line 6836 "gram.y"
        {
            DropUserMappingStmt* n = makeNode(DropUserMappingStmt);
            n->username = (yyvsp[-2].str);
            n->servername = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 34351 "gram.cpp"
        break;

        case 884: /* DropUserMappingStmt: DROP USER MAPPING IF_P EXISTS FOR auth_ident SERVER name  */
#line 6844 "gram.y"
        {
            DropUserMappingStmt* n = makeNode(DropUserMappingStmt);
            n->username = (yyvsp[-2].str);
            n->servername = (yyvsp[0].str);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 34363 "gram.cpp"
        break;

        case 885: /* AlterUserMappingStmt: ALTER USER MAPPING FOR auth_ident SERVER name alter_generic_options  */
#line 6861 "gram.y"
        {
            AlterUserMappingStmt* n = makeNode(AlterUserMappingStmt);
            n->username = (yyvsp[-3].str);
            n->servername = (yyvsp[-1].str);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 34375 "gram.cpp"
        break;

        case 886: /* CreateTrigStmt: CREATE TRIGGER name TriggerActionTime TriggerEvents ON qualified_name TriggerForSpec TriggerWhen EXECUTE PROCEDURE func_name '(' TriggerFuncArgs ')'  */
#line 6882 "gram.y"
        {
            CreateTrigStmt* n = makeNode(CreateTrigStmt);
            n->trigname = (yyvsp[-12].str);
            n->relation = (yyvsp[-8].range);
            n->funcname = (yyvsp[-3].list);
            n->args = (yyvsp[-1].list);
            n->row = (yyvsp[-7].boolean);
            n->timing = (yyvsp[-11].ival);
            n->events = intVal(linitial((yyvsp[-10].list)));
            n->columns = (List*) lsecond((yyvsp[-10].list));
            n->whenClause = (yyvsp[-6].node);
            n->isconstraint = FALSE;
            n->deferrable = FALSE;
            n->initdeferred = FALSE;
            n->constrrel = NULL;
            (yyval.node) = (Node*) n;
        }
#line 34397 "gram.cpp"
        break;

        case 887: /* CreateTrigStmt: CREATE CONSTRAINT TRIGGER name AFTER TriggerEvents ON qualified_name OptConstrFromTable ConstraintAttributeSpec FOR EACH ROW TriggerWhen EXECUTE PROCEDURE func_name '(' TriggerFuncArgs ')'  */
#line 6903 "gram.y"
        {
            CreateTrigStmt* n = makeNode(CreateTrigStmt);
            n->trigname = (yyvsp[-16].str);
            n->relation = (yyvsp[-12].range);
            n->funcname = (yyvsp[-3].list);
            n->args = (yyvsp[-1].list);
            n->row = TRUE;
            n->timing = TRIGGER_TYPE_AFTER;
            n->events = intVal(linitial((yyvsp[-14].list)));
            n->columns = (List*) lsecond((yyvsp[-14].list));
            n->whenClause = (yyvsp[-6].node);
            n->isconstraint = TRUE;
            processCASbits((yyvsp[-10].ival),
                           (yylsp[-10]),
                           "TRIGGER",
                           &n->deferrable,
                           &n->initdeferred,
                           NULL,
                           NULL,
                           yyscanner);
            n->constrrel = (yyvsp[-11].range);
            (yyval.node) = (Node*) n;
        }
#line 34420 "gram.cpp"
        break;

        case 888: /* TriggerActionTime: BEFORE  */
#line 6924 "gram.y"
        {
            (yyval.ival) = TRIGGER_TYPE_BEFORE;
        }
#line 34426 "gram.cpp"
        break;

        case 889: /* TriggerActionTime: AFTER  */
#line 6925 "gram.y"
        {
            (yyval.ival) = TRIGGER_TYPE_AFTER;
        }
#line 34432 "gram.cpp"
        break;

        case 890: /* TriggerActionTime: INSTEAD OF  */
#line 6926 "gram.y"
        {
            (yyval.ival) = TRIGGER_TYPE_INSTEAD;
        }
#line 34438 "gram.cpp"
        break;

        case 891: /* TriggerEvents: TriggerOneEvent  */
#line 6931 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 34444 "gram.cpp"
        break;

        case 892: /* TriggerEvents: TriggerEvents OR TriggerOneEvent  */
#line 6933 "gram.y"
        {
            int events1 = intVal(linitial((yyvsp[-2].list)));
            int events2 = intVal(linitial((yyvsp[0].list)));
            List* columns1 = (List*) lsecond((yyvsp[-2].list));
            List* columns2 = (List*) lsecond((yyvsp[0].list));

            if (events1 & events2)
                parser_yyerror("duplicate trigger events specified");
            /*
					 * concat'ing the columns lists loses information about
					 * which columns went with which event, but so long as
					 * only UPDATE carries columns and we disallow multiple
					 * UPDATE items, it doesn't matter.  Command execution
					 * should just ignore the columns for non-UPDATE events.
					 */
            (yyval.list) = list_make2(makeInteger(events1 | events2), list_concat(columns1, columns2));
        }
#line 34467 "gram.cpp"
        break;

        case 893: /* TriggerOneEvent: INSERT  */
#line 6955 "gram.y"
        {
            (yyval.list) = list_make2(makeInteger(TRIGGER_TYPE_INSERT), NIL);
        }
#line 34473 "gram.cpp"
        break;

        case 894: /* TriggerOneEvent: DELETE_P  */
#line 6957 "gram.y"
        {
            (yyval.list) = list_make2(makeInteger(TRIGGER_TYPE_DELETE), NIL);
        }
#line 34479 "gram.cpp"
        break;

        case 895: /* TriggerOneEvent: UPDATE  */
#line 6959 "gram.y"
        {
            (yyval.list) = list_make2(makeInteger(TRIGGER_TYPE_UPDATE), NIL);
        }
#line 34485 "gram.cpp"
        break;

        case 896: /* TriggerOneEvent: UPDATE OF columnList  */
#line 6961 "gram.y"
        {
            (yyval.list) = list_make2(makeInteger(TRIGGER_TYPE_UPDATE), (yyvsp[0].list));
        }
#line 34491 "gram.cpp"
        break;

        case 897: /* TriggerOneEvent: TRUNCATE  */
#line 6963 "gram.y"
        {
            (yyval.list) = list_make2(makeInteger(TRIGGER_TYPE_TRUNCATE), NIL);
        }
#line 34497 "gram.cpp"
        break;

        case 898: /* TriggerForSpec: FOR TriggerForOptEach TriggerForType  */
#line 6968 "gram.y"
        {
            (yyval.boolean) = (yyvsp[0].boolean);
        }
#line 34505 "gram.cpp"
        break;

        case 899: /* TriggerForSpec: %empty  */
#line 6972 "gram.y"
        {
            /*
					 * If ROW/STATEMENT not specified, default to
					 * STATEMENT, per SQL
					 */
            (yyval.boolean) = FALSE;
        }
#line 34517 "gram.cpp"
        break;

        case 900: /* TriggerForOptEach: EACH  */
#line 6982 "gram.y"
        {
        }
#line 34523 "gram.cpp"
        break;

        case 901: /* TriggerForOptEach: %empty  */
#line 6983 "gram.y"
        {
        }
#line 34529 "gram.cpp"
        break;

        case 902: /* TriggerForType: ROW  */
#line 6987 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 34535 "gram.cpp"
        break;

        case 903: /* TriggerForType: STATEMENT  */
#line 6988 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 34541 "gram.cpp"
        break;

        case 904: /* TriggerWhen: WHEN '(' a_expr ')'  */
#line 6992 "gram.y"
        {
            (yyval.node) = (yyvsp[-1].node);
        }
#line 34547 "gram.cpp"
        break;

        case 905: /* TriggerWhen: %empty  */
#line 6993 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 34553 "gram.cpp"
        break;

        case 906: /* TriggerFuncArgs: TriggerFuncArg  */
#line 6997 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].value));
        }
#line 34559 "gram.cpp"
        break;

        case 907: /* TriggerFuncArgs: TriggerFuncArgs ',' TriggerFuncArg  */
#line 6998 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].value));
        }
#line 34565 "gram.cpp"
        break;

        case 908: /* TriggerFuncArgs: %empty  */
#line 6999 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 34571 "gram.cpp"
        break;

        case 909: /* TriggerFuncArg: Iconst  */
#line 7004 "gram.y"
        {
            char buf[64];
            snprintf(buf, sizeof(buf), "%d", (yyvsp[0].ival));
            (yyval.value) = makeString(pstrdup(buf));
        }
#line 34581 "gram.cpp"
        break;

        case 910: /* TriggerFuncArg: FCONST  */
#line 7009 "gram.y"
        {
            (yyval.value) = makeString((yyvsp[0].str));
        }
#line 34587 "gram.cpp"
        break;

        case 911: /* TriggerFuncArg: Sconst  */
#line 7010 "gram.y"
        {
            (yyval.value) = makeString((yyvsp[0].str));
        }
#line 34593 "gram.cpp"
        break;

        case 912: /* TriggerFuncArg: ColLabel  */
#line 7011 "gram.y"
        {
            (yyval.value) = makeString((yyvsp[0].str));
        }
#line 34599 "gram.cpp"
        break;

        case 913: /* OptConstrFromTable: FROM qualified_name  */
#line 7015 "gram.y"
        {
            (yyval.range) = (yyvsp[0].range);
        }
#line 34605 "gram.cpp"
        break;

        case 914: /* OptConstrFromTable: %empty  */
#line 7016 "gram.y"
        {
            (yyval.range) = NULL;
        }
#line 34611 "gram.cpp"
        break;

        case 915: /* ConstraintAttributeSpec: %empty  */
#line 7021 "gram.y"
        {
            (yyval.ival) = 0;
        }
#line 34617 "gram.cpp"
        break;

        case 916: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 7023 "gram.y"
        {
            /*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
            int newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

            /* special message for this case */
            if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) ==
                (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
                ereport(ERROR,
                        errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
                        parser_errposition((yylsp[0])));
            /* generic message for other conflicts */
            if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
                (newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) ==
                    (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
                ereport(ERROR,
                        errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("conflicting constraint properties"),
                        parser_errposition((yylsp[0])));
            (yyval.ival) = newspec;
        }
#line 34645 "gram.cpp"
        break;

        case 917: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 7049 "gram.y"
        {
            (yyval.ival) = CAS_NOT_DEFERRABLE;
        }
#line 34651 "gram.cpp"
        break;

        case 918: /* ConstraintAttributeElem: DEFERRABLE  */
#line 7050 "gram.y"
        {
            (yyval.ival) = CAS_DEFERRABLE;
        }
#line 34657 "gram.cpp"
        break;

        case 919: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 7051 "gram.y"
        {
            (yyval.ival) = CAS_INITIALLY_IMMEDIATE;
        }
#line 34663 "gram.cpp"
        break;

        case 920: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 7052 "gram.y"
        {
            (yyval.ival) = CAS_INITIALLY_DEFERRED;
        }
#line 34669 "gram.cpp"
        break;

        case 921: /* ConstraintAttributeElem: NOT VALID  */
#line 7053 "gram.y"
        {
            (yyval.ival) = CAS_NOT_VALID;
        }
#line 34675 "gram.cpp"
        break;

        case 922: /* ConstraintAttributeElem: NO INHERIT  */
#line 7054 "gram.y"
        {
            (yyval.ival) = CAS_NO_INHERIT;
        }
#line 34681 "gram.cpp"
        break;

        case 923: /* DropTrigStmt: DROP TRIGGER name ON any_name opt_drop_behavior  */
#line 7060 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_TRIGGER;
            n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
            n->arguments = NIL;
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = false;
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 34696 "gram.cpp"
        break;

        case 924: /* DropTrigStmt: DROP TRIGGER IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 7071 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_TRIGGER;
            n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
            n->arguments = NIL;
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = true;
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 34711 "gram.cpp"
        break;

        case 925: /* CreateEventTrigStmt: CREATE EVENT TRIGGER name ON ColLabel EXECUTE PROCEDURE func_name '(' ')'  */
#line 7095 "gram.y"
        {
            CreateEventTrigStmt* n = makeNode(CreateEventTrigStmt);
            n->trigname = (yyvsp[-7].str);
            n->eventname = (yyvsp[-5].str);
            n->whenclause = NULL;
            n->funcname = (yyvsp[-2].list);
            (yyval.node) = (Node*) n;
        }
#line 34724 "gram.cpp"
        break;

        case 926: /* CreateEventTrigStmt: CREATE EVENT TRIGGER name ON ColLabel WHEN event_trigger_when_list EXECUTE PROCEDURE func_name '(' ')'  */
#line 7106 "gram.y"
        {
            CreateEventTrigStmt* n = makeNode(CreateEventTrigStmt);
            n->trigname = (yyvsp[-9].str);
            n->eventname = (yyvsp[-7].str);
            n->whenclause = (yyvsp[-5].list);
            n->funcname = (yyvsp[-2].list);
            (yyval.node) = (Node*) n;
        }
#line 34737 "gram.cpp"
        break;

        case 927: /* event_trigger_when_list: event_trigger_when_item  */
#line 7118 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 34743 "gram.cpp"
        break;

        case 928: /* event_trigger_when_list: event_trigger_when_list AND event_trigger_when_item  */
#line 7120 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
        }
#line 34749 "gram.cpp"
        break;

        case 929: /* event_trigger_when_item: ColId IN_P '(' event_trigger_value_list ')'  */
#line 7125 "gram.y"
        {
            (yyval.defelt) = makeDefElem((yyvsp[-4].str), (Node*) (yyvsp[-1].list));
        }
#line 34755 "gram.cpp"
        break;

        case 930: /* event_trigger_value_list: SCONST  */
#line 7130 "gram.y"
        {
            (yyval.list) = list_make1(makeString((yyvsp[0].str)));
        }
#line 34761 "gram.cpp"
        break;

        case 931: /* event_trigger_value_list: event_trigger_value_list ',' SCONST  */
#line 7132 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str)));
        }
#line 34767 "gram.cpp"
        break;

        case 932: /* AlterEventTrigStmt: ALTER EVENT TRIGGER name enable_trigger  */
#line 7137 "gram.y"
        {
            AlterEventTrigStmt* n = makeNode(AlterEventTrigStmt);
            n->trigname = (yyvsp[-1].str);
            n->tgenabled = (yyvsp[0].chr);
            (yyval.node) = (Node*) n;
        }
#line 34778 "gram.cpp"
        break;

        case 933: /* enable_trigger: ENABLE_P  */
#line 7146 "gram.y"
        {
            (yyval.chr) = TRIGGER_FIRES_ON_ORIGIN;
        }
#line 34784 "gram.cpp"
        break;

        case 934: /* enable_trigger: ENABLE_P REPLICA  */
#line 7147 "gram.y"
        {
            (yyval.chr) = TRIGGER_FIRES_ON_REPLICA;
        }
#line 34790 "gram.cpp"
        break;

        case 935: /* enable_trigger: ENABLE_P ALWAYS  */
#line 7148 "gram.y"
        {
            (yyval.chr) = TRIGGER_FIRES_ALWAYS;
        }
#line 34796 "gram.cpp"
        break;

        case 936: /* enable_trigger: DISABLE_P  */
#line 7149 "gram.y"
        {
            (yyval.chr) = TRIGGER_DISABLED;
        }
#line 34802 "gram.cpp"
        break;

        case 937: /* CreateAssertStmt: CREATE ASSERTION name CHECK '(' a_expr ')' ConstraintAttributeSpec  */
#line 7163 "gram.y"
        {
            CreateTrigStmt* n = makeNode(CreateTrigStmt);
            n->trigname = (yyvsp[-5].str);
            n->args = list_make1((yyvsp[-2].node));
            n->isconstraint = TRUE;
            processCASbits((yyvsp[0].ival),
                           (yylsp[0]),
                           "ASSERTION",
                           &n->deferrable,
                           &n->initdeferred,
                           NULL,
                           NULL,
                           yyscanner);

            ereport(ERROR, errcode(ERRCODE_FEATURE_NOT_SUPPORTED), errmsg("CREATE ASSERTION is not yet implemented"));

            (yyval.node) = (Node*) n;
        }
#line 34822 "gram.cpp"
        break;

        case 938: /* DropAssertStmt: DROP ASSERTION name opt_drop_behavior  */
#line 7182 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->objects = NIL;
            n->arguments = NIL;
            n->behavior = (yyvsp[0].dbehavior);
            n->removeType = OBJECT_TRIGGER; /* XXX */
            ereport(ERROR, errcode(ERRCODE_FEATURE_NOT_SUPPORTED), errmsg("DROP ASSERTION is not yet implemented"));
            (yyval.node) = (Node*) n;
        }
#line 34838 "gram.cpp"
        break;

        case 939: /* DefineStmt: CREATE opt_ordered AGGREGATE func_name aggr_args definition  */
#line 7205 "gram.y"
        {
            DefineStmt* n = makeNode(DefineStmt);
            n->kind = OBJECT_AGGREGATE;
            n->oldstyle = false;
            n->defnames = (yyvsp[-2].list);
            n->args = (yyvsp[-1].list);
            n->definition = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 34852 "gram.cpp"
        break;

        case 940: /* DefineStmt: CREATE opt_ordered AGGREGATE func_name old_aggr_definition  */
#line 7215 "gram.y"
        {
            /* old-style (pre-8.2) syntax for CREATE AGGREGATE */
            DefineStmt* n = makeNode(DefineStmt);
            n->kind = OBJECT_AGGREGATE;
            n->oldstyle = true;
            n->defnames = (yyvsp[-1].list);
            n->args = NIL;
            n->definition = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 34867 "gram.cpp"
        break;

        case 941: /* DefineStmt: CREATE OPERATOR any_operator definition  */
#line 7226 "gram.y"
        {
            DefineStmt* n = makeNode(DefineStmt);
            n->kind = OBJECT_OPERATOR;
            n->oldstyle = false;
            n->defnames = (yyvsp[-1].list);
            n->args = NIL;
            n->definition = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 34881 "gram.cpp"
        break;

        case 942: /* DefineStmt: CREATE TYPE_P any_name definition  */
#line 7236 "gram.y"
        {
            DefineStmt* n = makeNode(DefineStmt);
            n->kind = OBJECT_TYPE;
            n->oldstyle = false;
            n->defnames = (yyvsp[-1].list);
            n->args = NIL;
            n->definition = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 34895 "gram.cpp"
        break;

        case 943: /* DefineStmt: CREATE TYPE_P any_name  */
#line 7246 "gram.y"
        {
            /* Shell type (identified by lack of definition) */
            DefineStmt* n = makeNode(DefineStmt);
            n->kind = OBJECT_TYPE;
            n->oldstyle = false;
            n->defnames = (yyvsp[0].list);
            n->args = NIL;
            n->definition = NIL;
            (yyval.node) = (Node*) n;
        }
#line 34910 "gram.cpp"
        break;

        case 944: /* DefineStmt: CREATE TYPE_P any_name AS '(' OptTableFuncElementList ')'  */
#line 7257 "gram.y"
        {
            CompositeTypeStmt* n = makeNode(CompositeTypeStmt);

            /* can't use qualified_name, sigh */
            n->typevar = makeRangeVarFromAnyName((yyvsp[-4].list), (yylsp[-4]), yyscanner);
            n->coldeflist = (yyvsp[-1].list);
            (yyval.node) = (Node*) n;
        }
#line 34923 "gram.cpp"
        break;

        case 945: /* DefineStmt: CREATE opt_or_replace opt_trusted PROTOCOL name definition  */
#line 7266 "gram.y"
        {
            /*
					 * The opt_or_replace is here just to avoid a grammar conflict.
					 * It's not actually supported.
					 */
            if ((yyvsp[-4].boolean))
                ereport(ERROR, errcode(ERRCODE_SYNTAX_ERROR), errmsg("syntax error"), parser_errposition((yylsp[-4])));

            DefineStmt* n = makeNode(DefineStmt);
            n->kind = OBJECT_EXTPROTOCOL;
            n->oldstyle = false;
            n->trusted = (yyvsp[-3].boolean);
            n->defnames = list_make1(makeString((yyvsp[-1].str)));
            n->args = NIL;
            n->definition = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 34948 "gram.cpp"
        break;

        case 946: /* DefineStmt: CREATE TYPE_P any_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 7287 "gram.y"
        {
            CreateEnumStmt* n = makeNode(CreateEnumStmt);
            n->typeName = (yyvsp[-5].list);
            n->vals = (yyvsp[-1].list);
            (yyval.node) = (Node*) n;
        }
#line 34959 "gram.cpp"
        break;

        case 947: /* DefineStmt: CREATE TYPE_P any_name AS RANGE definition  */
#line 7294 "gram.y"
        {
            CreateRangeStmt* n = makeNode(CreateRangeStmt);
            n->typeName = (yyvsp[-3].list);
            n->params = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 34970 "gram.cpp"
        break;

        case 948: /* DefineStmt: CREATE TEXT_P SEARCH PARSER any_name definition  */
#line 7301 "gram.y"
        {
            DefineStmt* n = makeNode(DefineStmt);
            n->kind = OBJECT_TSPARSER;
            n->args = NIL;
            n->defnames = (yyvsp[-1].list);
            n->definition = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 34983 "gram.cpp"
        break;

        case 949: /* DefineStmt: CREATE TEXT_P SEARCH DICTIONARY any_name definition  */
#line 7310 "gram.y"
        {
            DefineStmt* n = makeNode(DefineStmt);
            n->kind = OBJECT_TSDICTIONARY;
            n->args = NIL;
            n->defnames = (yyvsp[-1].list);
            n->definition = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 34996 "gram.cpp"
        break;

        case 950: /* DefineStmt: CREATE TEXT_P SEARCH TEMPLATE any_name definition  */
#line 7319 "gram.y"
        {
            DefineStmt* n = makeNode(DefineStmt);
            n->kind = OBJECT_TSTEMPLATE;
            n->args = NIL;
            n->defnames = (yyvsp[-1].list);
            n->definition = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 35009 "gram.cpp"
        break;

        case 951: /* DefineStmt: CREATE TEXT_P SEARCH CONFIGURATION any_name definition  */
#line 7328 "gram.y"
        {
            DefineStmt* n = makeNode(DefineStmt);
            n->kind = OBJECT_TSCONFIGURATION;
            n->args = NIL;
            n->defnames = (yyvsp[-1].list);
            n->definition = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 35022 "gram.cpp"
        break;

        case 952: /* DefineStmt: CREATE COLLATION any_name definition  */
#line 7337 "gram.y"
        {
            DefineStmt* n = makeNode(DefineStmt);
            n->kind = OBJECT_COLLATION;
            n->args = NIL;
            n->defnames = (yyvsp[-1].list);
            n->definition = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 35035 "gram.cpp"
        break;

        case 953: /* DefineStmt: CREATE COLLATION any_name FROM any_name  */
#line 7346 "gram.y"
        {
            DefineStmt* n = makeNode(DefineStmt);
            n->kind = OBJECT_COLLATION;
            n->args = NIL;
            n->defnames = (yyvsp[-2].list);
            n->definition = list_make1(makeDefElem("from", (Node*) (yyvsp[0].list)));
            (yyval.node) = (Node*) n;
        }
#line 35048 "gram.cpp"
        break;

        case 954: /* opt_ordered: ORDERED  */
#line 7356 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 35054 "gram.cpp"
        break;

        case 955: /* opt_ordered: %empty  */
#line 7357 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 35060 "gram.cpp"
        break;

        case 956: /* definition: '(' def_list ')'  */
#line 7360 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 35066 "gram.cpp"
        break;

        case 957: /* def_list: def_elem  */
#line 7363 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 35072 "gram.cpp"
        break;

        case 958: /* def_list: def_list ',' def_elem  */
#line 7364 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
        }
#line 35078 "gram.cpp"
        break;

        case 959: /* def_elem: ColLabel '=' def_arg  */
#line 7368 "gram.y"
        {
            /*
					 * appendoptimized is an alias for appendonly in order to
					 * provide a reloption syntax which better reflects the
					 * featureset of AO tables. It is implemented as a very
					 * thin alias, the reloptions and messaging will still
					 * say appendonly.
					 */
            if (strcmp((yyvsp[-2].str), "appendoptimized") == 0)
                (yyval.defelt) = makeDefElem("appendonly", (Node*) (yyvsp[0].node));
            else
                (yyval.defelt) = makeDefElem((yyvsp[-2].str), (Node*) (yyvsp[0].node));
        }
#line 35096 "gram.cpp"
        break;

        case 960: /* def_elem: ColLabel  */
#line 7382 "gram.y"
        {
            (yyval.defelt) = makeDefElem((yyvsp[0].str), NULL);
        }
#line 35104 "gram.cpp"
        break;

        case 961: /* def_arg: func_type  */
#line 7388 "gram.y"
        {
            (yyval.node) = (Node*) (yyvsp[0].typnam);
        }
#line 35110 "gram.cpp"
        break;

        case 962: /* def_arg: ROW  */
#line 7390 "gram.y"
        {
            (yyval.node) = (Node*) makeString(pstrdup("row"));
        }
#line 35116 "gram.cpp"
        break;

        case 963: /* def_arg: reserved_keyword  */
#line 7391 "gram.y"
        {
            (yyval.node) = (Node*) makeString(pstrdup((yyvsp[0].keyword)));
        }
#line 35122 "gram.cpp"
        break;

        case 964: /* def_arg: qual_all_Op  */
#line 7392 "gram.y"
        {
            (yyval.node) = (Node*) (yyvsp[0].list);
        }
#line 35128 "gram.cpp"
        break;

        case 965: /* def_arg: NumericOnly  */
#line 7393 "gram.y"
        {
            (yyval.node) = (Node*) (yyvsp[0].value);
        }
#line 35134 "gram.cpp"
        break;

        case 966: /* def_arg: Sconst  */
#line 7394 "gram.y"
        {
            (yyval.node) = (Node*) makeString((yyvsp[0].str));
        }
#line 35140 "gram.cpp"
        break;

        case 967: /* def_arg: NONE  */
#line 7401 "gram.y"
        {
            (yyval.node) = (Node*) makeString(pstrdup("none"));
        }
#line 35146 "gram.cpp"
        break;

        case 968: /* old_aggr_definition: '(' old_aggr_list ')'  */
#line 7404 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 35152 "gram.cpp"
        break;

        case 969: /* old_aggr_list: old_aggr_elem  */
#line 7407 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 35158 "gram.cpp"
        break;

        case 970: /* old_aggr_list: old_aggr_list ',' old_aggr_elem  */
#line 7408 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
        }
#line 35164 "gram.cpp"
        break;

        case 971: /* old_aggr_elem: IDENT '=' def_arg  */
#line 7417 "gram.y"
        {
            (yyval.defelt) = makeDefElem((yyvsp[-2].str), (Node*) (yyvsp[0].node));
        }
#line 35172 "gram.cpp"
        break;

        case 972: /* opt_enum_val_list: enum_val_list  */
#line 7423 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 35178 "gram.cpp"
        break;

        case 973: /* opt_enum_val_list: %empty  */
#line 7424 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 35184 "gram.cpp"
        break;

        case 974: /* enum_val_list: Sconst  */
#line 7428 "gram.y"
        {
            (yyval.list) = list_make1(makeString((yyvsp[0].str)));
        }
#line 35190 "gram.cpp"
        break;

        case 975: /* enum_val_list: enum_val_list ',' Sconst  */
#line 7430 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str)));
        }
#line 35196 "gram.cpp"
        break;

        case 976: /* AlterEnumStmt: ALTER TYPE_P any_name ADD_P VALUE_P opt_if_not_exists Sconst  */
#line 7441 "gram.y"
        {
            AlterEnumStmt* n = makeNode(AlterEnumStmt);
            n->typeName = (yyvsp[-4].list);
            n->newVal = (yyvsp[0].str);
            n->newValNeighbor = NULL;
            n->newValIsAfter = true;
            n->skipIfExists = (yyvsp[-1].boolean);
            (yyval.node) = (Node*) n;
        }
#line 35210 "gram.cpp"
        break;

        case 977: /* AlterEnumStmt: ALTER TYPE_P any_name ADD_P VALUE_P opt_if_not_exists Sconst BEFORE Sconst  */
#line 7451 "gram.y"
        {
            AlterEnumStmt* n = makeNode(AlterEnumStmt);
            n->typeName = (yyvsp[-6].list);
            n->newVal = (yyvsp[-2].str);
            n->newValNeighbor = (yyvsp[0].str);
            n->newValIsAfter = false;
            n->skipIfExists = (yyvsp[-3].boolean);
            (yyval.node) = (Node*) n;
        }
#line 35224 "gram.cpp"
        break;

        case 978: /* AlterEnumStmt: ALTER TYPE_P any_name ADD_P VALUE_P opt_if_not_exists Sconst AFTER Sconst  */
#line 7461 "gram.y"
        {
            AlterEnumStmt* n = makeNode(AlterEnumStmt);
            n->typeName = (yyvsp[-6].list);
            n->newVal = (yyvsp[-2].str);
            n->newValNeighbor = (yyvsp[0].str);
            n->newValIsAfter = true;
            n->skipIfExists = (yyvsp[-3].boolean);
            (yyval.node) = (Node*) n;
        }
#line 35238 "gram.cpp"
        break;

        case 979: /* opt_if_not_exists: IF_P NOT EXISTS  */
#line 7472 "gram.y"
        {
            (yyval.boolean) = true;
        }
#line 35244 "gram.cpp"
        break;

        case 980: /* opt_if_not_exists: %empty  */
#line 7473 "gram.y"
        {
            (yyval.boolean) = false;
        }
#line 35250 "gram.cpp"
        break;

        case 981: /* CreateOpClassStmt: CREATE OPERATOR CLASS any_name opt_default FOR TYPE_P Typename USING access_method opt_opfamily AS opclass_item_list  */
#line 7491 "gram.y"
        {
            CreateOpClassStmt* n = makeNode(CreateOpClassStmt);
            n->opclassname = (yyvsp[-9].list);
            n->isDefault = (yyvsp[-8].boolean);
            n->datatype = (yyvsp[-5].typnam);
            n->amname = (yyvsp[-3].str);
            n->opfamilyname = (yyvsp[-2].list);
            n->items = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 35265 "gram.cpp"
        break;

        case 982: /* opclass_item_list: opclass_item  */
#line 7504 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 35271 "gram.cpp"
        break;

        case 983: /* opclass_item_list: opclass_item_list ',' opclass_item  */
#line 7505 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 35277 "gram.cpp"
        break;

        case 984: /* opclass_item: OPERATOR Iconst any_operator opclass_purpose opt_recheck  */
#line 7510 "gram.y"
        {
            CreateOpClassItem* n = makeNode(CreateOpClassItem);
            n->itemtype = OPCLASS_ITEM_OPERATOR;
            n->name = (yyvsp[-2].list);
            n->args = NIL;
            n->number = (yyvsp[-3].ival);
            n->order_family = (yyvsp[-1].list);
            (yyval.node) = (Node*) n;
        }
#line 35291 "gram.cpp"
        break;

        case 985: /* opclass_item: OPERATOR Iconst any_operator oper_argtypes opclass_purpose opt_recheck  */
#line 7521 "gram.y"
        {
            CreateOpClassItem* n = makeNode(CreateOpClassItem);
            n->itemtype = OPCLASS_ITEM_OPERATOR;
            n->name = (yyvsp[-3].list);
            n->args = (yyvsp[-2].list);
            n->number = (yyvsp[-4].ival);
            n->order_family = (yyvsp[-1].list);
            (yyval.node) = (Node*) n;
        }
#line 35305 "gram.cpp"
        break;

        case 986: /* opclass_item: FUNCTION Iconst func_name func_args  */
#line 7531 "gram.y"
        {
            CreateOpClassItem* n = makeNode(CreateOpClassItem);
            n->itemtype = OPCLASS_ITEM_FUNCTION;
            n->name = (yyvsp[-1].list);
            n->args = extractArgTypes((yyvsp[0].list));
            n->number = (yyvsp[-2].ival);
            (yyval.node) = (Node*) n;
        }
#line 35318 "gram.cpp"
        break;

        case 987: /* opclass_item: FUNCTION Iconst '(' type_list ')' func_name func_args  */
#line 7540 "gram.y"
        {
            CreateOpClassItem* n = makeNode(CreateOpClassItem);
            n->itemtype = OPCLASS_ITEM_FUNCTION;
            n->name = (yyvsp[-1].list);
            n->args = extractArgTypes((yyvsp[0].list));
            n->number = (yyvsp[-5].ival);
            n->class_args = (yyvsp[-3].list);
            (yyval.node) = (Node*) n;
        }
#line 35332 "gram.cpp"
        break;

        case 988: /* opclass_item: STORAGE Typename  */
#line 7550 "gram.y"
        {
            CreateOpClassItem* n = makeNode(CreateOpClassItem);
            n->itemtype = OPCLASS_ITEM_STORAGETYPE;
            n->storedtype = (yyvsp[0].typnam);
            (yyval.node) = (Node*) n;
        }
#line 35343 "gram.cpp"
        break;

        case 989: /* opt_default: DEFAULT  */
#line 7558 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 35349 "gram.cpp"
        break;

        case 990: /* opt_default: %empty  */
#line 7559 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 35355 "gram.cpp"
        break;

        case 991: /* opt_opfamily: FAMILY any_name  */
#line 7562 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 35361 "gram.cpp"
        break;

        case 992: /* opt_opfamily: %empty  */
#line 7563 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 35367 "gram.cpp"
        break;

        case 993: /* opclass_purpose: FOR SEARCH  */
#line 7566 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 35373 "gram.cpp"
        break;

        case 994: /* opclass_purpose: FOR ORDER BY any_name  */
#line 7567 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 35379 "gram.cpp"
        break;

        case 995: /* opclass_purpose: %empty  */
#line 7568 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 35385 "gram.cpp"
        break;

        case 996: /* opt_recheck: RECHECK  */
#line 7572 "gram.y"
        {
            /*
					 * RECHECK no longer does anything in opclass definitions,
					 * but we still accept it to ease porting of old database
					 * dumps.
					 */
            ereport(NOTICE,
                    errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                    errmsg("RECHECK is no longer required"),
                    errhint("Update your data type."),
                    parser_errposition((yylsp[0])));
            (yyval.boolean) = TRUE;
        }
#line 35403 "gram.cpp"
        break;

        case 997: /* opt_recheck: %empty  */
#line 7585 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 35409 "gram.cpp"
        break;

        case 998: /* CreateOpFamilyStmt: CREATE OPERATOR FAMILY any_name USING access_method  */
#line 7591 "gram.y"
        {
            CreateOpFamilyStmt* n = makeNode(CreateOpFamilyStmt);
            n->opfamilyname = (yyvsp[-2].list);
            n->amname = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 35420 "gram.cpp"
        break;

        case 999: /* AlterOpFamilyStmt: ALTER OPERATOR FAMILY any_name USING access_method ADD_P opclass_item_list  */
#line 7601 "gram.y"
        {
            AlterOpFamilyStmt* n = makeNode(AlterOpFamilyStmt);
            n->opfamilyname = (yyvsp[-4].list);
            n->amname = (yyvsp[-2].str);
            n->isDrop = false;
            n->items = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 35433 "gram.cpp"
        break;

        case 1000: /* AlterOpFamilyStmt: ALTER OPERATOR FAMILY any_name USING access_method DROP opclass_drop_list  */
#line 7610 "gram.y"
        {
            AlterOpFamilyStmt* n = makeNode(AlterOpFamilyStmt);
            n->opfamilyname = (yyvsp[-4].list);
            n->amname = (yyvsp[-2].str);
            n->isDrop = true;
            n->items = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 35446 "gram.cpp"
        break;

        case 1001: /* opclass_drop_list: opclass_drop  */
#line 7621 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 35452 "gram.cpp"
        break;

        case 1002: /* opclass_drop_list: opclass_drop_list ',' opclass_drop  */
#line 7622 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 35458 "gram.cpp"
        break;

        case 1003: /* opclass_drop: OPERATOR Iconst '(' type_list ')'  */
#line 7627 "gram.y"
        {
            CreateOpClassItem* n = makeNode(CreateOpClassItem);
            n->itemtype = OPCLASS_ITEM_OPERATOR;
            n->number = (yyvsp[-3].ival);
            n->args = (yyvsp[-1].list);
            (yyval.node) = (Node*) n;
        }
#line 35470 "gram.cpp"
        break;

        case 1004: /* opclass_drop: FUNCTION Iconst '(' type_list ')'  */
#line 7635 "gram.y"
        {
            CreateOpClassItem* n = makeNode(CreateOpClassItem);
            n->itemtype = OPCLASS_ITEM_FUNCTION;
            n->number = (yyvsp[-3].ival);
            n->args = (yyvsp[-1].list);
            (yyval.node) = (Node*) n;
        }
#line 35482 "gram.cpp"
        break;

        case 1005: /* DropOpClassStmt: DROP OPERATOR CLASS any_name USING access_method opt_drop_behavior  */
#line 7647 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->objects = list_make1((yyvsp[-3].list));
            n->arguments = list_make1(list_make1(makeString((yyvsp[-1].str))));
            n->removeType = OBJECT_OPCLASS;
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = false;
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 35497 "gram.cpp"
        break;

        case 1006: /* DropOpClassStmt: DROP OPERATOR CLASS IF_P EXISTS any_name USING access_method opt_drop_behavior  */
#line 7658 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->objects = list_make1((yyvsp[-3].list));
            n->arguments = list_make1(list_make1(makeString((yyvsp[-1].str))));
            n->removeType = OBJECT_OPCLASS;
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = true;
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 35512 "gram.cpp"
        break;

        case 1007: /* DropOpFamilyStmt: DROP OPERATOR FAMILY any_name USING access_method opt_drop_behavior  */
#line 7672 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->objects = list_make1((yyvsp[-3].list));
            n->arguments = list_make1(list_make1(makeString((yyvsp[-1].str))));
            n->removeType = OBJECT_OPFAMILY;
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = false;
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 35527 "gram.cpp"
        break;

        case 1008: /* DropOpFamilyStmt: DROP OPERATOR FAMILY IF_P EXISTS any_name USING access_method opt_drop_behavior  */
#line 7683 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->objects = list_make1((yyvsp[-3].list));
            n->arguments = list_make1(list_make1(makeString((yyvsp[-1].str))));
            n->removeType = OBJECT_OPFAMILY;
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = true;
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 35542 "gram.cpp"
        break;

        case 1009: /* DropOwnedStmt: DROP OWNED BY role_list opt_drop_behavior  */
#line 7706 "gram.y"
        {
            DropOwnedStmt* n = makeNode(DropOwnedStmt);
            n->roles = (yyvsp[-1].list);
            n->behavior = (yyvsp[0].dbehavior);
            (yyval.node) = (Node*) n;
        }
#line 35553 "gram.cpp"
        break;

        case 1010: /* ReassignOwnedStmt: REASSIGN OWNED BY role_list TO name  */
#line 7716 "gram.y"
        {
            ReassignOwnedStmt* n = makeNode(ReassignOwnedStmt);
            n->roles = (yyvsp[-2].list);
            n->newrole = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 35564 "gram.cpp"
        break;

        case 1011: /* DropStmt: DROP drop_type IF_P EXISTS any_name_list opt_drop_behavior  */
#line 7734 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = (yyvsp[-4].objtype);
            n->missing_ok = TRUE;
            n->objects = (yyvsp[-1].list);
            n->arguments = NIL;
            n->behavior = (yyvsp[0].dbehavior);
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 35579 "gram.cpp"
        break;

        case 1012: /* DropStmt: DROP drop_type any_name_list opt_drop_behavior  */
#line 7745 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = (yyvsp[-2].objtype);
            n->missing_ok = FALSE;
            n->objects = (yyvsp[-1].list);
            n->arguments = NIL;
            n->behavior = (yyvsp[0].dbehavior);
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 35594 "gram.cpp"
        break;

        case 1013: /* DropStmt: DROP INDEX CONCURRENTLY any_name_list opt_drop_behavior  */
#line 7756 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_INDEX;
            n->missing_ok = FALSE;
            n->objects = (yyvsp[-1].list);
            n->arguments = NIL;
            n->behavior = (yyvsp[0].dbehavior);
            n->concurrent = true;
            (yyval.node) = (Node*) n;
        }
#line 35609 "gram.cpp"
        break;

        case 1014: /* DropStmt: DROP INDEX CONCURRENTLY IF_P EXISTS any_name_list opt_drop_behavior  */
#line 7767 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_INDEX;
            n->missing_ok = TRUE;
            n->objects = (yyvsp[-1].list);
            n->arguments = NIL;
            n->behavior = (yyvsp[0].dbehavior);
            n->concurrent = true;
            (yyval.node) = (Node*) n;
        }
#line 35624 "gram.cpp"
        break;

        case 1015: /* drop_type: TABLE  */
#line 7780 "gram.y"
        {
            (yyval.objtype) = OBJECT_TABLE;
        }
#line 35630 "gram.cpp"
        break;

        case 1016: /* drop_type: EXTERNAL TABLE  */
#line 7781 "gram.y"
        {
            (yyval.objtype) = OBJECT_EXTTABLE;
        }
#line 35636 "gram.cpp"
        break;

        case 1017: /* drop_type: EXTERNAL WEB TABLE  */
#line 7782 "gram.y"
        {
            (yyval.objtype) = OBJECT_EXTTABLE;
        }
#line 35642 "gram.cpp"
        break;

        case 1018: /* drop_type: SEQUENCE  */
#line 7783 "gram.y"
        {
            (yyval.objtype) = OBJECT_SEQUENCE;
        }
#line 35648 "gram.cpp"
        break;

        case 1019: /* drop_type: VIEW  */
#line 7784 "gram.y"
        {
            (yyval.objtype) = OBJECT_VIEW;
        }
#line 35654 "gram.cpp"
        break;

        case 1020: /* drop_type: MATERIALIZED VIEW  */
#line 7785 "gram.y"
        {
            (yyval.objtype) = OBJECT_MATVIEW;
        }
#line 35660 "gram.cpp"
        break;

        case 1021: /* drop_type: INDEX  */
#line 7786 "gram.y"
        {
            (yyval.objtype) = OBJECT_INDEX;
        }
#line 35666 "gram.cpp"
        break;

        case 1022: /* drop_type: FOREIGN TABLE  */
#line 7787 "gram.y"
        {
            (yyval.objtype) = OBJECT_FOREIGN_TABLE;
        }
#line 35672 "gram.cpp"
        break;

        case 1023: /* drop_type: EVENT TRIGGER  */
#line 7788 "gram.y"
        {
            (yyval.objtype) = OBJECT_EVENT_TRIGGER;
        }
#line 35678 "gram.cpp"
        break;

        case 1024: /* drop_type: TYPE_P  */
#line 7789 "gram.y"
        {
            (yyval.objtype) = OBJECT_TYPE;
        }
#line 35684 "gram.cpp"
        break;

        case 1025: /* drop_type: DOMAIN_P  */
#line 7790 "gram.y"
        {
            (yyval.objtype) = OBJECT_DOMAIN;
        }
#line 35690 "gram.cpp"
        break;

        case 1026: /* drop_type: COLLATION  */
#line 7791 "gram.y"
        {
            (yyval.objtype) = OBJECT_COLLATION;
        }
#line 35696 "gram.cpp"
        break;

        case 1027: /* drop_type: CONVERSION_P  */
#line 7792 "gram.y"
        {
            (yyval.objtype) = OBJECT_CONVERSION;
        }
#line 35702 "gram.cpp"
        break;

        case 1028: /* drop_type: SCHEMA  */
#line 7793 "gram.y"
        {
            (yyval.objtype) = OBJECT_SCHEMA;
        }
#line 35708 "gram.cpp"
        break;

        case 1029: /* drop_type: EXTENSION  */
#line 7794 "gram.y"
        {
            (yyval.objtype) = OBJECT_EXTENSION;
        }
#line 35714 "gram.cpp"
        break;

        case 1030: /* drop_type: TEXT_P SEARCH PARSER  */
#line 7795 "gram.y"
        {
            (yyval.objtype) = OBJECT_TSPARSER;
        }
#line 35720 "gram.cpp"
        break;

        case 1031: /* drop_type: TEXT_P SEARCH DICTIONARY  */
#line 7796 "gram.y"
        {
            (yyval.objtype) = OBJECT_TSDICTIONARY;
        }
#line 35726 "gram.cpp"
        break;

        case 1032: /* drop_type: TEXT_P SEARCH TEMPLATE  */
#line 7797 "gram.y"
        {
            (yyval.objtype) = OBJECT_TSTEMPLATE;
        }
#line 35732 "gram.cpp"
        break;

        case 1033: /* drop_type: TEXT_P SEARCH CONFIGURATION  */
#line 7798 "gram.y"
        {
            (yyval.objtype) = OBJECT_TSCONFIGURATION;
        }
#line 35738 "gram.cpp"
        break;

        case 1034: /* drop_type: PROTOCOL  */
#line 7799 "gram.y"
        {
            (yyval.objtype) = OBJECT_EXTPROTOCOL;
        }
#line 35744 "gram.cpp"
        break;

        case 1035: /* any_name_list: any_name  */
#line 7803 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].list));
        }
#line 35750 "gram.cpp"
        break;

        case 1036: /* any_name_list: any_name_list ',' any_name  */
#line 7804 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list));
        }
#line 35756 "gram.cpp"
        break;

        case 1037: /* any_name: ColId  */
#line 7807 "gram.y"
        {
            (yyval.list) = list_make1(makeString((yyvsp[0].str)));
        }
#line 35762 "gram.cpp"
        break;

        case 1038: /* any_name: ColId attrs  */
#line 7808 "gram.y"
        {
            (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list));
        }
#line 35768 "gram.cpp"
        break;

        case 1039: /* attrs: '.' attr_name  */
#line 7812 "gram.y"
        {
            (yyval.list) = list_make1(makeString((yyvsp[0].str)));
        }
#line 35774 "gram.cpp"
        break;

        case 1040: /* attrs: attrs '.' attr_name  */
#line 7814 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str)));
        }
#line 35780 "gram.cpp"
        break;

        case 1041: /* TruncateStmt: TRUNCATE opt_table relation_expr_list opt_restart_seqs opt_drop_behavior  */
#line 7827 "gram.y"
        {
            TruncateStmt* n = makeNode(TruncateStmt);
            n->relations = (yyvsp[-2].list);
            n->restart_seqs = (yyvsp[-1].boolean);
            n->behavior = (yyvsp[0].dbehavior);
            (yyval.node) = (Node*) n;
        }
#line 35792 "gram.cpp"
        break;

        case 1042: /* opt_restart_seqs: CONTINUE_P IDENTITY_P  */
#line 7837 "gram.y"
        {
            (yyval.boolean) = false;
        }
#line 35798 "gram.cpp"
        break;

        case 1043: /* opt_restart_seqs: RESTART IDENTITY_P  */
#line 7838 "gram.y"
        {
            (yyval.boolean) = true;
        }
#line 35804 "gram.cpp"
        break;

        case 1044: /* opt_restart_seqs: %empty  */
#line 7839 "gram.y"
        {
            (yyval.boolean) = false;
        }
#line 35810 "gram.cpp"
        break;

        case 1045: /* CommentStmt: COMMENT ON comment_type any_name IS comment_text  */
#line 7872 "gram.y"
        {
            CommentStmt* n = makeNode(CommentStmt);
            n->objtype = (yyvsp[-3].objtype);
            n->objname = (yyvsp[-2].list);
            n->objargs = NIL;
            n->comment = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 35823 "gram.cpp"
        break;

        case 1046: /* CommentStmt: COMMENT ON AGGREGATE func_name aggr_args IS comment_text  */
#line 7881 "gram.y"
        {
            CommentStmt* n = makeNode(CommentStmt);
            n->objtype = OBJECT_AGGREGATE;
            n->objname = (yyvsp[-3].list);
            n->objargs = extractAggrArgTypes((yyvsp[-2].list));
            n->comment = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 35836 "gram.cpp"
        break;

        case 1047: /* CommentStmt: COMMENT ON FUNCTION func_name func_args IS comment_text  */
#line 7890 "gram.y"
        {
            CommentStmt* n = makeNode(CommentStmt);
            n->objtype = OBJECT_FUNCTION;
            n->objname = (yyvsp[-3].list);
            n->objargs = extractArgTypes((yyvsp[-2].list));
            n->comment = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 35849 "gram.cpp"
        break;

        case 1048: /* CommentStmt: COMMENT ON OPERATOR any_operator oper_argtypes IS comment_text  */
#line 7899 "gram.y"
        {
            CommentStmt* n = makeNode(CommentStmt);
            n->objtype = OBJECT_OPERATOR;
            n->objname = (yyvsp[-3].list);
            n->objargs = (yyvsp[-2].list);
            n->comment = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 35862 "gram.cpp"
        break;

        case 1049: /* CommentStmt: COMMENT ON CONSTRAINT name ON any_name IS comment_text  */
#line 7908 "gram.y"
        {
            CommentStmt* n = makeNode(CommentStmt);
            n->objtype = OBJECT_CONSTRAINT;
            n->objname = lappend((yyvsp[-2].list), makeString((yyvsp[-4].str)));
            n->objargs = NIL;
            n->comment = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 35875 "gram.cpp"
        break;

        case 1050: /* CommentStmt: COMMENT ON RULE name ON any_name IS comment_text  */
#line 7917 "gram.y"
        {
            CommentStmt* n = makeNode(CommentStmt);
            n->objtype = OBJECT_RULE;
            n->objname = lappend((yyvsp[-2].list), makeString((yyvsp[-4].str)));
            n->objargs = NIL;
            n->comment = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 35888 "gram.cpp"
        break;

        case 1051: /* CommentStmt: COMMENT ON RULE name IS comment_text  */
#line 7926 "gram.y"
        {
            /* Obsolete syntax supported for awhile for compatibility */
            CommentStmt* n = makeNode(CommentStmt);
            n->objtype = OBJECT_RULE;
            n->objname = list_make1(makeString((yyvsp[-2].str)));
            n->objargs = NIL;
            n->comment = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 35902 "gram.cpp"
        break;

        case 1052: /* CommentStmt: COMMENT ON TRIGGER name ON any_name IS comment_text  */
#line 7936 "gram.y"
        {
            CommentStmt* n = makeNode(CommentStmt);
            n->objtype = OBJECT_TRIGGER;
            n->objname = lappend((yyvsp[-2].list), makeString((yyvsp[-4].str)));
            n->objargs = NIL;
            n->comment = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 35915 "gram.cpp"
        break;

        case 1053: /* CommentStmt: COMMENT ON OPERATOR CLASS any_name USING access_method IS comment_text  */
#line 7945 "gram.y"
        {
            CommentStmt* n = makeNode(CommentStmt);
            n->objtype = OBJECT_OPCLASS;
            n->objname = (yyvsp[-4].list);
            n->objargs = list_make1(makeString((yyvsp[-2].str)));
            n->comment = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 35928 "gram.cpp"
        break;

        case 1054: /* CommentStmt: COMMENT ON OPERATOR FAMILY any_name USING access_method IS comment_text  */
#line 7954 "gram.y"
        {
            CommentStmt* n = makeNode(CommentStmt);
            n->objtype = OBJECT_OPFAMILY;
            n->objname = (yyvsp[-4].list);
            n->objargs = list_make1(makeString((yyvsp[-2].str)));
            n->comment = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 35941 "gram.cpp"
        break;

        case 1055: /* CommentStmt: COMMENT ON LARGE_P OBJECT_P NumericOnly IS comment_text  */
#line 7963 "gram.y"
        {
            CommentStmt* n = makeNode(CommentStmt);
            n->objtype = OBJECT_LARGEOBJECT;
            n->objname = list_make1((yyvsp[-2].value));
            n->objargs = NIL;
            n->comment = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 35954 "gram.cpp"
        break;

        case 1056: /* CommentStmt: COMMENT ON CAST '(' Typename AS Typename ')' IS comment_text  */
#line 7972 "gram.y"
        {
            CommentStmt* n = makeNode(CommentStmt);
            n->objtype = OBJECT_CAST;
            n->objname = list_make1((yyvsp[-5].typnam));
            n->objargs = list_make1((yyvsp[-3].typnam));
            n->comment = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 35967 "gram.cpp"
        break;

        case 1057: /* CommentStmt: COMMENT ON opt_procedural LANGUAGE any_name IS comment_text  */
#line 7981 "gram.y"
        {
            CommentStmt* n = makeNode(CommentStmt);
            n->objtype = OBJECT_LANGUAGE;
            n->objname = (yyvsp[-2].list);
            n->objargs = NIL;
            n->comment = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 35980 "gram.cpp"
        break;

        case 1058: /* comment_type: COLUMN  */
#line 7992 "gram.y"
        {
            (yyval.objtype) = OBJECT_COLUMN;
        }
#line 35986 "gram.cpp"
        break;

        case 1059: /* comment_type: DATABASE  */
#line 7993 "gram.y"
        {
            (yyval.objtype) = OBJECT_DATABASE;
        }
#line 35992 "gram.cpp"
        break;

        case 1060: /* comment_type: SCHEMA  */
#line 7994 "gram.y"
        {
            (yyval.objtype) = OBJECT_SCHEMA;
        }
#line 35998 "gram.cpp"
        break;

        case 1061: /* comment_type: INDEX  */
#line 7995 "gram.y"
        {
            (yyval.objtype) = OBJECT_INDEX;
        }
#line 36004 "gram.cpp"
        break;

        case 1062: /* comment_type: SEQUENCE  */
#line 7996 "gram.y"
        {
            (yyval.objtype) = OBJECT_SEQUENCE;
        }
#line 36010 "gram.cpp"
        break;

        case 1063: /* comment_type: TABLE  */
#line 7997 "gram.y"
        {
            (yyval.objtype) = OBJECT_TABLE;
        }
#line 36016 "gram.cpp"
        break;

        case 1064: /* comment_type: DOMAIN_P  */
#line 7998 "gram.y"
        {
            (yyval.objtype) = OBJECT_DOMAIN;
        }
#line 36022 "gram.cpp"
        break;

        case 1065: /* comment_type: TYPE_P  */
#line 7999 "gram.y"
        {
            (yyval.objtype) = OBJECT_TYPE;
        }
#line 36028 "gram.cpp"
        break;

        case 1066: /* comment_type: VIEW  */
#line 8000 "gram.y"
        {
            (yyval.objtype) = OBJECT_VIEW;
        }
#line 36034 "gram.cpp"
        break;

        case 1067: /* comment_type: MATERIALIZED VIEW  */
#line 8001 "gram.y"
        {
            (yyval.objtype) = OBJECT_MATVIEW;
        }
#line 36040 "gram.cpp"
        break;

        case 1068: /* comment_type: COLLATION  */
#line 8002 "gram.y"
        {
            (yyval.objtype) = OBJECT_COLLATION;
        }
#line 36046 "gram.cpp"
        break;

        case 1069: /* comment_type: CONVERSION_P  */
#line 8003 "gram.y"
        {
            (yyval.objtype) = OBJECT_CONVERSION;
        }
#line 36052 "gram.cpp"
        break;

        case 1070: /* comment_type: TABLESPACE  */
#line 8004 "gram.y"
        {
            (yyval.objtype) = OBJECT_TABLESPACE;
        }
#line 36058 "gram.cpp"
        break;

        case 1071: /* comment_type: EXTENSION  */
#line 8005 "gram.y"
        {
            (yyval.objtype) = OBJECT_EXTENSION;
        }
#line 36064 "gram.cpp"
        break;

        case 1072: /* comment_type: ROLE  */
#line 8006 "gram.y"
        {
            (yyval.objtype) = OBJECT_ROLE;
        }
#line 36070 "gram.cpp"
        break;

        case 1073: /* comment_type: FOREIGN TABLE  */
#line 8007 "gram.y"
        {
            (yyval.objtype) = OBJECT_FOREIGN_TABLE;
        }
#line 36076 "gram.cpp"
        break;

        case 1074: /* comment_type: SERVER  */
#line 8008 "gram.y"
        {
            (yyval.objtype) = OBJECT_FOREIGN_SERVER;
        }
#line 36082 "gram.cpp"
        break;

        case 1075: /* comment_type: FOREIGN DATA_P WRAPPER  */
#line 8009 "gram.y"
        {
            (yyval.objtype) = OBJECT_FDW;
        }
#line 36088 "gram.cpp"
        break;

        case 1076: /* comment_type: EVENT TRIGGER  */
#line 8010 "gram.y"
        {
            (yyval.objtype) = OBJECT_EVENT_TRIGGER;
        }
#line 36094 "gram.cpp"
        break;

        case 1077: /* comment_type: TEXT_P SEARCH CONFIGURATION  */
#line 8011 "gram.y"
        {
            (yyval.objtype) = OBJECT_TSCONFIGURATION;
        }
#line 36100 "gram.cpp"
        break;

        case 1078: /* comment_type: TEXT_P SEARCH DICTIONARY  */
#line 8012 "gram.y"
        {
            (yyval.objtype) = OBJECT_TSDICTIONARY;
        }
#line 36106 "gram.cpp"
        break;

        case 1079: /* comment_type: TEXT_P SEARCH PARSER  */
#line 8013 "gram.y"
        {
            (yyval.objtype) = OBJECT_TSPARSER;
        }
#line 36112 "gram.cpp"
        break;

        case 1080: /* comment_type: TEXT_P SEARCH TEMPLATE  */
#line 8014 "gram.y"
        {
            (yyval.objtype) = OBJECT_TSTEMPLATE;
        }
#line 36118 "gram.cpp"
        break;

        case 1081: /* comment_type: RESOURCE QUEUE  */
#line 8015 "gram.y"
        {
            (yyval.objtype) = OBJECT_RESQUEUE;
        }
#line 36124 "gram.cpp"
        break;

        case 1082: /* comment_type: RESOURCE GROUP_P  */
#line 8016 "gram.y"
        {
            (yyval.objtype) = OBJECT_RESGROUP;
        }
#line 36130 "gram.cpp"
        break;

        case 1083: /* comment_text: Sconst  */
#line 8020 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 36136 "gram.cpp"
        break;

        case 1084: /* comment_text: NULL_P  */
#line 8021 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 36142 "gram.cpp"
        break;

        case 1085: /* SecLabelStmt: SECURITY LABEL opt_provider ON security_label_type any_name IS security_label  */
#line 8037 "gram.y"
        {
            SecLabelStmt* n = makeNode(SecLabelStmt);
            n->provider = (yyvsp[-5].str);
            n->objtype = (yyvsp[-3].objtype);
            n->objname = (yyvsp[-2].list);
            n->objargs = NIL;
            n->label = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 36156 "gram.cpp"
        break;

        case 1086: /* SecLabelStmt: SECURITY LABEL opt_provider ON AGGREGATE func_name aggr_args IS security_label  */
#line 8048 "gram.y"
        {
            SecLabelStmt* n = makeNode(SecLabelStmt);
            n->provider = (yyvsp[-6].str);
            n->objtype = OBJECT_AGGREGATE;
            n->objname = (yyvsp[-3].list);
            n->objargs = extractAggrArgTypes((yyvsp[-2].list));
            n->label = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 36170 "gram.cpp"
        break;

        case 1087: /* SecLabelStmt: SECURITY LABEL opt_provider ON FUNCTION func_name func_args IS security_label  */
#line 8059 "gram.y"
        {
            SecLabelStmt* n = makeNode(SecLabelStmt);
            n->provider = (yyvsp[-6].str);
            n->objtype = OBJECT_FUNCTION;
            n->objname = (yyvsp[-3].list);
            n->objargs = extractArgTypes((yyvsp[-2].list));
            n->label = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 36184 "gram.cpp"
        break;

        case 1088: /* SecLabelStmt: SECURITY LABEL opt_provider ON LARGE_P OBJECT_P NumericOnly IS security_label  */
#line 8070 "gram.y"
        {
            SecLabelStmt* n = makeNode(SecLabelStmt);
            n->provider = (yyvsp[-6].str);
            n->objtype = OBJECT_LARGEOBJECT;
            n->objname = list_make1((yyvsp[-2].value));
            n->objargs = NIL;
            n->label = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 36198 "gram.cpp"
        break;

        case 1089: /* SecLabelStmt: SECURITY LABEL opt_provider ON opt_procedural LANGUAGE any_name IS security_label  */
#line 8081 "gram.y"
        {
            SecLabelStmt* n = makeNode(SecLabelStmt);
            n->provider = (yyvsp[-6].str);
            n->objtype = OBJECT_LANGUAGE;
            n->objname = (yyvsp[-2].list);
            n->objargs = NIL;
            n->label = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 36212 "gram.cpp"
        break;

        case 1090: /* opt_provider: FOR NonReservedWord_or_Sconst  */
#line 8092 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 36218 "gram.cpp"
        break;

        case 1091: /* opt_provider: %empty  */
#line 8093 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 36224 "gram.cpp"
        break;

        case 1092: /* security_label_type: COLUMN  */
#line 8097 "gram.y"
        {
            (yyval.objtype) = OBJECT_COLUMN;
        }
#line 36230 "gram.cpp"
        break;

        case 1093: /* security_label_type: DATABASE  */
#line 8098 "gram.y"
        {
            (yyval.objtype) = OBJECT_DATABASE;
        }
#line 36236 "gram.cpp"
        break;

        case 1094: /* security_label_type: EVENT TRIGGER  */
#line 8099 "gram.y"
        {
            (yyval.objtype) = OBJECT_EVENT_TRIGGER;
        }
#line 36242 "gram.cpp"
        break;

        case 1095: /* security_label_type: FOREIGN TABLE  */
#line 8100 "gram.y"
        {
            (yyval.objtype) = OBJECT_FOREIGN_TABLE;
        }
#line 36248 "gram.cpp"
        break;

        case 1096: /* security_label_type: SCHEMA  */
#line 8101 "gram.y"
        {
            (yyval.objtype) = OBJECT_SCHEMA;
        }
#line 36254 "gram.cpp"
        break;

        case 1097: /* security_label_type: SEQUENCE  */
#line 8102 "gram.y"
        {
            (yyval.objtype) = OBJECT_SEQUENCE;
        }
#line 36260 "gram.cpp"
        break;

        case 1098: /* security_label_type: TABLE  */
#line 8103 "gram.y"
        {
            (yyval.objtype) = OBJECT_TABLE;
        }
#line 36266 "gram.cpp"
        break;

        case 1099: /* security_label_type: DOMAIN_P  */
#line 8104 "gram.y"
        {
            (yyval.objtype) = OBJECT_TYPE;
        }
#line 36272 "gram.cpp"
        break;

        case 1100: /* security_label_type: ROLE  */
#line 8105 "gram.y"
        {
            (yyval.objtype) = OBJECT_ROLE;
        }
#line 36278 "gram.cpp"
        break;

        case 1101: /* security_label_type: TABLESPACE  */
#line 8106 "gram.y"
        {
            (yyval.objtype) = OBJECT_TABLESPACE;
        }
#line 36284 "gram.cpp"
        break;

        case 1102: /* security_label_type: TYPE_P  */
#line 8107 "gram.y"
        {
            (yyval.objtype) = OBJECT_TYPE;
        }
#line 36290 "gram.cpp"
        break;

        case 1103: /* security_label_type: VIEW  */
#line 8108 "gram.y"
        {
            (yyval.objtype) = OBJECT_VIEW;
        }
#line 36296 "gram.cpp"
        break;

        case 1104: /* security_label_type: MATERIALIZED VIEW  */
#line 8109 "gram.y"
        {
            (yyval.objtype) = OBJECT_MATVIEW;
        }
#line 36302 "gram.cpp"
        break;

        case 1105: /* security_label: Sconst  */
#line 8112 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 36308 "gram.cpp"
        break;

        case 1106: /* security_label: NULL_P  */
#line 8113 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 36314 "gram.cpp"
        break;

        case 1107: /* FetchStmt: FETCH fetch_args  */
#line 8124 "gram.y"
        {
            FetchStmt* n = (FetchStmt*) (yyvsp[0].node);
            n->ismove = FALSE;
            (yyval.node) = (Node*) n;
        }
#line 36324 "gram.cpp"
        break;

        case 1108: /* FetchStmt: MOVE fetch_args  */
#line 8130 "gram.y"
        {
            FetchStmt* n = (FetchStmt*) (yyvsp[0].node);
            n->ismove = TRUE;
            (yyval.node) = (Node*) n;
        }
#line 36334 "gram.cpp"
        break;

        case 1109: /* fetch_args: cursor_name  */
#line 8138 "gram.y"
        {
            FetchStmt* n = makeNode(FetchStmt);
            n->portalname = (yyvsp[0].str);
            n->direction = FETCH_FORWARD;
            n->howMany = 1;
            (yyval.node) = (Node*) n;
        }
#line 36346 "gram.cpp"
        break;

        case 1110: /* fetch_args: from_in cursor_name  */
#line 8146 "gram.y"
        {
            FetchStmt* n = makeNode(FetchStmt);
            n->portalname = (yyvsp[0].str);
            n->direction = FETCH_FORWARD;
            n->howMany = 1;
            (yyval.node) = (Node*) n;
        }
#line 36358 "gram.cpp"
        break;

        case 1111: /* fetch_args: NEXT opt_from_in cursor_name  */
#line 8154 "gram.y"
        {
            FetchStmt* n = makeNode(FetchStmt);
            n->portalname = (yyvsp[0].str);
            n->direction = FETCH_FORWARD;
            n->howMany = 1;
            (yyval.node) = (Node*) n;
        }
#line 36370 "gram.cpp"
        break;

        case 1112: /* fetch_args: PRIOR opt_from_in cursor_name  */
#line 8162 "gram.y"
        {
            FetchStmt* n = makeNode(FetchStmt);
            n->portalname = (yyvsp[0].str);
            n->direction = FETCH_BACKWARD;
            n->howMany = 1;
            (yyval.node) = (Node*) n;
        }
#line 36382 "gram.cpp"
        break;

        case 1113: /* fetch_args: FIRST_P opt_from_in cursor_name  */
#line 8170 "gram.y"
        {
            FetchStmt* n = makeNode(FetchStmt);
            n->portalname = (yyvsp[0].str);
            n->direction = FETCH_ABSOLUTE;
            n->howMany = 1;
            (yyval.node) = (Node*) n;
        }
#line 36394 "gram.cpp"
        break;

        case 1114: /* fetch_args: LAST_P opt_from_in cursor_name  */
#line 8178 "gram.y"
        {
            FetchStmt* n = makeNode(FetchStmt);
            n->portalname = (yyvsp[0].str);
            n->direction = FETCH_ABSOLUTE;
            n->howMany = -1;
            (yyval.node) = (Node*) n;
        }
#line 36406 "gram.cpp"
        break;

        case 1115: /* fetch_args: ABSOLUTE_P SignedIconst opt_from_in cursor_name  */
#line 8186 "gram.y"
        {
            FetchStmt* n = makeNode(FetchStmt);
            n->portalname = (yyvsp[0].str);
            n->direction = FETCH_ABSOLUTE;
            n->howMany = (yyvsp[-2].ival);
            (yyval.node) = (Node*) n;
        }
#line 36418 "gram.cpp"
        break;

        case 1116: /* fetch_args: RELATIVE_P SignedIconst opt_from_in cursor_name  */
#line 8194 "gram.y"
        {
            FetchStmt* n = makeNode(FetchStmt);
            n->portalname = (yyvsp[0].str);
            n->direction = FETCH_RELATIVE;
            n->howMany = (yyvsp[-2].ival);
            (yyval.node) = (Node*) n;
        }
#line 36430 "gram.cpp"
        break;

        case 1117: /* fetch_args: SignedIconst opt_from_in cursor_name  */
#line 8202 "gram.y"
        {
            FetchStmt* n = makeNode(FetchStmt);
            n->portalname = (yyvsp[0].str);
            n->direction = FETCH_FORWARD;
            n->howMany = (yyvsp[-2].ival);
            (yyval.node) = (Node*) n;
        }
#line 36442 "gram.cpp"
        break;

        case 1118: /* fetch_args: ALL opt_from_in cursor_name  */
#line 8210 "gram.y"
        {
            FetchStmt* n = makeNode(FetchStmt);
            n->portalname = (yyvsp[0].str);
            n->direction = FETCH_FORWARD;
            n->howMany = FETCH_ALL;
            (yyval.node) = (Node*) n;
        }
#line 36454 "gram.cpp"
        break;

        case 1119: /* fetch_args: FORWARD opt_from_in cursor_name  */
#line 8218 "gram.y"
        {
            FetchStmt* n = makeNode(FetchStmt);
            n->portalname = (yyvsp[0].str);
            n->direction = FETCH_FORWARD;
            n->howMany = 1;
            (yyval.node) = (Node*) n;
        }
#line 36466 "gram.cpp"
        break;

        case 1120: /* fetch_args: FORWARD SignedIconst opt_from_in cursor_name  */
#line 8226 "gram.y"
        {
            FetchStmt* n = makeNode(FetchStmt);
            n->portalname = (yyvsp[0].str);
            n->direction = FETCH_FORWARD;
            n->howMany = (yyvsp[-2].ival);
            (yyval.node) = (Node*) n;
        }
#line 36478 "gram.cpp"
        break;

        case 1121: /* fetch_args: FORWARD ALL opt_from_in cursor_name  */
#line 8234 "gram.y"
        {
            FetchStmt* n = makeNode(FetchStmt);
            n->portalname = (yyvsp[0].str);
            n->direction = FETCH_FORWARD;
            n->howMany = FETCH_ALL;
            (yyval.node) = (Node*) n;
        }
#line 36490 "gram.cpp"
        break;

        case 1122: /* fetch_args: BACKWARD opt_from_in cursor_name  */
#line 8242 "gram.y"
        {
            FetchStmt* n = makeNode(FetchStmt);
            n->portalname = (yyvsp[0].str);
            n->direction = FETCH_BACKWARD;
            n->howMany = 1;
            (yyval.node) = (Node*) n;
        }
#line 36502 "gram.cpp"
        break;

        case 1123: /* fetch_args: BACKWARD SignedIconst opt_from_in cursor_name  */
#line 8250 "gram.y"
        {
            FetchStmt* n = makeNode(FetchStmt);
            n->portalname = (yyvsp[0].str);
            n->direction = FETCH_BACKWARD;
            n->howMany = (yyvsp[-2].ival);
            (yyval.node) = (Node*) n;
        }
#line 36514 "gram.cpp"
        break;

        case 1124: /* fetch_args: BACKWARD ALL opt_from_in cursor_name  */
#line 8258 "gram.y"
        {
            FetchStmt* n = makeNode(FetchStmt);
            n->portalname = (yyvsp[0].str);
            n->direction = FETCH_BACKWARD;
            n->howMany = FETCH_ALL;
            (yyval.node) = (Node*) n;
        }
#line 36526 "gram.cpp"
        break;

        case 1125: /* from_in: FROM  */
#line 8267 "gram.y"
        {
        }
#line 36532 "gram.cpp"
        break;

        case 1126: /* from_in: IN_P  */
#line 8268 "gram.y"
        {
        }
#line 36538 "gram.cpp"
        break;

        case 1127: /* opt_from_in: from_in  */
#line 8271 "gram.y"
        {
        }
#line 36544 "gram.cpp"
        break;

        case 1128: /* opt_from_in: %empty  */
#line 8272 "gram.y"
        {
        }
#line 36550 "gram.cpp"
        break;

        case 1129: /* GrantStmt: GRANT privileges ON privilege_target TO grantee_list opt_grant_grant_option  */
#line 8284 "gram.y"
        {
            GrantStmt* n = makeNode(GrantStmt);
            n->is_grant = true;
            n->privileges = (yyvsp[-5].list);
            n->targtype = ((yyvsp[-3].privtarget))->targtype;
            n->objtype = ((yyvsp[-3].privtarget))->objtype;
            n->objects = ((yyvsp[-3].privtarget))->objs;
            n->grantees = (yyvsp[-1].list);
            n->grant_option = (yyvsp[0].boolean);
            (yyval.node) = (Node*) n;
        }
#line 36566 "gram.cpp"
        break;

        case 1130: /* RevokeStmt: REVOKE privileges ON privilege_target FROM grantee_list opt_drop_behavior  */
#line 8300 "gram.y"
        {
            GrantStmt* n = makeNode(GrantStmt);
            n->is_grant = false;
            n->grant_option = false;
            n->privileges = (yyvsp[-5].list);
            n->targtype = ((yyvsp[-3].privtarget))->targtype;
            n->objtype = ((yyvsp[-3].privtarget))->objtype;
            n->objects = ((yyvsp[-3].privtarget))->objs;
            n->grantees = (yyvsp[-1].list);
            n->behavior = (yyvsp[0].dbehavior);
            (yyval.node) = (Node*) n;
        }
#line 36583 "gram.cpp"
        break;

        case 1131: /* RevokeStmt: REVOKE GRANT OPTION FOR privileges ON privilege_target FROM grantee_list opt_drop_behavior  */
#line 8314 "gram.y"
        {
            GrantStmt* n = makeNode(GrantStmt);
            n->is_grant = false;
            n->grant_option = true;
            n->privileges = (yyvsp[-5].list);
            n->targtype = ((yyvsp[-3].privtarget))->targtype;
            n->objtype = ((yyvsp[-3].privtarget))->objtype;
            n->objects = ((yyvsp[-3].privtarget))->objs;
            n->grantees = (yyvsp[-1].list);
            n->behavior = (yyvsp[0].dbehavior);
            (yyval.node) = (Node*) n;
        }
#line 36600 "gram.cpp"
        break;

        case 1132: /* privileges: privilege_list  */
#line 8339 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 36606 "gram.cpp"
        break;

        case 1133: /* privileges: ALL  */
#line 8341 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 36612 "gram.cpp"
        break;

        case 1134: /* privileges: ALL PRIVILEGES  */
#line 8343 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 36618 "gram.cpp"
        break;

        case 1135: /* privileges: ALL '(' columnList ')'  */
#line 8345 "gram.y"
        {
            AccessPriv* n = makeNode(AccessPriv);
            n->priv_name = NULL;
            n->cols = (yyvsp[-1].list);
            (yyval.list) = list_make1(n);
        }
#line 36629 "gram.cpp"
        break;

        case 1136: /* privileges: ALL PRIVILEGES '(' columnList ')'  */
#line 8352 "gram.y"
        {
            AccessPriv* n = makeNode(AccessPriv);
            n->priv_name = NULL;
            n->cols = (yyvsp[-1].list);
            (yyval.list) = list_make1(n);
        }
#line 36640 "gram.cpp"
        break;

        case 1137: /* privilege_list: privilege  */
#line 8360 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].accesspriv));
        }
#line 36646 "gram.cpp"
        break;

        case 1138: /* privilege_list: privilege_list ',' privilege  */
#line 8361 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].accesspriv));
        }
#line 36652 "gram.cpp"
        break;

        case 1139: /* privilege: SELECT opt_column_list  */
#line 8365 "gram.y"
        {
            AccessPriv* n = makeNode(AccessPriv);
            n->priv_name = pstrdup((yyvsp[-1].keyword));
            n->cols = (yyvsp[0].list);
            (yyval.accesspriv) = n;
        }
#line 36663 "gram.cpp"
        break;

        case 1140: /* privilege: REFERENCES opt_column_list  */
#line 8372 "gram.y"
        {
            AccessPriv* n = makeNode(AccessPriv);
            n->priv_name = pstrdup((yyvsp[-1].keyword));
            n->cols = (yyvsp[0].list);
            (yyval.accesspriv) = n;
        }
#line 36674 "gram.cpp"
        break;

        case 1141: /* privilege: CREATE opt_column_list  */
#line 8379 "gram.y"
        {
            AccessPriv* n = makeNode(AccessPriv);
            n->priv_name = pstrdup((yyvsp[-1].keyword));
            n->cols = (yyvsp[0].list);
            (yyval.accesspriv) = n;
        }
#line 36685 "gram.cpp"
        break;

        case 1142: /* privilege: ColId opt_column_list  */
#line 8386 "gram.y"
        {
            AccessPriv* n = makeNode(AccessPriv);
            n->priv_name = (yyvsp[-1].str);
            n->cols = (yyvsp[0].list);
            (yyval.accesspriv) = n;
        }
#line 36696 "gram.cpp"
        break;

        case 1143: /* privilege_target: qualified_name_list  */
#line 8400 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_OBJECT;
            n->objtype = ACL_OBJECT_RELATION;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36708 "gram.cpp"
        break;

        case 1144: /* privilege_target: TABLE qualified_name_list  */
#line 8408 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_OBJECT;
            n->objtype = ACL_OBJECT_RELATION;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36720 "gram.cpp"
        break;

        case 1145: /* privilege_target: SEQUENCE qualified_name_list  */
#line 8416 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_OBJECT;
            n->objtype = ACL_OBJECT_SEQUENCE;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36732 "gram.cpp"
        break;

        case 1146: /* privilege_target: FOREIGN DATA_P WRAPPER name_list  */
#line 8424 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_OBJECT;
            n->objtype = ACL_OBJECT_FDW;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36744 "gram.cpp"
        break;

        case 1147: /* privilege_target: FOREIGN SERVER name_list  */
#line 8432 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_OBJECT;
            n->objtype = ACL_OBJECT_FOREIGN_SERVER;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36756 "gram.cpp"
        break;

        case 1148: /* privilege_target: FUNCTION function_with_argtypes_list  */
#line 8440 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_OBJECT;
            n->objtype = ACL_OBJECT_FUNCTION;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36768 "gram.cpp"
        break;

        case 1149: /* privilege_target: DATABASE name_list  */
#line 8448 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_OBJECT;
            n->objtype = ACL_OBJECT_DATABASE;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36780 "gram.cpp"
        break;

        case 1150: /* privilege_target: DOMAIN_P any_name_list  */
#line 8456 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_OBJECT;
            n->objtype = ACL_OBJECT_DOMAIN;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36792 "gram.cpp"
        break;

        case 1151: /* privilege_target: LANGUAGE name_list  */
#line 8464 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_OBJECT;
            n->objtype = ACL_OBJECT_LANGUAGE;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36804 "gram.cpp"
        break;

        case 1152: /* privilege_target: LARGE_P OBJECT_P NumericOnly_list  */
#line 8472 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_OBJECT;
            n->objtype = ACL_OBJECT_LARGEOBJECT;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36816 "gram.cpp"
        break;

        case 1153: /* privilege_target: SCHEMA name_list  */
#line 8480 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_OBJECT;
            n->objtype = ACL_OBJECT_NAMESPACE;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36828 "gram.cpp"
        break;

        case 1154: /* privilege_target: TABLESPACE name_list  */
#line 8488 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_OBJECT;
            n->objtype = ACL_OBJECT_TABLESPACE;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36840 "gram.cpp"
        break;

        case 1155: /* privilege_target: PROTOCOL name_list  */
#line 8496 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_OBJECT;
            n->objtype = ACL_OBJECT_EXTPROTOCOL;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36852 "gram.cpp"
        break;

        case 1156: /* privilege_target: TYPE_P any_name_list  */
#line 8504 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_OBJECT;
            n->objtype = ACL_OBJECT_TYPE;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36864 "gram.cpp"
        break;

        case 1157: /* privilege_target: ALL TABLES IN_P SCHEMA name_list  */
#line 8512 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_ALL_IN_SCHEMA;
            n->objtype = ACL_OBJECT_RELATION;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36876 "gram.cpp"
        break;

        case 1158: /* privilege_target: ALL SEQUENCES IN_P SCHEMA name_list  */
#line 8520 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_ALL_IN_SCHEMA;
            n->objtype = ACL_OBJECT_SEQUENCE;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36888 "gram.cpp"
        break;

        case 1159: /* privilege_target: ALL FUNCTIONS IN_P SCHEMA name_list  */
#line 8528 "gram.y"
        {
            PrivTarget* n = (PrivTarget*) palloc(sizeof(PrivTarget));
            n->targtype = ACL_TARGET_ALL_IN_SCHEMA;
            n->objtype = ACL_OBJECT_FUNCTION;
            n->objs = (yyvsp[0].list);
            (yyval.privtarget) = n;
        }
#line 36900 "gram.cpp"
        break;

        case 1160: /* grantee_list: grantee  */
#line 8539 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 36906 "gram.cpp"
        break;

        case 1161: /* grantee_list: grantee_list ',' grantee  */
#line 8540 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 36912 "gram.cpp"
        break;

        case 1162: /* grantee: RoleId  */
#line 8544 "gram.y"
        {
            PrivGrantee* n = makeNode(PrivGrantee);
            /* This hack lets us avoid reserving PUBLIC as a keyword*/
            if (strcmp((yyvsp[0].str), "public") == 0)
                n->rolname = NULL;
            else
                n->rolname = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 36926 "gram.cpp"
        break;

        case 1163: /* grantee: GROUP_P RoleId  */
#line 8554 "gram.y"
        {
            PrivGrantee* n = makeNode(PrivGrantee);
            /* Treat GROUP PUBLIC as a synonym for PUBLIC */
            if (strcmp((yyvsp[0].str), "public") == 0)
                n->rolname = NULL;
            else
                n->rolname = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 36940 "gram.cpp"
        break;

        case 1164: /* opt_grant_grant_option: WITH GRANT OPTION  */
#line 8567 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 36946 "gram.cpp"
        break;

        case 1165: /* opt_grant_grant_option: %empty  */
#line 8568 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 36952 "gram.cpp"
        break;

        case 1166: /* function_with_argtypes_list: function_with_argtypes  */
#line 8572 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].funwithargs));
        }
#line 36958 "gram.cpp"
        break;

        case 1167: /* function_with_argtypes_list: function_with_argtypes_list ',' function_with_argtypes  */
#line 8574 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].funwithargs));
        }
#line 36964 "gram.cpp"
        break;

        case 1168: /* function_with_argtypes: func_name func_args  */
#line 8579 "gram.y"
        {
            FuncWithArgs* n = makeNode(FuncWithArgs);
            n->funcname = (yyvsp[-1].list);
            n->funcargs = extractArgTypes((yyvsp[0].list));
            (yyval.funwithargs) = n;
        }
#line 36975 "gram.cpp"
        break;

        case 1169: /* GrantRoleStmt: GRANT privilege_list TO role_list opt_grant_admin_option opt_granted_by  */
#line 8595 "gram.y"
        {
            GrantRoleStmt* n = makeNode(GrantRoleStmt);
            n->is_grant = true;
            n->granted_roles = (yyvsp[-4].list);
            n->grantee_roles = (yyvsp[-2].list);
            n->admin_opt = (yyvsp[-1].boolean);
            n->grantor = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 36989 "gram.cpp"
        break;

        case 1170: /* RevokeRoleStmt: REVOKE privilege_list FROM role_list opt_granted_by opt_drop_behavior  */
#line 8608 "gram.y"
        {
            GrantRoleStmt* n = makeNode(GrantRoleStmt);
            n->is_grant = false;
            n->admin_opt = false;
            n->granted_roles = (yyvsp[-4].list);
            n->grantee_roles = (yyvsp[-2].list);
            n->behavior = (yyvsp[0].dbehavior);
            (yyval.node) = (Node*) n;
        }
#line 37003 "gram.cpp"
        break;

        case 1171: /* RevokeRoleStmt: REVOKE ADMIN OPTION FOR privilege_list FROM role_list opt_granted_by opt_drop_behavior  */
#line 8618 "gram.y"
        {
            GrantRoleStmt* n = makeNode(GrantRoleStmt);
            n->is_grant = false;
            n->admin_opt = true;
            n->granted_roles = (yyvsp[-4].list);
            n->grantee_roles = (yyvsp[-2].list);
            n->behavior = (yyvsp[0].dbehavior);
            (yyval.node) = (Node*) n;
        }
#line 37017 "gram.cpp"
        break;

        case 1172: /* opt_grant_admin_option: WITH ADMIN OPTION  */
#line 8629 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 37023 "gram.cpp"
        break;

        case 1173: /* opt_grant_admin_option: %empty  */
#line 8630 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 37029 "gram.cpp"
        break;

        case 1174: /* opt_granted_by: GRANTED BY RoleId  */
#line 8633 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 37035 "gram.cpp"
        break;

        case 1175: /* opt_granted_by: %empty  */
#line 8634 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 37041 "gram.cpp"
        break;

        case 1176: /* AlterDefaultPrivilegesStmt: ALTER DEFAULT PRIVILEGES DefACLOptionList DefACLAction  */
#line 8645 "gram.y"
        {
            AlterDefaultPrivilegesStmt* n = makeNode(AlterDefaultPrivilegesStmt);
            n->options = (yyvsp[-1].list);
            n->action = (GrantStmt*) (yyvsp[0].node);
            (yyval.node) = (Node*) n;
        }
#line 37052 "gram.cpp"
        break;

        case 1177: /* DefACLOptionList: DefACLOptionList DefACLOption  */
#line 8654 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 37058 "gram.cpp"
        break;

        case 1178: /* DefACLOptionList: %empty  */
#line 8655 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 37064 "gram.cpp"
        break;

        case 1179: /* DefACLOption: IN_P SCHEMA name_list  */
#line 8660 "gram.y"
        {
            (yyval.defelt) = makeDefElem("schemas", (Node*) (yyvsp[0].list));
        }
#line 37072 "gram.cpp"
        break;

        case 1180: /* DefACLOption: FOR ROLE role_list  */
#line 8664 "gram.y"
        {
            (yyval.defelt) = makeDefElem("roles", (Node*) (yyvsp[0].list));
        }
#line 37080 "gram.cpp"
        break;

        case 1181: /* DefACLOption: FOR USER role_list  */
#line 8668 "gram.y"
        {
            (yyval.defelt) = makeDefElem("roles", (Node*) (yyvsp[0].list));
        }
#line 37088 "gram.cpp"
        break;

        case 1182: /* DefACLAction: GRANT privileges ON defacl_privilege_target TO grantee_list opt_grant_grant_option  */
#line 8680 "gram.y"
        {
            GrantStmt* n = makeNode(GrantStmt);
            n->is_grant = true;
            n->privileges = (yyvsp[-5].list);
            n->targtype = ACL_TARGET_DEFAULTS;
            n->objtype = static_cast<GrantObjectType>((yyvsp[-3].ival));
            n->objects = NIL;
            n->grantees = (yyvsp[-1].list);
            n->grant_option = (yyvsp[0].boolean);
            (yyval.node) = (Node*) n;
        }
#line 37104 "gram.cpp"
        break;

        case 1183: /* DefACLAction: REVOKE privileges ON defacl_privilege_target FROM grantee_list opt_drop_behavior  */
#line 8693 "gram.y"
        {
            GrantStmt* n = makeNode(GrantStmt);
            n->is_grant = false;
            n->grant_option = false;
            n->privileges = (yyvsp[-5].list);
            n->targtype = ACL_TARGET_DEFAULTS;
            n->objtype = static_cast<GrantObjectType>((yyvsp[-3].ival));
            n->objects = NIL;
            n->grantees = (yyvsp[-1].list);
            n->behavior = (yyvsp[0].dbehavior);
            (yyval.node) = (Node*) n;
        }
#line 37121 "gram.cpp"
        break;

        case 1184: /* DefACLAction: REVOKE GRANT OPTION FOR privileges ON defacl_privilege_target FROM grantee_list opt_drop_behavior  */
#line 8707 "gram.y"
        {
            GrantStmt* n = makeNode(GrantStmt);
            n->is_grant = false;
            n->grant_option = true;
            n->privileges = (yyvsp[-5].list);
            n->targtype = ACL_TARGET_DEFAULTS;
            n->objtype = static_cast<GrantObjectType>((yyvsp[-3].ival));
            n->objects = NIL;
            n->grantees = (yyvsp[-1].list);
            n->behavior = (yyvsp[0].dbehavior);
            (yyval.node) = (Node*) n;
        }
#line 37138 "gram.cpp"
        break;

        case 1185: /* defacl_privilege_target: TABLES  */
#line 8722 "gram.y"
        {
            (yyval.ival) = ACL_OBJECT_RELATION;
        }
#line 37144 "gram.cpp"
        break;

        case 1186: /* defacl_privilege_target: FUNCTIONS  */
#line 8723 "gram.y"
        {
            (yyval.ival) = ACL_OBJECT_FUNCTION;
        }
#line 37150 "gram.cpp"
        break;

        case 1187: /* defacl_privilege_target: SEQUENCES  */
#line 8724 "gram.y"
        {
            (yyval.ival) = ACL_OBJECT_SEQUENCE;
        }
#line 37156 "gram.cpp"
        break;

        case 1188: /* defacl_privilege_target: TYPES_P  */
#line 8725 "gram.y"
        {
            (yyval.ival) = ACL_OBJECT_TYPE;
        }
#line 37162 "gram.cpp"
        break;

        case 1189: /* IndexStmt: CREATE opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions OptTableSpace where_clause  */
#line 8740 "gram.y"
        {
            IndexStmt* n = makeNode(IndexStmt);
            n->unique = (yyvsp[-12].boolean);
            n->concurrent = (yyvsp[-10].boolean);
            n->idxname = (yyvsp[-9].str);
            n->relation = (yyvsp[-7].range);
            n->accessMethod = (yyvsp[-6].str);
            n->indexParams = (yyvsp[-4].list);
            n->options = (yyvsp[-2].list);
            n->tableSpace = (yyvsp[-1].str);
            n->whereClause = (yyvsp[0].node);
            n->excludeOpNames = NIL;
            n->idxcomment = NULL;
            n->indexOid = InvalidOid;
            n->oldNode = InvalidOid;
            n->primary = false;
            n->isconstraint = false;
            n->deferrable = false;
            n->initdeferred = false;

            if (n->concurrent) {
                ereport(ERROR,
                        errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                        errmsg("CREATE INDEX CONCURRENTLY is not supported"));
            }

            (yyval.node) = (Node*) n;
        }
#line 37197 "gram.cpp"
        break;

        case 1190: /* opt_unique: UNIQUE  */
#line 8773 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 37203 "gram.cpp"
        break;

        case 1191: /* opt_unique: %empty  */
#line 8774 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 37209 "gram.cpp"
        break;

        case 1192: /* opt_concurrently: CONCURRENTLY  */
#line 8778 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 37215 "gram.cpp"
        break;

        case 1193: /* opt_concurrently: %empty  */
#line 8779 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 37221 "gram.cpp"
        break;

        case 1194: /* opt_index_name: index_name  */
#line 8783 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 37227 "gram.cpp"
        break;

        case 1195: /* opt_index_name: %empty  */
#line 8784 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 37233 "gram.cpp"
        break;

        case 1196: /* access_method_clause: USING access_method  */
#line 8788 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 37239 "gram.cpp"
        break;

        case 1197: /* access_method_clause: %empty  */
#line 8789 "gram.y"
        {
            (yyval.str) = DEFAULT_INDEX_TYPE;
        }
#line 37245 "gram.cpp"
        break;

        case 1198: /* index_params: index_elem  */
#line 8792 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].ielem));
        }
#line 37251 "gram.cpp"
        break;

        case 1199: /* index_params: index_params ',' index_elem  */
#line 8793 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem));
        }
#line 37257 "gram.cpp"
        break;

        case 1200: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 8802 "gram.y"
        {
            (yyval.ielem) = makeNode(IndexElem);
            (yyval.ielem)->name = (yyvsp[-4].str);
            (yyval.ielem)->expr = NULL;
            (yyval.ielem)->indexcolname = NULL;
            (yyval.ielem)->collation = (yyvsp[-3].list);
            (yyval.ielem)->opclass = (yyvsp[-2].list);
            (yyval.ielem)->ordering = static_cast<SortByDir>((yyvsp[-1].ival));
            (yyval.ielem)->nulls_ordering = static_cast<SortByNulls>((yyvsp[0].ival));
        }
#line 37272 "gram.cpp"
        break;

        case 1201: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 8813 "gram.y"
        {
            (yyval.ielem) = makeNode(IndexElem);
            (yyval.ielem)->name = NULL;
            (yyval.ielem)->expr = (yyvsp[-4].node);
            (yyval.ielem)->indexcolname = NULL;
            (yyval.ielem)->collation = (yyvsp[-3].list);
            (yyval.ielem)->opclass = (yyvsp[-2].list);
            (yyval.ielem)->ordering = static_cast<SortByDir>((yyvsp[-1].ival));
            (yyval.ielem)->nulls_ordering = static_cast<SortByNulls>((yyvsp[0].ival));
        }
#line 37287 "gram.cpp"
        break;

        case 1202: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 8824 "gram.y"
        {
            (yyval.ielem) = makeNode(IndexElem);
            (yyval.ielem)->name = NULL;
            (yyval.ielem)->expr = (yyvsp[-5].node);
            (yyval.ielem)->indexcolname = NULL;
            (yyval.ielem)->collation = (yyvsp[-3].list);
            (yyval.ielem)->opclass = (yyvsp[-2].list);
            (yyval.ielem)->ordering = static_cast<SortByDir>((yyvsp[-1].ival));
            (yyval.ielem)->nulls_ordering = static_cast<SortByNulls>((yyvsp[0].ival));
        }
#line 37302 "gram.cpp"
        break;

        case 1203: /* opt_collate: COLLATE any_name  */
#line 8836 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 37308 "gram.cpp"
        break;

        case 1204: /* opt_collate: %empty  */
#line 8837 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 37314 "gram.cpp"
        break;

        case 1205: /* opt_class: any_name  */
#line 8840 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 37320 "gram.cpp"
        break;

        case 1206: /* opt_class: USING any_name  */
#line 8841 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 37326 "gram.cpp"
        break;

        case 1207: /* opt_class: %empty  */
#line 8842 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 37332 "gram.cpp"
        break;

        case 1208: /* opt_asc_desc: ASC  */
#line 8845 "gram.y"
        {
            (yyval.ival) = SORTBY_ASC;
        }
#line 37338 "gram.cpp"
        break;

        case 1209: /* opt_asc_desc: DESC  */
#line 8846 "gram.y"
        {
            (yyval.ival) = SORTBY_DESC;
        }
#line 37344 "gram.cpp"
        break;

        case 1210: /* opt_asc_desc: %empty  */
#line 8847 "gram.y"
        {
            (yyval.ival) = SORTBY_DEFAULT;
        }
#line 37350 "gram.cpp"
        break;

        case 1211: /* opt_nulls_order: NULLS_FIRST  */
#line 8850 "gram.y"
        {
            (yyval.ival) = SORTBY_NULLS_FIRST;
        }
#line 37356 "gram.cpp"
        break;

        case 1212: /* opt_nulls_order: NULLS_LAST  */
#line 8851 "gram.y"
        {
            (yyval.ival) = SORTBY_NULLS_LAST;
        }
#line 37362 "gram.cpp"
        break;

        case 1213: /* opt_nulls_order: %empty  */
#line 8852 "gram.y"
        {
            (yyval.ival) = SORTBY_NULLS_DEFAULT;
        }
#line 37368 "gram.cpp"
        break;

        case 1214: /* CreateFunctionStmt: CREATE opt_or_replace FUNCTION func_name func_args_with_defaults RETURNS func_return createfunc_opt_list opt_definition  */
#line 8870 "gram.y"
        {
            CreateFunctionStmt* n = makeNode(CreateFunctionStmt);
            n->replace = (yyvsp[-7].boolean);
            n->funcname = (yyvsp[-5].list);
            n->parameters = (yyvsp[-4].list);
            n->returnType = (yyvsp[-2].typnam);
            n->options = (yyvsp[-1].list);
            n->withClause = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 37383 "gram.cpp"
        break;

        case 1215: /* CreateFunctionStmt: CREATE opt_or_replace FUNCTION func_name func_args_with_defaults RETURNS TABLE '(' table_func_column_list ')' createfunc_opt_list opt_definition  */
#line 8882 "gram.y"
        {
            CreateFunctionStmt* n = makeNode(CreateFunctionStmt);
            n->replace = (yyvsp[-10].boolean);
            n->funcname = (yyvsp[-8].list);
            n->parameters = mergeTableFuncParameters((yyvsp[-7].list), (yyvsp[-3].list));
            n->returnType = TableFuncTypeName((yyvsp[-3].list));
            n->returnType->location = (yylsp[-5]);
            n->options = (yyvsp[-1].list);
            n->withClause = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 37399 "gram.cpp"
        break;

        case 1216: /* CreateFunctionStmt: CREATE opt_or_replace FUNCTION func_name func_args_with_defaults createfunc_opt_list opt_definition  */
#line 8895 "gram.y"
        {
            CreateFunctionStmt* n = makeNode(CreateFunctionStmt);
            n->replace = (yyvsp[-5].boolean);
            n->funcname = (yyvsp[-3].list);
            n->parameters = (yyvsp[-2].list);
            n->returnType = NULL;
            n->options = (yyvsp[-1].list);
            n->withClause = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 37414 "gram.cpp"
        break;

        case 1217: /* opt_or_replace: OR REPLACE  */
#line 8908 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 37420 "gram.cpp"
        break;

        case 1218: /* opt_or_replace: %empty  */
#line 8909 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 37426 "gram.cpp"
        break;

        case 1219: /* func_args: '(' func_args_list ')'  */
#line 8912 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 37432 "gram.cpp"
        break;

        case 1220: /* func_args: '(' ')'  */
#line 8913 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 37438 "gram.cpp"
        break;

        case 1221: /* func_args_list: func_arg  */
#line 8917 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].fun_param));
        }
#line 37444 "gram.cpp"
        break;

        case 1222: /* func_args_list: func_args_list ',' func_arg  */
#line 8918 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].fun_param));
        }
#line 37450 "gram.cpp"
        break;

        case 1223: /* func_args_with_defaults: '(' func_args_with_defaults_list ')'  */
#line 8926 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 37456 "gram.cpp"
        break;

        case 1224: /* func_args_with_defaults: '(' ')'  */
#line 8927 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 37462 "gram.cpp"
        break;

        case 1225: /* func_args_with_defaults_list: func_arg_with_default  */
#line 8931 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].fun_param));
        }
#line 37468 "gram.cpp"
        break;

        case 1226: /* func_args_with_defaults_list: func_args_with_defaults_list ',' func_arg_with_default  */
#line 8933 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].fun_param));
        }
#line 37474 "gram.cpp"
        break;

        case 1227: /* func_arg: arg_class param_name func_type  */
#line 8948 "gram.y"
        {
            FunctionParameter* n = makeNode(FunctionParameter);
            n->name = (yyvsp[-1].str);
            n->argType = (yyvsp[0].typnam);
            n->mode = (yyvsp[-2].fun_param_mode);
            n->defexpr = NULL;
            (yyval.fun_param) = n;
        }
#line 37487 "gram.cpp"
        break;

        case 1228: /* func_arg: param_name arg_class func_type  */
#line 8957 "gram.y"
        {
            FunctionParameter* n = makeNode(FunctionParameter);
            n->name = (yyvsp[-2].str);
            n->argType = (yyvsp[0].typnam);
            n->mode = (yyvsp[-1].fun_param_mode);
            n->defexpr = NULL;
            (yyval.fun_param) = n;
        }
#line 37500 "gram.cpp"
        break;

        case 1229: /* func_arg: param_name func_type  */
#line 8966 "gram.y"
        {
            FunctionParameter* n = makeNode(FunctionParameter);
            n->name = (yyvsp[-1].str);
            n->argType = (yyvsp[0].typnam);
            n->mode = FUNC_PARAM_IN;
            n->defexpr = NULL;
            (yyval.fun_param) = n;
        }
#line 37513 "gram.cpp"
        break;

        case 1230: /* func_arg: arg_class func_type  */
#line 8975 "gram.y"
        {
            FunctionParameter* n = makeNode(FunctionParameter);
            n->name = NULL;
            n->argType = (yyvsp[0].typnam);
            n->mode = (yyvsp[-1].fun_param_mode);
            n->defexpr = NULL;
            (yyval.fun_param) = n;
        }
#line 37526 "gram.cpp"
        break;

        case 1231: /* func_arg: func_type  */
#line 8984 "gram.y"
        {
            FunctionParameter* n = makeNode(FunctionParameter);
            n->name = NULL;
            n->argType = (yyvsp[0].typnam);
            n->mode = FUNC_PARAM_IN;
            n->defexpr = NULL;
            (yyval.fun_param) = n;
        }
#line 37539 "gram.cpp"
        break;

        case 1232: /* arg_class: IN_P  */
#line 8995 "gram.y"
        {
            (yyval.fun_param_mode) = FUNC_PARAM_IN;
        }
#line 37545 "gram.cpp"
        break;

        case 1233: /* arg_class: OUT_P  */
#line 8996 "gram.y"
        {
            (yyval.fun_param_mode) = FUNC_PARAM_OUT;
        }
#line 37551 "gram.cpp"
        break;

        case 1234: /* arg_class: INOUT  */
#line 8997 "gram.y"
        {
            (yyval.fun_param_mode) = FUNC_PARAM_INOUT;
        }
#line 37557 "gram.cpp"
        break;

        case 1235: /* arg_class: IN_P OUT_P  */
#line 8998 "gram.y"
        {
            (yyval.fun_param_mode) = FUNC_PARAM_INOUT;
        }
#line 37563 "gram.cpp"
        break;

        case 1236: /* arg_class: VARIADIC  */
#line 8999 "gram.y"
        {
            (yyval.fun_param_mode) = FUNC_PARAM_VARIADIC;
        }
#line 37569 "gram.cpp"
        break;

        case 1238: /* func_return: func_type  */
#line 9010 "gram.y"
        {
            /* We can catch over-specified results here if we want to,
					 * but for now better to silently swallow typmod, etc.
					 * - thomas 2000-03-22
					 */
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 37581 "gram.cpp"
        break;

        case 1239: /* func_type: Typename  */
#line 9024 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 37587 "gram.cpp"
        break;

        case 1240: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 9026 "gram.y"
        {
            (yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
            (yyval.typnam)->pct_type = true;
            (yyval.typnam)->location = (yylsp[-3]);
        }
#line 37597 "gram.cpp"
        break;

        case 1241: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 9032 "gram.y"
        {
            (yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
            (yyval.typnam)->pct_type = true;
            (yyval.typnam)->setof = TRUE;
            (yyval.typnam)->location = (yylsp[-3]);
        }
#line 37608 "gram.cpp"
        break;

        case 1242: /* func_arg_with_default: func_arg  */
#line 9042 "gram.y"
        {
            (yyval.fun_param) = (yyvsp[0].fun_param);
        }
#line 37616 "gram.cpp"
        break;

        case 1243: /* func_arg_with_default: func_arg DEFAULT a_expr  */
#line 9046 "gram.y"
        {
            (yyval.fun_param) = (yyvsp[-2].fun_param);
            (yyval.fun_param)->defexpr = (yyvsp[0].node);
        }
#line 37625 "gram.cpp"
        break;

        case 1244: /* func_arg_with_default: func_arg '=' a_expr  */
#line 9051 "gram.y"
        {
            (yyval.fun_param) = (yyvsp[-2].fun_param);
            (yyval.fun_param)->defexpr = (yyvsp[0].node);
        }
#line 37634 "gram.cpp"
        break;

        case 1245: /* aggr_arg: func_arg  */
#line 9059 "gram.y"
        {
            if (!((yyvsp[0].fun_param)->mode == FUNC_PARAM_IN || (yyvsp[0].fun_param)->mode == FUNC_PARAM_VARIADIC))
                ereport(ERROR,
                        errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                        errmsg("aggregates cannot have output arguments"),
                        parser_errposition((yylsp[0])));
            (yyval.fun_param) = (yyvsp[0].fun_param);
        }
#line 37648 "gram.cpp"
        break;

        case 1246: /* aggr_args: '(' '*' ')'  */
#line 9100 "gram.y"
        {
            (yyval.list) = list_make2(NIL, makeInteger(-1));
        }
#line 37656 "gram.cpp"
        break;

        case 1247: /* aggr_args: '(' aggr_args_list ')'  */
#line 9104 "gram.y"
        {
            (yyval.list) = list_make2((yyvsp[-1].list), makeInteger(-1));
        }
#line 37664 "gram.cpp"
        break;

        case 1248: /* aggr_args: '(' ORDER BY aggr_args_list ')'  */
#line 9108 "gram.y"
        {
            (yyval.list) = list_make2((yyvsp[-1].list), makeInteger(0));
        }
#line 37672 "gram.cpp"
        break;

        case 1249: /* aggr_args: '(' aggr_args_list ORDER BY aggr_args_list ')'  */
#line 9112 "gram.y"
        {
            /* this is the only case requiring consistency checking */
            (yyval.list) = makeOrderedSetArgs((yyvsp[-4].list), (yyvsp[-1].list), yyscanner);
        }
#line 37681 "gram.cpp"
        break;

        case 1250: /* aggr_args_list: aggr_arg  */
#line 9119 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].fun_param));
        }
#line 37687 "gram.cpp"
        break;

        case 1251: /* aggr_args_list: aggr_args_list ',' aggr_arg  */
#line 9120 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].fun_param));
        }
#line 37693 "gram.cpp"
        break;

        case 1252: /* createfunc_opt_list: createfunc_opt_item  */
#line 9125 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 37699 "gram.cpp"
        break;

        case 1253: /* createfunc_opt_list: createfunc_opt_list createfunc_opt_item  */
#line 9126 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 37705 "gram.cpp"
        break;

        case 1254: /* common_func_opt_item: CALLED ON NULL_P INPUT_P  */
#line 9134 "gram.y"
        {
            (yyval.defelt) = makeDefElem("strict", (Node*) makeInteger(FALSE));
        }
#line 37713 "gram.cpp"
        break;

        case 1255: /* common_func_opt_item: RETURNS NULL_P ON NULL_P INPUT_P  */
#line 9138 "gram.y"
        {
            (yyval.defelt) = makeDefElem("strict", (Node*) makeInteger(TRUE));
        }
#line 37721 "gram.cpp"
        break;

        case 1256: /* common_func_opt_item: STRICT_P  */
#line 9142 "gram.y"
        {
            (yyval.defelt) = makeDefElem("strict", (Node*) makeInteger(TRUE));
        }
#line 37729 "gram.cpp"
        break;

        case 1257: /* common_func_opt_item: IMMUTABLE  */
#line 9146 "gram.y"
        {
            (yyval.defelt) = makeDefElem("volatility", (Node*) makeString("immutable"));
        }
#line 37737 "gram.cpp"
        break;

        case 1258: /* common_func_opt_item: STABLE  */
#line 9150 "gram.y"
        {
            (yyval.defelt) = makeDefElem("volatility", (Node*) makeString("stable"));
        }
#line 37745 "gram.cpp"
        break;

        case 1259: /* common_func_opt_item: VOLATILE  */
#line 9154 "gram.y"
        {
            (yyval.defelt) = makeDefElem("volatility", (Node*) makeString("volatile"));
        }
#line 37753 "gram.cpp"
        break;

        case 1260: /* common_func_opt_item: EXTERNAL SECURITY DEFINER  */
#line 9158 "gram.y"
        {
            (yyval.defelt) = makeDefElem("security", (Node*) makeInteger(TRUE));
        }
#line 37761 "gram.cpp"
        break;

        case 1261: /* common_func_opt_item: EXTERNAL SECURITY INVOKER  */
#line 9162 "gram.y"
        {
            (yyval.defelt) = makeDefElem("security", (Node*) makeInteger(FALSE));
        }
#line 37769 "gram.cpp"
        break;

        case 1262: /* common_func_opt_item: SECURITY DEFINER  */
#line 9166 "gram.y"
        {
            (yyval.defelt) = makeDefElem("security", (Node*) makeInteger(TRUE));
        }
#line 37777 "gram.cpp"
        break;

        case 1263: /* common_func_opt_item: SECURITY INVOKER  */
#line 9170 "gram.y"
        {
            (yyval.defelt) = makeDefElem("security", (Node*) makeInteger(FALSE));
        }
#line 37785 "gram.cpp"
        break;

        case 1264: /* common_func_opt_item: LEAKPROOF  */
#line 9174 "gram.y"
        {
            (yyval.defelt) = makeDefElem("leakproof", (Node*) makeInteger(TRUE));
        }
#line 37793 "gram.cpp"
        break;

        case 1265: /* common_func_opt_item: NOT LEAKPROOF  */
#line 9178 "gram.y"
        {
            (yyval.defelt) = makeDefElem("leakproof", (Node*) makeInteger(FALSE));
        }
#line 37801 "gram.cpp"
        break;

        case 1266: /* common_func_opt_item: COST NumericOnly  */
#line 9182 "gram.y"
        {
            (yyval.defelt) = makeDefElem("cost", (Node*) (yyvsp[0].value));
        }
#line 37809 "gram.cpp"
        break;

        case 1267: /* common_func_opt_item: ROWS NumericOnly  */
#line 9186 "gram.y"
        {
            (yyval.defelt) = makeDefElem("rows", (Node*) (yyvsp[0].value));
        }
#line 37817 "gram.cpp"
        break;

        case 1268: /* common_func_opt_item: FunctionSetResetClause  */
#line 9190 "gram.y"
        {
            /* we abuse the normal content of a DefElem here */
            (yyval.defelt) = makeDefElem("set", (Node*) (yyvsp[0].vsetstmt));
        }
#line 37826 "gram.cpp"
        break;

        case 1269: /* common_func_opt_item: NO SQL  */
#line 9195 "gram.y"
        {
            (yyval.defelt) = makeDefElem("data_access", (Node*) makeString("none"));
        }
#line 37834 "gram.cpp"
        break;

        case 1270: /* common_func_opt_item: CONTAINS SQL  */
#line 9199 "gram.y"
        {
            (yyval.defelt) = makeDefElem("data_access", (Node*) makeString("contains"));
        }
#line 37842 "gram.cpp"
        break;

        case 1271: /* common_func_opt_item: READS SQL DATA_P  */
#line 9203 "gram.y"
        {
            (yyval.defelt) = makeDefElem("data_access", (Node*) makeString("reads"));
        }
#line 37850 "gram.cpp"
        break;

        case 1272: /* common_func_opt_item: MODIFIES SQL DATA_P  */
#line 9207 "gram.y"
        {
            (yyval.defelt) = makeDefElem("data_access", (Node*) makeString("modifies"));
        }
#line 37858 "gram.cpp"
        break;

        case 1273: /* common_func_opt_item: EXECUTE ON ANY  */
#line 9211 "gram.y"
        {
            (yyval.defelt) = makeDefElem("exec_location", (Node*) makeString("any"));
        }
#line 37866 "gram.cpp"
        break;

        case 1274: /* common_func_opt_item: EXECUTE ON MASTER  */
#line 9215 "gram.y"
        {
            (yyval.defelt) = makeDefElem("exec_location", (Node*) makeString("master"));
        }
#line 37874 "gram.cpp"
        break;

        case 1275: /* common_func_opt_item: EXECUTE ON INITPLAN  */
#line 9219 "gram.y"
        {
            (yyval.defelt) = makeDefElem("exec_location", (Node*) makeString("initplan"));
        }
#line 37882 "gram.cpp"
        break;

        case 1276: /* common_func_opt_item: EXECUTE ON ALL SEGMENTS  */
#line 9223 "gram.y"
        {
            (yyval.defelt) = makeDefElem("exec_location", (Node*) makeString("all_segments"));
        }
#line 37890 "gram.cpp"
        break;

        case 1277: /* createfunc_opt_item: AS func_as  */
#line 9230 "gram.y"
        {
            (yyval.defelt) = makeDefElem("as", (Node*) (yyvsp[0].list));
        }
#line 37898 "gram.cpp"
        break;

        case 1278: /* createfunc_opt_item: LANGUAGE NonReservedWord_or_Sconst  */
#line 9234 "gram.y"
        {
            (yyval.defelt) = makeDefElem("language", (Node*) makeString((yyvsp[0].str)));
        }
#line 37906 "gram.cpp"
        break;

        case 1279: /* createfunc_opt_item: WINDOW  */
#line 9238 "gram.y"
        {
            (yyval.defelt) = makeDefElem("window", (Node*) makeInteger(TRUE));
        }
#line 37914 "gram.cpp"
        break;

        case 1280: /* createfunc_opt_item: common_func_opt_item  */
#line 9242 "gram.y"
        {
            (yyval.defelt) = (yyvsp[0].defelt);
        }
#line 37922 "gram.cpp"
        break;

        case 1281: /* func_as: Sconst  */
#line 9247 "gram.y"
        {
            (yyval.list) = list_make1(makeString((yyvsp[0].str)));
        }
#line 37928 "gram.cpp"
        break;

        case 1282: /* func_as: Sconst ',' Sconst  */
#line 9249 "gram.y"
        {
            (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str)));
        }
#line 37936 "gram.cpp"
        break;

        case 1283: /* opt_definition: WITH definition  */
#line 9255 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 37942 "gram.cpp"
        break;

        case 1284: /* opt_definition: %empty  */
#line 9256 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 37948 "gram.cpp"
        break;

        case 1285: /* table_func_column: param_name func_type  */
#line 9260 "gram.y"
        {
            FunctionParameter* n = makeNode(FunctionParameter);
            n->name = (yyvsp[-1].str);
            n->argType = (yyvsp[0].typnam);
            n->mode = FUNC_PARAM_TABLE;
            n->defexpr = NULL;
            (yyval.fun_param) = n;
        }
#line 37961 "gram.cpp"
        break;

        case 1286: /* table_func_column_list: table_func_column  */
#line 9272 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].fun_param));
        }
#line 37969 "gram.cpp"
        break;

        case 1287: /* table_func_column_list: table_func_column_list ',' table_func_column  */
#line 9276 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].fun_param));
        }
#line 37977 "gram.cpp"
        break;

        case 1288: /* AlterFunctionStmt: ALTER FUNCTION function_with_argtypes alterfunc_opt_list opt_restrict  */
#line 9291 "gram.y"
        {
            AlterFunctionStmt* n = makeNode(AlterFunctionStmt);
            n->func = (yyvsp[-2].funwithargs);
            n->actions = (yyvsp[-1].list);
            (yyval.node) = (Node*) n;
        }
#line 37988 "gram.cpp"
        break;

        case 1289: /* alterfunc_opt_list: common_func_opt_item  */
#line 9301 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 37994 "gram.cpp"
        break;

        case 1290: /* alterfunc_opt_list: alterfunc_opt_list common_func_opt_item  */
#line 9302 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 38000 "gram.cpp"
        break;

        case 1293: /* RemoveFuncStmt: DROP FUNCTION func_name func_args opt_drop_behavior  */
#line 9324 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_FUNCTION;
            n->objects = list_make1((yyvsp[-2].list));
            n->arguments = list_make1(extractArgTypes((yyvsp[-1].list)));
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = false;
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 38015 "gram.cpp"
        break;

        case 1294: /* RemoveFuncStmt: DROP FUNCTION IF_P EXISTS func_name func_args opt_drop_behavior  */
#line 9335 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_FUNCTION;
            n->objects = list_make1((yyvsp[-2].list));
            n->arguments = list_make1(extractArgTypes((yyvsp[-1].list)));
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = true;
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 38030 "gram.cpp"
        break;

        case 1295: /* RemoveAggrStmt: DROP AGGREGATE func_name aggr_args opt_drop_behavior  */
#line 9349 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_AGGREGATE;
            n->objects = list_make1((yyvsp[-2].list));
            n->arguments = list_make1(extractAggrArgTypes((yyvsp[-1].list)));
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = false;
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 38045 "gram.cpp"
        break;

        case 1296: /* RemoveAggrStmt: DROP AGGREGATE IF_P EXISTS func_name aggr_args opt_drop_behavior  */
#line 9360 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_AGGREGATE;
            n->objects = list_make1((yyvsp[-2].list));
            n->arguments = list_make1(extractAggrArgTypes((yyvsp[-1].list)));
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = true;
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 38060 "gram.cpp"
        break;

        case 1297: /* RemoveOperStmt: DROP OPERATOR any_operator oper_argtypes opt_drop_behavior  */
#line 9374 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_OPERATOR;
            n->objects = list_make1((yyvsp[-2].list));
            n->arguments = list_make1((yyvsp[-1].list));
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = false;
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 38075 "gram.cpp"
        break;

        case 1298: /* RemoveOperStmt: DROP OPERATOR IF_P EXISTS any_operator oper_argtypes opt_drop_behavior  */
#line 9385 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_OPERATOR;
            n->objects = list_make1((yyvsp[-2].list));
            n->arguments = list_make1((yyvsp[-1].list));
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = true;
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 38090 "gram.cpp"
        break;

        case 1299: /* oper_argtypes: '(' Typename ')'  */
#line 9399 "gram.y"
        {
            ereport(ERROR,
                    errcode(ERRCODE_SYNTAX_ERROR),
                    errmsg("missing argument"),
                    errhint("Use NONE to denote the missing argument of a unary operator."),
                    parser_errposition((yylsp[0])));
        }
#line 38102 "gram.cpp"
        break;

        case 1300: /* oper_argtypes: '(' Typename ',' Typename ')'  */
#line 9407 "gram.y"
        {
            (yyval.list) = list_make2((yyvsp[-3].typnam), (yyvsp[-1].typnam));
        }
#line 38108 "gram.cpp"
        break;

        case 1301: /* oper_argtypes: '(' NONE ',' Typename ')'  */
#line 9409 "gram.y"
        {
            (yyval.list) = list_make2(NULL, (yyvsp[-1].typnam));
        }
#line 38114 "gram.cpp"
        break;

        case 1302: /* oper_argtypes: '(' Typename ',' NONE ')'  */
#line 9411 "gram.y"
        {
            (yyval.list) = list_make2((yyvsp[-3].typnam), NULL);
        }
#line 38120 "gram.cpp"
        break;

        case 1303: /* any_operator: all_Op  */
#line 9416 "gram.y"
        {
            (yyval.list) = list_make1(makeString((yyvsp[0].str)));
        }
#line 38126 "gram.cpp"
        break;

        case 1304: /* any_operator: ColId '.' any_operator  */
#line 9418 "gram.y"
        {
            (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list));
        }
#line 38132 "gram.cpp"
        break;

        case 1305: /* DoStmt: DO dostmt_opt_list  */
#line 9431 "gram.y"
        {
            DoStmt* n = makeNode(DoStmt);
            n->args = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 38142 "gram.cpp"
        break;

        case 1306: /* dostmt_opt_list: dostmt_opt_item  */
#line 9439 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 38148 "gram.cpp"
        break;

        case 1307: /* dostmt_opt_list: dostmt_opt_list dostmt_opt_item  */
#line 9440 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 38154 "gram.cpp"
        break;

        case 1308: /* dostmt_opt_item: Sconst  */
#line 9445 "gram.y"
        {
            (yyval.defelt) = makeDefElem("as", (Node*) makeString((yyvsp[0].str)));
        }
#line 38162 "gram.cpp"
        break;

        case 1309: /* dostmt_opt_item: LANGUAGE NonReservedWord_or_Sconst  */
#line 9449 "gram.y"
        {
            (yyval.defelt) = makeDefElem("language", (Node*) makeString((yyvsp[0].str)));
        }
#line 38170 "gram.cpp"
        break;

        case 1310: /* CreateCastStmt: CREATE CAST '(' Typename AS Typename ')' WITH FUNCTION function_with_argtypes cast_context  */
#line 9462 "gram.y"
        {
            CreateCastStmt* n = makeNode(CreateCastStmt);
            n->sourcetype = (yyvsp[-7].typnam);
            n->targettype = (yyvsp[-5].typnam);
            n->func = (yyvsp[-1].funwithargs);
            n->context = (CoercionContext)(yyvsp[0].ival);
            n->inout = false;
            (yyval.node) = (Node*) n;
        }
#line 38184 "gram.cpp"
        break;

        case 1311: /* CreateCastStmt: CREATE CAST '(' Typename AS Typename ')' WITHOUT FUNCTION cast_context  */
#line 9473 "gram.y"
        {
            CreateCastStmt* n = makeNode(CreateCastStmt);
            n->sourcetype = (yyvsp[-6].typnam);
            n->targettype = (yyvsp[-4].typnam);
            n->func = NULL;
            n->context = (CoercionContext)(yyvsp[0].ival);
            n->inout = false;
            (yyval.node) = (Node*) n;
        }
#line 38198 "gram.cpp"
        break;

        case 1312: /* CreateCastStmt: CREATE CAST '(' Typename AS Typename ')' WITH INOUT cast_context  */
#line 9484 "gram.y"
        {
            CreateCastStmt* n = makeNode(CreateCastStmt);
            n->sourcetype = (yyvsp[-6].typnam);
            n->targettype = (yyvsp[-4].typnam);
            n->func = NULL;
            n->context = (CoercionContext)(yyvsp[0].ival);
            n->inout = true;
            (yyval.node) = (Node*) n;
        }
#line 38212 "gram.cpp"
        break;

        case 1313: /* cast_context: AS IMPLICIT_P  */
#line 9495 "gram.y"
        {
            (yyval.ival) = COERCION_IMPLICIT;
        }
#line 38218 "gram.cpp"
        break;

        case 1314: /* cast_context: AS ASSIGNMENT  */
#line 9496 "gram.y"
        {
            (yyval.ival) = COERCION_ASSIGNMENT;
        }
#line 38224 "gram.cpp"
        break;

        case 1315: /* cast_context: %empty  */
#line 9497 "gram.y"
        {
            (yyval.ival) = COERCION_EXPLICIT;
        }
#line 38230 "gram.cpp"
        break;

        case 1316: /* DropCastStmt: DROP CAST opt_if_exists '(' Typename AS Typename ')' opt_drop_behavior  */
#line 9502 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_CAST;
            n->objects = list_make1(list_make1((yyvsp[-4].typnam)));
            n->arguments = list_make1(list_make1((yyvsp[-2].typnam)));
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = (yyvsp[-6].boolean);
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 38245 "gram.cpp"
        break;

        case 1317: /* opt_if_exists: IF_P EXISTS  */
#line 9514 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 38251 "gram.cpp"
        break;

        case 1318: /* opt_if_exists: %empty  */
#line 9515 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 38257 "gram.cpp"
        break;

        case 1319: /* ReindexStmt: REINDEX reindex_type qualified_name opt_force  */
#line 9530 "gram.y"
        {
            ReindexStmt* n = makeNode(ReindexStmt);
            n->kind = (yyvsp[-2].objtype);
            n->relation = (yyvsp[-1].range);
            n->name = NULL;
            (yyval.node) = (Node*) n;
        }
#line 38269 "gram.cpp"
        break;

        case 1320: /* ReindexStmt: REINDEX SYSTEM_P name opt_force  */
#line 9538 "gram.y"
        {
            ReindexStmt* n = makeNode(ReindexStmt);
            n->kind = OBJECT_DATABASE;
            n->name = (yyvsp[-1].str);
            n->relation = NULL;
            n->do_system = true;
            n->do_user = false;
            (yyval.node) = (Node*) n;
        }
#line 38283 "gram.cpp"
        break;

        case 1321: /* ReindexStmt: REINDEX DATABASE name opt_force  */
#line 9548 "gram.y"
        {
            ReindexStmt* n = makeNode(ReindexStmt);
            n->kind = OBJECT_DATABASE;
            n->name = (yyvsp[-1].str);
            n->relation = NULL;
            n->do_system = true;
            n->do_user = true;
            (yyval.node) = (Node*) n;
        }
#line 38297 "gram.cpp"
        break;

        case 1322: /* reindex_type: INDEX  */
#line 9560 "gram.y"
        {
            (yyval.objtype) = OBJECT_INDEX;
        }
#line 38303 "gram.cpp"
        break;

        case 1323: /* reindex_type: TABLE  */
#line 9561 "gram.y"
        {
            (yyval.objtype) = OBJECT_TABLE;
        }
#line 38309 "gram.cpp"
        break;

        case 1324: /* opt_force: FORCE  */
#line 9564 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 38315 "gram.cpp"
        break;

        case 1325: /* opt_force: %empty  */
#line 9565 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 38321 "gram.cpp"
        break;

        case 1326: /* AlterTypeStmt: ALTER TYPE_P any_name SET DEFAULT ENCODING definition  */
#line 9574 "gram.y"
        {
            AlterTypeStmt* n = makeNode(AlterTypeStmt);

            n->typeName = (yyvsp[-4].list);
            n->encoding = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 38333 "gram.cpp"
        break;

        case 1327: /* AlterTblSpcStmt: ALTER TABLESPACE name SET reloptions  */
#line 9591 "gram.y"
        {
            AlterTableSpaceOptionsStmt* n = makeNode(AlterTableSpaceOptionsStmt);
            n->tablespacename = (yyvsp[-2].str);
            n->options = (yyvsp[0].list);
            n->isReset = FALSE;
            (yyval.node) = (Node*) n;
        }
#line 38346 "gram.cpp"
        break;

        case 1328: /* AlterTblSpcStmt: ALTER TABLESPACE name RESET reloptions  */
#line 9600 "gram.y"
        {
            AlterTableSpaceOptionsStmt* n = makeNode(AlterTableSpaceOptionsStmt);
            n->tablespacename = (yyvsp[-2].str);
            n->options = (yyvsp[0].list);
            n->isReset = TRUE;
            (yyval.node) = (Node*) n;
        }
#line 38359 "gram.cpp"
        break;

        case 1329: /* RenameStmt: ALTER AGGREGATE func_name aggr_args RENAME TO name  */
#line 9617 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_AGGREGATE;
            n->object = (yyvsp[-4].list);
            n->objarg = extractAggrArgTypes((yyvsp[-3].list));
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38373 "gram.cpp"
        break;

        case 1330: /* RenameStmt: ALTER COLLATION any_name RENAME TO name  */
#line 9627 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_COLLATION;
            n->object = (yyvsp[-3].list);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38386 "gram.cpp"
        break;

        case 1331: /* RenameStmt: ALTER CONVERSION_P any_name RENAME TO name  */
#line 9636 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_CONVERSION;
            n->object = (yyvsp[-3].list);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38399 "gram.cpp"
        break;

        case 1332: /* RenameStmt: ALTER DATABASE database_name RENAME TO database_name  */
#line 9645 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_DATABASE;
            n->subname = (yyvsp[-3].str);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38412 "gram.cpp"
        break;

        case 1333: /* RenameStmt: ALTER DOMAIN_P any_name RENAME TO name  */
#line 9654 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_DOMAIN;
            n->object = (yyvsp[-3].list);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38425 "gram.cpp"
        break;

        case 1334: /* RenameStmt: ALTER DOMAIN_P any_name RENAME CONSTRAINT name TO name  */
#line 9663 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_CONSTRAINT;
            n->relationType = OBJECT_DOMAIN;
            n->object = (yyvsp[-5].list);
            n->subname = (yyvsp[-2].str);
            n->newname = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 38439 "gram.cpp"
        break;

        case 1335: /* RenameStmt: ALTER FOREIGN DATA_P WRAPPER name RENAME TO name  */
#line 9673 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_FDW;
            n->object = list_make1(makeString((yyvsp[-3].str)));
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38452 "gram.cpp"
        break;

        case 1336: /* RenameStmt: ALTER FUNCTION function_with_argtypes RENAME TO name  */
#line 9682 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_FUNCTION;
            n->object = (yyvsp[-3].funwithargs)->funcname;
            n->objarg = (yyvsp[-3].funwithargs)->funcargs;
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38466 "gram.cpp"
        break;

        case 1337: /* RenameStmt: ALTER GROUP_P RoleId RENAME TO RoleId  */
#line 9692 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_ROLE;
            n->subname = (yyvsp[-3].str);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38479 "gram.cpp"
        break;

        case 1338: /* RenameStmt: ALTER opt_procedural LANGUAGE name RENAME TO name  */
#line 9701 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_LANGUAGE;
            n->object = list_make1(makeString((yyvsp[-3].str)));
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38492 "gram.cpp"
        break;

        case 1339: /* RenameStmt: ALTER OPERATOR CLASS any_name USING access_method RENAME TO name  */
#line 9710 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_OPCLASS;
            n->object = (yyvsp[-5].list);
            n->objarg = list_make1(makeString((yyvsp[-3].str)));
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38506 "gram.cpp"
        break;

        case 1340: /* RenameStmt: ALTER OPERATOR FAMILY any_name USING access_method RENAME TO name  */
#line 9720 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_OPFAMILY;
            n->object = (yyvsp[-5].list);
            n->objarg = list_make1(makeString((yyvsp[-3].str)));
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38520 "gram.cpp"
        break;

        case 1341: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 9730 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_SCHEMA;
            n->subname = (yyvsp[-3].str);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38533 "gram.cpp"
        break;

        case 1342: /* RenameStmt: ALTER SERVER name RENAME TO name  */
#line 9739 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_FOREIGN_SERVER;
            n->object = list_make1(makeString((yyvsp[-3].str)));
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38546 "gram.cpp"
        break;

        case 1343: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 9748 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_TABLE;
            n->relation = (yyvsp[-3].range);
            n->subname = NULL;
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38560 "gram.cpp"
        break;

        case 1344: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 9758 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_TABLE;
            n->relation = (yyvsp[-3].range);
            n->subname = NULL;
            n->newname = (yyvsp[0].str);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 38574 "gram.cpp"
        break;

        case 1345: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 9768 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_SEQUENCE;
            n->relation = (yyvsp[-3].range);
            n->subname = NULL;
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38588 "gram.cpp"
        break;

        case 1346: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 9778 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_SEQUENCE;
            n->relation = (yyvsp[-3].range);
            n->subname = NULL;
            n->newname = (yyvsp[0].str);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 38602 "gram.cpp"
        break;

        case 1347: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 9788 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_VIEW;
            n->relation = (yyvsp[-3].range);
            n->subname = NULL;
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38616 "gram.cpp"
        break;

        case 1348: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 9798 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_VIEW;
            n->relation = (yyvsp[-3].range);
            n->subname = NULL;
            n->newname = (yyvsp[0].str);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 38630 "gram.cpp"
        break;

        case 1349: /* RenameStmt: ALTER MATERIALIZED VIEW qualified_name RENAME TO name  */
#line 9808 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_MATVIEW;
            n->relation = (yyvsp[-3].range);
            n->subname = NULL;
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38644 "gram.cpp"
        break;

        case 1350: /* RenameStmt: ALTER MATERIALIZED VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 9818 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_MATVIEW;
            n->relation = (yyvsp[-3].range);
            n->subname = NULL;
            n->newname = (yyvsp[0].str);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 38658 "gram.cpp"
        break;

        case 1351: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 9828 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_INDEX;
            n->relation = (yyvsp[-3].range);
            n->subname = NULL;
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38672 "gram.cpp"
        break;

        case 1352: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 9838 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_INDEX;
            n->relation = (yyvsp[-3].range);
            n->subname = NULL;
            n->newname = (yyvsp[0].str);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 38686 "gram.cpp"
        break;

        case 1353: /* RenameStmt: ALTER FOREIGN TABLE relation_expr RENAME TO name  */
#line 9848 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_FOREIGN_TABLE;
            n->relation = (yyvsp[-3].range);
            n->subname = NULL;
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38700 "gram.cpp"
        break;

        case 1354: /* RenameStmt: ALTER FOREIGN TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 9858 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_FOREIGN_TABLE;
            n->relation = (yyvsp[-3].range);
            n->subname = NULL;
            n->newname = (yyvsp[0].str);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 38714 "gram.cpp"
        break;

        case 1355: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 9868 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_COLUMN;
            n->relationType = OBJECT_TABLE;
            n->relation = (yyvsp[-5].range);
            n->subname = (yyvsp[-2].str);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38729 "gram.cpp"
        break;

        case 1356: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 9879 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_COLUMN;
            n->relationType = OBJECT_TABLE;
            n->relation = (yyvsp[-5].range);
            n->subname = (yyvsp[-2].str);
            n->newname = (yyvsp[0].str);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 38744 "gram.cpp"
        break;

        case 1357: /* RenameStmt: ALTER MATERIALIZED VIEW qualified_name RENAME opt_column name TO name  */
#line 9890 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_COLUMN;
            n->relationType = OBJECT_MATVIEW;
            n->relation = (yyvsp[-5].range);
            n->subname = (yyvsp[-2].str);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38759 "gram.cpp"
        break;

        case 1358: /* RenameStmt: ALTER MATERIALIZED VIEW IF_P EXISTS qualified_name RENAME opt_column name TO name  */
#line 9901 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_COLUMN;
            n->relationType = OBJECT_MATVIEW;
            n->relation = (yyvsp[-5].range);
            n->subname = (yyvsp[-2].str);
            n->newname = (yyvsp[0].str);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 38774 "gram.cpp"
        break;

        case 1359: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 9912 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_CONSTRAINT;
            n->relationType = OBJECT_TABLE;
            n->relation = (yyvsp[-5].range);
            n->subname = (yyvsp[-2].str);
            n->newname = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 38788 "gram.cpp"
        break;

        case 1360: /* RenameStmt: ALTER FOREIGN TABLE relation_expr RENAME opt_column name TO name  */
#line 9922 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_COLUMN;
            n->relationType = OBJECT_FOREIGN_TABLE;
            n->relation = (yyvsp[-5].range);
            n->subname = (yyvsp[-2].str);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38803 "gram.cpp"
        break;

        case 1361: /* RenameStmt: ALTER FOREIGN TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 9933 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_COLUMN;
            n->relationType = OBJECT_FOREIGN_TABLE;
            n->relation = (yyvsp[-5].range);
            n->subname = (yyvsp[-2].str);
            n->newname = (yyvsp[0].str);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 38818 "gram.cpp"
        break;

        case 1362: /* RenameStmt: ALTER RULE name ON qualified_name RENAME TO name  */
#line 9944 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_RULE;
            n->relation = (yyvsp[-3].range);
            n->subname = (yyvsp[-5].str);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38832 "gram.cpp"
        break;

        case 1363: /* RenameStmt: ALTER TRIGGER name ON qualified_name RENAME TO name  */
#line 9954 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_TRIGGER;
            n->relation = (yyvsp[-3].range);
            n->subname = (yyvsp[-5].str);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38846 "gram.cpp"
        break;

        case 1364: /* RenameStmt: ALTER EVENT TRIGGER name RENAME TO name  */
#line 9964 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_EVENT_TRIGGER;
            n->object = list_make1(makeString((yyvsp[-3].str)));
            n->newname = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 38858 "gram.cpp"
        break;

        case 1365: /* RenameStmt: ALTER ROLE RoleId RENAME TO RoleId  */
#line 9972 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_ROLE;
            n->subname = (yyvsp[-3].str);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38871 "gram.cpp"
        break;

        case 1366: /* RenameStmt: ALTER USER RoleId RENAME TO RoleId  */
#line 9981 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_ROLE;
            n->subname = (yyvsp[-3].str);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38884 "gram.cpp"
        break;

        case 1367: /* RenameStmt: ALTER TABLESPACE name RENAME TO name  */
#line 9990 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_TABLESPACE;
            n->subname = (yyvsp[-3].str);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38897 "gram.cpp"
        break;

        case 1368: /* RenameStmt: ALTER TEXT_P SEARCH PARSER any_name RENAME TO name  */
#line 9999 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_TSPARSER;
            n->object = (yyvsp[-3].list);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38910 "gram.cpp"
        break;

        case 1369: /* RenameStmt: ALTER TEXT_P SEARCH DICTIONARY any_name RENAME TO name  */
#line 10008 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_TSDICTIONARY;
            n->object = (yyvsp[-3].list);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38923 "gram.cpp"
        break;

        case 1370: /* RenameStmt: ALTER TEXT_P SEARCH TEMPLATE any_name RENAME TO name  */
#line 10017 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_TSTEMPLATE;
            n->object = (yyvsp[-3].list);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38936 "gram.cpp"
        break;

        case 1371: /* RenameStmt: ALTER TEXT_P SEARCH CONFIGURATION any_name RENAME TO name  */
#line 10026 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_TSCONFIGURATION;
            n->object = (yyvsp[-3].list);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38949 "gram.cpp"
        break;

        case 1372: /* RenameStmt: ALTER TYPE_P any_name RENAME TO name  */
#line 10035 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_TYPE;
            n->object = (yyvsp[-3].list);
            n->newname = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38962 "gram.cpp"
        break;

        case 1373: /* RenameStmt: ALTER TYPE_P any_name RENAME ATTRIBUTE name TO name opt_drop_behavior  */
#line 10044 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_ATTRIBUTE;
            n->relationType = OBJECT_TYPE;
            n->relation = makeRangeVarFromAnyName((yyvsp[-6].list), (yylsp[-6]), yyscanner);
            n->subname = (yyvsp[-3].str);
            n->newname = (yyvsp[-1].str);
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 38978 "gram.cpp"
        break;

        case 1374: /* RenameStmt: ALTER PROTOCOL any_name RENAME TO name  */
#line 10056 "gram.y"
        {
            RenameStmt* n = makeNode(RenameStmt);
            n->renameType = OBJECT_EXTPROTOCOL;
            n->object = (yyvsp[-3].list);
            n->newname = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 38990 "gram.cpp"
        break;

        case 1375: /* opt_column: COLUMN  */
#line 10065 "gram.y"
        {
            (yyval.ival) = COLUMN;
        }
#line 38996 "gram.cpp"
        break;

        case 1376: /* opt_column: %empty  */
#line 10066 "gram.y"
        {
            (yyval.ival) = 0;
        }
#line 39002 "gram.cpp"
        break;

        case 1377: /* opt_set_data: SET DATA_P  */
#line 10069 "gram.y"
        {
            (yyval.ival) = 1;
        }
#line 39008 "gram.cpp"
        break;

        case 1378: /* opt_set_data: %empty  */
#line 10070 "gram.y"
        {
            (yyval.ival) = 0;
        }
#line 39014 "gram.cpp"
        break;

        case 1379: /* AlterObjectSchemaStmt: ALTER AGGREGATE func_name aggr_args SET SCHEMA name  */
#line 10081 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_AGGREGATE;
            n->object = (yyvsp[-4].list);
            n->objarg = extractAggrArgTypes((yyvsp[-3].list));
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39028 "gram.cpp"
        break;

        case 1380: /* AlterObjectSchemaStmt: ALTER COLLATION any_name SET SCHEMA name  */
#line 10091 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_COLLATION;
            n->object = (yyvsp[-3].list);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39041 "gram.cpp"
        break;

        case 1381: /* AlterObjectSchemaStmt: ALTER CONVERSION_P any_name SET SCHEMA name  */
#line 10100 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_CONVERSION;
            n->object = (yyvsp[-3].list);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39054 "gram.cpp"
        break;

        case 1382: /* AlterObjectSchemaStmt: ALTER DOMAIN_P any_name SET SCHEMA name  */
#line 10109 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_DOMAIN;
            n->object = (yyvsp[-3].list);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39067 "gram.cpp"
        break;

        case 1383: /* AlterObjectSchemaStmt: ALTER EXTENSION any_name SET SCHEMA name  */
#line 10118 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_EXTENSION;
            n->object = (yyvsp[-3].list);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39080 "gram.cpp"
        break;

        case 1384: /* AlterObjectSchemaStmt: ALTER FUNCTION function_with_argtypes SET SCHEMA name  */
#line 10127 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_FUNCTION;
            n->object = (yyvsp[-3].funwithargs)->funcname;
            n->objarg = (yyvsp[-3].funwithargs)->funcargs;
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39094 "gram.cpp"
        break;

        case 1385: /* AlterObjectSchemaStmt: ALTER OPERATOR any_operator oper_argtypes SET SCHEMA name  */
#line 10137 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_OPERATOR;
            n->object = (yyvsp[-4].list);
            n->objarg = (yyvsp[-3].list);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39108 "gram.cpp"
        break;

        case 1386: /* AlterObjectSchemaStmt: ALTER OPERATOR CLASS any_name USING access_method SET SCHEMA name  */
#line 10147 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_OPCLASS;
            n->object = (yyvsp[-5].list);
            n->objarg = list_make1(makeString((yyvsp[-3].str)));
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39122 "gram.cpp"
        break;

        case 1387: /* AlterObjectSchemaStmt: ALTER OPERATOR FAMILY any_name USING access_method SET SCHEMA name  */
#line 10157 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_OPFAMILY;
            n->object = (yyvsp[-5].list);
            n->objarg = list_make1(makeString((yyvsp[-3].str)));
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39136 "gram.cpp"
        break;

        case 1388: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 10167 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_TABLE;
            n->relation = (yyvsp[-3].range);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39149 "gram.cpp"
        break;

        case 1389: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 10176 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_TABLE;
            n->relation = (yyvsp[-3].range);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 39162 "gram.cpp"
        break;

        case 1390: /* AlterObjectSchemaStmt: ALTER TEXT_P SEARCH PARSER any_name SET SCHEMA name  */
#line 10185 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_TSPARSER;
            n->object = (yyvsp[-3].list);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39175 "gram.cpp"
        break;

        case 1391: /* AlterObjectSchemaStmt: ALTER TEXT_P SEARCH DICTIONARY any_name SET SCHEMA name  */
#line 10194 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_TSDICTIONARY;
            n->object = (yyvsp[-3].list);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39188 "gram.cpp"
        break;

        case 1392: /* AlterObjectSchemaStmt: ALTER TEXT_P SEARCH TEMPLATE any_name SET SCHEMA name  */
#line 10203 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_TSTEMPLATE;
            n->object = (yyvsp[-3].list);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39201 "gram.cpp"
        break;

        case 1393: /* AlterObjectSchemaStmt: ALTER TEXT_P SEARCH CONFIGURATION any_name SET SCHEMA name  */
#line 10212 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_TSCONFIGURATION;
            n->object = (yyvsp[-3].list);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39214 "gram.cpp"
        break;

        case 1394: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 10221 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_SEQUENCE;
            n->relation = (yyvsp[-3].range);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39227 "gram.cpp"
        break;

        case 1395: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 10230 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_SEQUENCE;
            n->relation = (yyvsp[-3].range);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 39240 "gram.cpp"
        break;

        case 1396: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 10239 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_VIEW;
            n->relation = (yyvsp[-3].range);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39253 "gram.cpp"
        break;

        case 1397: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 10248 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_VIEW;
            n->relation = (yyvsp[-3].range);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 39266 "gram.cpp"
        break;

        case 1398: /* AlterObjectSchemaStmt: ALTER MATERIALIZED VIEW qualified_name SET SCHEMA name  */
#line 10257 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_MATVIEW;
            n->relation = (yyvsp[-3].range);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39279 "gram.cpp"
        break;

        case 1399: /* AlterObjectSchemaStmt: ALTER MATERIALIZED VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 10266 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_MATVIEW;
            n->relation = (yyvsp[-3].range);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 39292 "gram.cpp"
        break;

        case 1400: /* AlterObjectSchemaStmt: ALTER FOREIGN TABLE relation_expr SET SCHEMA name  */
#line 10275 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_FOREIGN_TABLE;
            n->relation = (yyvsp[-3].range);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39305 "gram.cpp"
        break;

        case 1401: /* AlterObjectSchemaStmt: ALTER FOREIGN TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 10284 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_FOREIGN_TABLE;
            n->relation = (yyvsp[-3].range);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 39318 "gram.cpp"
        break;

        case 1402: /* AlterObjectSchemaStmt: ALTER TYPE_P any_name SET SCHEMA name  */
#line 10293 "gram.y"
        {
            AlterObjectSchemaStmt* n = makeNode(AlterObjectSchemaStmt);
            n->objectType = OBJECT_TYPE;
            n->object = (yyvsp[-3].list);
            n->newschema = (yyvsp[0].str);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 39331 "gram.cpp"
        break;

        case 1403: /* AlterOwnerStmt: ALTER AGGREGATE func_name aggr_args OWNER TO RoleId  */
#line 10310 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_AGGREGATE;
            n->object = (yyvsp[-4].list);
            n->objarg = extractAggrArgTypes((yyvsp[-3].list));
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39344 "gram.cpp"
        break;

        case 1404: /* AlterOwnerStmt: ALTER COLLATION any_name OWNER TO RoleId  */
#line 10319 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_COLLATION;
            n->object = (yyvsp[-3].list);
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39356 "gram.cpp"
        break;

        case 1405: /* AlterOwnerStmt: ALTER CONVERSION_P any_name OWNER TO RoleId  */
#line 10327 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_CONVERSION;
            n->object = (yyvsp[-3].list);
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39368 "gram.cpp"
        break;

        case 1406: /* AlterOwnerStmt: ALTER DATABASE database_name OWNER TO RoleId  */
#line 10335 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_DATABASE;
            n->object = list_make1(makeString((yyvsp[-3].str)));
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39380 "gram.cpp"
        break;

        case 1407: /* AlterOwnerStmt: ALTER DOMAIN_P any_name OWNER TO RoleId  */
#line 10343 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_DOMAIN;
            n->object = (yyvsp[-3].list);
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39392 "gram.cpp"
        break;

        case 1408: /* AlterOwnerStmt: ALTER FUNCTION function_with_argtypes OWNER TO RoleId  */
#line 10351 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_FUNCTION;
            n->object = (yyvsp[-3].funwithargs)->funcname;
            n->objarg = (yyvsp[-3].funwithargs)->funcargs;
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39405 "gram.cpp"
        break;

        case 1409: /* AlterOwnerStmt: ALTER opt_procedural LANGUAGE name OWNER TO RoleId  */
#line 10360 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_LANGUAGE;
            n->object = list_make1(makeString((yyvsp[-3].str)));
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39417 "gram.cpp"
        break;

        case 1410: /* AlterOwnerStmt: ALTER LARGE_P OBJECT_P NumericOnly OWNER TO RoleId  */
#line 10368 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_LARGEOBJECT;
            n->object = list_make1((yyvsp[-3].value));
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39429 "gram.cpp"
        break;

        case 1411: /* AlterOwnerStmt: ALTER OPERATOR any_operator oper_argtypes OWNER TO RoleId  */
#line 10376 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_OPERATOR;
            n->object = (yyvsp[-4].list);
            n->objarg = (yyvsp[-3].list);
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39442 "gram.cpp"
        break;

        case 1412: /* AlterOwnerStmt: ALTER OPERATOR CLASS any_name USING access_method OWNER TO RoleId  */
#line 10385 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_OPCLASS;
            n->object = (yyvsp[-5].list);
            n->objarg = list_make1(makeString((yyvsp[-3].str)));
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39455 "gram.cpp"
        break;

        case 1413: /* AlterOwnerStmt: ALTER OPERATOR FAMILY any_name USING access_method OWNER TO RoleId  */
#line 10394 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_OPFAMILY;
            n->object = (yyvsp[-5].list);
            n->objarg = list_make1(makeString((yyvsp[-3].str)));
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39468 "gram.cpp"
        break;

        case 1414: /* AlterOwnerStmt: ALTER SCHEMA name OWNER TO RoleId  */
#line 10403 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_SCHEMA;
            n->object = list_make1(makeString((yyvsp[-3].str)));
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39480 "gram.cpp"
        break;

        case 1415: /* AlterOwnerStmt: ALTER TYPE_P any_name OWNER TO RoleId  */
#line 10411 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_TYPE;
            n->object = (yyvsp[-3].list);
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39492 "gram.cpp"
        break;

        case 1416: /* AlterOwnerStmt: ALTER TABLESPACE name OWNER TO RoleId  */
#line 10419 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_TABLESPACE;
            n->object = list_make1(makeString((yyvsp[-3].str)));
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39504 "gram.cpp"
        break;

        case 1417: /* AlterOwnerStmt: ALTER PROTOCOL name OWNER TO RoleId  */
#line 10427 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_EXTPROTOCOL;
            n->object = list_make1(makeString((yyvsp[-3].str)));
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39516 "gram.cpp"
        break;

        case 1418: /* AlterOwnerStmt: ALTER TEXT_P SEARCH DICTIONARY any_name OWNER TO RoleId  */
#line 10435 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_TSDICTIONARY;
            n->object = (yyvsp[-3].list);
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39528 "gram.cpp"
        break;

        case 1419: /* AlterOwnerStmt: ALTER TEXT_P SEARCH CONFIGURATION any_name OWNER TO RoleId  */
#line 10443 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_TSCONFIGURATION;
            n->object = (yyvsp[-3].list);
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39540 "gram.cpp"
        break;

        case 1420: /* AlterOwnerStmt: ALTER FOREIGN DATA_P WRAPPER name OWNER TO RoleId  */
#line 10451 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_FDW;
            n->object = list_make1(makeString((yyvsp[-3].str)));
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39552 "gram.cpp"
        break;

        case 1421: /* AlterOwnerStmt: ALTER SERVER name OWNER TO RoleId  */
#line 10459 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_FOREIGN_SERVER;
            n->object = list_make1(makeString((yyvsp[-3].str)));
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39564 "gram.cpp"
        break;

        case 1422: /* AlterOwnerStmt: ALTER EVENT TRIGGER name OWNER TO RoleId  */
#line 10467 "gram.y"
        {
            AlterOwnerStmt* n = makeNode(AlterOwnerStmt);
            n->objectType = OBJECT_EVENT_TRIGGER;
            n->object = list_make1(makeString((yyvsp[-3].str)));
            n->newowner = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39576 "gram.cpp"
        break;

        case 1423: /* RuleStmt: CREATE opt_or_replace RULE name AS ON event TO qualified_name where_clause DO opt_instead RuleActionList  */
#line 10486 "gram.y"
        {
            RuleStmt* n = makeNode(RuleStmt);
            n->replace = (yyvsp[-11].boolean);
            n->relation = (yyvsp[-4].range);
            n->rulename = (yyvsp[-9].str);
            n->whereClause = (yyvsp[-3].node);
            n->event = static_cast<CmdType>((yyvsp[-6].ival));
            n->instead = (yyvsp[-1].boolean);
            n->actions = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 39592 "gram.cpp"
        break;

        case 1424: /* RuleActionList: NOTHING  */
#line 10500 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 39598 "gram.cpp"
        break;

        case 1425: /* RuleActionList: RuleActionStmt  */
#line 10501 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 39604 "gram.cpp"
        break;

        case 1426: /* RuleActionList: '(' RuleActionMulti ')'  */
#line 10502 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 39610 "gram.cpp"
        break;

        case 1427: /* RuleActionMulti: RuleActionMulti ';' RuleActionStmtOrEmpty  */
#line 10508 "gram.y"
        {
            if ((yyvsp[0].node) != NULL)
                (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
            else
                (yyval.list) = (yyvsp[-2].list);
        }
#line 39620 "gram.cpp"
        break;

        case 1428: /* RuleActionMulti: RuleActionStmtOrEmpty  */
#line 10514 "gram.y"
        {
            if ((yyvsp[0].node) != NULL)
                (yyval.list) = list_make1((yyvsp[0].node));
            else
                (yyval.list) = NIL;
        }
#line 39630 "gram.cpp"
        break;

        case 1434: /* RuleActionStmtOrEmpty: RuleActionStmt  */
#line 10530 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 39636 "gram.cpp"
        break;

        case 1435: /* RuleActionStmtOrEmpty: %empty  */
#line 10531 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 39642 "gram.cpp"
        break;

        case 1436: /* event: SELECT  */
#line 10534 "gram.y"
        {
            (yyval.ival) = CMD_SELECT;
        }
#line 39648 "gram.cpp"
        break;

        case 1437: /* event: UPDATE  */
#line 10535 "gram.y"
        {
            (yyval.ival) = CMD_UPDATE;
        }
#line 39654 "gram.cpp"
        break;

        case 1438: /* event: DELETE_P  */
#line 10536 "gram.y"
        {
            (yyval.ival) = CMD_DELETE;
        }
#line 39660 "gram.cpp"
        break;

        case 1439: /* event: INSERT  */
#line 10537 "gram.y"
        {
            (yyval.ival) = CMD_INSERT;
        }
#line 39666 "gram.cpp"
        break;

        case 1440: /* opt_instead: INSTEAD  */
#line 10541 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 39672 "gram.cpp"
        break;

        case 1441: /* opt_instead: ALSO  */
#line 10542 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 39678 "gram.cpp"
        break;

        case 1442: /* opt_instead: %empty  */
#line 10543 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 39684 "gram.cpp"
        break;

        case 1443: /* DropRuleStmt: DROP RULE name ON any_name opt_drop_behavior  */
#line 10549 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_RULE;
            n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
            n->arguments = NIL;
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = false;
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 39699 "gram.cpp"
        break;

        case 1444: /* DropRuleStmt: DROP RULE IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 10560 "gram.y"
        {
            DropStmt* n = makeNode(DropStmt);
            n->removeType = OBJECT_RULE;
            n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
            n->arguments = NIL;
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = true;
            n->concurrent = false;
            (yyval.node) = (Node*) n;
        }
#line 39714 "gram.cpp"
        break;

        case 1445: /* NotifyStmt: NOTIFY ColId notify_payload  */
#line 10582 "gram.y"
        {
            NotifyStmt* n = makeNode(NotifyStmt);
            n->conditionname = (yyvsp[-1].str);
            n->payload = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39725 "gram.cpp"
        break;

        case 1446: /* notify_payload: ',' Sconst  */
#line 10591 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 39731 "gram.cpp"
        break;

        case 1447: /* notify_payload: %empty  */
#line 10592 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 39737 "gram.cpp"
        break;

        case 1448: /* ListenStmt: LISTEN ColId  */
#line 10596 "gram.y"
        {
            ListenStmt* n = makeNode(ListenStmt);
            n->conditionname = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39747 "gram.cpp"
        break;

        case 1449: /* UnlistenStmt: UNLISTEN ColId  */
#line 10605 "gram.y"
        {
            UnlistenStmt* n = makeNode(UnlistenStmt);
            n->conditionname = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39757 "gram.cpp"
        break;

        case 1450: /* UnlistenStmt: UNLISTEN '*'  */
#line 10611 "gram.y"
        {
            UnlistenStmt* n = makeNode(UnlistenStmt);
            n->conditionname = NULL;
            (yyval.node) = (Node*) n;
        }
#line 39767 "gram.cpp"
        break;

        case 1451: /* TransactionStmt: ABORT_P opt_transaction  */
#line 10630 "gram.y"
        {
            TransactionStmt* n = makeNode(TransactionStmt);
            n->kind = TRANS_STMT_ROLLBACK;
            n->options = NIL;
            (yyval.node) = (Node*) n;
        }
#line 39778 "gram.cpp"
        break;

        case 1452: /* TransactionStmt: BEGIN_P opt_transaction transaction_mode_list_or_empty  */
#line 10637 "gram.y"
        {
            TransactionStmt* n = makeNode(TransactionStmt);
            n->kind = TRANS_STMT_BEGIN;
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 39789 "gram.cpp"
        break;

        case 1453: /* TransactionStmt: START TRANSACTION transaction_mode_list_or_empty  */
#line 10644 "gram.y"
        {
            TransactionStmt* n = makeNode(TransactionStmt);
            n->kind = TRANS_STMT_START;
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 39800 "gram.cpp"
        break;

        case 1454: /* TransactionStmt: COMMIT opt_transaction  */
#line 10651 "gram.y"
        {
            TransactionStmt* n = makeNode(TransactionStmt);
            n->kind = TRANS_STMT_COMMIT;
            n->options = NIL;
            (yyval.node) = (Node*) n;
        }
#line 39811 "gram.cpp"
        break;

        case 1455: /* TransactionStmt: END_P opt_transaction  */
#line 10658 "gram.y"
        {
            TransactionStmt* n = makeNode(TransactionStmt);
            n->kind = TRANS_STMT_COMMIT;
            n->options = NIL;
            (yyval.node) = (Node*) n;
        }
#line 39822 "gram.cpp"
        break;

        case 1456: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 10665 "gram.y"
        {
            TransactionStmt* n = makeNode(TransactionStmt);
            n->kind = TRANS_STMT_ROLLBACK;
            n->options = NIL;
            (yyval.node) = (Node*) n;
        }
#line 39833 "gram.cpp"
        break;

        case 1457: /* TransactionStmt: SAVEPOINT ColId  */
#line 10672 "gram.y"
        {
            TransactionStmt* n = makeNode(TransactionStmt);
            n->kind = TRANS_STMT_SAVEPOINT;
            n->options = list_make1(makeDefElem("savepoint_name", (Node*) makeString((yyvsp[0].str))));
            (yyval.node) = (Node*) n;
        }
#line 39845 "gram.cpp"
        break;

        case 1458: /* TransactionStmt: RELEASE SAVEPOINT ColId  */
#line 10680 "gram.y"
        {
            TransactionStmt* n = makeNode(TransactionStmt);
            n->kind = TRANS_STMT_RELEASE;
            n->options = list_make1(makeDefElem("savepoint_name", (Node*) makeString((yyvsp[0].str))));
            (yyval.node) = (Node*) n;
        }
#line 39857 "gram.cpp"
        break;

        case 1459: /* TransactionStmt: RELEASE ColId  */
#line 10688 "gram.y"
        {
            TransactionStmt* n = makeNode(TransactionStmt);
            n->kind = TRANS_STMT_RELEASE;
            n->options = list_make1(makeDefElem("savepoint_name", (Node*) makeString((yyvsp[0].str))));
            (yyval.node) = (Node*) n;
        }
#line 39869 "gram.cpp"
        break;

        case 1460: /* TransactionStmt: ROLLBACK opt_transaction TO SAVEPOINT ColId  */
#line 10696 "gram.y"
        {
            TransactionStmt* n = makeNode(TransactionStmt);
            n->kind = TRANS_STMT_ROLLBACK_TO;
            n->options = list_make1(makeDefElem("savepoint_name", (Node*) makeString((yyvsp[0].str))));
            (yyval.node) = (Node*) n;
        }
#line 39881 "gram.cpp"
        break;

        case 1461: /* TransactionStmt: ROLLBACK opt_transaction TO ColId  */
#line 10704 "gram.y"
        {
            TransactionStmt* n = makeNode(TransactionStmt);
            n->kind = TRANS_STMT_ROLLBACK_TO;
            n->options = list_make1(makeDefElem("savepoint_name", (Node*) makeString((yyvsp[0].str))));
            (yyval.node) = (Node*) n;
        }
#line 39893 "gram.cpp"
        break;

        case 1462: /* TransactionStmt: PREPARE TRANSACTION Sconst  */
#line 10712 "gram.y"
        {
            TransactionStmt* n = makeNode(TransactionStmt);
            n->kind = TRANS_STMT_PREPARE;
            n->gid = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39904 "gram.cpp"
        break;

        case 1463: /* TransactionStmt: COMMIT PREPARED Sconst  */
#line 10719 "gram.y"
        {
            TransactionStmt* n = makeNode(TransactionStmt);
            n->kind = TRANS_STMT_COMMIT_PREPARED;
            n->gid = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39915 "gram.cpp"
        break;

        case 1464: /* TransactionStmt: ROLLBACK PREPARED Sconst  */
#line 10726 "gram.y"
        {
            TransactionStmt* n = makeNode(TransactionStmt);
            n->kind = TRANS_STMT_ROLLBACK_PREPARED;
            n->gid = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 39926 "gram.cpp"
        break;

        case 1465: /* opt_transaction: WORK  */
#line 10734 "gram.y"
        {
        }
#line 39932 "gram.cpp"
        break;

        case 1466: /* opt_transaction: TRANSACTION  */
#line 10735 "gram.y"
        {
        }
#line 39938 "gram.cpp"
        break;

        case 1467: /* opt_transaction: %empty  */
#line 10736 "gram.y"
        {
        }
#line 39944 "gram.cpp"
        break;

        case 1468: /* transaction_mode_item: ISOLATION LEVEL iso_level  */
#line 10741 "gram.y"
        {
            (yyval.defelt) = makeDefElem("transaction_isolation", makeStringConst((yyvsp[0].str), (yylsp[0])));
        }
#line 39951 "gram.cpp"
        break;

        case 1469: /* transaction_mode_item: READ ONLY  */
#line 10744 "gram.y"
        {
            (yyval.defelt) = makeDefElem("transaction_read_only", makeIntConst(TRUE, (yylsp[-1])));
        }
#line 39958 "gram.cpp"
        break;

        case 1470: /* transaction_mode_item: READ WRITE  */
#line 10747 "gram.y"
        {
            (yyval.defelt) = makeDefElem("transaction_read_only", makeIntConst(FALSE, (yylsp[-1])));
        }
#line 39965 "gram.cpp"
        break;

        case 1471: /* transaction_mode_item: DEFERRABLE  */
#line 10750 "gram.y"
        {
            (yyval.defelt) = makeDefElem("transaction_deferrable", makeIntConst(TRUE, (yylsp[0])));
        }
#line 39972 "gram.cpp"
        break;

        case 1472: /* transaction_mode_item: NOT DEFERRABLE  */
#line 10753 "gram.y"
        {
            (yyval.defelt) = makeDefElem("transaction_deferrable", makeIntConst(FALSE, (yylsp[-1])));
        }
#line 39979 "gram.cpp"
        break;

        case 1473: /* transaction_mode_list: transaction_mode_item  */
#line 10760 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 39985 "gram.cpp"
        break;

        case 1474: /* transaction_mode_list: transaction_mode_list ',' transaction_mode_item  */
#line 10762 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
        }
#line 39991 "gram.cpp"
        break;

        case 1475: /* transaction_mode_list: transaction_mode_list transaction_mode_item  */
#line 10764 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 39997 "gram.cpp"
        break;

        case 1477: /* transaction_mode_list_or_empty: %empty  */
#line 10770 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 40003 "gram.cpp"
        break;

        case 1478: /* ViewStmt: CREATE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10784 "gram.y"
        {
            ViewStmt* n = makeNode(ViewStmt);
            n->view = (yyvsp[-5].range);
            n->view->relpersistence = (yyvsp[-7].ival);
            n->aliases = (yyvsp[-4].list);
            n->query = (yyvsp[-1].node);
            n->replace = false;
            n->options = (yyvsp[-3].list);
            n->withCheckOption = static_cast<ViewCheckOption>((yyvsp[0].ival));
            (yyval.node) = (Node*) n;
        }
#line 40019 "gram.cpp"
        break;

        case 1479: /* ViewStmt: CREATE OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10797 "gram.y"
        {
            ViewStmt* n = makeNode(ViewStmt);
            n->view = (yyvsp[-5].range);
            n->view->relpersistence = (yyvsp[-7].ival);
            n->aliases = (yyvsp[-4].list);
            n->query = (yyvsp[-1].node);
            n->replace = true;
            n->options = (yyvsp[-3].list);
            n->withCheckOption = static_cast<ViewCheckOption>((yyvsp[0].ival));
            (yyval.node) = (Node*) n;
        }
#line 40035 "gram.cpp"
        break;

        case 1480: /* ViewStmt: CREATE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 10810 "gram.y"
        {
            ViewStmt* n = makeNode(ViewStmt);
            n->view = (yyvsp[-7].range);
            n->view->relpersistence = (yyvsp[-10].ival);
            n->aliases = (yyvsp[-5].list);
            n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
            n->replace = false;
            n->options = (yyvsp[-3].list);
            n->withCheckOption = static_cast<ViewCheckOption>((yyvsp[0].ival));
            if (n->withCheckOption != NO_CHECK_OPTION)
                ereport(ERROR,
                        errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                        errmsg("WITH CHECK OPTION not supported on recursive views"),
                        parser_errposition((yylsp[0])));
            (yyval.node) = (Node*) n;
        }
#line 40056 "gram.cpp"
        break;

        case 1481: /* ViewStmt: CREATE OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 10828 "gram.y"
        {
            ViewStmt* n = makeNode(ViewStmt);
            n->view = (yyvsp[-7].range);
            n->view->relpersistence = (yyvsp[-10].ival);
            n->aliases = (yyvsp[-5].list);
            n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
            n->replace = true;
            n->options = (yyvsp[-3].list);
            n->withCheckOption = static_cast<ViewCheckOption>((yyvsp[0].ival));
            if (n->withCheckOption != NO_CHECK_OPTION)
                ereport(ERROR,
                        errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                        errmsg("WITH CHECK OPTION not supported on recursive views"),
                        parser_errposition((yylsp[0])));
            (yyval.node) = (Node*) n;
        }
#line 40077 "gram.cpp"
        break;

        case 1482: /* opt_check_option: WITH CHECK OPTION  */
#line 10847 "gram.y"
        {
            (yyval.ival) = CASCADED_CHECK_OPTION;
        }
#line 40083 "gram.cpp"
        break;

        case 1483: /* opt_check_option: WITH CASCADED CHECK OPTION  */
#line 10848 "gram.y"
        {
            (yyval.ival) = CASCADED_CHECK_OPTION;
        }
#line 40089 "gram.cpp"
        break;

        case 1484: /* opt_check_option: WITH LOCAL CHECK OPTION  */
#line 10849 "gram.y"
        {
            (yyval.ival) = LOCAL_CHECK_OPTION;
        }
#line 40095 "gram.cpp"
        break;

        case 1485: /* opt_check_option: %empty  */
#line 10850 "gram.y"
        {
            (yyval.ival) = NO_CHECK_OPTION;
        }
#line 40101 "gram.cpp"
        break;

        case 1486: /* LoadStmt: LOAD file_name  */
#line 10861 "gram.y"
        {
            LoadStmt* n = makeNode(LoadStmt);
            n->filename = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 40111 "gram.cpp"
        break;

        case 1487: /* CreatedbStmt: CREATE DATABASE database_name opt_with createdb_opt_list  */
#line 10877 "gram.y"
        {
            CreatedbStmt* n = makeNode(CreatedbStmt);
            n->dbname = (yyvsp[-2].str);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 40122 "gram.cpp"
        break;

        case 1488: /* createdb_opt_list: createdb_opt_list createdb_opt_item  */
#line 10886 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 40128 "gram.cpp"
        break;

        case 1489: /* createdb_opt_list: %empty  */
#line 10887 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 40134 "gram.cpp"
        break;

        case 1490: /* createdb_opt_item: TABLESPACE opt_equal name  */
#line 10892 "gram.y"
        {
            (yyval.defelt) = makeDefElem("tablespace", (Node*) makeString((yyvsp[0].str)));
        }
#line 40142 "gram.cpp"
        break;

        case 1491: /* createdb_opt_item: TABLESPACE opt_equal DEFAULT  */
#line 10896 "gram.y"
        {
            (yyval.defelt) = makeDefElem("tablespace", NULL);
        }
#line 40150 "gram.cpp"
        break;

        case 1492: /* createdb_opt_item: LOCATION opt_equal Sconst  */
#line 10900 "gram.y"
        {
            (yyval.defelt) = makeDefElem("location", (Node*) makeString((yyvsp[0].str)));
        }
#line 40158 "gram.cpp"
        break;

        case 1493: /* createdb_opt_item: LOCATION opt_equal DEFAULT  */
#line 10904 "gram.y"
        {
            (yyval.defelt) = makeDefElem("location", NULL);
        }
#line 40166 "gram.cpp"
        break;

        case 1494: /* createdb_opt_item: TEMPLATE opt_equal name  */
#line 10908 "gram.y"
        {
            (yyval.defelt) = makeDefElem("template", (Node*) makeString((yyvsp[0].str)));
        }
#line 40174 "gram.cpp"
        break;

        case 1495: /* createdb_opt_item: TEMPLATE opt_equal DEFAULT  */
#line 10912 "gram.y"
        {
            (yyval.defelt) = makeDefElem("template", NULL);
        }
#line 40182 "gram.cpp"
        break;

        case 1496: /* createdb_opt_item: ENCODING opt_equal Sconst  */
#line 10916 "gram.y"
        {
            (yyval.defelt) = makeDefElem("encoding", (Node*) makeString((yyvsp[0].str)));
        }
#line 40190 "gram.cpp"
        break;

        case 1497: /* createdb_opt_item: ENCODING opt_equal Iconst  */
#line 10920 "gram.y"
        {
            (yyval.defelt) = makeDefElem("encoding", (Node*) makeInteger((yyvsp[0].ival)));
        }
#line 40198 "gram.cpp"
        break;

        case 1498: /* createdb_opt_item: ENCODING opt_equal DEFAULT  */
#line 10924 "gram.y"
        {
            (yyval.defelt) = makeDefElem("encoding", NULL);
        }
#line 40206 "gram.cpp"
        break;

        case 1499: /* createdb_opt_item: LC_COLLATE_P opt_equal Sconst  */
#line 10928 "gram.y"
        {
            (yyval.defelt) = makeDefElem("lc_collate", (Node*) makeString((yyvsp[0].str)));
        }
#line 40214 "gram.cpp"
        break;

        case 1500: /* createdb_opt_item: LC_COLLATE_P opt_equal DEFAULT  */
#line 10932 "gram.y"
        {
            (yyval.defelt) = makeDefElem("lc_collate", NULL);
        }
#line 40222 "gram.cpp"
        break;

        case 1501: /* createdb_opt_item: LC_CTYPE_P opt_equal Sconst  */
#line 10936 "gram.y"
        {
            (yyval.defelt) = makeDefElem("lc_ctype", (Node*) makeString((yyvsp[0].str)));
        }
#line 40230 "gram.cpp"
        break;

        case 1502: /* createdb_opt_item: LC_CTYPE_P opt_equal DEFAULT  */
#line 10940 "gram.y"
        {
            (yyval.defelt) = makeDefElem("lc_ctype", NULL);
        }
#line 40238 "gram.cpp"
        break;

        case 1503: /* createdb_opt_item: CONNECTION LIMIT opt_equal SignedIconst  */
#line 10944 "gram.y"
        {
            (yyval.defelt) = makeDefElem("connectionlimit", (Node*) makeInteger((yyvsp[0].ival)));
        }
#line 40246 "gram.cpp"
        break;

        case 1504: /* createdb_opt_item: OWNER opt_equal name  */
#line 10948 "gram.y"
        {
            (yyval.defelt) = makeDefElem("owner", (Node*) makeString((yyvsp[0].str)));
        }
#line 40254 "gram.cpp"
        break;

        case 1505: /* createdb_opt_item: OWNER opt_equal DEFAULT  */
#line 10952 "gram.y"
        {
            (yyval.defelt) = makeDefElem("owner", NULL);
        }
#line 40262 "gram.cpp"
        break;

        case 1506: /* opt_equal: '='  */
#line 10961 "gram.y"
        {
        }
#line 40268 "gram.cpp"
        break;

        case 1507: /* opt_equal: %empty  */
#line 10962 "gram.y"
        {
        }
#line 40274 "gram.cpp"
        break;

        case 1508: /* AlterDatabaseStmt: ALTER DATABASE database_name opt_with alterdb_opt_list  */
#line 10974 "gram.y"
        {
            AlterDatabaseStmt* n = makeNode(AlterDatabaseStmt);
            n->dbname = (yyvsp[-2].str);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 40285 "gram.cpp"
        break;

        case 1509: /* AlterDatabaseStmt: ALTER DATABASE database_name SET TABLESPACE name  */
#line 10981 "gram.y"
        {
            AlterDatabaseStmt* n = makeNode(AlterDatabaseStmt);
            n->dbname = (yyvsp[-3].str);
            n->options = list_make1(makeDefElem("tablespace", (Node*) makeString((yyvsp[0].str))));
            (yyval.node) = (Node*) n;
        }
#line 40297 "gram.cpp"
        break;

        case 1510: /* AlterDatabaseSetStmt: ALTER DATABASE database_name SetResetClause  */
#line 10992 "gram.y"
        {
            AlterDatabaseSetStmt* n = makeNode(AlterDatabaseSetStmt);
            n->dbname = (yyvsp[-1].str);
            n->setstmt = (yyvsp[0].vsetstmt);
            (yyval.node) = (Node*) n;
        }
#line 40308 "gram.cpp"
        break;

        case 1511: /* alterdb_opt_list: alterdb_opt_list alterdb_opt_item  */
#line 11002 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt));
        }
#line 40314 "gram.cpp"
        break;

        case 1512: /* alterdb_opt_list: %empty  */
#line 11003 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 40320 "gram.cpp"
        break;

        case 1513: /* alterdb_opt_item: CONNECTION LIMIT opt_equal SignedIconst  */
#line 11008 "gram.y"
        {
            (yyval.defelt) = makeDefElem("connectionlimit", (Node*) makeInteger((yyvsp[0].ival)));
        }
#line 40328 "gram.cpp"
        break;

        case 1514: /* DropdbStmt: DROP DATABASE database_name  */
#line 11022 "gram.y"
        {
            DropdbStmt* n = makeNode(DropdbStmt);
            n->dbname = (yyvsp[0].str);
            n->missing_ok = FALSE;
            (yyval.node) = (Node*) n;
        }
#line 40339 "gram.cpp"
        break;

        case 1515: /* DropdbStmt: DROP DATABASE IF_P EXISTS database_name  */
#line 11029 "gram.y"
        {
            DropdbStmt* n = makeNode(DropdbStmt);
            n->dbname = (yyvsp[0].str);
            n->missing_ok = TRUE;
            (yyval.node) = (Node*) n;
        }
#line 40350 "gram.cpp"
        break;

        case 1516: /* AlterSystemStmt: ALTER SYSTEM_P SET generic_set  */
#line 11047 "gram.y"
        {
            AlterSystemStmt* n = makeNode(AlterSystemStmt);
            n->setstmt = (yyvsp[0].vsetstmt);
            (yyval.node) = (Node*) n;
        }
#line 40360 "gram.cpp"
        break;

        case 1517: /* AlterSystemStmt: ALTER SYSTEM_P RESET generic_reset  */
#line 11053 "gram.y"
        {
            AlterSystemStmt* n = makeNode(AlterSystemStmt);
            n->setstmt = (yyvsp[0].vsetstmt);
            (yyval.node) = (Node*) n;
        }
#line 40370 "gram.cpp"
        break;

        case 1518: /* CreateDomainStmt: CREATE DOMAIN_P any_name opt_as Typename ColQualList  */
#line 11069 "gram.y"
        {
            CreateDomainStmt* n = makeNode(CreateDomainStmt);
            n->domainname = (yyvsp[-3].list);
            n->typeName = (yyvsp[-1].typnam);
            SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause, yyscanner);
            (yyval.node) = (Node*) n;
        }
#line 40383 "gram.cpp"
        break;

        case 1519: /* AlterDomainStmt: ALTER DOMAIN_P any_name alter_column_default  */
#line 11082 "gram.y"
        {
            AlterDomainStmt* n = makeNode(AlterDomainStmt);
            n->subtype = 'T';
            n->typeName = (yyvsp[-1].list);
            n->def = (yyvsp[0].node);
            (yyval.node) = (Node*) n;
        }
#line 40395 "gram.cpp"
        break;

        case 1520: /* AlterDomainStmt: ALTER DOMAIN_P any_name DROP NOT NULL_P  */
#line 11091 "gram.y"
        {
            AlterDomainStmt* n = makeNode(AlterDomainStmt);
            n->subtype = 'N';
            n->typeName = (yyvsp[-3].list);
            (yyval.node) = (Node*) n;
        }
#line 40406 "gram.cpp"
        break;

        case 1521: /* AlterDomainStmt: ALTER DOMAIN_P any_name SET NOT NULL_P  */
#line 11099 "gram.y"
        {
            AlterDomainStmt* n = makeNode(AlterDomainStmt);
            n->subtype = 'O';
            n->typeName = (yyvsp[-3].list);
            (yyval.node) = (Node*) n;
        }
#line 40417 "gram.cpp"
        break;

        case 1522: /* AlterDomainStmt: ALTER DOMAIN_P any_name ADD_P TableConstraint  */
#line 11107 "gram.y"
        {
            AlterDomainStmt* n = makeNode(AlterDomainStmt);
            n->subtype = 'C';
            n->typeName = (yyvsp[-2].list);
            n->def = (yyvsp[0].node);
            (yyval.node) = (Node*) n;
        }
#line 40429 "gram.cpp"
        break;

        case 1523: /* AlterDomainStmt: ALTER DOMAIN_P any_name DROP CONSTRAINT name opt_drop_behavior  */
#line 11116 "gram.y"
        {
            AlterDomainStmt* n = makeNode(AlterDomainStmt);
            n->subtype = 'X';
            n->typeName = (yyvsp[-4].list);
            n->name = (yyvsp[-1].str);
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 40443 "gram.cpp"
        break;

        case 1524: /* AlterDomainStmt: ALTER DOMAIN_P any_name DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 11127 "gram.y"
        {
            AlterDomainStmt* n = makeNode(AlterDomainStmt);
            n->subtype = 'X';
            n->typeName = (yyvsp[-6].list);
            n->name = (yyvsp[-1].str);
            n->behavior = (yyvsp[0].dbehavior);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 40457 "gram.cpp"
        break;

        case 1525: /* AlterDomainStmt: ALTER DOMAIN_P any_name VALIDATE CONSTRAINT name  */
#line 11138 "gram.y"
        {
            AlterDomainStmt* n = makeNode(AlterDomainStmt);
            n->subtype = 'V';
            n->typeName = (yyvsp[-3].list);
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 40469 "gram.cpp"
        break;

        case 1526: /* opt_as: AS  */
#line 11147 "gram.y"
        {
        }
#line 40475 "gram.cpp"
        break;

        case 1527: /* opt_as: %empty  */
#line 11148 "gram.y"
        {
        }
#line 40481 "gram.cpp"
        break;

        case 1528: /* AlterTSDictionaryStmt: ALTER TEXT_P SEARCH DICTIONARY any_name definition  */
#line 11160 "gram.y"
        {
            AlterTSDictionaryStmt* n = makeNode(AlterTSDictionaryStmt);
            n->dictname = (yyvsp[-1].list);
            n->options = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 40492 "gram.cpp"
        break;

        case 1529: /* AlterTSConfigurationStmt: ALTER TEXT_P SEARCH CONFIGURATION any_name ADD_P MAPPING FOR name_list WITH any_name_list  */
#line 11170 "gram.y"
        {
            AlterTSConfigurationStmt* n = makeNode(AlterTSConfigurationStmt);
            n->kind = ALTER_TSCONFIG_ADD_MAPPING;
            n->cfgname = (yyvsp[-6].list);
            n->tokentype = (yyvsp[-2].list);
            n->dicts = (yyvsp[0].list);
            n->override = false;
            n->replace = false;
            (yyval.node) = (Node*) n;
        }
#line 40507 "gram.cpp"
        break;

        case 1530: /* AlterTSConfigurationStmt: ALTER TEXT_P SEARCH CONFIGURATION any_name ALTER MAPPING FOR name_list WITH any_name_list  */
#line 11181 "gram.y"
        {
            AlterTSConfigurationStmt* n = makeNode(AlterTSConfigurationStmt);
            n->kind = ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN;
            n->cfgname = (yyvsp[-6].list);
            n->tokentype = (yyvsp[-2].list);
            n->dicts = (yyvsp[0].list);
            n->override = true;
            n->replace = false;
            (yyval.node) = (Node*) n;
        }
#line 40522 "gram.cpp"
        break;

        case 1531: /* AlterTSConfigurationStmt: ALTER TEXT_P SEARCH CONFIGURATION any_name ALTER MAPPING REPLACE any_name WITH any_name  */
#line 11192 "gram.y"
        {
            AlterTSConfigurationStmt* n = makeNode(AlterTSConfigurationStmt);
            n->kind = ALTER_TSCONFIG_REPLACE_DICT;
            n->cfgname = (yyvsp[-6].list);
            n->tokentype = NIL;
            n->dicts = list_make2((yyvsp[-2].list), (yyvsp[0].list));
            n->override = false;
            n->replace = true;
            (yyval.node) = (Node*) n;
        }
#line 40537 "gram.cpp"
        break;

        case 1532: /* AlterTSConfigurationStmt: ALTER TEXT_P SEARCH CONFIGURATION any_name ALTER MAPPING FOR name_list REPLACE any_name WITH any_name  */
#line 11203 "gram.y"
        {
            AlterTSConfigurationStmt* n = makeNode(AlterTSConfigurationStmt);
            n->kind = ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN;
            n->cfgname = (yyvsp[-8].list);
            n->tokentype = (yyvsp[-4].list);
            n->dicts = list_make2((yyvsp[-2].list), (yyvsp[0].list));
            n->override = false;
            n->replace = true;
            (yyval.node) = (Node*) n;
        }
#line 40552 "gram.cpp"
        break;

        case 1533: /* AlterTSConfigurationStmt: ALTER TEXT_P SEARCH CONFIGURATION any_name DROP MAPPING FOR name_list  */
#line 11214 "gram.y"
        {
            AlterTSConfigurationStmt* n = makeNode(AlterTSConfigurationStmt);
            n->kind = ALTER_TSCONFIG_DROP_MAPPING;
            n->cfgname = (yyvsp[-4].list);
            n->tokentype = (yyvsp[0].list);
            n->missing_ok = false;
            (yyval.node) = (Node*) n;
        }
#line 40565 "gram.cpp"
        break;

        case 1534: /* AlterTSConfigurationStmt: ALTER TEXT_P SEARCH CONFIGURATION any_name DROP MAPPING IF_P EXISTS FOR name_list  */
#line 11223 "gram.y"
        {
            AlterTSConfigurationStmt* n = makeNode(AlterTSConfigurationStmt);
            n->kind = ALTER_TSCONFIG_DROP_MAPPING;
            n->cfgname = (yyvsp[-6].list);
            n->tokentype = (yyvsp[0].list);
            n->missing_ok = true;
            (yyval.node) = (Node*) n;
        }
#line 40578 "gram.cpp"
        break;

        case 1535: /* CreateConversionStmt: CREATE opt_default CONVERSION_P any_name FOR Sconst TO Sconst FROM any_name  */
#line 11246 "gram.y"
        {
            CreateConversionStmt* n = makeNode(CreateConversionStmt);
            n->conversion_name = (yyvsp[-6].list);
            n->for_encoding_name = (yyvsp[-4].str);
            n->to_encoding_name = (yyvsp[-2].str);
            n->func_name = (yyvsp[0].list);
            n->def = (yyvsp[-8].boolean);
            (yyval.node) = (Node*) n;
        }
#line 40592 "gram.cpp"
        break;

        case 1536: /* ClusterStmt: CLUSTER opt_verbose qualified_name cluster_index_specification  */
#line 11268 "gram.y"
        {
            ClusterStmt* n = makeNode(ClusterStmt);
            n->relation = (yyvsp[-1].range);
            n->indexname = (yyvsp[0].str);
            n->verbose = (yyvsp[-2].boolean);
            (yyval.node) = (Node*) n;
        }
#line 40604 "gram.cpp"
        break;

        case 1537: /* ClusterStmt: CLUSTER opt_verbose  */
#line 11276 "gram.y"
        {
            ClusterStmt* n = makeNode(ClusterStmt);
            n->relation = NULL;
            n->indexname = NULL;
            n->verbose = (yyvsp[0].boolean);
            (yyval.node) = (Node*) n;
        }
#line 40616 "gram.cpp"
        break;

        case 1538: /* ClusterStmt: CLUSTER opt_verbose index_name ON qualified_name  */
#line 11285 "gram.y"
        {
            ClusterStmt* n = makeNode(ClusterStmt);
            n->relation = (yyvsp[0].range);
            n->indexname = (yyvsp[-2].str);
            n->verbose = (yyvsp[-3].boolean);
            (yyval.node) = (Node*) n;
        }
#line 40628 "gram.cpp"
        break;

        case 1539: /* cluster_index_specification: USING index_name  */
#line 11295 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 40634 "gram.cpp"
        break;

        case 1540: /* cluster_index_specification: %empty  */
#line 11296 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 40640 "gram.cpp"
        break;

        case 1541: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 11309 "gram.y"
        {
            VacuumStmt* n = makeNode(VacuumStmt);
            n->options = VACOPT_VACUUM;
            if ((yyvsp[-2].boolean))
                n->options |= VACOPT_FULL;
            if ((yyvsp[0].boolean))
                n->options |= VACOPT_VERBOSE;
            n->freeze_min_age = (yyvsp[-1].boolean) ? 0 : -1;
            n->freeze_table_age = (yyvsp[-1].boolean) ? 0 : -1;
            n->multixact_freeze_min_age = (yyvsp[-1].boolean) ? 0 : -1;
            n->multixact_freeze_table_age = (yyvsp[-1].boolean) ? 0 : -1;
            n->relation = NULL;
            n->va_cols = NIL;
            (yyval.node) = (Node*) n;
        }
#line 40660 "gram.cpp"
        break;

        case 1542: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name  */
#line 11325 "gram.y"
        {
            VacuumStmt* n = makeNode(VacuumStmt);
            n->options = VACOPT_VACUUM;
            if ((yyvsp[-3].boolean))
                n->options |= VACOPT_FULL;
            if ((yyvsp[-1].boolean))
                n->options |= VACOPT_VERBOSE;
            n->freeze_min_age = (yyvsp[-2].boolean) ? 0 : -1;
            n->freeze_table_age = (yyvsp[-2].boolean) ? 0 : -1;
            n->multixact_freeze_min_age = (yyvsp[-2].boolean) ? 0 : -1;
            n->multixact_freeze_table_age = (yyvsp[-2].boolean) ? 0 : -1;
            n->relation = (yyvsp[0].range);
            n->va_cols = NIL;
            (yyval.node) = (Node*) n;
        }
#line 40680 "gram.cpp"
        break;

        case 1543: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 11341 "gram.y"
        {
            VacuumStmt* n = (VacuumStmt*) (yyvsp[0].node);
            n->options |= VACOPT_VACUUM;
            if ((yyvsp[-3].boolean))
                n->options |= VACOPT_FULL;
            if ((yyvsp[-1].boolean))
                n->options |= VACOPT_VERBOSE;
            n->freeze_min_age = (yyvsp[-2].boolean) ? 0 : -1;
            n->freeze_table_age = (yyvsp[-2].boolean) ? 0 : -1;
            n->multixact_freeze_min_age = (yyvsp[-2].boolean) ? 0 : -1;
            n->multixact_freeze_table_age = (yyvsp[-2].boolean) ? 0 : -1;
            (yyval.node) = (Node*) n;
        }
#line 40698 "gram.cpp"
        break;

        case 1544: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 11355 "gram.y"
        {
            VacuumStmt* n = makeNode(VacuumStmt);
            n->options = VACOPT_VACUUM | (yyvsp[-1].ival);
            if (n->options & VACOPT_FREEZE) {
                n->freeze_min_age = n->freeze_table_age = 0;
                n->multixact_freeze_min_age = 0;
                n->multixact_freeze_table_age = 0;
            } else {
                n->freeze_min_age = n->freeze_table_age = -1;
                n->multixact_freeze_min_age = -1;
                n->multixact_freeze_table_age = -1;
            }
            n->relation = NULL;
            n->va_cols = NIL;
            (yyval.node) = (Node*) n;
        }
#line 40722 "gram.cpp"
        break;

        case 1545: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 11375 "gram.y"
        {
            VacuumStmt* n = makeNode(VacuumStmt);
            n->options = VACOPT_VACUUM | (yyvsp[-3].ival);
            if (n->options & VACOPT_FREEZE) {
                n->freeze_min_age = n->freeze_table_age = 0;
                n->multixact_freeze_min_age = 0;
                n->multixact_freeze_table_age = 0;
            } else {
                n->freeze_min_age = n->freeze_table_age = -1;
                n->multixact_freeze_min_age = -1;
                n->multixact_freeze_table_age = -1;
            }
            n->relation = (yyvsp[-1].range);
            n->va_cols = (yyvsp[0].list);
            if (n->va_cols != NIL) /* implies analyze */
                n->options |= VACOPT_ANALYZE;
            (yyval.node) = (Node*) n;
        }
#line 40748 "gram.cpp"
        break;

        case 1546: /* vacuum_option_list: vacuum_option_elem  */
#line 11399 "gram.y"
        {
            (yyval.ival) = (yyvsp[0].ival);
        }
#line 40754 "gram.cpp"
        break;

        case 1547: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 11400 "gram.y"
        {
            (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival);
        }
#line 40760 "gram.cpp"
        break;

        case 1548: /* vacuum_option_elem: analyze_keyword  */
#line 11404 "gram.y"
        {
            (yyval.ival) = VACOPT_ANALYZE;
        }
#line 40766 "gram.cpp"
        break;

        case 1549: /* vacuum_option_elem: VERBOSE  */
#line 11405 "gram.y"
        {
            (yyval.ival) = VACOPT_VERBOSE;
        }
#line 40772 "gram.cpp"
        break;

        case 1550: /* vacuum_option_elem: FREEZE  */
#line 11406 "gram.y"
        {
            (yyval.ival) = VACOPT_FREEZE;
        }
#line 40778 "gram.cpp"
        break;

        case 1551: /* vacuum_option_elem: FULL  */
#line 11407 "gram.y"
        {
            (yyval.ival) = VACOPT_FULL;
        }
#line 40784 "gram.cpp"
        break;

        case 1552: /* vacuum_option_elem: YEZZEY  */
#line 11408 "gram.y"
        {
            (yyval.ival) = VACOPT_YEZZEY;
        }
#line 40790 "gram.cpp"
        break;

        case 1553: /* AnalyzeStmt: analyze_keyword opt_verbose opt_rootonly_all  */
#line 11413 "gram.y"
        {
            VacuumStmt* n = makeNode(VacuumStmt);
            n->options = VACOPT_ANALYZE;
            if ((yyvsp[-1].boolean))
                n->options |= VACOPT_VERBOSE;
            if ((yyvsp[0].boolean))
                n->options |= VACOPT_ROOTONLY;
            n->freeze_min_age = -1;
            n->freeze_table_age = -1;
            n->multixact_freeze_min_age = -1;
            n->multixact_freeze_table_age = -1;
            n->relation = NULL;
            n->va_cols = NIL;
            (yyval.node) = (Node*) n;
        }
#line 40810 "gram.cpp"
        break;

        case 1554: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 11429 "gram.y"
        {
            VacuumStmt* n = makeNode(VacuumStmt);
            n->options = VACOPT_ANALYZE;
            if ((yyvsp[-2].boolean))
                n->options |= VACOPT_VERBOSE;
            n->freeze_min_age = -1;
            n->freeze_table_age = -1;
            n->multixact_freeze_min_age = -1;
            n->multixact_freeze_table_age = -1;
            n->relation = (yyvsp[-1].range);
            n->va_cols = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 40828 "gram.cpp"
        break;

        case 1555: /* AnalyzeStmt: analyze_keyword opt_verbose FULLSCAN qualified_name opt_name_list  */
#line 11443 "gram.y"
        {
            VacuumStmt* n = makeNode(VacuumStmt);
            n->options = VACOPT_ANALYZE;
            if ((yyvsp[-3].boolean))
                n->options |= VACOPT_VERBOSE;
            n->options |= VACOPT_FULLSCAN;
            n->freeze_min_age = -1;
            n->relation = (yyvsp[-1].range);
            n->va_cols = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 40844 "gram.cpp"
        break;

        case 1556: /* AnalyzeStmt: analyze_keyword opt_verbose ROOTPARTITION qualified_name opt_name_list  */
#line 11455 "gram.y"
        {
            VacuumStmt* n = makeNode(VacuumStmt);
            n->options = VACOPT_ANALYZE;
            if ((yyvsp[-3].boolean))
                n->options |= VACOPT_VERBOSE;
            n->options |= VACOPT_ROOTONLY;
            n->freeze_min_age = -1;
            n->relation = (yyvsp[-1].range);
            n->va_cols = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 40860 "gram.cpp"
        break;

        case 1557: /* analyze_keyword: ANALYZE  */
#line 11469 "gram.y"
        {
        }
#line 40866 "gram.cpp"
        break;

        case 1558: /* analyze_keyword: ANALYSE  */
#line 11470 "gram.y"
        {
        }
#line 40872 "gram.cpp"
        break;

        case 1559: /* opt_verbose: VERBOSE  */
#line 11474 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 40878 "gram.cpp"
        break;

        case 1560: /* opt_verbose: %empty  */
#line 11475 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 40884 "gram.cpp"
        break;

        case 1561: /* opt_rootonly_all: ROOTPARTITION ALL  */
#line 11479 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 40890 "gram.cpp"
        break;

        case 1562: /* opt_rootonly_all: %empty  */
#line 11480 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 40896 "gram.cpp"
        break;

        case 1563: /* opt_full: FULL  */
#line 11483 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 40902 "gram.cpp"
        break;

        case 1564: /* opt_full: %empty  */
#line 11484 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 40908 "gram.cpp"
        break;

        case 1565: /* opt_freeze: FREEZE  */
#line 11487 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 40914 "gram.cpp"
        break;

        case 1566: /* opt_freeze: %empty  */
#line 11488 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 40920 "gram.cpp"
        break;

        case 1567: /* opt_name_list: '(' name_list ')'  */
#line 11492 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 40926 "gram.cpp"
        break;

        case 1568: /* opt_name_list: %empty  */
#line 11493 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 40932 "gram.cpp"
        break;

        case 1569: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 11507 "gram.y"
        {
            ExplainStmt* n = makeNode(ExplainStmt);
            n->query = (yyvsp[0].node);
            n->options = NIL;
            (yyval.node) = (Node*) n;
        }
#line 40943 "gram.cpp"
        break;

        case 1570: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose opt_dxl ExplainableStmt  */
#line 11514 "gram.y"
        {
            ExplainStmt* n = makeNode(ExplainStmt);
            n->query = (yyvsp[0].node);
            n->options = list_make1(makeDefElem("analyze", NULL));
            if ((yyvsp[-2].boolean))
                n->options = lappend(n->options, makeDefElem("verbose", NULL));
            if ((yyvsp[-1].boolean))
                n->options = lappend(n->options, makeDefElem("dxl", NULL));
            (yyval.node) = (Node*) n;
        }
#line 40960 "gram.cpp"
        break;

        case 1571: /* ExplainStmt: EXPLAIN VERBOSE opt_dxl ExplainableStmt  */
#line 11527 "gram.y"
        {
            ExplainStmt* n = makeNode(ExplainStmt);
            n->query = (yyvsp[0].node);
            n->options = list_make1(makeDefElem("verbose", NULL));
            if ((yyvsp[-1].boolean))
                n->options = lappend(n->options, makeDefElem("dxl", NULL));
            (yyval.node) = (Node*) n;
        }
#line 40974 "gram.cpp"
        break;

        case 1572: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 11537 "gram.y"
        {
            ExplainStmt* n = makeNode(ExplainStmt);
            n->query = (yyvsp[0].node);
            n->options = (yyvsp[-2].list);
            (yyval.node) = (Node*) n;
        }
#line 40985 "gram.cpp"
        break;

        case 1582: /* ExplainableStmt: CreateStmt  */
#line 11556 "gram.y"
        {
            ereport(ERROR,
                    errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                    errmsg("cannot EXPLAIN CREATE TABLE without AS "
                           "clause"));
        }
#line 40996 "gram.cpp"
        break;

        case 1583: /* opt_dxl: DXL  */
#line 11564 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 41002 "gram.cpp"
        break;

        case 1584: /* opt_dxl: %empty  */
#line 11565 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 41008 "gram.cpp"
        break;

        case 1585: /* explain_option_list: explain_option_elem  */
#line 11570 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].defelt));
        }
#line 41016 "gram.cpp"
        break;

        case 1586: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 11574 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
        }
#line 41024 "gram.cpp"
        break;

        case 1587: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 11581 "gram.y"
        {
            (yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node));
        }
#line 41032 "gram.cpp"
        break;

        case 1588: /* explain_option_name: NonReservedWord  */
#line 11587 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 41038 "gram.cpp"
        break;

        case 1589: /* explain_option_name: analyze_keyword  */
#line 11588 "gram.y"
        {
            (yyval.str) = "analyze";
        }
#line 41044 "gram.cpp"
        break;

        case 1590: /* explain_option_arg: opt_boolean_or_string  */
#line 11592 "gram.y"
        {
            (yyval.node) = (Node*) makeString((yyvsp[0].str));
        }
#line 41050 "gram.cpp"
        break;

        case 1591: /* explain_option_arg: NumericOnly  */
#line 11593 "gram.y"
        {
            (yyval.node) = (Node*) (yyvsp[0].value);
        }
#line 41056 "gram.cpp"
        break;

        case 1592: /* explain_option_arg: %empty  */
#line 11594 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 41062 "gram.cpp"
        break;

        case 1593: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 11605 "gram.y"
        {
            PrepareStmt* n = makeNode(PrepareStmt);
            n->name = (yyvsp[-3].str);
            n->argtypes = (yyvsp[-2].list);
            n->query = (yyvsp[0].node);
            (yyval.node) = (Node*) n;
        }
#line 41074 "gram.cpp"
        break;

        case 1594: /* prep_type_clause: '(' type_list ')'  */
#line 11614 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 41080 "gram.cpp"
        break;

        case 1595: /* prep_type_clause: %empty  */
#line 11615 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 41086 "gram.cpp"
        break;

        case 1600: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 11633 "gram.y"
        {
            ExecuteStmt* n = makeNode(ExecuteStmt);
            n->name = (yyvsp[-1].str);
            n->params = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 41097 "gram.cpp"
        break;

        case 1601: /* ExecuteStmt: CREATE OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 11641 "gram.y"
        {
            CreateTableAsStmt* ctas = makeNode(CreateTableAsStmt);
            ExecuteStmt* n = makeNode(ExecuteStmt);
            n->name = (yyvsp[-2].str);
            n->params = (yyvsp[-1].list);
            ctas->query = (Node*) n;
            ctas->into = (yyvsp[-5].into);
            ctas->relkind = OBJECT_TABLE;
            ctas->is_select_into = false;
            /* cram additional flags into the IntoClause */
            (yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
            (yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
            (yyval.node) = (Node*) ctas;
        }
#line 41116 "gram.cpp"
        break;

        case 1602: /* execute_param_clause: '(' expr_list ')'  */
#line 11657 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 41122 "gram.cpp"
        break;

        case 1603: /* execute_param_clause: %empty  */
#line 11658 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 41128 "gram.cpp"
        break;

        case 1604: /* DeallocateStmt: DEALLOCATE name  */
#line 11669 "gram.y"
        {
            DeallocateStmt* n = makeNode(DeallocateStmt);
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 41138 "gram.cpp"
        break;

        case 1605: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 11675 "gram.y"
        {
            DeallocateStmt* n = makeNode(DeallocateStmt);
            n->name = (yyvsp[0].str);
            (yyval.node) = (Node*) n;
        }
#line 41148 "gram.cpp"
        break;

        case 1606: /* DeallocateStmt: DEALLOCATE ALL  */
#line 11681 "gram.y"
        {
            DeallocateStmt* n = makeNode(DeallocateStmt);
            n->name = NULL;
            (yyval.node) = (Node*) n;
        }
#line 41158 "gram.cpp"
        break;

        case 1607: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 11687 "gram.y"
        {
            DeallocateStmt* n = makeNode(DeallocateStmt);
            n->name = NULL;
            (yyval.node) = (Node*) n;
        }
#line 41168 "gram.cpp"
        break;

        case 1608: /* cdb_string_list: cdb_string  */
#line 11702 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 41174 "gram.cpp"
        break;

        case 1609: /* cdb_string_list: cdb_string_list ',' cdb_string  */
#line 11704 "gram.y"
        {
            if (list_member((yyvsp[-2].list), (yyvsp[0].node)))
                ereport(ERROR,
                        errcode(ERRCODE_INVALID_TABLE_DEFINITION),
                        errmsg("duplicate location uri"),
                        parser_errposition((yylsp[0])));
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 41187 "gram.cpp"
        break;

        case 1610: /* cdb_string: Sconst  */
#line 11717 "gram.y"
        {
            (yyval.node) = (Node*) makeString((yyvsp[0].str));
        }
#line 41195 "gram.cpp"
        break;

        case 1611: /* InsertStmt: opt_with_clause INSERT INTO qualified_name insert_rest returning_clause  */
#line 11731 "gram.y"
        {
            (yyvsp[-1].istmt)->relation = (yyvsp[-2].range);
            (yyvsp[-1].istmt)->returningList = (yyvsp[0].list);
            (yyvsp[-1].istmt)->withClause = (yyvsp[-5].with);
            (yyval.node) = (Node*) (yyvsp[-1].istmt);
        }
#line 41206 "gram.cpp"
        break;

        case 1612: /* insert_rest: SelectStmt  */
#line 11741 "gram.y"
        {
            (yyval.istmt) = makeNode(InsertStmt);
            (yyval.istmt)->cols = NIL;
            (yyval.istmt)->selectStmt = (yyvsp[0].node);
        }
#line 41216 "gram.cpp"
        break;

        case 1613: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 11747 "gram.y"
        {
            (yyval.istmt) = makeNode(InsertStmt);
            (yyval.istmt)->cols = (yyvsp[-2].list);
            (yyval.istmt)->selectStmt = (yyvsp[0].node);
        }
#line 41226 "gram.cpp"
        break;

        case 1614: /* insert_rest: DEFAULT VALUES  */
#line 11753 "gram.y"
        {
            (yyval.istmt) = makeNode(InsertStmt);
            (yyval.istmt)->cols = NIL;
            (yyval.istmt)->selectStmt = NULL;
        }
#line 41236 "gram.cpp"
        break;

        case 1615: /* insert_column_list: insert_column_item  */
#line 11762 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].target));
        }
#line 41242 "gram.cpp"
        break;

        case 1616: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 11764 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target));
        }
#line 41248 "gram.cpp"
        break;

        case 1617: /* insert_column_item: ColId opt_indirection  */
#line 11769 "gram.y"
        {
            (yyval.target) = makeNode(ResTarget);
            (yyval.target)->name = (yyvsp[-1].str);
            (yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
            (yyval.target)->val = NULL;
            (yyval.target)->location = (yylsp[-1]);
        }
#line 41260 "gram.cpp"
        break;

        case 1618: /* returning_clause: RETURNING target_list  */
#line 11779 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 41266 "gram.cpp"
        break;

        case 1619: /* returning_clause: %empty  */
#line 11780 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 41272 "gram.cpp"
        break;

        case 1620: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 11793 "gram.y"
        {
            DeleteStmt* n = makeNode(DeleteStmt);
            n->relation = (yyvsp[-3].range);
            n->usingClause = (yyvsp[-2].list);
            n->whereClause = (yyvsp[-1].node);
            n->returningList = (yyvsp[0].list);
            n->withClause = (yyvsp[-6].with);
            (yyval.node) = (Node*) n;
        }
#line 41286 "gram.cpp"
        break;

        case 1621: /* using_clause: USING from_list  */
#line 11805 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 41292 "gram.cpp"
        break;

        case 1622: /* using_clause: %empty  */
#line 11806 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 41298 "gram.cpp"
        break;

        case 1623: /* LockStmt: LOCK_P opt_table relation_expr_list opt_lock opt_nowait opt_masteronly  */
#line 11818 "gram.y"
        {
            LockStmt* n = makeNode(LockStmt);

            n->relations = (yyvsp[-3].list);
            n->mode = (yyvsp[-2].ival);
            n->nowait = (yyvsp[-1].boolean);
            n->masteronly = (yyvsp[0].boolean);
            if (n->masteronly && n->mode != AccessShareLock) {
                ereport(ERROR,
                        errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                        errmsg("provided lock mode is not supported for MASTER ONLY"),
                        errhint("Only ACCESS SHARE mode is supported for MASTER ONLY."),
                        parser_errposition((yylsp[-2])));
            }
            (yyval.node) = (Node*) n;
        }
#line 41320 "gram.cpp"
        break;

        case 1624: /* opt_lock: IN_P lock_type MODE  */
#line 11837 "gram.y"
        {
            (yyval.ival) = (yyvsp[-1].ival);
        }
#line 41326 "gram.cpp"
        break;

        case 1625: /* opt_lock: %empty  */
#line 11838 "gram.y"
        {
            (yyval.ival) = AccessExclusiveLock;
        }
#line 41332 "gram.cpp"
        break;

        case 1626: /* lock_type: ACCESS SHARE  */
#line 11841 "gram.y"
        {
            (yyval.ival) = AccessShareLock;
        }
#line 41338 "gram.cpp"
        break;

        case 1627: /* lock_type: ROW SHARE  */
#line 11842 "gram.y"
        {
            (yyval.ival) = RowShareLock;
        }
#line 41344 "gram.cpp"
        break;

        case 1628: /* lock_type: ROW EXCLUSIVE  */
#line 11843 "gram.y"
        {
            (yyval.ival) = RowExclusiveLock;
        }
#line 41350 "gram.cpp"
        break;

        case 1629: /* lock_type: SHARE UPDATE EXCLUSIVE  */
#line 11844 "gram.y"
        {
            (yyval.ival) = ShareUpdateExclusiveLock;
        }
#line 41356 "gram.cpp"
        break;

        case 1630: /* lock_type: SHARE  */
#line 11845 "gram.y"
        {
            (yyval.ival) = ShareLock;
        }
#line 41362 "gram.cpp"
        break;

        case 1631: /* lock_type: SHARE ROW EXCLUSIVE  */
#line 11846 "gram.y"
        {
            (yyval.ival) = ShareRowExclusiveLock;
        }
#line 41368 "gram.cpp"
        break;

        case 1632: /* lock_type: EXCLUSIVE  */
#line 11847 "gram.y"
        {
            (yyval.ival) = ExclusiveLock;
        }
#line 41374 "gram.cpp"
        break;

        case 1633: /* lock_type: ACCESS EXCLUSIVE  */
#line 11848 "gram.y"
        {
            (yyval.ival) = AccessExclusiveLock;
        }
#line 41380 "gram.cpp"
        break;

        case 1634: /* opt_nowait: NOWAIT  */
#line 11851 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 41386 "gram.cpp"
        break;

        case 1635: /* opt_nowait: %empty  */
#line 11852 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 41392 "gram.cpp"
        break;

        case 1636: /* opt_masteronly: MASTER ONLY  */
#line 11855 "gram.y"
        {
            (yyval.boolean) = true;
        }
#line 41398 "gram.cpp"
        break;

        case 1637: /* opt_masteronly: %empty  */
#line 11856 "gram.y"
        {
            (yyval.boolean) = false;
        }
#line 41404 "gram.cpp"
        break;

        case 1638: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list from_clause where_or_current_clause returning_clause  */
#line 11871 "gram.y"
        {
            UpdateStmt* n = makeNode(UpdateStmt);
            n->relation = (yyvsp[-5].range);
            n->targetList = (yyvsp[-3].list);
            n->fromClause = (yyvsp[-2].list);
            n->whereClause = (yyvsp[-1].node);
            n->returningList = (yyvsp[0].list);
            n->withClause = (yyvsp[-7].with);
            (yyval.node) = (Node*) n;
        }
#line 41419 "gram.cpp"
        break;

        case 1639: /* set_clause_list: set_clause  */
#line 11884 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 41425 "gram.cpp"
        break;

        case 1640: /* set_clause_list: set_clause_list ',' set_clause  */
#line 11885 "gram.y"
        {
            (yyval.list) = list_concat((yyvsp[-2].list), (yyvsp[0].list));
        }
#line 41431 "gram.cpp"
        break;

        case 1641: /* set_clause: single_set_clause  */
#line 11889 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].target));
        }
#line 41437 "gram.cpp"
        break;

        case 1642: /* set_clause: multiple_set_clause  */
#line 11890 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 41443 "gram.cpp"
        break;

        case 1643: /* single_set_clause: set_target '=' ctext_expr  */
#line 11895 "gram.y"
        {
            (yyval.target) = (yyvsp[-2].target);
            (yyval.target)->val = (Node*) (yyvsp[0].node);
        }
#line 41452 "gram.cpp"
        break;

        case 1644: /* multiple_set_clause: '(' set_target_list ')' '=' ctext_row  */
#line 11903 "gram.y"
        {
            ListCell* col_cell;
            ListCell* val_cell;

            /*
					 * Break the ctext_row apart, merge individual expressions
					 * into the destination ResTargets.  XXX this approach
					 * cannot work for general row expressions as sources.
					 */
            if (list_length((yyvsp[-3].list)) != list_length((yyvsp[0].list)))
                ereport(ERROR,
                        errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("number of columns does not match number of values"),
                        parser_errposition((yylsp[-4])));
            forboth(col_cell, (yyvsp[-3].list), val_cell, (yyvsp[0].list)) {
                ResTarget* res_col = (ResTarget*) lfirst(col_cell);
                Node* res_val = (Node*) lfirst(val_cell);

                res_col->val = res_val;
            }

            (yyval.list) = (yyvsp[-3].list);
        }
#line 41481 "gram.cpp"
        break;

        case 1645: /* set_target: ColId opt_indirection  */
#line 11931 "gram.y"
        {
            (yyval.target) = makeNode(ResTarget);
            (yyval.target)->name = (yyvsp[-1].str);
            (yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
            (yyval.target)->val = NULL; /* upper production sets this */
            (yyval.target)->location = (yylsp[-1]);
        }
#line 41493 "gram.cpp"
        break;

        case 1646: /* set_target_list: set_target  */
#line 11941 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].target));
        }
#line 41499 "gram.cpp"
        break;

        case 1647: /* set_target_list: set_target_list ',' set_target  */
#line 11942 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target));
        }
#line 41505 "gram.cpp"
        break;

        case 1648: /* DeclareCursorStmt: DECLARE cursor_name cursor_options CURSOR opt_hold FOR SelectStmt  */
#line 11953 "gram.y"
        {
            DeclareCursorStmt* n = makeNode(DeclareCursorStmt);
            n->portalname = (yyvsp[-5].str);
            /* currently we always set FAST_PLAN option */
            n->options = (yyvsp[-4].ival) | (yyvsp[-2].ival) | CURSOR_OPT_FAST_PLAN;
            n->query = (yyvsp[0].node);
            (yyval.node) = (Node*) n;
        }
#line 41518 "gram.cpp"
        break;

        case 1649: /* cursor_name: name  */
#line 11963 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 41524 "gram.cpp"
        break;

        case 1650: /* cursor_options: %empty  */
#line 11966 "gram.y"
        {
            (yyval.ival) = 0;
        }
#line 41530 "gram.cpp"
        break;

        case 1651: /* cursor_options: cursor_options NO SCROLL  */
#line 11967 "gram.y"
        {
            (yyval.ival) = (yyvsp[-2].ival) | CURSOR_OPT_NO_SCROLL;
        }
#line 41536 "gram.cpp"
        break;

        case 1652: /* cursor_options: cursor_options SCROLL  */
#line 11968 "gram.y"
        {
            (yyval.ival) = (yyvsp[-1].ival) | CURSOR_OPT_SCROLL;
        }
#line 41542 "gram.cpp"
        break;

        case 1653: /* cursor_options: cursor_options BINARY  */
#line 11969 "gram.y"
        {
            (yyval.ival) = (yyvsp[-1].ival) | CURSOR_OPT_BINARY;
        }
#line 41548 "gram.cpp"
        break;

        case 1654: /* cursor_options: cursor_options INSENSITIVE  */
#line 11970 "gram.y"
        {
            (yyval.ival) = (yyvsp[-1].ival) | CURSOR_OPT_INSENSITIVE;
        }
#line 41554 "gram.cpp"
        break;

        case 1655: /* cursor_options: cursor_options PARALLEL RETRIEVE  */
#line 11971 "gram.y"
        {
            (yyval.ival) = (yyvsp[-2].ival) | CURSOR_OPT_PARALLEL_RETRIEVE;
        }
#line 41560 "gram.cpp"
        break;

        case 1656: /* opt_hold: %empty  */
#line 11974 "gram.y"
        {
            (yyval.ival) = 0;
        }
#line 41566 "gram.cpp"
        break;

        case 1657: /* opt_hold: WITH HOLD  */
#line 11975 "gram.y"
        {
            (yyval.ival) = CURSOR_OPT_HOLD;
        }
#line 41572 "gram.cpp"
        break;

        case 1658: /* opt_hold: WITHOUT HOLD  */
#line 11976 "gram.y"
        {
            (yyval.ival) = 0;
        }
#line 41578 "gram.cpp"
        break;

        case 1661: /* RetrieveStmt: RETRIEVE SignedIconst FROM ENDPOINT name  */
#line 12030 "gram.y"
        {
            RetrieveStmt* n = makeNode(RetrieveStmt);
            n->endpoint_name = (yyvsp[0].str);
            n->count = (yyvsp[-3].ival);
            (yyval.node) = (Node*) n;
        }
#line 41589 "gram.cpp"
        break;

        case 1662: /* RetrieveStmt: RETRIEVE ALL FROM ENDPOINT name  */
#line 12037 "gram.y"
        {
            RetrieveStmt* n = makeNode(RetrieveStmt);
            n->endpoint_name = (yyvsp[0].str);
            n->count = -1;
            n->is_all = true;
            (yyval.node) = (Node*) n;
        }
#line 41601 "gram.cpp"
        break;

        case 1663: /* select_with_parens: '(' select_no_parens ')'  */
#line 12047 "gram.y"
        {
            (yyval.node) = (yyvsp[-1].node);
        }
#line 41607 "gram.cpp"
        break;

        case 1664: /* select_with_parens: '(' select_with_parens ')'  */
#line 12048 "gram.y"
        {
            (yyval.node) = (yyvsp[-1].node);
        }
#line 41613 "gram.cpp"
        break;

        case 1665: /* select_no_parens: simple_select  */
#line 12063 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 41619 "gram.cpp"
        break;

        case 1666: /* select_no_parens: select_clause sort_clause  */
#line 12065 "gram.y"
        {
            insertSelectOptions((SelectStmt*) (yyvsp[-1].node), (yyvsp[0].list), NIL, NULL, NULL, NULL, yyscanner);
            (yyval.node) = (yyvsp[-1].node);
        }
#line 41630 "gram.cpp"
        break;

        case 1667: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 12072 "gram.y"
        {
            insertSelectOptions((SelectStmt*) (yyvsp[-3].node),
                                (yyvsp[-2].list),
                                (yyvsp[-1].list),
                                list_nth((yyvsp[0].list), 0),
                                list_nth((yyvsp[0].list), 1),
                                NULL,
                                yyscanner);
            (yyval.node) = (yyvsp[-3].node);
        }
#line 41642 "gram.cpp"
        break;

        case 1668: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 12080 "gram.y"
        {
            insertSelectOptions((SelectStmt*) (yyvsp[-3].node),
                                (yyvsp[-2].list),
                                (yyvsp[0].list),
                                list_nth((yyvsp[-1].list), 0),
                                list_nth((yyvsp[-1].list), 1),
                                NULL,
                                yyscanner);
            (yyval.node) = (yyvsp[-3].node);
        }
#line 41654 "gram.cpp"
        break;

        case 1669: /* select_no_parens: with_clause select_clause  */
#line 12088 "gram.y"
        {
            insertSelectOptions((SelectStmt*) (yyvsp[0].node), NULL, NIL, NULL, NULL, (yyvsp[-1].with), yyscanner);
            (yyval.node) = (yyvsp[0].node);
        }
#line 41666 "gram.cpp"
        break;

        case 1670: /* select_no_parens: with_clause select_clause sort_clause  */
#line 12096 "gram.y"
        {
            insertSelectOptions((SelectStmt*) (yyvsp[-1].node),
                                (yyvsp[0].list),
                                NIL,
                                NULL,
                                NULL,
                                (yyvsp[-2].with),
                                yyscanner);
            (yyval.node) = (yyvsp[-1].node);
        }
#line 41678 "gram.cpp"
        break;

        case 1671: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 12104 "gram.y"
        {
            insertSelectOptions((SelectStmt*) (yyvsp[-3].node),
                                (yyvsp[-2].list),
                                (yyvsp[-1].list),
                                list_nth((yyvsp[0].list), 0),
                                list_nth((yyvsp[0].list), 1),
                                (yyvsp[-4].with),
                                yyscanner);
            (yyval.node) = (yyvsp[-3].node);
        }
#line 41690 "gram.cpp"
        break;

        case 1672: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 12112 "gram.y"
        {
            insertSelectOptions((SelectStmt*) (yyvsp[-3].node),
                                (yyvsp[-2].list),
                                (yyvsp[0].list),
                                list_nth((yyvsp[-1].list), 0),
                                list_nth((yyvsp[-1].list), 1),
                                (yyvsp[-4].with),
                                yyscanner);
            (yyval.node) = (yyvsp[-3].node);
        }
#line 41702 "gram.cpp"
        break;

        case 1673: /* select_clause: simple_select  */
#line 12122 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 41708 "gram.cpp"
        break;

        case 1674: /* select_clause: select_with_parens  */
#line 12123 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 41714 "gram.cpp"
        break;

        case 1675: /* simple_select: SELECT opt_distinct opt_target_list into_clause from_clause where_clause group_clause having_clause window_clause  */
#line 12153 "gram.y"
        {
            SelectStmt* n = makeNode(SelectStmt);
            n->distinctClause = (yyvsp[-7].list);
            n->targetList = (yyvsp[-6].list);
            n->intoClause = (yyvsp[-5].into);
            n->fromClause = (yyvsp[-4].list);
            n->whereClause = (yyvsp[-3].node);
            n->groupClause = (yyvsp[-2].list);
            n->havingClause = (yyvsp[-1].node);
            n->windowClause = (yyvsp[0].list);
            (yyval.node) = (Node*) n;
        }
#line 41731 "gram.cpp"
        break;

        case 1676: /* simple_select: values_clause  */
#line 12165 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 41737 "gram.cpp"
        break;

        case 1677: /* simple_select: TABLE relation_expr  */
#line 12167 "gram.y"
        {
            /* same as SELECT * FROM relation_expr */
            ColumnRef* cr = makeNode(ColumnRef);
            ResTarget* rt = makeNode(ResTarget);
            SelectStmt* n = makeNode(SelectStmt);

            cr->fields = list_make1(makeNode(A_Star));
            cr->location = -1;

            rt->name = NULL;
            rt->indirection = NIL;
            rt->val = (Node*) cr;
            rt->location = -1;

            n->targetList = list_make1(rt);
            n->fromClause = list_make1((yyvsp[0].range));
            (yyval.node) = (Node*) n;
        }
#line 41760 "gram.cpp"
        break;

        case 1678: /* simple_select: select_clause UNION opt_all select_clause  */
#line 12186 "gram.y"
        {
            (yyval.node) = makeSetOp(SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
        }
#line 41768 "gram.cpp"
        break;

        case 1679: /* simple_select: select_clause INTERSECT opt_all select_clause  */
#line 12190 "gram.y"
        {
            (yyval.node) = makeSetOp(SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
        }
#line 41776 "gram.cpp"
        break;

        case 1680: /* simple_select: select_clause EXCEPT opt_all select_clause  */
#line 12194 "gram.y"
        {
            (yyval.node) = makeSetOp(SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
        }
#line 41784 "gram.cpp"
        break;

        case 1681: /* with_clause: WITH cte_list  */
#line 12209 "gram.y"
        {
            (yyval.with) = makeNode(WithClause);
            (yyval.with)->ctes = (yyvsp[0].list);
            (yyval.with)->recursive = false;
            (yyval.with)->location = (yylsp[-1]);
        }
#line 41795 "gram.cpp"
        break;

        case 1682: /* with_clause: WITH RECURSIVE cte_list  */
#line 12216 "gram.y"
        {
            (yyval.with) = makeNode(WithClause);
            (yyval.with)->ctes = (yyvsp[0].list);
            (yyval.with)->recursive = true;
            (yyval.with)->location = (yylsp[-2]);
        }
#line 41806 "gram.cpp"
        break;

        case 1683: /* cte_list: common_table_expr  */
#line 12225 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 41812 "gram.cpp"
        break;

        case 1684: /* cte_list: cte_list ',' common_table_expr  */
#line 12226 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 41818 "gram.cpp"
        break;

        case 1685: /* common_table_expr: name opt_name_list AS '(' PreparableStmt ')'  */
#line 12230 "gram.y"
        {
            CommonTableExpr* n = makeNode(CommonTableExpr);
            n->ctename = (yyvsp[-5].str);
            n->aliascolnames = (yyvsp[-4].list);
            n->ctequery = (yyvsp[-1].node);
            n->location = (yylsp[-5]);
            (yyval.node) = (Node*) n;
        }
#line 41831 "gram.cpp"
        break;

        case 1686: /* opt_with_clause: with_clause  */
#line 12241 "gram.y"
        {
            (yyval.with) = (yyvsp[0].with);
        }
#line 41837 "gram.cpp"
        break;

        case 1687: /* opt_with_clause: %empty  */
#line 12242 "gram.y"
        {
            (yyval.with) = NULL;
        }
#line 41843 "gram.cpp"
        break;

        case 1688: /* into_clause: INTO OptTempTableName  */
#line 12247 "gram.y"
        {
            (yyval.into) = makeNode(IntoClause);
            (yyval.into)->rel = (yyvsp[0].range);
            (yyval.into)->colNames = NIL;
            (yyval.into)->options = NIL;
            (yyval.into)->onCommit = ONCOMMIT_NOOP;
            (yyval.into)->tableSpaceName = NULL;
            (yyval.into)->viewQuery = NULL;
            (yyval.into)->skipData = false;
        }
#line 41858 "gram.cpp"
        break;

        case 1689: /* into_clause: %empty  */
#line 12258 "gram.y"
        {
            (yyval.into) = NULL;
        }
#line 41864 "gram.cpp"
        break;

        case 1690: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 12267 "gram.y"
        {
            (yyval.range) = (yyvsp[0].range);
            (yyval.range)->relpersistence = RELPERSISTENCE_TEMP;
        }
#line 41873 "gram.cpp"
        break;

        case 1691: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 12272 "gram.y"
        {
            (yyval.range) = (yyvsp[0].range);
            (yyval.range)->relpersistence = RELPERSISTENCE_TEMP;
        }
#line 41882 "gram.cpp"
        break;

        case 1692: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 12277 "gram.y"
        {
            (yyval.range) = (yyvsp[0].range);
            (yyval.range)->relpersistence = RELPERSISTENCE_TEMP;
        }
#line 41891 "gram.cpp"
        break;

        case 1693: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 12282 "gram.y"
        {
            (yyval.range) = (yyvsp[0].range);
            (yyval.range)->relpersistence = RELPERSISTENCE_TEMP;
        }
#line 41900 "gram.cpp"
        break;

        case 1694: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 12287 "gram.y"
        {
            ereport(WARNING,
                    errmsg("GLOBAL is deprecated in temporary table creation"),
                    parser_errposition((yylsp[-3])));
            (yyval.range) = (yyvsp[0].range);
            (yyval.range)->relpersistence = RELPERSISTENCE_TEMP;
        }
#line 41912 "gram.cpp"
        break;

        case 1695: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 12295 "gram.y"
        {
            ereport(WARNING,
                    errmsg("GLOBAL is deprecated in temporary table creation"),
                    parser_errposition((yylsp[-3])));
            (yyval.range) = (yyvsp[0].range);
            (yyval.range)->relpersistence = RELPERSISTENCE_TEMP;
        }
#line 41924 "gram.cpp"
        break;

        case 1696: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 12303 "gram.y"
        {
            (yyval.range) = (yyvsp[0].range);
            (yyval.range)->relpersistence = RELPERSISTENCE_UNLOGGED;
        }
#line 41933 "gram.cpp"
        break;

        case 1697: /* OptTempTableName: TABLE qualified_name  */
#line 12308 "gram.y"
        {
            (yyval.range) = (yyvsp[0].range);
            (yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
        }
#line 41942 "gram.cpp"
        break;

        case 1698: /* OptTempTableName: qualified_name  */
#line 12313 "gram.y"
        {
            (yyval.range) = (yyvsp[0].range);
            (yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
        }
#line 41951 "gram.cpp"
        break;

        case 1699: /* opt_table: TABLE  */
#line 12319 "gram.y"
        {
        }
#line 41957 "gram.cpp"
        break;

        case 1700: /* opt_table: %empty  */
#line 12320 "gram.y"
        {
        }
#line 41963 "gram.cpp"
        break;

        case 1701: /* opt_all: ALL  */
#line 12323 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 41969 "gram.cpp"
        break;

        case 1702: /* opt_all: DISTINCT  */
#line 12324 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 41975 "gram.cpp"
        break;

        case 1703: /* opt_all: %empty  */
#line 12325 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 41981 "gram.cpp"
        break;

        case 1704: /* opt_distinct: DISTINCT  */
#line 12332 "gram.y"
        {
            (yyval.list) = list_make1(NIL);
        }
#line 41987 "gram.cpp"
        break;

        case 1705: /* opt_distinct: DISTINCT ON '(' expr_list ')'  */
#line 12333 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 41993 "gram.cpp"
        break;

        case 1706: /* opt_distinct: ALL  */
#line 12334 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 41999 "gram.cpp"
        break;

        case 1707: /* opt_distinct: %empty  */
#line 12335 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 42005 "gram.cpp"
        break;

        case 1708: /* opt_sort_clause: sort_clause  */
#line 12339 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 42011 "gram.cpp"
        break;

        case 1709: /* opt_sort_clause: %empty  */
#line 12340 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 42017 "gram.cpp"
        break;

        case 1710: /* sort_clause: ORDER BY sortby_list  */
#line 12344 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 42023 "gram.cpp"
        break;

        case 1711: /* sortby_list: sortby  */
#line 12348 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].sortby));
        }
#line 42029 "gram.cpp"
        break;

        case 1712: /* sortby_list: sortby_list ',' sortby  */
#line 12349 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby));
        }
#line 42035 "gram.cpp"
        break;

        case 1713: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 12353 "gram.y"
        {
            (yyval.sortby) = makeNode(SortBy);
            (yyval.sortby)->node = (yyvsp[-3].node);
            (yyval.sortby)->sortby_dir = SORTBY_USING;
            (yyval.sortby)->sortby_nulls = static_cast<SortByNulls>((yyvsp[0].ival));
            (yyval.sortby)->useOp = (yyvsp[-1].list);
            (yyval.sortby)->location = (yylsp[-1]);
        }
#line 42048 "gram.cpp"
        break;

        case 1714: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 12362 "gram.y"
        {
            (yyval.sortby) = makeNode(SortBy);
            (yyval.sortby)->node = (yyvsp[-2].node);
            (yyval.sortby)->sortby_dir = static_cast<SortByDir>((yyvsp[-1].ival));
            (yyval.sortby)->sortby_nulls = static_cast<SortByNulls>((yyvsp[0].ival));
            (yyval.sortby)->useOp = NIL;
            (yyval.sortby)->location = -1; /* no operator */
        }
#line 42061 "gram.cpp"
        break;

        case 1715: /* select_limit: limit_clause offset_clause  */
#line 12374 "gram.y"
        {
            (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node));
        }
#line 42067 "gram.cpp"
        break;

        case 1716: /* select_limit: offset_clause limit_clause  */
#line 12375 "gram.y"
        {
            (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
        }
#line 42073 "gram.cpp"
        break;

        case 1717: /* select_limit: limit_clause  */
#line 12376 "gram.y"
        {
            (yyval.list) = list_make2(NULL, (yyvsp[0].node));
        }
#line 42079 "gram.cpp"
        break;

        case 1718: /* select_limit: offset_clause  */
#line 12377 "gram.y"
        {
            (yyval.list) = list_make2((yyvsp[0].node), NULL);
        }
#line 42085 "gram.cpp"
        break;

        case 1719: /* opt_select_limit: select_limit  */
#line 12381 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 42091 "gram.cpp"
        break;

        case 1720: /* opt_select_limit: %empty  */
#line 12382 "gram.y"
        {
            (yyval.list) = list_make2(NULL, NULL);
        }
#line 42097 "gram.cpp"
        break;

        case 1721: /* limit_clause: LIMIT select_limit_value  */
#line 12387 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 42103 "gram.cpp"
        break;

        case 1722: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 12389 "gram.y"
        {
            /* Disabled because it was too confusing, bjm 2002-02-18 */
            ereport(ERROR,
                    errcode(ERRCODE_SYNTAX_ERROR),
                    errmsg("LIMIT #,# syntax is not supported"),
                    errhint("Use separate LIMIT and OFFSET clauses."),
                    parser_errposition((yylsp[-3])));
        }
#line 42116 "gram.cpp"
        break;

        case 1723: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 12405 "gram.y"
        {
            (yyval.node) = (yyvsp[-2].node);
        }
#line 42122 "gram.cpp"
        break;

        case 1724: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 12407 "gram.y"
        {
            (yyval.node) = makeIntConst(1, -1);
        }
#line 42128 "gram.cpp"
        break;

        case 1725: /* offset_clause: OFFSET select_offset_value  */
#line 12412 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 42134 "gram.cpp"
        break;

        case 1726: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 12415 "gram.y"
        {
            (yyval.node) = (yyvsp[-1].node);
        }
#line 42140 "gram.cpp"
        break;

        case 1727: /* select_limit_value: a_expr  */
#line 12419 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 42146 "gram.cpp"
        break;

        case 1728: /* select_limit_value: ALL  */
#line 12421 "gram.y"
        {
            /* LIMIT ALL is represented as a NULL constant */
            (yyval.node) = makeNullAConst((yylsp[0]));
        }
#line 42155 "gram.cpp"
        break;

        case 1729: /* select_offset_value: a_expr  */
#line 12428 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 42161 "gram.cpp"
        break;

        case 1730: /* select_fetch_first_value: c_expr  */
#line 12448 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 42167 "gram.cpp"
        break;

        case 1731: /* select_fetch_first_value: '+' I_or_F_const  */
#line 12450 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1]));
        }
#line 42173 "gram.cpp"
        break;

        case 1732: /* select_fetch_first_value: '-' I_or_F_const  */
#line 12452 "gram.y"
        {
            (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1]));
        }
#line 42179 "gram.cpp"
        break;

        case 1733: /* I_or_F_const: Iconst  */
#line 12456 "gram.y"
        {
            (yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
        }
#line 42185 "gram.cpp"
        break;

        case 1734: /* I_or_F_const: FCONST  */
#line 12457 "gram.y"
        {
            (yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
        }
#line 42191 "gram.cpp"
        break;

        case 1735: /* row_or_rows: ROW  */
#line 12461 "gram.y"
        {
            (yyval.ival) = 0;
        }
#line 42197 "gram.cpp"
        break;

        case 1736: /* row_or_rows: ROWS  */
#line 12462 "gram.y"
        {
            (yyval.ival) = 0;
        }
#line 42203 "gram.cpp"
        break;

        case 1737: /* first_or_next: FIRST_P  */
#line 12465 "gram.y"
        {
            (yyval.ival) = 0;
        }
#line 42209 "gram.cpp"
        break;

        case 1738: /* first_or_next: NEXT  */
#line 12466 "gram.y"
        {
            (yyval.ival) = 0;
        }
#line 42215 "gram.cpp"
        break;

        case 1739: /* group_clause: GROUP_P BY group_elem_list  */
#line 12471 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 42221 "gram.cpp"
        break;

        case 1740: /* group_clause: %empty  */
#line 12472 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 42227 "gram.cpp"
        break;

        case 1741: /* group_elem_list: group_elem  */
#line 12476 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 42233 "gram.cpp"
        break;

        case 1742: /* group_elem_list: group_elem_list ',' group_elem  */
#line 12477 "gram.y"
        {
            (yyval.list) = list_concat((yyvsp[-2].list), (yyvsp[0].list));
        }
#line 42239 "gram.cpp"
        break;

        case 1743: /* group_elem: a_expr  */
#line 12481 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 42245 "gram.cpp"
        break;

        case 1744: /* group_elem: ROLLUP '(' expr_list ')'  */
#line 12483 "gram.y"
        {
            GroupingClause* n = makeNode(GroupingClause);
            n->groupType = GROUPINGTYPE_ROLLUP;
            n->groupsets = (yyvsp[-1].list);
            n->location = (yylsp[-3]);
            (yyval.list) = list_make1((Node*) n);
        }
#line 42257 "gram.cpp"
        break;

        case 1745: /* group_elem: CUBE '(' expr_list ')'  */
#line 12491 "gram.y"
        {
            GroupingClause* n = makeNode(GroupingClause);
            n->groupType = GROUPINGTYPE_CUBE;
            n->groupsets = (yyvsp[-1].list);
            n->location = (yylsp[-3]);
            (yyval.list) = list_make1((Node*) n);
        }
#line 42269 "gram.cpp"
        break;

        case 1746: /* group_elem: GROUPING SETS '(' group_elem_list ')'  */
#line 12499 "gram.y"
        {
            GroupingClause* n = makeNode(GroupingClause);
            n->groupType = GROUPINGTYPE_GROUPING_SETS;
            n->groupsets = (yyvsp[-1].list);
            n->location = (yylsp[-4]);
            (yyval.list) = list_make1((Node*) n);
        }
#line 42281 "gram.cpp"
        break;

        case 1747: /* group_elem: '(' ')'  */
#line 12507 "gram.y"
        {
            (yyval.list) = list_make1(NIL);
        }
#line 42287 "gram.cpp"
        break;

        case 1748: /* having_clause: HAVING a_expr  */
#line 12511 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 42293 "gram.cpp"
        break;

        case 1749: /* having_clause: %empty  */
#line 12512 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 42299 "gram.cpp"
        break;

        case 1750: /* for_locking_clause: for_locking_items  */
#line 12516 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 42305 "gram.cpp"
        break;

        case 1751: /* for_locking_clause: FOR READ ONLY  */
#line 12517 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 42311 "gram.cpp"
        break;

        case 1752: /* opt_for_locking_clause: for_locking_clause  */
#line 12521 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 42317 "gram.cpp"
        break;

        case 1753: /* opt_for_locking_clause: %empty  */
#line 12522 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 42323 "gram.cpp"
        break;

        case 1754: /* for_locking_items: for_locking_item  */
#line 12526 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 42329 "gram.cpp"
        break;

        case 1755: /* for_locking_items: for_locking_items for_locking_item  */
#line 12527 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
        }
#line 42335 "gram.cpp"
        break;

        case 1756: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait  */
#line 12532 "gram.y"
        {
            LockingClause* n = makeNode(LockingClause);
            n->lockedRels = (yyvsp[-1].list);
            n->strength = static_cast<LockClauseStrength>((yyvsp[-2].ival));
            n->noWait = (yyvsp[0].boolean);
            (yyval.node) = (Node*) n;
        }
#line 42347 "gram.cpp"
        break;

        case 1757: /* for_locking_strength: FOR UPDATE  */
#line 12542 "gram.y"
        {
            (yyval.ival) = LCS_FORUPDATE;
        }
#line 42353 "gram.cpp"
        break;

        case 1758: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 12543 "gram.y"
        {
            (yyval.ival) = LCS_FORNOKEYUPDATE;
        }
#line 42359 "gram.cpp"
        break;

        case 1759: /* for_locking_strength: FOR SHARE  */
#line 12544 "gram.y"
        {
            (yyval.ival) = LCS_FORSHARE;
        }
#line 42365 "gram.cpp"
        break;

        case 1760: /* for_locking_strength: FOR KEY SHARE  */
#line 12545 "gram.y"
        {
            (yyval.ival) = LCS_FORKEYSHARE;
        }
#line 42371 "gram.cpp"
        break;

        case 1761: /* locked_rels_list: OF qualified_name_list  */
#line 12549 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 42377 "gram.cpp"
        break;

        case 1762: /* locked_rels_list: %empty  */
#line 12550 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 42383 "gram.cpp"
        break;

        case 1763: /* values_clause: VALUES ctext_row  */
#line 12556 "gram.y"
        {
            SelectStmt* n = makeNode(SelectStmt);
            n->valuesLists = list_make1((yyvsp[0].list));
            (yyval.node) = (Node*) n;
        }
#line 42393 "gram.cpp"
        break;

        case 1764: /* values_clause: values_clause ',' ctext_row  */
#line 12562 "gram.y"
        {
            SelectStmt* n = (SelectStmt*) (yyvsp[-2].node);
            n->valuesLists = lappend(n->valuesLists, (yyvsp[0].list));
            (yyval.node) = (Node*) n;
        }
#line 42403 "gram.cpp"
        break;

        case 1765: /* from_clause: FROM from_list  */
#line 12579 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 42409 "gram.cpp"
        break;

        case 1766: /* from_clause: %empty  */
#line 12580 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 42415 "gram.cpp"
        break;

        case 1767: /* from_list: table_ref  */
#line 12584 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 42421 "gram.cpp"
        break;

        case 1768: /* from_list: from_list ',' table_ref  */
#line 12585 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 42427 "gram.cpp"
        break;

        case 1769: /* table_ref: relation_expr opt_alias_clause  */
#line 12592 "gram.y"
        {
            (yyvsp[-1].range)->alias = (yyvsp[0].alias);
            (yyval.node) = (Node*) (yyvsp[-1].range);
        }
#line 42436 "gram.cpp"
        break;

        case 1770: /* table_ref: func_table func_alias_clause  */
#line 12597 "gram.y"
        {
            RangeFunction* n = (RangeFunction*) (yyvsp[-1].node);
            n->alias = reinterpret_cast<Alias*>(linitial((yyvsp[0].list)));
            n->coldeflist = reinterpret_cast<List*>(lsecond((yyvsp[0].list)));
            (yyval.node) = (Node*) n;
        }
#line 42447 "gram.cpp"
        break;

        case 1771: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 12604 "gram.y"
        {
            RangeFunction* n = (RangeFunction*) (yyvsp[-1].node);
            n->lateral = true;
            n->alias = reinterpret_cast<Alias*>(linitial((yyvsp[0].list)));
            n->coldeflist = reinterpret_cast<List*>(lsecond((yyvsp[0].list)));
            (yyval.node) = (Node*) n;
        }
#line 42459 "gram.cpp"
        break;

        case 1772: /* table_ref: select_with_parens opt_alias_clause  */
#line 12612 "gram.y"
        {
            RangeSubselect* n = makeNode(RangeSubselect);
            n->lateral = false;
            n->subquery = (yyvsp[-1].node);
            n->alias = (yyvsp[0].alias);
            /*
					 * The SQL spec does not permit a subselect
					 * (<derived_table>) without an alias clause,
					 * so we don't either.  This avoids the problem
					 * of needing to invent a unique refname for it.
					 * That could be surmounted if there's sufficient
					 * popular demand, but for now let's just implement
					 * the spec and see if anyone complains.
					 * However, it does seem like a good idea to emit
					 * an error message that's better than "syntax error".
					 */
            if ((yyvsp[0].alias) == NULL) {
                if (IsA((yyvsp[-1].node), SelectStmt) && ((SelectStmt*) (yyvsp[-1].node))->valuesLists)
                    ereport(ERROR,
                            errcode(ERRCODE_SYNTAX_ERROR),
                            errmsg("VALUES in FROM must have an alias"),
                            errhint("For example, FROM (VALUES ...) [AS] foo."),
                            parser_errposition((yylsp[-1])));
                else
                    ereport(ERROR,
                            errcode(ERRCODE_SYNTAX_ERROR),
                            errmsg("subquery in FROM must have an alias"),
                            errhint("For example, FROM (SELECT ...) [AS] foo."),
                            parser_errposition((yylsp[-1])));
            }
            (yyval.node) = (Node*) n;
        }
#line 42498 "gram.cpp"
        break;

        case 1773: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 12647 "gram.y"
        {
            RangeSubselect* n = makeNode(RangeSubselect);
            n->lateral = true;
            n->subquery = (yyvsp[-1].node);
            n->alias = (yyvsp[0].alias);
            /* same comment as above */
            if ((yyvsp[0].alias) == NULL) {
                if (IsA((yyvsp[-1].node), SelectStmt) && ((SelectStmt*) (yyvsp[-1].node))->valuesLists)
                    ereport(ERROR,
                            errcode(ERRCODE_SYNTAX_ERROR),
                            errmsg("VALUES in FROM must have an alias"),
                            errhint("For example, FROM (VALUES ...) [AS] foo."),
                            parser_errposition((yylsp[-1])));
                else
                    ereport(ERROR,
                            errcode(ERRCODE_SYNTAX_ERROR),
                            errmsg("subquery in FROM must have an alias"),
                            errhint("For example, FROM (SELECT ...) [AS] foo."),
                            parser_errposition((yylsp[-1])));
            }
            (yyval.node) = (Node*) n;
        }
#line 42527 "gram.cpp"
        break;

        case 1774: /* table_ref: joined_table  */
#line 12672 "gram.y"
        {
            (yyval.node) = (Node*) (yyvsp[0].jexpr);
        }
#line 42535 "gram.cpp"
        break;

        case 1775: /* table_ref: '(' joined_table ')' alias_clause  */
#line 12676 "gram.y"
        {
            (yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
            (yyval.node) = (Node*) (yyvsp[-2].jexpr);
        }
#line 42544 "gram.cpp"
        break;

        case 1776: /* joined_table: '(' joined_table ')'  */
#line 12702 "gram.y"
        {
            (yyval.jexpr) = (yyvsp[-1].jexpr);
        }
#line 42552 "gram.cpp"
        break;

        case 1777: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 12706 "gram.y"
        {
            /* CROSS JOIN is same as unqualified inner join */
            JoinExpr* n = makeNode(JoinExpr);
            n->jointype = JOIN_INNER;
            n->isNatural = FALSE;
            n->larg = (yyvsp[-3].node);
            n->rarg = (yyvsp[0].node);
            n->usingClause = NIL;
            n->quals = NULL;
            (yyval.jexpr) = n;
        }
#line 42568 "gram.cpp"
        break;

        case 1778: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 12718 "gram.y"
        {
            JoinExpr* n = makeNode(JoinExpr);
            n->jointype = (yyvsp[-3].jtype);
            n->isNatural = FALSE;
            n->larg = (yyvsp[-4].node);
            n->rarg = (yyvsp[-1].node);
            if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), List))
                n->usingClause = (List*) (yyvsp[0].node); /* USING clause */
            else
                n->quals = (yyvsp[0].node); /* ON clause */
            (yyval.jexpr) = n;
        }
#line 42585 "gram.cpp"
        break;

        case 1779: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 12731 "gram.y"
        {
            /* letting join_type reduce to empty doesn't work */
            JoinExpr* n = makeNode(JoinExpr);
            n->jointype = JOIN_INNER;
            n->isNatural = FALSE;
            n->larg = (yyvsp[-3].node);
            n->rarg = (yyvsp[-1].node);
            if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), List))
                n->usingClause = (List*) (yyvsp[0].node); /* USING clause */
            else
                n->quals = (yyvsp[0].node); /* ON clause */
            (yyval.jexpr) = n;
        }
#line 42603 "gram.cpp"
        break;

        case 1780: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 12745 "gram.y"
        {
            JoinExpr* n = makeNode(JoinExpr);
            n->jointype = (yyvsp[-2].jtype);
            n->isNatural = TRUE;
            n->larg = (yyvsp[-4].node);
            n->rarg = (yyvsp[0].node);
            n->usingClause = NIL; /* figure out which columns later... */
            n->quals = NULL;      /* fill later */
            (yyval.jexpr) = n;
        }
#line 42618 "gram.cpp"
        break;

        case 1781: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 12756 "gram.y"
        {
            /* letting join_type reduce to empty doesn't work */
            JoinExpr* n = makeNode(JoinExpr);
            n->jointype = JOIN_INNER;
            n->isNatural = TRUE;
            n->larg = (yyvsp[-3].node);
            n->rarg = (yyvsp[0].node);
            n->usingClause = NIL; /* figure out which columns later... */
            n->quals = NULL;      /* fill later */
            (yyval.jexpr) = n;
        }
#line 42634 "gram.cpp"
        break;

        case 1782: /* alias_clause: AS ColId '(' name_list ')'  */
#line 12771 "gram.y"
        {
            (yyval.alias) = makeNode(Alias);
            (yyval.alias)->aliasname = (yyvsp[-3].str);
            (yyval.alias)->colnames = (yyvsp[-1].list);
        }
#line 42644 "gram.cpp"
        break;

        case 1783: /* alias_clause: AS ColId  */
#line 12777 "gram.y"
        {
            (yyval.alias) = makeNode(Alias);
            (yyval.alias)->aliasname = (yyvsp[0].str);
        }
#line 42653 "gram.cpp"
        break;

        case 1784: /* alias_clause: ColId '(' name_list ')'  */
#line 12782 "gram.y"
        {
            (yyval.alias) = makeNode(Alias);
            (yyval.alias)->aliasname = (yyvsp[-3].str);
            (yyval.alias)->colnames = (yyvsp[-1].list);
        }
#line 42663 "gram.cpp"
        break;

        case 1785: /* alias_clause: ColId  */
#line 12788 "gram.y"
        {
            (yyval.alias) = makeNode(Alias);
            (yyval.alias)->aliasname = (yyvsp[0].str);
        }
#line 42672 "gram.cpp"
        break;

        case 1786: /* opt_alias_clause: alias_clause  */
#line 12794 "gram.y"
        {
            (yyval.alias) = (yyvsp[0].alias);
        }
#line 42678 "gram.cpp"
        break;

        case 1787: /* opt_alias_clause: %empty  */
#line 12795 "gram.y"
        {
            (yyval.alias) = NULL;
        }
#line 42684 "gram.cpp"
        break;

        case 1788: /* func_alias_clause: alias_clause  */
#line 12804 "gram.y"
        {
            (yyval.list) = list_make2((yyvsp[0].alias), NIL);
        }
#line 42692 "gram.cpp"
        break;

        case 1789: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 12808 "gram.y"
        {
            (yyval.list) = list_make2(NULL, (yyvsp[-1].list));
        }
#line 42700 "gram.cpp"
        break;

        case 1790: /* func_alias_clause: AS ColId '(' TableFuncElementList ')'  */
#line 12812 "gram.y"
        {
            Alias* a = makeNode(Alias);
            a->aliasname = (yyvsp[-3].str);
            (yyval.list) = list_make2(a, (yyvsp[-1].list));
        }
#line 42710 "gram.cpp"
        break;

        case 1791: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 12818 "gram.y"
        {
            Alias* a = makeNode(Alias);
            a->aliasname = (yyvsp[-3].str);
            (yyval.list) = list_make2(a, (yyvsp[-1].list));
        }
#line 42720 "gram.cpp"
        break;

        case 1792: /* func_alias_clause: %empty  */
#line 12824 "gram.y"
        {
            (yyval.list) = list_make2(NULL, NIL);
        }
#line 42728 "gram.cpp"
        break;

        case 1793: /* join_type: FULL join_outer  */
#line 12829 "gram.y"
        {
            (yyval.jtype) = JOIN_FULL;
        }
#line 42734 "gram.cpp"
        break;

        case 1794: /* join_type: LEFT join_outer  */
#line 12830 "gram.y"
        {
            (yyval.jtype) = JOIN_LEFT;
        }
#line 42740 "gram.cpp"
        break;

        case 1795: /* join_type: RIGHT join_outer  */
#line 12831 "gram.y"
        {
            (yyval.jtype) = JOIN_RIGHT;
        }
#line 42746 "gram.cpp"
        break;

        case 1796: /* join_type: INNER_P  */
#line 12832 "gram.y"
        {
            (yyval.jtype) = JOIN_INNER;
        }
#line 42752 "gram.cpp"
        break;

        case 1797: /* join_outer: OUTER_P  */
#line 12836 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 42758 "gram.cpp"
        break;

        case 1798: /* join_outer: %empty  */
#line 12837 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 42764 "gram.cpp"
        break;

        case 1799: /* join_qual: USING '(' name_list ')'  */
#line 12849 "gram.y"
        {
            (yyval.node) = (Node*) (yyvsp[-1].list);
        }
#line 42770 "gram.cpp"
        break;

        case 1800: /* join_qual: ON a_expr  */
#line 12850 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 42776 "gram.cpp"
        break;

        case 1801: /* relation_expr: qualified_name  */
#line 12856 "gram.y"
        {
            /* default inheritance */
            (yyval.range) = (yyvsp[0].range);
            (yyval.range)->inhOpt = INH_DEFAULT;
            (yyval.range)->alias = NULL;
        }
#line 42787 "gram.cpp"
        break;

        case 1802: /* relation_expr: qualified_name '*'  */
#line 12863 "gram.y"
        {
            /* inheritance query */
            (yyval.range) = (yyvsp[-1].range);
            (yyval.range)->inhOpt = INH_YES;
            (yyval.range)->alias = NULL;
        }
#line 42798 "gram.cpp"
        break;

        case 1803: /* relation_expr: ONLY qualified_name  */
#line 12870 "gram.y"
        {
            /* no inheritance */
            (yyval.range) = (yyvsp[0].range);
            (yyval.range)->inhOpt = INH_NO;
            (yyval.range)->alias = NULL;
        }
#line 42809 "gram.cpp"
        break;

        case 1804: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 12877 "gram.y"
        {
            /* no inheritance, SQL99-style syntax */
            (yyval.range) = (yyvsp[-1].range);
            (yyval.range)->inhOpt = INH_NO;
            (yyval.range)->alias = NULL;
        }
#line 42820 "gram.cpp"
        break;

        case 1805: /* relation_expr_list: relation_expr  */
#line 12887 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].range));
        }
#line 42826 "gram.cpp"
        break;

        case 1806: /* relation_expr_list: relation_expr_list ',' relation_expr  */
#line 12888 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range));
        }
#line 42832 "gram.cpp"
        break;

        case 1807: /* relation_expr_opt_alias: relation_expr  */
#line 12902 "gram.y"
        {
            (yyval.range) = (yyvsp[0].range);
        }
#line 42840 "gram.cpp"
        break;

        case 1808: /* relation_expr_opt_alias: relation_expr ColId  */
#line 12906 "gram.y"
        {
            Alias* alias = makeNode(Alias);
            alias->aliasname = (yyvsp[0].str);
            (yyvsp[-1].range)->alias = alias;
            (yyval.range) = (yyvsp[-1].range);
        }
#line 42851 "gram.cpp"
        break;

        case 1809: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 12913 "gram.y"
        {
            Alias* alias = makeNode(Alias);
            alias->aliasname = (yyvsp[0].str);
            (yyvsp[-2].range)->alias = alias;
            (yyval.range) = (yyvsp[-2].range);
        }
#line 42862 "gram.cpp"
        break;

        case 1810: /* func_table: func_expr_windowless opt_ordinality  */
#line 12934 "gram.y"
        {
            RangeFunction* n = makeNode(RangeFunction);
            n->lateral = false;
            n->ordinality = (yyvsp[0].boolean);
            n->is_rowsfrom = false;
            n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
            /* alias and coldeflist are set by table_ref production */
            (yyval.node) = (Node*) n;
        }
#line 42876 "gram.cpp"
        break;

        case 1811: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 12944 "gram.y"
        {
            RangeFunction* n = makeNode(RangeFunction);
            n->lateral = false;
            n->ordinality = (yyvsp[0].boolean);
            n->is_rowsfrom = true;
            n->functions = (yyvsp[-2].list);
            /* alias and coldeflist are set by table_ref production */
            (yyval.node) = (Node*) n;
        }
#line 42890 "gram.cpp"
        break;

        case 1812: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 12956 "gram.y"
        {
            (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list));
        }
#line 42896 "gram.cpp"
        break;

        case 1813: /* rowsfrom_list: rowsfrom_item  */
#line 12960 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].list));
        }
#line 42902 "gram.cpp"
        break;

        case 1814: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 12961 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list));
        }
#line 42908 "gram.cpp"
        break;

        case 1815: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 12964 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 42914 "gram.cpp"
        break;

        case 1816: /* opt_col_def_list: %empty  */
#line 12965 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 42920 "gram.cpp"
        break;

        case 1817: /* opt_ordinality: WITH_ORDINALITY  */
#line 12968 "gram.y"
        {
            (yyval.boolean) = true;
        }
#line 42926 "gram.cpp"
        break;

        case 1818: /* opt_ordinality: %empty  */
#line 12969 "gram.y"
        {
            (yyval.boolean) = false;
        }
#line 42932 "gram.cpp"
        break;

        case 1819: /* where_clause: WHERE a_expr  */
#line 12974 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 42938 "gram.cpp"
        break;

        case 1820: /* where_clause: %empty  */
#line 12975 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 42944 "gram.cpp"
        break;

        case 1821: /* where_or_current_clause: WHERE a_expr  */
#line 12980 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 42950 "gram.cpp"
        break;

        case 1822: /* where_or_current_clause: WHERE CURRENT_P OF cursor_name  */
#line 12982 "gram.y"
        {
            CurrentOfExpr* n = makeNode(CurrentOfExpr);
            /* cvarno is filled in by parse analysis */
            n->cursor_name = (yyvsp[0].str);
            n->cursor_param = 0;
            (yyval.node) = (Node*) n;
        }
#line 42962 "gram.cpp"
        break;

        case 1823: /* where_or_current_clause: %empty  */
#line 12989 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 42968 "gram.cpp"
        break;

        case 1824: /* OptTableFuncElementList: TableFuncElementList  */
#line 12994 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 42974 "gram.cpp"
        break;

        case 1825: /* OptTableFuncElementList: %empty  */
#line 12995 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 42980 "gram.cpp"
        break;

        case 1826: /* TableFuncElementList: TableFuncElement  */
#line 13000 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 42988 "gram.cpp"
        break;

        case 1827: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 13004 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 42996 "gram.cpp"
        break;

        case 1828: /* TableFuncElement: ColId Typename opt_collate_clause  */
#line 13010 "gram.y"
        {
            ColumnDef* n = makeNode(ColumnDef);
            n->colname = (yyvsp[-2].str);
            n->typeName = (yyvsp[-1].typnam);
            n->inhcount = 0;
            n->is_local = true;
            n->is_not_null = false;
            n->is_from_type = false;
            n->storage = 0;
            n->raw_default = NULL;
            n->cooked_default = NULL;
            n->collClause = (CollateClause*) (yyvsp[0].node);
            n->collOid = InvalidOid;
            n->constraints = NIL;
            n->location = (yylsp[-2]);
            (yyval.node) = (Node*) n;
        }
#line 43018 "gram.cpp"
        break;

        case 1829: /* Typename: SimpleTypename opt_array_bounds  */
#line 13040 "gram.y"
        {
            (yyval.typnam) = (yyvsp[-1].typnam);
            (yyval.typnam)->arrayBounds = (yyvsp[0].list);
        }
#line 43027 "gram.cpp"
        break;

        case 1830: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 13045 "gram.y"
        {
            (yyval.typnam) = (yyvsp[-1].typnam);
            (yyval.typnam)->arrayBounds = (yyvsp[0].list);
            (yyval.typnam)->setof = TRUE;
        }
#line 43037 "gram.cpp"
        break;

        case 1831: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 13052 "gram.y"
        {
            (yyval.typnam) = (yyvsp[-4].typnam);
            (yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
        }
#line 43046 "gram.cpp"
        break;

        case 1832: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 13057 "gram.y"
        {
            (yyval.typnam) = (yyvsp[-4].typnam);
            (yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
            (yyval.typnam)->setof = TRUE;
        }
#line 43056 "gram.cpp"
        break;

        case 1833: /* Typename: SimpleTypename ARRAY  */
#line 13063 "gram.y"
        {
            (yyval.typnam) = (yyvsp[-1].typnam);
            (yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
        }
#line 43065 "gram.cpp"
        break;

        case 1834: /* Typename: SETOF SimpleTypename ARRAY  */
#line 13068 "gram.y"
        {
            (yyval.typnam) = (yyvsp[-1].typnam);
            (yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
            (yyval.typnam)->setof = TRUE;
        }
#line 43075 "gram.cpp"
        break;

        case 1835: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 13077 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1));
        }
#line 43081 "gram.cpp"
        break;

        case 1836: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 13079 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival)));
        }
#line 43087 "gram.cpp"
        break;

        case 1837: /* opt_array_bounds: %empty  */
#line 13081 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 43093 "gram.cpp"
        break;

        case 1838: /* SimpleTypename: GenericType  */
#line 13085 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 43099 "gram.cpp"
        break;

        case 1839: /* SimpleTypename: Numeric  */
#line 13086 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 43105 "gram.cpp"
        break;

        case 1840: /* SimpleTypename: Bit  */
#line 13087 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 43111 "gram.cpp"
        break;

        case 1841: /* SimpleTypename: Character  */
#line 13088 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 43117 "gram.cpp"
        break;

        case 1842: /* SimpleTypename: ConstDatetime  */
#line 13089 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 43123 "gram.cpp"
        break;

        case 1843: /* SimpleTypename: ConstInterval opt_interval  */
#line 13091 "gram.y"
        {
            (yyval.typnam) = (yyvsp[-1].typnam);
            (yyval.typnam)->typmods = (yyvsp[0].list);
        }
#line 43132 "gram.cpp"
        break;

        case 1844: /* SimpleTypename: ConstInterval '(' Iconst ')' opt_interval  */
#line 13096 "gram.y"
        {
            (yyval.typnam) = (yyvsp[-4].typnam);
            if ((yyvsp[0].list) != NIL) {
                if (list_length((yyvsp[0].list)) != 1)
                    ereport(ERROR,
                            errcode(ERRCODE_SYNTAX_ERROR),
                            errmsg("interval precision specified twice"),
                            parser_errposition((yylsp[-4])));
                (yyval.typnam)->typmods = lappend((yyvsp[0].list), makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
            } else
                (yyval.typnam)->typmods =
                    list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1), makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
        }
#line 43152 "gram.cpp"
        break;

        case 1845: /* ConstTypename: Numeric  */
#line 13125 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 43158 "gram.cpp"
        break;

        case 1846: /* ConstTypename: ConstBit  */
#line 13126 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 43164 "gram.cpp"
        break;

        case 1847: /* ConstTypename: ConstCharacter  */
#line 13127 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 43170 "gram.cpp"
        break;

        case 1848: /* ConstTypename: ConstDatetime  */
#line 13128 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 43176 "gram.cpp"
        break;

        case 1849: /* GenericType: type_function_name opt_type_modifiers  */
#line 13140 "gram.y"
        {
            (yyval.typnam) = makeTypeName((yyvsp[-1].str));
            (yyval.typnam)->typmods = (yyvsp[0].list);
            (yyval.typnam)->location = (yylsp[-1]);
        }
#line 43186 "gram.cpp"
        break;

        case 1850: /* GenericType: type_function_name attrs opt_type_modifiers  */
#line 13146 "gram.y"
        {
            (yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-2].str)), (yyvsp[-1].list)));
            (yyval.typnam)->typmods = (yyvsp[0].list);
            (yyval.typnam)->location = (yylsp[-2]);
        }
#line 43196 "gram.cpp"
        break;

        case 1851: /* opt_type_modifiers: '(' expr_list ')'  */
#line 13153 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 43202 "gram.cpp"
        break;

        case 1852: /* opt_type_modifiers: %empty  */
#line 13154 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 43208 "gram.cpp"
        break;

        case 1853: /* Numeric: INT_P  */
#line 13161 "gram.y"
        {
            (yyval.typnam) = SystemTypeName("int4");
            (yyval.typnam)->location = (yylsp[0]);
        }
#line 43217 "gram.cpp"
        break;

        case 1854: /* Numeric: INTEGER  */
#line 13166 "gram.y"
        {
            (yyval.typnam) = SystemTypeName("int4");
            (yyval.typnam)->location = (yylsp[0]);
        }
#line 43226 "gram.cpp"
        break;

        case 1855: /* Numeric: SMALLINT  */
#line 13171 "gram.y"
        {
            (yyval.typnam) = SystemTypeName("int2");
            (yyval.typnam)->location = (yylsp[0]);
        }
#line 43235 "gram.cpp"
        break;

        case 1856: /* Numeric: BIGINT  */
#line 13176 "gram.y"
        {
            (yyval.typnam) = SystemTypeName("int8_t");
            (yyval.typnam)->location = (yylsp[0]);
        }
#line 43244 "gram.cpp"
        break;

        case 1857: /* Numeric: REAL  */
#line 13181 "gram.y"
        {
            (yyval.typnam) = SystemTypeName("float4");
            (yyval.typnam)->location = (yylsp[0]);
        }
#line 43253 "gram.cpp"
        break;

        case 1858: /* Numeric: FLOAT_P opt_float  */
#line 13186 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
            (yyval.typnam)->location = (yylsp[-1]);
        }
#line 43262 "gram.cpp"
        break;

        case 1859: /* Numeric: DOUBLE_P PRECISION  */
#line 13191 "gram.y"
        {
            (yyval.typnam) = SystemTypeName("float8");
            (yyval.typnam)->location = (yylsp[-1]);
        }
#line 43271 "gram.cpp"
        break;

        case 1860: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 13196 "gram.y"
        {
            (yyval.typnam) = SystemTypeName("numeric");
            (yyval.typnam)->typmods = (yyvsp[0].list);
            (yyval.typnam)->location = (yylsp[-1]);
        }
#line 43281 "gram.cpp"
        break;

        case 1861: /* Numeric: DEC opt_type_modifiers  */
#line 13202 "gram.y"
        {
            (yyval.typnam) = SystemTypeName("numeric");
            (yyval.typnam)->typmods = (yyvsp[0].list);
            (yyval.typnam)->location = (yylsp[-1]);
        }
#line 43291 "gram.cpp"
        break;

        case 1862: /* Numeric: NUMERIC opt_type_modifiers  */
#line 13208 "gram.y"
        {
            (yyval.typnam) = SystemTypeName("numeric");
            (yyval.typnam)->typmods = (yyvsp[0].list);
            (yyval.typnam)->location = (yylsp[-1]);
        }
#line 43301 "gram.cpp"
        break;

        case 1863: /* Numeric: BOOLEAN_P  */
#line 13214 "gram.y"
        {
            (yyval.typnam) = SystemTypeName("bool");
            (yyval.typnam)->location = (yylsp[0]);
        }
#line 43310 "gram.cpp"
        break;

        case 1864: /* opt_float: '(' Iconst ')'  */
#line 13221 "gram.y"
        {
            /*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
            if ((yyvsp[-1].ival) < 1)
                ereport(ERROR,
                        errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                        errmsg("precision for type float must be at least 1 bit"),
                        parser_errposition((yylsp[-1])));
            else if ((yyvsp[-1].ival) <= 24)
                (yyval.typnam) = SystemTypeName("float4");
            else if ((yyvsp[-1].ival) <= 53)
                (yyval.typnam) = SystemTypeName("float8");
            else
                ereport(ERROR,
                        errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                        errmsg("precision for type float must be less than 54 bits"),
                        parser_errposition((yylsp[-1])));
        }
#line 43335 "gram.cpp"
        break;

        case 1865: /* opt_float: %empty  */
#line 13242 "gram.y"
        {
            (yyval.typnam) = SystemTypeName("float8");
        }
#line 43343 "gram.cpp"
        break;

        case 1866: /* Bit: BitWithLength  */
#line 13252 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 43351 "gram.cpp"
        break;

        case 1867: /* Bit: BitWithoutLength  */
#line 13256 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 43359 "gram.cpp"
        break;

        case 1868: /* ConstBit: BitWithLength  */
#line 13264 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 43367 "gram.cpp"
        break;

        case 1869: /* ConstBit: BitWithoutLength  */
#line 13268 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
            (yyval.typnam)->typmods = NIL;
        }
#line 43376 "gram.cpp"
        break;

        case 1870: /* BitWithLength: BIT opt_varying '(' expr_list ')'  */
#line 13276 "gram.y"
        {
            char* typname;

            typname = (yyvsp[-3].boolean) ? pstrdup("varbit") : pstrdup("bit");
            (yyval.typnam) = SystemTypeName(typname);
            (yyval.typnam)->typmods = (yyvsp[-1].list);
            (yyval.typnam)->location = (yylsp[-4]);
        }
#line 43389 "gram.cpp"
        break;

        case 1871: /* BitWithoutLength: BIT opt_varying  */
#line 13288 "gram.y"
        {
            /* bit defaults to bit(1), varbit to no limit */
            if ((yyvsp[0].boolean)) {
                (yyval.typnam) = SystemTypeName("varbit");
            } else {
                (yyval.typnam) = SystemTypeName("bit");
                (yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
            }
            (yyval.typnam)->location = (yylsp[-1]);
        }
#line 43407 "gram.cpp"
        break;

        case 1872: /* Character: CharacterWithLength  */
#line 13309 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 43415 "gram.cpp"
        break;

        case 1873: /* Character: CharacterWithoutLength  */
#line 13313 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 43423 "gram.cpp"
        break;

        case 1874: /* ConstCharacter: CharacterWithLength  */
#line 13319 "gram.y"
        {
            (yyval.typnam) = (yyvsp[0].typnam);
        }
#line 43431 "gram.cpp"
        break;

        case 1875: /* ConstCharacter: CharacterWithoutLength  */
#line 13323 "gram.y"
        {
            /* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
            (yyval.typnam) = (yyvsp[0].typnam);
            (yyval.typnam)->typmods = NIL;
        }
#line 43446 "gram.cpp"
        break;

        case 1876: /* CharacterWithLength: character '(' Iconst ')' opt_charset  */
#line 13336 "gram.y"
        {
            if (((yyvsp[0].str) != NULL) && (strcmp((yyvsp[0].str), "sql_text") != 0))
                (yyvsp[-4].str) = psprintf("%s_%s", (yyvsp[-4].str), (yyvsp[0].str));

            (yyval.typnam) = SystemTypeName((yyvsp[-4].str));
            (yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
            (yyval.typnam)->location = (yylsp[-4]);
        }
#line 43459 "gram.cpp"
        break;

        case 1877: /* CharacterWithoutLength: character opt_charset  */
#line 13347 "gram.y"
        {
            if (((yyvsp[0].str) != NULL) && (strcmp((yyvsp[0].str), "sql_text") != 0))
                (yyvsp[-1].str) = psprintf("%s_%s", (yyvsp[-1].str), (yyvsp[0].str));

            (yyval.typnam) = SystemTypeName((yyvsp[-1].str));

            /* char defaults to char(1), varchar to no limit */
            if (strcmp((yyvsp[-1].str), "bpchar") == 0)
                (yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));

            (yyval.typnam)->location = (yylsp[-1]);
        }
#line 43476 "gram.cpp"
        break;

        case 1878: /* character: CHARACTER opt_varying  */
#line 13362 "gram.y"
        {
            (yyval.str) = (yyvsp[0].boolean) ? pstrdup("varchar") : pstrdup("bpchar");
        }
#line 43482 "gram.cpp"
        break;

        case 1879: /* character: CHAR_P opt_varying  */
#line 13364 "gram.y"
        {
            (yyval.str) = (yyvsp[0].boolean) ? pstrdup("varchar") : pstrdup("bpchar");
        }
#line 43488 "gram.cpp"
        break;

        case 1880: /* character: VARCHAR  */
#line 13366 "gram.y"
        {
            (yyval.str) = pstrdup("varchar");
        }
#line 43494 "gram.cpp"
        break;

        case 1881: /* character: NATIONAL CHARACTER opt_varying  */
#line 13368 "gram.y"
        {
            (yyval.str) = (yyvsp[0].boolean) ? pstrdup("varchar") : pstrdup("bpchar");
        }
#line 43500 "gram.cpp"
        break;

        case 1882: /* character: NATIONAL CHAR_P opt_varying  */
#line 13370 "gram.y"
        {
            (yyval.str) = (yyvsp[0].boolean) ? pstrdup("varchar") : pstrdup("bpchar");
        }
#line 43506 "gram.cpp"
        break;

        case 1883: /* character: NCHAR opt_varying  */
#line 13372 "gram.y"
        {
            (yyval.str) = (yyvsp[0].boolean) ? pstrdup("varchar") : pstrdup("bpchar");
        }
#line 43512 "gram.cpp"
        break;

        case 1884: /* opt_varying: VARYING  */
#line 13376 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 43518 "gram.cpp"
        break;

        case 1885: /* opt_varying: %empty  */
#line 13377 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 43524 "gram.cpp"
        break;

        case 1886: /* opt_charset: CHARACTER SET ColId  */
#line 13381 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 43530 "gram.cpp"
        break;

        case 1887: /* opt_charset: %empty  */
#line 13382 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 43536 "gram.cpp"
        break;

        case 1888: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 13390 "gram.y"
        {
            if ((yyvsp[0].boolean))
                (yyval.typnam) = SystemTypeName("timestamptz");
            else
                (yyval.typnam) = SystemTypeName("timestamp");
            (yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
            (yyval.typnam)->location = (yylsp[-4]);
        }
#line 43549 "gram.cpp"
        break;

        case 1889: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 13399 "gram.y"
        {
            if ((yyvsp[0].boolean))
                (yyval.typnam) = SystemTypeName("timestamptz");
            else
                (yyval.typnam) = SystemTypeName("timestamp");
            (yyval.typnam)->location = (yylsp[-1]);
        }
#line 43561 "gram.cpp"
        break;

        case 1890: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 13407 "gram.y"
        {
            if ((yyvsp[0].boolean))
                (yyval.typnam) = SystemTypeName("timetz");
            else
                (yyval.typnam) = SystemTypeName("time");
            (yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
            (yyval.typnam)->location = (yylsp[-4]);
        }
#line 43574 "gram.cpp"
        break;

        case 1891: /* ConstDatetime: TIME opt_timezone  */
#line 13416 "gram.y"
        {
            if ((yyvsp[0].boolean))
                (yyval.typnam) = SystemTypeName("timetz");
            else
                (yyval.typnam) = SystemTypeName("time");
            (yyval.typnam)->location = (yylsp[-1]);
        }
#line 43586 "gram.cpp"
        break;

        case 1892: /* ConstInterval: INTERVAL  */
#line 13427 "gram.y"
        {
            (yyval.typnam) = SystemTypeName("interval");
            (yyval.typnam)->location = (yylsp[0]);
        }
#line 43595 "gram.cpp"
        break;

        case 1893: /* opt_timezone: WITH_TIME ZONE  */
#line 13434 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 43601 "gram.cpp"
        break;

        case 1894: /* opt_timezone: WITHOUT TIME ZONE  */
#line 13435 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 43607 "gram.cpp"
        break;

        case 1895: /* opt_timezone: %empty  */
#line 13436 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 43613 "gram.cpp"
        break;

        case 1896: /* opt_interval: YEAR_P  */
#line 13441 "gram.y"
        {
            (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0])));
        }
#line 43619 "gram.cpp"
        break;

        case 1897: /* opt_interval: MONTH_P  */
#line 13443 "gram.y"
        {
            (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0])));
        }
#line 43625 "gram.cpp"
        break;

        case 1898: /* opt_interval: DAY_P  */
#line 13445 "gram.y"
        {
            (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0])));
        }
#line 43631 "gram.cpp"
        break;

        case 1899: /* opt_interval: HOUR_P  */
#line 13447 "gram.y"
        {
            (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0])));
        }
#line 43637 "gram.cpp"
        break;

        case 1900: /* opt_interval: MINUTE_P  */
#line 13449 "gram.y"
        {
            (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0])));
        }
#line 43643 "gram.cpp"
        break;

        case 1901: /* opt_interval: interval_second  */
#line 13451 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 43649 "gram.cpp"
        break;

        case 1902: /* opt_interval: YEAR_P TO MONTH_P  */
#line 13453 "gram.y"
        {
            (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) | INTERVAL_MASK(MONTH), (yylsp[-2])));
        }
#line 43658 "gram.cpp"
        break;

        case 1903: /* opt_interval: DAY_P TO HOUR_P  */
#line 13458 "gram.y"
        {
            (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) | INTERVAL_MASK(HOUR), (yylsp[-2])));
        }
#line 43667 "gram.cpp"
        break;

        case 1904: /* opt_interval: DAY_P TO MINUTE_P  */
#line 13463 "gram.y"
        {
            (yyval.list) =
                list_make1(makeIntConst(INTERVAL_MASK(DAY) | INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE), (yylsp[-2])));
        }
#line 43677 "gram.cpp"
        break;

        case 1905: /* opt_interval: DAY_P TO interval_second  */
#line 13469 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
            linitial((yyval.list)) =
                makeIntConst(INTERVAL_MASK(DAY) | INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE) | INTERVAL_MASK(SECOND),
                             (yylsp[-2]));
        }
#line 43689 "gram.cpp"
        break;

        case 1906: /* opt_interval: HOUR_P TO MINUTE_P  */
#line 13477 "gram.y"
        {
            (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE), (yylsp[-2])));
        }
#line 43698 "gram.cpp"
        break;

        case 1907: /* opt_interval: HOUR_P TO interval_second  */
#line 13482 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
            linitial((yyval.list)) =
                makeIntConst(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE) | INTERVAL_MASK(SECOND), (yylsp[-2]));
        }
#line 43709 "gram.cpp"
        break;

        case 1908: /* opt_interval: MINUTE_P TO interval_second  */
#line 13489 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
            linitial((yyval.list)) = makeIntConst(INTERVAL_MASK(MINUTE) | INTERVAL_MASK(SECOND), (yylsp[-2]));
        }
#line 43719 "gram.cpp"
        break;

        case 1909: /* opt_interval: %empty  */
#line 13495 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 43725 "gram.cpp"
        break;

        case 1910: /* interval_second: SECOND_P  */
#line 13500 "gram.y"
        {
            (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0])));
        }
#line 43733 "gram.cpp"
        break;

        case 1911: /* interval_second: SECOND_P '(' Iconst ')'  */
#line 13504 "gram.y"
        {
            (yyval.list) = list_make2(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[-3])),
                                      makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
        }
#line 43742 "gram.cpp"
        break;

        case 1912: /* a_expr: c_expr  */
#line 13533 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 43748 "gram.cpp"
        break;

        case 1913: /* a_expr: a_expr TYPECAST Typename  */
#line 13535 "gram.y"
        {
            (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1]));
        }
#line 43754 "gram.cpp"
        break;

        case 1914: /* a_expr: a_expr COLLATE any_name  */
#line 13537 "gram.y"
        {
            CollateClause* n = makeNode(CollateClause);
            n->arg = (yyvsp[-2].node);
            n->collname = (yyvsp[0].list);
            n->location = (yylsp[-1]);
            (yyval.node) = (Node*) n;
        }
#line 43766 "gram.cpp"
        break;

        case 1915: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 13545 "gram.y"
        {
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("timezone"),
                                                list_make2((yyvsp[0].node), (yyvsp[-4].node)),
                                                (yylsp[-3]));
        }
#line 43776 "gram.cpp"
        break;

        case 1916: /* a_expr: '+' a_expr  */
#line 13560 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1]));
        }
#line 43782 "gram.cpp"
        break;

        case 1917: /* a_expr: '-' a_expr  */
#line 13562 "gram.y"
        {
            (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1]));
        }
#line 43788 "gram.cpp"
        break;

        case 1918: /* a_expr: a_expr '+' a_expr  */
#line 13564 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 43794 "gram.cpp"
        break;

        case 1919: /* a_expr: a_expr '-' a_expr  */
#line 13566 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 43800 "gram.cpp"
        break;

        case 1920: /* a_expr: a_expr '*' a_expr  */
#line 13568 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 43806 "gram.cpp"
        break;

        case 1921: /* a_expr: a_expr '/' a_expr  */
#line 13570 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 43812 "gram.cpp"
        break;

        case 1922: /* a_expr: a_expr '%' a_expr  */
#line 13572 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 43818 "gram.cpp"
        break;

        case 1923: /* a_expr: a_expr '^' a_expr  */
#line 13574 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 43824 "gram.cpp"
        break;

        case 1924: /* a_expr: a_expr '<' a_expr  */
#line 13576 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 43830 "gram.cpp"
        break;

        case 1925: /* a_expr: a_expr '>' a_expr  */
#line 13578 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 43836 "gram.cpp"
        break;

        case 1926: /* a_expr: a_expr '=' a_expr  */
#line 13580 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 43842 "gram.cpp"
        break;

        case 1927: /* a_expr: a_expr qual_Op a_expr  */
#line 13583 "gram.y"
        {
            (yyval.node) =
                (Node*) makeA_Expr(AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 43848 "gram.cpp"
        break;

        case 1928: /* a_expr: qual_Op a_expr  */
#line 13585 "gram.y"
        {
            (yyval.node) = (Node*) makeA_Expr(AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1]));
        }
#line 43854 "gram.cpp"
        break;

        case 1929: /* a_expr: a_expr qual_Op  */
#line 13587 "gram.y"
        {
            (yyval.node) = (Node*) makeA_Expr(AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0]));
        }
#line 43860 "gram.cpp"
        break;

        case 1930: /* a_expr: a_expr AND a_expr  */
#line 13590 "gram.y"
        {
            (yyval.node) = (Node*) makeA_Expr(AEXPR_AND, NIL, (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 43866 "gram.cpp"
        break;

        case 1931: /* a_expr: a_expr OR a_expr  */
#line 13592 "gram.y"
        {
            (yyval.node) = (Node*) makeA_Expr(AEXPR_OR, NIL, (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 43872 "gram.cpp"
        break;

        case 1932: /* a_expr: NOT a_expr  */
#line 13594 "gram.y"
        {
            (yyval.node) = (Node*) makeA_Expr(AEXPR_NOT, NIL, NULL, (yyvsp[0].node), (yylsp[-1]));
        }
#line 43878 "gram.cpp"
        break;

        case 1933: /* a_expr: a_expr LIKE a_expr  */
#line 13597 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "~~", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 43884 "gram.cpp"
        break;

        case 1934: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 13599 "gram.y"
        {
            FuncCall* n =
                makeFuncCall(SystemFuncName("like_escape"), list_make2((yyvsp[-2].node), (yyvsp[0].node)), (yylsp[-3]));
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "~~", (yyvsp[-4].node), (Node*) n, (yylsp[-3]));
        }
#line 43895 "gram.cpp"
        break;

        case 1935: /* a_expr: a_expr NOT LIKE a_expr  */
#line 13606 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "!~~", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
        }
#line 43901 "gram.cpp"
        break;

        case 1936: /* a_expr: a_expr NOT LIKE a_expr ESCAPE a_expr  */
#line 13608 "gram.y"
        {
            FuncCall* n =
                makeFuncCall(SystemFuncName("like_escape"), list_make2((yyvsp[-2].node), (yyvsp[0].node)), (yylsp[-4]));
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "!~~", (yyvsp[-5].node), (Node*) n, (yylsp[-4]));
        }
#line 43912 "gram.cpp"
        break;

        case 1937: /* a_expr: a_expr ILIKE a_expr  */
#line 13615 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "~~*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 43918 "gram.cpp"
        break;

        case 1938: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 13617 "gram.y"
        {
            FuncCall* n =
                makeFuncCall(SystemFuncName("like_escape"), list_make2((yyvsp[-2].node), (yyvsp[0].node)), (yylsp[-3]));
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "~~*", (yyvsp[-4].node), (Node*) n, (yylsp[-3]));
        }
#line 43929 "gram.cpp"
        break;

        case 1939: /* a_expr: a_expr NOT ILIKE a_expr  */
#line 13624 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "!~~*", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
        }
#line 43935 "gram.cpp"
        break;

        case 1940: /* a_expr: a_expr NOT ILIKE a_expr ESCAPE a_expr  */
#line 13626 "gram.y"
        {
            FuncCall* n =
                makeFuncCall(SystemFuncName("like_escape"), list_make2((yyvsp[-2].node), (yyvsp[0].node)), (yylsp[-4]));
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "!~~*", (yyvsp[-5].node), (Node*) n, (yylsp[-4]));
        }
#line 43946 "gram.cpp"
        break;

        case 1941: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 13634 "gram.y"
        {
            FuncCall* n = makeFuncCall(SystemFuncName("similar_escape"),
                                       list_make2((yyvsp[0].node), makeNullAConst(-1)),
                                       (yylsp[-2]));
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "~", (yyvsp[-3].node), (Node*) n, (yylsp[-2]));
        }
#line 43957 "gram.cpp"
        break;

        case 1942: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 13641 "gram.y"
        {
            FuncCall* n = makeFuncCall(SystemFuncName("similar_escape"),
                                       list_make2((yyvsp[-2].node), (yyvsp[0].node)),
                                       (yylsp[-4]));
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "~", (yyvsp[-5].node), (Node*) n, (yylsp[-4]));
        }
#line 43968 "gram.cpp"
        break;

        case 1943: /* a_expr: a_expr NOT SIMILAR TO a_expr  */
#line 13648 "gram.y"
        {
            FuncCall* n = makeFuncCall(SystemFuncName("similar_escape"),
                                       list_make2((yyvsp[0].node), makeNullAConst(-1)),
                                       (yylsp[-3]));
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "!~", (yyvsp[-4].node), (Node*) n, (yylsp[-3]));
        }
#line 43979 "gram.cpp"
        break;

        case 1944: /* a_expr: a_expr NOT SIMILAR TO a_expr ESCAPE a_expr  */
#line 13655 "gram.y"
        {
            FuncCall* n = makeFuncCall(SystemFuncName("similar_escape"),
                                       list_make2((yyvsp[-2].node), (yyvsp[0].node)),
                                       (yylsp[-5]));
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "!~", (yyvsp[-6].node), (Node*) n, (yylsp[-5]));
        }
#line 43990 "gram.cpp"
        break;

        case 1945: /* a_expr: a_expr IS NULL_P  */
#line 13672 "gram.y"
        {
            NullTest* n = makeNode(NullTest);
            n->arg = (Expr*) (yyvsp[-2].node);
            n->nulltesttype = IS_NULL;
            (yyval.node) = (Node*) n;
        }
#line 44001 "gram.cpp"
        break;

        case 1946: /* a_expr: a_expr ISNULL  */
#line 13679 "gram.y"
        {
            NullTest* n = makeNode(NullTest);
            n->arg = (Expr*) (yyvsp[-1].node);
            n->nulltesttype = IS_NULL;
            (yyval.node) = (Node*) n;
        }
#line 44012 "gram.cpp"
        break;

        case 1947: /* a_expr: a_expr IS NOT NULL_P  */
#line 13686 "gram.y"
        {
            NullTest* n = makeNode(NullTest);
            n->arg = (Expr*) (yyvsp[-3].node);
            n->nulltesttype = IS_NOT_NULL;
            (yyval.node) = (Node*) n;
        }
#line 44023 "gram.cpp"
        break;

        case 1948: /* a_expr: a_expr NOTNULL  */
#line 13693 "gram.y"
        {
            NullTest* n = makeNode(NullTest);
            n->arg = (Expr*) (yyvsp[-1].node);
            n->nulltesttype = IS_NOT_NULL;
            (yyval.node) = (Node*) n;
        }
#line 44034 "gram.cpp"
        break;

        case 1949: /* a_expr: row OVERLAPS row  */
#line 13700 "gram.y"
        {
            if (list_length((yyvsp[-2].list)) != 2)
                ereport(ERROR,
                        errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("wrong number of parameters on left side of OVERLAPS expression"),
                        parser_errposition((yylsp[-2])));
            if (list_length((yyvsp[0].list)) != 2)
                ereport(ERROR,
                        errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("wrong number of parameters on right side of OVERLAPS expression"),
                        parser_errposition((yylsp[0])));
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("overlaps"),
                                                list_concat((yyvsp[-2].list), (yyvsp[0].list)),
                                                (yylsp[-1]));
        }
#line 44054 "gram.cpp"
        break;

        case 1950: /* a_expr: a_expr IS TRUE_P  */
#line 13716 "gram.y"
        {
            BooleanTest* b = makeNode(BooleanTest);
            b->arg = (Expr*) (yyvsp[-2].node);
            b->booltesttype = IS_TRUE;
            (yyval.node) = (Node*) b;
        }
#line 44065 "gram.cpp"
        break;

        case 1951: /* a_expr: a_expr IS NOT TRUE_P  */
#line 13723 "gram.y"
        {
            BooleanTest* b = makeNode(BooleanTest);
            b->arg = (Expr*) (yyvsp[-3].node);
            b->booltesttype = IS_NOT_TRUE;
            (yyval.node) = (Node*) b;
        }
#line 44076 "gram.cpp"
        break;

        case 1952: /* a_expr: a_expr IS FALSE_P  */
#line 13730 "gram.y"
        {
            BooleanTest* b = makeNode(BooleanTest);
            b->arg = (Expr*) (yyvsp[-2].node);
            b->booltesttype = IS_FALSE;
            (yyval.node) = (Node*) b;
        }
#line 44087 "gram.cpp"
        break;

        case 1953: /* a_expr: a_expr IS NOT FALSE_P  */
#line 13737 "gram.y"
        {
            BooleanTest* b = makeNode(BooleanTest);
            b->arg = (Expr*) (yyvsp[-3].node);
            b->booltesttype = IS_NOT_FALSE;
            (yyval.node) = (Node*) b;
        }
#line 44098 "gram.cpp"
        break;

        case 1954: /* a_expr: a_expr IS UNKNOWN  */
#line 13744 "gram.y"
        {
            BooleanTest* b = makeNode(BooleanTest);
            b->arg = (Expr*) (yyvsp[-2].node);
            b->booltesttype = IS_UNKNOWN;
            (yyval.node) = (Node*) b;
        }
#line 44109 "gram.cpp"
        break;

        case 1955: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 13751 "gram.y"
        {
            BooleanTest* b = makeNode(BooleanTest);
            b->arg = (Expr*) (yyvsp[-3].node);
            b->booltesttype = IS_NOT_UNKNOWN;
            (yyval.node) = (Node*) b;
        }
#line 44120 "gram.cpp"
        break;

        case 1956: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 13758 "gram.y"
        {
            (yyval.node) =
                (Node*) makeSimpleA_Expr(AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
        }
#line 44128 "gram.cpp"
        break;

        case 1957: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 13762 "gram.y"
        {
            (yyval.node) = (Node*) makeA_Expr(
                AEXPR_NOT,
                NIL,
                NULL,
                (Node*) makeSimpleA_Expr(AEXPR_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4])),
                (yylsp[-4]));

        }
#line 44140 "gram.cpp"
        break;

        case 1958: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 13770 "gram.y"
        {
            (yyval.node) =
                (Node*) makeSimpleA_Expr(AEXPR_OF, "=", (yyvsp[-5].node), (Node*) (yyvsp[-1].list), (yylsp[-4]));
        }
#line 44148 "gram.cpp"
        break;

        case 1959: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 13774 "gram.y"
        {
            (yyval.node) =
                (Node*) makeSimpleA_Expr(AEXPR_OF, "<>", (yyvsp[-6].node), (Node*) (yyvsp[-1].list), (yylsp[-5]));
        }
#line 44156 "gram.cpp"
        break;

        case 1960: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND b_expr  */
#line 13784 "gram.y"
        {
            (yyval.node) = (Node*) makeA_Expr(
                AEXPR_AND,
                NIL,
                (Node*) makeSimpleA_Expr(AEXPR_OP, ">=", (yyvsp[-5].node), (yyvsp[-2].node), (yylsp[-4])),
                (Node*) makeSimpleA_Expr(AEXPR_OP, "<=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4])),
                (yylsp[-4]));
        }
#line 44167 "gram.cpp"
        break;

        case 1961: /* a_expr: a_expr NOT BETWEEN opt_asymmetric b_expr AND b_expr  */
#line 13791 "gram.y"
        {
            (yyval.node) = (Node*) makeA_Expr(
                AEXPR_OR,
                NIL,
                (Node*) makeSimpleA_Expr(AEXPR_OP, "<", (yyvsp[-6].node), (yyvsp[-2].node), (yylsp[-5])),
                (Node*) makeSimpleA_Expr(AEXPR_OP, ">", (yyvsp[-6].node), (yyvsp[0].node), (yylsp[-5])),
                (yylsp[-5]));
        }
#line 44178 "gram.cpp"
        break;

        case 1962: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND b_expr  */
#line 13798 "gram.y"
        {
            (yyval.node) = (Node*) makeA_Expr(
                AEXPR_OR,
                NIL,
                (Node*) makeA_Expr(
                    AEXPR_AND,
                    NIL,
                    (Node*) makeSimpleA_Expr(AEXPR_OP, ">=", (yyvsp[-5].node), (yyvsp[-2].node), (yylsp[-4])),
                    (Node*) makeSimpleA_Expr(AEXPR_OP, "<=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4])),
                    (yylsp[-4])),
                (Node*) makeA_Expr(
                    AEXPR_AND,
                    NIL,
                    (Node*) makeSimpleA_Expr(AEXPR_OP, ">=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4])),
                    (Node*) makeSimpleA_Expr(AEXPR_OP, "<=", (yyvsp[-5].node), (yyvsp[-2].node), (yylsp[-4])),
                    (yylsp[-4])),
                (yylsp[-4]));
        }
#line 44195 "gram.cpp"
        break;

        case 1963: /* a_expr: a_expr NOT BETWEEN SYMMETRIC b_expr AND b_expr  */
#line 13811 "gram.y"
        {
            (yyval.node) = (Node*) makeA_Expr(
                AEXPR_AND,
                NIL,
                (Node*) makeA_Expr(
                    AEXPR_OR,
                    NIL,
                    (Node*) makeSimpleA_Expr(AEXPR_OP, "<", (yyvsp[-6].node), (yyvsp[-2].node), (yylsp[-5])),
                    (Node*) makeSimpleA_Expr(AEXPR_OP, ">", (yyvsp[-6].node), (yyvsp[0].node), (yylsp[-5])),
                    (yylsp[-5])),
                (Node*) makeA_Expr(
                    AEXPR_OR,
                    NIL,
                    (Node*) makeSimpleA_Expr(AEXPR_OP, "<", (yyvsp[-6].node), (yyvsp[0].node), (yylsp[-5])),
                    (Node*) makeSimpleA_Expr(AEXPR_OP, ">", (yyvsp[-6].node), (yyvsp[-2].node), (yylsp[-5])),
                    (yylsp[-5])),
                (yylsp[-5]));
        }
#line 44212 "gram.cpp"
        break;

        case 1964: /* a_expr: a_expr IN_P in_expr  */
#line 13824 "gram.y"
        {
            /* in_expr returns a SubLink or a list of a_exprs */
            if (IsA((yyvsp[0].node), SubLink)) {
                /* generate foo = ANY (subquery) */
                SubLink* n = (SubLink*) (yyvsp[0].node);
                n->subLinkType = ANY_SUBLINK;
                n->testexpr = (yyvsp[-2].node);
                n->operName = list_make1(makeString("="));
                n->location = (yylsp[-1]);
                (yyval.node) = (Node*) n;
            } else {
                /* generate scalar IN expression */
                (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
            }
        }
#line 44235 "gram.cpp"
        break;

        case 1965: /* a_expr: a_expr NOT IN_P in_expr  */
#line 13843 "gram.y"
        {
            /* in_expr returns a SubLink or a list of a_exprs */
            if (IsA((yyvsp[0].node), SubLink)) {
                /* generate NOT (foo = ANY (subquery)) */
                /* Make an = ANY node */
                SubLink* n = (SubLink*) (yyvsp[0].node);
                n->subLinkType = ANY_SUBLINK;
                n->testexpr = (yyvsp[-3].node);
                n->operName = list_make1(makeString("="));
                n->location = (yylsp[-1]);
                /* Stick a NOT on top */
                (yyval.node) = (Node*) makeA_Expr(AEXPR_NOT, NIL, NULL, (Node*) n, (yylsp[-2]));
            } else {
                /* generate scalar NOT IN expression */
                (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
            }
        }
#line 44260 "gram.cpp"
        break;

        case 1966: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 13864 "gram.y"
        {
            SubLink* n = makeNode(SubLink);
            n->subLinkType = static_cast<SubLinkType>((yyvsp[-1].ival));
            n->testexpr = (yyvsp[-3].node);
            n->operName = (yyvsp[-2].list);
            n->subselect = (yyvsp[0].node);
            n->location = (yylsp[-2]);
            (yyval.node) = (Node*) n;
        }
#line 44274 "gram.cpp"
        break;

        case 1967: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 13874 "gram.y"
        {
            if ((yyvsp[-3].ival) == ANY_SUBLINK)
                (yyval.node) =
                    (Node*) makeA_Expr(AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
            else
                (yyval.node) =
                    (Node*) makeA_Expr(AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
        }
#line 44285 "gram.cpp"
        break;

        case 1968: /* a_expr: UNIQUE select_with_parens  */
#line 13881 "gram.y"
        {
            /* Not sure how to get rid of the parentheses
					 * but there are lots of shift/reduce errors without them.
					 *
					 * Should be able to implement this by plopping the entire
					 * select into a node, then transforming the target expressions
					 * from whatever they are into count(*), and testing the
					 * entire result equal to one.
					 * But, will probably implement a separate node in the executor.
					 */
            ereport(ERROR,
                    errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                    errmsg("UNIQUE predicate is not yet implemented"),
                    parser_errposition((yylsp[-1])));
        }
#line 44305 "gram.cpp"
        break;

        case 1969: /* a_expr: a_expr IS DOCUMENT_P  */
#line 13897 "gram.y"
        {
            (yyval.node) = makeXmlExpr(IS_DOCUMENT, NULL, NIL, list_make1((yyvsp[-2].node)), (yylsp[-1]));
        }
#line 44314 "gram.cpp"
        break;

        case 1970: /* a_expr: a_expr IS NOT DOCUMENT_P  */
#line 13902 "gram.y"
        {
            (yyval.node) =
                (Node*) makeA_Expr(AEXPR_NOT,
                                   NIL,
                                   NULL,
                                   makeXmlExpr(IS_DOCUMENT, NULL, NIL, list_make1((yyvsp[-3].node)), (yylsp[-2])),
                                   (yylsp[-2]));
        }
#line 44325 "gram.cpp"
        break;

        case 1971: /* b_expr: c_expr  */
#line 13920 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 44331 "gram.cpp"
        break;

        case 1972: /* b_expr: b_expr TYPECAST Typename  */
#line 13922 "gram.y"
        {
            (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), (yylsp[-1]));
        }
#line 44337 "gram.cpp"
        break;

        case 1973: /* b_expr: '+' b_expr  */
#line 13924 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1]));
        }
#line 44343 "gram.cpp"
        break;

        case 1974: /* b_expr: '-' b_expr  */
#line 13926 "gram.y"
        {
            (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1]));
        }
#line 44349 "gram.cpp"
        break;

        case 1975: /* b_expr: b_expr '+' b_expr  */
#line 13928 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 44355 "gram.cpp"
        break;

        case 1976: /* b_expr: b_expr '-' b_expr  */
#line 13930 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 44361 "gram.cpp"
        break;

        case 1977: /* b_expr: b_expr '*' b_expr  */
#line 13932 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 44367 "gram.cpp"
        break;

        case 1978: /* b_expr: b_expr '/' b_expr  */
#line 13934 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 44373 "gram.cpp"
        break;

        case 1979: /* b_expr: b_expr '%' b_expr  */
#line 13936 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 44379 "gram.cpp"
        break;

        case 1980: /* b_expr: b_expr '^' b_expr  */
#line 13938 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 44385 "gram.cpp"
        break;

        case 1981: /* b_expr: b_expr '<' b_expr  */
#line 13940 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 44391 "gram.cpp"
        break;

        case 1982: /* b_expr: b_expr '>' b_expr  */
#line 13942 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 44397 "gram.cpp"
        break;

        case 1983: /* b_expr: b_expr '=' b_expr  */
#line 13944 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 44403 "gram.cpp"
        break;

        case 1984: /* b_expr: b_expr qual_Op b_expr  */
#line 13946 "gram.y"
        {
            (yyval.node) =
                (Node*) makeA_Expr(AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
        }
#line 44409 "gram.cpp"
        break;

        case 1985: /* b_expr: qual_Op b_expr  */
#line 13948 "gram.y"
        {
            (yyval.node) = (Node*) makeA_Expr(AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1]));
        }
#line 44415 "gram.cpp"
        break;

        case 1986: /* b_expr: b_expr qual_Op  */
#line 13950 "gram.y"
        {
            (yyval.node) = (Node*) makeA_Expr(AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0]));
        }
#line 44421 "gram.cpp"
        break;

        case 1987: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 13952 "gram.y"
        {
            (yyval.node) =
                (Node*) makeSimpleA_Expr(AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
        }
#line 44429 "gram.cpp"
        break;

        case 1988: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 13956 "gram.y"
        {
            (yyval.node) = (Node*) makeA_Expr(
                AEXPR_NOT,
                NIL,
                NULL,
                (Node*) makeSimpleA_Expr(AEXPR_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4])),
                (yylsp[-4]));
        }
#line 44438 "gram.cpp"
        break;

        case 1989: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 13961 "gram.y"
        {
            (yyval.node) =
                (Node*) makeSimpleA_Expr(AEXPR_OF, "=", (yyvsp[-5].node), (Node*) (yyvsp[-1].list), (yylsp[-4]));
        }
#line 44446 "gram.cpp"
        break;

        case 1990: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 13965 "gram.y"
        {
            (yyval.node) =
                (Node*) makeSimpleA_Expr(AEXPR_OF, "<>", (yyvsp[-6].node), (Node*) (yyvsp[-1].list), (yylsp[-5]));
        }
#line 44454 "gram.cpp"
        break;

        case 1991: /* b_expr: b_expr IS DOCUMENT_P  */
#line 13969 "gram.y"
        {
            (yyval.node) = makeXmlExpr(IS_DOCUMENT, NULL, NIL, list_make1((yyvsp[-2].node)), (yylsp[-1]));
        }
#line 44463 "gram.cpp"
        break;

        case 1992: /* b_expr: b_expr IS NOT DOCUMENT_P  */
#line 13974 "gram.y"
        {
            (yyval.node) =
                (Node*) makeA_Expr(AEXPR_NOT,
                                   NIL,
                                   NULL,
                                   makeXmlExpr(IS_DOCUMENT, NULL, NIL, list_make1((yyvsp[-3].node)), (yylsp[-2])),
                                   (yylsp[-2]));
        }
#line 44474 "gram.cpp"
        break;

        case 1993: /* c_expr: columnref  */
#line 13990 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 44480 "gram.cpp"
        break;

        case 1994: /* c_expr: AexprConst  */
#line 13991 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 44486 "gram.cpp"
        break;

        case 1995: /* c_expr: PARAM opt_indirection  */
#line 13993 "gram.y"
        {
            ParamRef* p = makeNode(ParamRef);
            p->number = (yyvsp[-1].ival);
            p->location = (yylsp[-1]);
            if ((yyvsp[0].list)) {
                A_Indirection* n = makeNode(A_Indirection);
                n->arg = (Node*) p;
                n->indirection = check_indirection((yyvsp[0].list), yyscanner);
                (yyval.node) = (Node*) n;
            } else
                (yyval.node) = (Node*) p;
        }
#line 44505 "gram.cpp"
        break;

        case 1996: /* c_expr: '(' a_expr ')' opt_indirection  */
#line 14008 "gram.y"
        {
            if ((yyvsp[0].list)) {
                A_Indirection* n = makeNode(A_Indirection);
                n->arg = (yyvsp[-2].node);
                n->indirection = check_indirection((yyvsp[0].list), yyscanner);
                (yyval.node) = (Node*) n;
            } else
                (yyval.node) = (yyvsp[-2].node);
        }
#line 44521 "gram.cpp"
        break;

        case 1997: /* c_expr: case_expr  */
#line 14020 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 44527 "gram.cpp"
        break;

        case 1998: /* c_expr: func_expr  */
#line 14022 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 44533 "gram.cpp"
        break;

        case 1999: /* c_expr: decode_expr  */
#line 14024 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 44539 "gram.cpp"
        break;

        case 2000: /* c_expr: select_with_parens  */
#line 14026 "gram.y"
        {
            SubLink* n = makeNode(SubLink);
            n->subLinkType = EXPR_SUBLINK;
            n->testexpr = NULL;
            n->operName = NIL;
            n->subselect = (yyvsp[0].node);
            n->location = (yylsp[0]);
            (yyval.node) = (Node*) n;
        }
#line 44553 "gram.cpp"
        break;

        case 2001: /* c_expr: select_with_parens indirection  */
#line 14036 "gram.y"
        {
            /*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
            SubLink* n = makeNode(SubLink);
            A_Indirection* a = makeNode(A_Indirection);
            n->subLinkType = EXPR_SUBLINK;
            n->testexpr = NULL;
            n->operName = NIL;
            n->subselect = (yyvsp[-1].node);
            n->location = (yylsp[-1]);
            a->arg = (Node*) n;
            a->indirection = check_indirection((yyvsp[0].list), yyscanner);
            (yyval.node) = (Node*) a;
        }
#line 44580 "gram.cpp"
        break;

        case 2002: /* c_expr: EXISTS select_with_parens  */
#line 14059 "gram.y"
        {
            SubLink* n = makeNode(SubLink);
            n->subLinkType = EXISTS_SUBLINK;
            n->testexpr = NULL;
            n->operName = NIL;
            n->subselect = (yyvsp[0].node);
            n->location = (yylsp[-1]);
            (yyval.node) = (Node*) n;
        }
#line 44594 "gram.cpp"
        break;

        case 2003: /* c_expr: ARRAY select_with_parens  */
#line 14069 "gram.y"
        {
            SubLink* n = makeNode(SubLink);
            n->subLinkType = ARRAY_SUBLINK;
            n->testexpr = NULL;
            n->operName = NIL;
            n->subselect = (yyvsp[0].node);
            n->location = (yylsp[-1]);
            (yyval.node) = (Node*) n;
        }
#line 44608 "gram.cpp"
        break;

        case 2004: /* c_expr: ARRAY array_expr  */
#line 14079 "gram.y"
        {
            A_ArrayExpr* n = (A_ArrayExpr*) (yyvsp[0].node);
            Assert(IsA(n, A_ArrayExpr));
            /* point outermost A_ArrayExpr to the ARRAY keyword */
            n->location = (yylsp[-1]);
            (yyval.node) = (Node*) n;
        }
#line 44620 "gram.cpp"
        break;

        case 2005: /* c_expr: TABLE '(' table_value_select_clause ')'  */
#line 14087 "gram.y"
        {
            TableValueExpr* n = makeNode(TableValueExpr);
            n->subquery = (yyvsp[-1].node);
            n->location = (yylsp[-3]);
            (yyval.node) = (Node*) n;
        }
#line 44631 "gram.cpp"
        break;

        case 2006: /* c_expr: row  */
#line 14094 "gram.y"
        {
            RowExpr* r = makeNode(RowExpr);
            r->args = (yyvsp[0].list);
            r->row_typeid = InvalidOid; /* not analyzed yet */
            r->colnames = NIL;          /* to be filled in during analysis */
            r->location = (yylsp[0]);
            (yyval.node) = (Node*) r;
        }
#line 44644 "gram.cpp"
        break;

        case 2007: /* scatter_clause: %empty  */
#line 14105 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 44650 "gram.cpp"
        break;

        case 2008: /* scatter_clause: SCATTER RANDOMLY  */
#line 14106 "gram.y"
        {
            (yyval.list) = list_make1(NULL);
        }
#line 44656 "gram.cpp"
        break;

        case 2009: /* scatter_clause: SCATTER BY expr_list  */
#line 14107 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 44662 "gram.cpp"
        break;

        case 2010: /* table_value_select_clause: SelectStmt scatter_clause  */
#line 14112 "gram.y"
        {
            SelectStmt* s = (SelectStmt*) (yyvsp[-1].node);
            s->scatterClause = (yyvsp[0].list);
            (yyval.node) = (Node*) s;
        }
#line 44672 "gram.cpp"
        break;

        case 2011: /* func_application: func_name '(' ')'  */
#line 14120 "gram.y"
        {
            (yyval.node) = (Node*) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
        }
#line 44680 "gram.cpp"
        break;

        case 2012: /* func_application: func_name '(' func_arg_list opt_sort_clause ')'  */
#line 14124 "gram.y"
        {
            FuncCall* n = makeFuncCall((yyvsp[-4].list), (yyvsp[-2].list), (yylsp[-4]));
            n->agg_order = (yyvsp[-1].list);
            (yyval.node) = (Node*) n;
        }
#line 44690 "gram.cpp"
        break;

        case 2013: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause ')'  */
#line 14130 "gram.y"
        {
            FuncCall* n = makeFuncCall((yyvsp[-5].list), list_make1((yyvsp[-2].node)), (yylsp[-5]));
            n->func_variadic = TRUE;
            n->agg_order = (yyvsp[-1].list);
            (yyval.node) = (Node*) n;
        }
#line 44701 "gram.cpp"
        break;

        case 2014: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause ')'  */
#line 14137 "gram.y"
        {
            FuncCall* n = makeFuncCall((yyvsp[-7].list), lappend((yyvsp[-5].list), (yyvsp[-2].node)), (yylsp[-7]));
            n->func_variadic = TRUE;
            n->agg_order = (yyvsp[-1].list);
            (yyval.node) = (Node*) n;
        }
#line 44712 "gram.cpp"
        break;

        case 2015: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause ')'  */
#line 14144 "gram.y"
        {
            FuncCall* n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
            n->agg_order = (yyvsp[-1].list);
            /* Ideally we'd mark the FuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in FuncCall at the moment.
					 */
            n->func_variadic = FALSE;
            n->location = (yylsp[-5]);
            n->over = NULL;
            (yyval.node) = (Node*) n;
        }
#line 44729 "gram.cpp"
        break;

        case 2016: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause ')'  */
#line 14157 "gram.y"
        {
            FuncCall* n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
            n->agg_order = (yyvsp[-1].list);
            n->agg_distinct = TRUE;
            (yyval.node) = (Node*) n;
        }
#line 44740 "gram.cpp"
        break;

        case 2017: /* func_application: func_name '(' '*' ')'  */
#line 14164 "gram.y"
        {
            /*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The FuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
            FuncCall* n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
            n->agg_star = TRUE;
            (yyval.node) = (Node*) n;
        }
#line 44760 "gram.cpp"
        break;

        case 2018: /* func_expr: func_application within_group_clause filter_clause over_clause  */
#line 14192 "gram.y"
        {
            FuncCall* n = (FuncCall*) (yyvsp[-3].node);
            /*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
            if ((yyvsp[-2].list) != NIL) {
                if (n->agg_order != NIL)
                    ereport(ERROR,
                            errcode(ERRCODE_SYNTAX_ERROR),
                            errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
                            parser_errposition((yylsp[-2])));
                if (n->agg_distinct)
                    ereport(ERROR,
                            errcode(ERRCODE_SYNTAX_ERROR),
                            errmsg("cannot use DISTINCT with WITHIN GROUP"),
                            parser_errposition((yylsp[-2])));
                if (n->func_variadic)
                    ereport(ERROR,
                            errcode(ERRCODE_SYNTAX_ERROR),
                            errmsg("cannot use VARIADIC with WITHIN GROUP"),
                            parser_errposition((yylsp[-2])));
                n->agg_order = (yyvsp[-2].list);
                n->agg_within_group = TRUE;
            }
            n->agg_filter = (yyvsp[-1].node);
            n->over = (yyvsp[0].windef);
            (yyval.node) = (Node*) n;
        }
#line 44799 "gram.cpp"
        break;

        case 2019: /* func_expr: func_expr_common_subexpr  */
#line 14227 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 44805 "gram.cpp"
        break;

        case 2020: /* func_expr_windowless: func_application  */
#line 14237 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 44811 "gram.cpp"
        break;

        case 2021: /* func_expr_windowless: func_expr_common_subexpr  */
#line 14238 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 44817 "gram.cpp"
        break;

        case 2022: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 14246 "gram.y"
        {
            (yyval.node) =
                (Node*) makeFuncCall(SystemFuncName("pg_collation_for"), list_make1((yyvsp[-1].node)), (yylsp[-4]));
        }
#line 44827 "gram.cpp"
        break;

        case 2023: /* func_expr_common_subexpr: CURRENT_DATE  */
#line 14252 "gram.y"
        {
            /*
					 * Translate as "'now'::text::date".
					 *
					 * We cannot use "'now'::date" because coerce_type() will
					 * immediately reduce that to a constant representing
					 * today's date.  We need to delay the conversion until
					 * runtime, else the wrong things will happen when
					 * CURRENT_DATE is used in a column default value or rule.
					 *
					 * This could be simplified if we had a way to generate
					 * an expression tree representing runtime application
					 * of type-input conversion functions.  (As of PG 7.3
					 * that is actually possible, but not clear that we want
					 * to rely on it.)
					 *
					 * The token location is attached to the run-time
					 * typecast, not to the Const, for the convenience of
					 * pg_stat_statements (which doesn't want these constructs
					 * to appear to be replaceable constants).
					 */
            Node* n;
            n = makeStringConstCast("now", -1, SystemTypeName("text"));
            (yyval.node) = makeTypeCast(n, SystemTypeName("date"), (yylsp[0]));
        }
#line 44857 "gram.cpp"
        break;

        case 2024: /* func_expr_common_subexpr: CURRENT_TIME  */
#line 14278 "gram.y"
        {
            /*
					 * Translate as "'now'::text::timetz".
					 * See comments for CURRENT_DATE.
					 */
            Node* n;
            n = makeStringConstCast("now", -1, SystemTypeName("text"));
            (yyval.node) = makeTypeCast(n, SystemTypeName("timetz"), (yylsp[0]));
        }
#line 44871 "gram.cpp"
        break;

        case 2025: /* func_expr_common_subexpr: CURRENT_TIME '(' Iconst ')'  */
#line 14288 "gram.y"
        {
            /*
					 * Translate as "'now'::text::timetz(n)".
					 * See comments for CURRENT_DATE.
					 */
            Node* n;
            TypeName* d;
            n = makeStringConstCast("now", -1, SystemTypeName("text"));
            d = SystemTypeName("timetz");
            d->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
            (yyval.node) = makeTypeCast(n, d, (yylsp[-3]));
        }
#line 44888 "gram.cpp"
        break;

        case 2026: /* func_expr_common_subexpr: CURRENT_TIMESTAMP  */
#line 14301 "gram.y"
        {
            /*
					 * Translate as "now()", since we have a function that
					 * does exactly what is needed.
					 */
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("now"), NIL, (yylsp[0]));
        }
#line 44900 "gram.cpp"
        break;

        case 2027: /* func_expr_common_subexpr: CURRENT_TIMESTAMP '(' Iconst ')'  */
#line 14309 "gram.y"
        {
            /*
					 * Translate as "'now'::text::timestamptz(n)".
					 * See comments for CURRENT_DATE.
					 */
            Node* n;
            TypeName* d;
            n = makeStringConstCast("now", -1, SystemTypeName("text"));
            d = SystemTypeName("timestamptz");
            d->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
            (yyval.node) = makeTypeCast(n, d, (yylsp[-3]));
        }
#line 44917 "gram.cpp"
        break;

        case 2028: /* func_expr_common_subexpr: LOCALTIME  */
#line 14322 "gram.y"
        {
            /*
					 * Translate as "'now'::text::time".
					 * See comments for CURRENT_DATE.
					 */
            Node* n;
            n = makeStringConstCast("now", -1, SystemTypeName("text"));
            (yyval.node) = makeTypeCast((Node*) n, SystemTypeName("time"), (yylsp[0]));
        }
#line 44931 "gram.cpp"
        break;

        case 2029: /* func_expr_common_subexpr: LOCALTIME '(' Iconst ')'  */
#line 14332 "gram.y"
        {
            /*
					 * Translate as "'now'::text::time(n)".
					 * See comments for CURRENT_DATE.
					 */
            Node* n;
            TypeName* d;
            n = makeStringConstCast("now", -1, SystemTypeName("text"));
            d = SystemTypeName("time");
            d->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
            (yyval.node) = makeTypeCast((Node*) n, d, (yylsp[-3]));
        }
#line 44948 "gram.cpp"
        break;

        case 2030: /* func_expr_common_subexpr: LOCALTIMESTAMP  */
#line 14345 "gram.y"
        {
            /*
					 * Translate as "'now'::text::timestamp".
					 * See comments for CURRENT_DATE.
					 */
            Node* n;
            n = makeStringConstCast("now", -1, SystemTypeName("text"));
            (yyval.node) = makeTypeCast(n, SystemTypeName("timestamp"), (yylsp[0]));
        }
#line 44962 "gram.cpp"
        break;

        case 2031: /* func_expr_common_subexpr: LOCALTIMESTAMP '(' Iconst ')'  */
#line 14355 "gram.y"
        {
            /*
					 * Translate as "'now'::text::timestamp(n)".
					 * See comments for CURRENT_DATE.
					 */
            Node* n;
            TypeName* d;
            n = makeStringConstCast("now", -1, SystemTypeName("text"));
            d = SystemTypeName("timestamp");
            d->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
            (yyval.node) = makeTypeCast(n, d, (yylsp[-3]));
        }
#line 44979 "gram.cpp"
        break;

        case 2032: /* func_expr_common_subexpr: CURRENT_ROLE  */
#line 14368 "gram.y"
        {
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("current_user"), NIL, (yylsp[0]));
        }
#line 44987 "gram.cpp"
        break;

        case 2033: /* func_expr_common_subexpr: CURRENT_USER  */
#line 14372 "gram.y"
        {
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("current_user"), NIL, (yylsp[0]));
        }
#line 44995 "gram.cpp"
        break;

        case 2034: /* func_expr_common_subexpr: SESSION_USER  */
#line 14376 "gram.y"
        {
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("session_user"), NIL, (yylsp[0]));
        }
#line 45003 "gram.cpp"
        break;

        case 2035: /* func_expr_common_subexpr: USER  */
#line 14380 "gram.y"
        {
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("current_user"), NIL, (yylsp[0]));
        }
#line 45011 "gram.cpp"
        break;

        case 2036: /* func_expr_common_subexpr: CURRENT_CATALOG  */
#line 14384 "gram.y"
        {
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("current_database"), NIL, (yylsp[0]));
        }
#line 45019 "gram.cpp"
        break;

        case 2037: /* func_expr_common_subexpr: CURRENT_SCHEMA  */
#line 14388 "gram.y"
        {
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("current_schema"), NIL, (yylsp[0]));
        }
#line 45027 "gram.cpp"
        break;

        case 2038: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 14392 "gram.y"
        {
            (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), (yylsp[-5]));
        }
#line 45033 "gram.cpp"
        break;

        case 2039: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 14394 "gram.y"
        {
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
        }
#line 45041 "gram.cpp"
        break;

        case 2040: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 14398 "gram.y"
        {
            /* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
        }
#line 45054 "gram.cpp"
        break;

        case 2041: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 14407 "gram.y"
        {
            /* position(A in B) is converted to position(B, A) */
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
        }
#line 45063 "gram.cpp"
        break;

        case 2042: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 14412 "gram.y"
        {
            /* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
        }
#line 45074 "gram.cpp"
        break;

        case 2043: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 14419 "gram.y"
        {
            /* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName(((Value*) llast((yyvsp[-1].typnam)->names))->val.str),
                                                list_make1((yyvsp[-3].node)),
                                                (yylsp[-5]));
        }
#line 45093 "gram.cpp"
        break;

        case 2044: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 14434 "gram.y"
        {
            /* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("btrim"), (yyvsp[-1].list), (yylsp[-4]));
        }
#line 45104 "gram.cpp"
        break;

        case 2045: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 14441 "gram.y"
        {
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
        }
#line 45112 "gram.cpp"
        break;

        case 2046: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 14445 "gram.y"
        {
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
        }
#line 45120 "gram.cpp"
        break;

        case 2047: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 14449 "gram.y"
        {
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("btrim"), (yyvsp[-1].list), (yylsp[-3]));
        }
#line 45128 "gram.cpp"
        break;

        case 2048: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 14453 "gram.y"
        {
            (yyval.node) = (Node*) makeSimpleA_Expr(AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
        }
#line 45136 "gram.cpp"
        break;

        case 2049: /* func_expr_common_subexpr: COALESCE '(' expr_list ')'  */
#line 14457 "gram.y"
        {
            CoalesceExpr* c = makeNode(CoalesceExpr);
            c->args = (yyvsp[-1].list);
            c->location = (yylsp[-3]);
            (yyval.node) = (Node*) c;
        }
#line 45147 "gram.cpp"
        break;

        case 2050: /* func_expr_common_subexpr: GREATEST '(' expr_list ')'  */
#line 14464 "gram.y"
        {
            MinMaxExpr* v = makeNode(MinMaxExpr);
            v->args = (yyvsp[-1].list);
            v->op = IS_GREATEST;
            v->location = (yylsp[-3]);
            (yyval.node) = (Node*) v;
        }
#line 45159 "gram.cpp"
        break;

        case 2051: /* func_expr_common_subexpr: LEAST '(' expr_list ')'  */
#line 14472 "gram.y"
        {
            MinMaxExpr* v = makeNode(MinMaxExpr);
            v->args = (yyvsp[-1].list);
            v->op = IS_LEAST;
            v->location = (yylsp[-3]);
            (yyval.node) = (Node*) v;
        }
#line 45171 "gram.cpp"
        break;

        case 2052: /* func_expr_common_subexpr: GROUPING '(' expr_list ')'  */
#line 14480 "gram.y"
        {
            GroupingFunc* f = makeNode(GroupingFunc);
            f->args = (yyvsp[-1].list);
            (yyval.node) = (Node*) f;
        }
#line 45181 "gram.cpp"
        break;

        case 2053: /* func_expr_common_subexpr: GROUP_ID '(' ')'  */
#line 14487 "gram.y"
        {
            GroupId* gid = makeNode(GroupId);
            (yyval.node) = (Node*) gid;
        }
#line 45190 "gram.cpp"
        break;

        case 2054: /* func_expr_common_subexpr: MEDIAN '(' a_expr ')'  */
#line 14492 "gram.y"
        {
            /*
					 * MEDIAN is parsed as an alias to percentile_cont(0.5).
					 * We keep track of original expression to deparse
					 * it later in views, etc.
					 */
            FuncCall* n;
            SortBy* sortby;

            n = makeNode(FuncCall);
            n->funcname = SystemFuncName("median");
            n->args = list_make1(makeAConst(makeFloat(pstrdup("0.5")), (yylsp[-3])));

            sortby = makeNode(SortBy);
            sortby->node = (yyvsp[-1].node);
            sortby->sortby_dir = SORTBY_DEFAULT;
            sortby->sortby_nulls = SORTBY_NULLS_DEFAULT;
            sortby->useOp = NIL;
            sortby->location = -1; /* no operator */
            n->agg_order = list_make1(sortby);

            n->agg_within_group = TRUE;
            n->agg_filter = NULL;
            n->over = NULL;
            n->location = (yylsp[-3]);
            (yyval.node) = (Node*) n;
        }
#line 45222 "gram.cpp"
        break;

        case 2055: /* func_expr_common_subexpr: DECODE '(' a_expr ',' a_expr ')'  */
#line 14520 "gram.y"
        {
            FuncCall* n = makeNode(FuncCall);
            n->funcname = list_make1(makeString("decode"));
            n->args = list_make2((yyvsp[-3].node), (yyvsp[-1].node));
            n->agg_order = NIL;
            n->agg_star = FALSE;
            n->agg_distinct = FALSE;
            n->func_variadic = FALSE;
            n->agg_filter = NULL;
            n->location = (yylsp[-5]);
            n->over = NULL;
            (yyval.node) = (Node*) n;
        }
#line 45240 "gram.cpp"
        break;

        case 2056: /* func_expr_common_subexpr: XMLCONCAT '(' expr_list ')'  */
#line 14534 "gram.y"
        {
            (yyval.node) = makeXmlExpr(IS_XMLCONCAT, NULL, NIL, (yyvsp[-1].list), (yylsp[-3]));
        }
#line 45248 "gram.cpp"
        break;

        case 2057: /* func_expr_common_subexpr: XMLELEMENT '(' NAME_P ColLabel ')'  */
#line 14538 "gram.y"
        {
            (yyval.node) = makeXmlExpr(IS_XMLELEMENT, (yyvsp[-1].str), NIL, NIL, (yylsp[-4]));
        }
#line 45256 "gram.cpp"
        break;

        case 2058: /* func_expr_common_subexpr: XMLELEMENT '(' NAME_P ColLabel ',' xml_attributes ')'  */
#line 14542 "gram.y"
        {
            (yyval.node) = makeXmlExpr(IS_XMLELEMENT, (yyvsp[-3].str), (yyvsp[-1].list), NIL, (yylsp[-6]));
        }
#line 45264 "gram.cpp"
        break;

        case 2059: /* func_expr_common_subexpr: XMLELEMENT '(' NAME_P ColLabel ',' expr_list ')'  */
#line 14546 "gram.y"
        {
            (yyval.node) = makeXmlExpr(IS_XMLELEMENT, (yyvsp[-3].str), NIL, (yyvsp[-1].list), (yylsp[-6]));
        }
#line 45272 "gram.cpp"
        break;

        case 2060: /* func_expr_common_subexpr: XMLELEMENT '(' NAME_P ColLabel ',' xml_attributes ',' expr_list ')'  */
#line 14550 "gram.y"
        {
            (yyval.node) = makeXmlExpr(IS_XMLELEMENT, (yyvsp[-5].str), (yyvsp[-3].list), (yyvsp[-1].list), (yylsp[-8]));
        }
#line 45280 "gram.cpp"
        break;

        case 2061: /* func_expr_common_subexpr: XMLEXISTS '(' c_expr xmlexists_argument ')'  */
#line 14554 "gram.y"
        {
            /* xmlexists(A PASSING [BY REF] B [BY REF]) is
					 * converted to xmlexists(A, B)*/
            (yyval.node) = (Node*) makeFuncCall(SystemFuncName("xmlexists"),
                                                list_make2((yyvsp[-2].node), (yyvsp[-1].node)),
                                                (yylsp[-4]));
        }
#line 45290 "gram.cpp"
        break;

        case 2062: /* func_expr_common_subexpr: XMLEXISTS '(' a_expr ',' a_expr ')'  */
#line 14568 "gram.y"
        {
            FuncCall* n = makeNode(FuncCall);
            n->funcname = SystemFuncName("xmlexists");
            n->args = list_make2((yyvsp[-3].node), (yyvsp[-1].node));
            n->agg_order = NIL;
            n->agg_star = FALSE;
            n->agg_distinct = FALSE;
            n->func_variadic = FALSE;
            n->over = NULL;
            n->location = (yylsp[-5]);
            (yyval.node) = (Node*) n;
        }
#line 45307 "gram.cpp"
        break;

        case 2063: /* func_expr_common_subexpr: XMLFOREST '(' xml_attribute_list ')'  */
#line 14581 "gram.y"
        {
            (yyval.node) = makeXmlExpr(IS_XMLFOREST, NULL, (yyvsp[-1].list), NIL, (yylsp[-3]));
        }
#line 45315 "gram.cpp"
        break;

        case 2064: /* func_expr_common_subexpr: XMLPARSE '(' document_or_content a_expr xml_whitespace_option ')'  */
#line 14585 "gram.y"
        {
            XmlExpr* x = (XmlExpr*) makeXmlExpr(IS_XMLPARSE,
                                                NULL,
                                                NIL,
                                                list_make2((yyvsp[-2].node), makeBoolAConst((yyvsp[-1].boolean), -1)),
                                                (yylsp[-5]));
            x->xmloption = static_cast<XmlOptionType>((yyvsp[-3].ival));
            (yyval.node) = (Node*) x;
        }
#line 45328 "gram.cpp"
        break;

        case 2065: /* func_expr_common_subexpr: XMLPI '(' NAME_P ColLabel ')'  */
#line 14594 "gram.y"
        {
            (yyval.node) = makeXmlExpr(IS_XMLPI, (yyvsp[-1].str), NULL, NIL, (yylsp[-4]));
        }
#line 45336 "gram.cpp"
        break;

        case 2066: /* func_expr_common_subexpr: XMLPI '(' NAME_P ColLabel ',' a_expr ')'  */
#line 14598 "gram.y"
        {
            (yyval.node) = makeXmlExpr(IS_XMLPI, (yyvsp[-3].str), NULL, list_make1((yyvsp[-1].node)), (yylsp[-6]));
        }
#line 45344 "gram.cpp"
        break;

        case 2067: /* func_expr_common_subexpr: XMLROOT '(' a_expr ',' xml_root_version opt_xml_root_standalone ')'  */
#line 14602 "gram.y"
        {
            (yyval.node) = makeXmlExpr(IS_XMLROOT,
                                       NULL,
                                       NIL,
                                       list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node)),
                                       (yylsp[-6]));
        }
#line 45353 "gram.cpp"
        break;

        case 2068: /* func_expr_common_subexpr: XMLSERIALIZE '(' document_or_content a_expr AS SimpleTypename ')'  */
#line 14607 "gram.y"
        {
            XmlSerialize* n = makeNode(XmlSerialize);
            n->xmloption = static_cast<XmlOptionType>((yyvsp[-4].ival));
            n->expr = (yyvsp[-3].node);
            n->typeName = (yyvsp[-1].typnam);
            n->location = (yylsp[-6]);
            (yyval.node) = (Node*) n;
        }
#line 45366 "gram.cpp"
        break;

        case 2069: /* xml_root_version: VERSION_P a_expr  */
#line 14621 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 45372 "gram.cpp"
        break;

        case 2070: /* xml_root_version: VERSION_P NO VALUE_P  */
#line 14623 "gram.y"
        {
            (yyval.node) = makeNullAConst(-1);
        }
#line 45378 "gram.cpp"
        break;

        case 2071: /* opt_xml_root_standalone: ',' STANDALONE_P YES_P  */
#line 14627 "gram.y"
        {
            (yyval.node) = makeIntConst(XML_STANDALONE_YES, -1);
        }
#line 45384 "gram.cpp"
        break;

        case 2072: /* opt_xml_root_standalone: ',' STANDALONE_P NO  */
#line 14629 "gram.y"
        {
            (yyval.node) = makeIntConst(XML_STANDALONE_NO, -1);
        }
#line 45390 "gram.cpp"
        break;

        case 2073: /* opt_xml_root_standalone: ',' STANDALONE_P NO VALUE_P  */
#line 14631 "gram.y"
        {
            (yyval.node) = makeIntConst(XML_STANDALONE_NO_VALUE, -1);
        }
#line 45396 "gram.cpp"
        break;

        case 2074: /* opt_xml_root_standalone: %empty  */
#line 14633 "gram.y"
        {
            (yyval.node) = makeIntConst(XML_STANDALONE_OMITTED, -1);
        }
#line 45402 "gram.cpp"
        break;

        case 2075: /* xml_attributes: XMLATTRIBUTES '(' xml_attribute_list ')'  */
#line 14636 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 45408 "gram.cpp"
        break;

        case 2076: /* xml_attribute_list: xml_attribute_el  */
#line 14639 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].target));
        }
#line 45414 "gram.cpp"
        break;

        case 2077: /* xml_attribute_list: xml_attribute_list ',' xml_attribute_el  */
#line 14640 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target));
        }
#line 45420 "gram.cpp"
        break;

        case 2078: /* xml_attribute_el: a_expr AS ColLabel  */
#line 14644 "gram.y"
        {
            (yyval.target) = makeNode(ResTarget);
            (yyval.target)->name = (yyvsp[0].str);
            (yyval.target)->indirection = NIL;
            (yyval.target)->val = (Node*) (yyvsp[-2].node);
            (yyval.target)->location = (yylsp[-2]);
        }
#line 45432 "gram.cpp"
        break;

        case 2079: /* xml_attribute_el: a_expr  */
#line 14652 "gram.y"
        {
            (yyval.target) = makeNode(ResTarget);
            (yyval.target)->name = NULL;
            (yyval.target)->indirection = NIL;
            (yyval.target)->val = (Node*) (yyvsp[0].node);
            (yyval.target)->location = (yylsp[0]);
        }
#line 45444 "gram.cpp"
        break;

        case 2080: /* document_or_content: DOCUMENT_P  */
#line 14661 "gram.y"
        {
            (yyval.ival) = XMLOPTION_DOCUMENT;
        }
#line 45450 "gram.cpp"
        break;

        case 2081: /* document_or_content: CONTENT_P  */
#line 14662 "gram.y"
        {
            (yyval.ival) = XMLOPTION_CONTENT;
        }
#line 45456 "gram.cpp"
        break;

        case 2082: /* xml_whitespace_option: PRESERVE WHITESPACE_P  */
#line 14665 "gram.y"
        {
            (yyval.boolean) = TRUE;
        }
#line 45462 "gram.cpp"
        break;

        case 2083: /* xml_whitespace_option: STRIP_P WHITESPACE_P  */
#line 14666 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 45468 "gram.cpp"
        break;

        case 2084: /* xml_whitespace_option: %empty  */
#line 14667 "gram.y"
        {
            (yyval.boolean) = FALSE;
        }
#line 45474 "gram.cpp"
        break;

        case 2085: /* xmlexists_argument: PASSING c_expr  */
#line 14673 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 45482 "gram.cpp"
        break;

        case 2086: /* xmlexists_argument: PASSING c_expr BY REF  */
#line 14677 "gram.y"
        {
            (yyval.node) = (yyvsp[-2].node);
        }
#line 45490 "gram.cpp"
        break;

        case 2087: /* xmlexists_argument: PASSING BY REF c_expr  */
#line 14681 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 45498 "gram.cpp"
        break;

        case 2088: /* xmlexists_argument: PASSING BY REF c_expr BY REF  */
#line 14685 "gram.y"
        {
            (yyval.node) = (yyvsp[-2].node);
        }
#line 45506 "gram.cpp"
        break;

        case 2089: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 14695 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 45512 "gram.cpp"
        break;

        case 2090: /* within_group_clause: %empty  */
#line 14696 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 45518 "gram.cpp"
        break;

        case 2091: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 14700 "gram.y"
        {
            (yyval.node) = (yyvsp[-1].node);
        }
#line 45524 "gram.cpp"
        break;

        case 2092: /* filter_clause: %empty  */
#line 14701 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 45530 "gram.cpp"
        break;

        case 2093: /* window_clause: WINDOW window_definition_list  */
#line 14709 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 45536 "gram.cpp"
        break;

        case 2094: /* window_clause: %empty  */
#line 14710 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 45542 "gram.cpp"
        break;

        case 2095: /* window_definition_list: window_definition  */
#line 14714 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].windef));
        }
#line 45548 "gram.cpp"
        break;

        case 2096: /* window_definition_list: window_definition_list ',' window_definition  */
#line 14716 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef));
        }
#line 45554 "gram.cpp"
        break;

        case 2097: /* window_definition: ColId AS window_specification  */
#line 14721 "gram.y"
        {
            WindowDef* n = (yyvsp[0].windef);
            n->name = (yyvsp[-2].str);
            (yyval.windef) = n;
        }
#line 45564 "gram.cpp"
        break;

        case 2098: /* over_clause: OVER window_specification  */
#line 14729 "gram.y"
        {
            (yyval.windef) = (yyvsp[0].windef);
        }
#line 45570 "gram.cpp"
        break;

        case 2099: /* over_clause: OVER ColId  */
#line 14731 "gram.y"
        {
            WindowDef* n = makeNode(WindowDef);
            n->name = (yyvsp[0].str);
            n->refname = NULL;
            n->partitionClause = NIL;
            n->orderClause = NIL;
            n->frameOptions = FRAMEOPTION_DEFAULTS;
            n->startOffset = NULL;
            n->endOffset = NULL;
            n->location = (yylsp[0]);
            (yyval.windef) = n;
        }
#line 45587 "gram.cpp"
        break;

        case 2100: /* over_clause: %empty  */
#line 14744 "gram.y"
        {
            (yyval.windef) = NULL;
        }
#line 45593 "gram.cpp"
        break;

        case 2101: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 14749 "gram.y"
        {
            WindowDef* n = makeNode(WindowDef);
            n->name = NULL;
            n->refname = (yyvsp[-4].str);
            n->partitionClause = (yyvsp[-3].list);
            n->orderClause = (yyvsp[-2].list);
            /* copy relevant fields of opt_frame_clause */
            n->frameOptions = (yyvsp[-1].windef)->frameOptions;
            n->startOffset = (yyvsp[-1].windef)->startOffset;
            n->endOffset = (yyvsp[-1].windef)->endOffset;
            n->location = (yylsp[-5]);
            (yyval.windef) = n;
        }
#line 45611 "gram.cpp"
        break;

        case 2102: /* opt_existing_window_name: ColId  */
#line 14774 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 45617 "gram.cpp"
        break;

        case 2103: /* opt_existing_window_name: %empty  */
#line 14775 "gram.y"
        {
            (yyval.str) = NULL;
        }
#line 45623 "gram.cpp"
        break;

        case 2104: /* opt_partition_clause: PARTITION BY sortby_list  */
#line 14778 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 45629 "gram.cpp"
        break;

        case 2105: /* opt_partition_clause: %empty  */
#line 14779 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 45635 "gram.cpp"
        break;

        case 2106: /* opt_frame_clause: RANGE frame_extent window_frame_exclusion  */
#line 14792 "gram.y"
        {
            WindowDef* n = (yyvsp[-1].windef);
            n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
#if 0
					if (n->frameOptions & (FRAMEOPTION_START_VALUE_PRECEDING |
										   FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("RANGE PRECEDING is only supported with UNBOUNDED"),
								 parser_errposition((yylsp[-2])));
					if (n->frameOptions & (FRAMEOPTION_START_VALUE_FOLLOWING |
										   FRAMEOPTION_END_VALUE_FOLLOWING))
						ereport(ERROR,
								errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("RANGE FOLLOWING is only supported with UNBOUNDED"),
								 parser_errposition((yylsp[-2])));
#endif
            (yyval.windef) = n;
        }
#line 45659 "gram.cpp"
        break;

        case 2107: /* opt_frame_clause: ROWS frame_extent window_frame_exclusion  */
#line 14813 "gram.y"
        {
            WindowDef* n = (yyvsp[-1].windef);
            n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
            (yyval.windef) = n;
        }
#line 45669 "gram.cpp"
        break;

        case 2108: /* opt_frame_clause: %empty  */
#line 14819 "gram.y"
        {
            WindowDef* n = makeNode(WindowDef);
            n->frameOptions = FRAMEOPTION_DEFAULTS;
            n->startOffset = NULL;
            n->endOffset = NULL;
            (yyval.windef) = n;
        }
#line 45681 "gram.cpp"
        break;

        case 2109: /* frame_extent: frame_bound  */
#line 14829 "gram.y"
        {
            WindowDef* n = (yyvsp[0].windef);
            /* reject invalid cases */
            if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
                ereport(ERROR,
                        errcode(ERRCODE_WINDOWING_ERROR),
                        errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
                        parser_errposition((yylsp[0])));
            if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
                ereport(ERROR,
                        errcode(ERRCODE_WINDOWING_ERROR),
                        errmsg("frame starting from following row cannot end with current row"),
                        parser_errposition((yylsp[0])));
            n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
            (yyval.windef) = n;
        }
#line 45702 "gram.cpp"
        break;

        case 2110: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 14846 "gram.y"
        {
            WindowDef* n1 = (yyvsp[-2].windef);
            WindowDef* n2 = (yyvsp[0].windef);
            /* form merged options */
            int frameOptions = n1->frameOptions;
            /* shift converts START_ options to END_ options */
            frameOptions |= n2->frameOptions << 1;
            frameOptions |= FRAMEOPTION_BETWEEN;
            /* reject invalid cases */
            if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
                ereport(ERROR,
                        errcode(ERRCODE_WINDOWING_ERROR),
                        errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
                        parser_errposition((yylsp[-2])));
            if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
                ereport(ERROR,
                        errcode(ERRCODE_WINDOWING_ERROR),
                        errmsg("frame end cannot be UNBOUNDED PRECEDING"),
                        parser_errposition((yylsp[0])));
            if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) && (frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
                ereport(ERROR,
                        errcode(ERRCODE_WINDOWING_ERROR),
                        errmsg("frame starting from current row cannot have preceding rows"),
                        parser_errposition((yylsp[0])));
            if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
                (frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING | FRAMEOPTION_END_CURRENT_ROW)))
                ereport(ERROR,
                        errcode(ERRCODE_WINDOWING_ERROR),
                        errmsg("frame starting from following row cannot have preceding rows"),
                        parser_errposition((yylsp[0])));
            n1->frameOptions = frameOptions;
            n1->endOffset = n2->startOffset;
            (yyval.windef) = n1;
        }
#line 45743 "gram.cpp"
        break;

        case 2111: /* frame_bound: UNBOUNDED PRECEDING  */
#line 14891 "gram.y"
        {
            WindowDef* n = makeNode(WindowDef);
            n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
            n->startOffset = NULL;
            n->endOffset = NULL;
            (yyval.windef) = n;
        }
#line 45755 "gram.cpp"
        break;

        case 2112: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 14899 "gram.y"
        {
            WindowDef* n = makeNode(WindowDef);
            n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
            n->startOffset = NULL;
            n->endOffset = NULL;
            (yyval.windef) = n;
        }
#line 45767 "gram.cpp"
        break;

        case 2113: /* frame_bound: CURRENT_P ROW  */
#line 14907 "gram.y"
        {
            WindowDef* n = makeNode(WindowDef);
            n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
            n->startOffset = NULL;
            n->endOffset = NULL;
            (yyval.windef) = n;
        }
#line 45779 "gram.cpp"
        break;

        case 2114: /* frame_bound: a_expr PRECEDING  */
#line 14915 "gram.y"
        {
            WindowDef* n = makeNode(WindowDef);
            n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
            n->startOffset = (yyvsp[-1].node);
            n->endOffset = NULL;
            (yyval.windef) = n;
        }
#line 45791 "gram.cpp"
        break;

        case 2115: /* frame_bound: a_expr FOLLOWING  */
#line 14923 "gram.y"
        {
            WindowDef* n = makeNode(WindowDef);
            n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
            n->startOffset = (yyvsp[-1].node);
            n->endOffset = NULL;
            (yyval.windef) = n;
        }
#line 45803 "gram.cpp"
        break;

        case 2116: /* window_frame_exclusion: EXCLUDE CURRENT_P ROW  */
#line 14932 "gram.y"
        {
            checkWindowExclude();
            (yyval.ival) = 0;
        }
#line 45809 "gram.cpp"
        break;

        case 2117: /* window_frame_exclusion: EXCLUDE GROUP_P  */
#line 14933 "gram.y"
        {
            checkWindowExclude();
            (yyval.ival) = 0;
        }
#line 45815 "gram.cpp"
        break;

        case 2118: /* window_frame_exclusion: EXCLUDE TIES  */
#line 14934 "gram.y"
        {
            checkWindowExclude();
            (yyval.ival) = 0;
        }
#line 45821 "gram.cpp"
        break;

        case 2119: /* window_frame_exclusion: EXCLUDE NO OTHERS  */
#line 14935 "gram.y"
        {
            checkWindowExclude();
            (yyval.ival) = 0;
        }
#line 45827 "gram.cpp"
        break;

        case 2120: /* window_frame_exclusion: %empty  */
#line 14936 "gram.y"
        {
            (yyval.ival) = 0;
        }
#line 45833 "gram.cpp"
        break;

        case 2121: /* row: ROW '(' expr_list ')'  */
#line 14950 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 45839 "gram.cpp"
        break;

        case 2122: /* row: ROW '(' ')'  */
#line 14951 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 45845 "gram.cpp"
        break;

        case 2123: /* row: '(' expr_list ',' a_expr ')'  */
#line 14952 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node));
        }
#line 45851 "gram.cpp"
        break;

        case 2124: /* sub_type: ANY  */
#line 14955 "gram.y"
        {
            (yyval.ival) = ANY_SUBLINK;
        }
#line 45857 "gram.cpp"
        break;

        case 2125: /* sub_type: SOME  */
#line 14956 "gram.y"
        {
            (yyval.ival) = ANY_SUBLINK;
        }
#line 45863 "gram.cpp"
        break;

        case 2126: /* sub_type: ALL  */
#line 14957 "gram.y"
        {
            (yyval.ival) = ALL_SUBLINK;
        }
#line 45869 "gram.cpp"
        break;

        case 2127: /* all_Op: Op  */
#line 14960 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 45875 "gram.cpp"
        break;

        case 2128: /* all_Op: MathOp  */
#line 14961 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 45881 "gram.cpp"
        break;

        case 2129: /* MathOp: '+'  */
#line 14964 "gram.y"
        {
            (yyval.str) = "+";
        }
#line 45887 "gram.cpp"
        break;

        case 2130: /* MathOp: '-'  */
#line 14965 "gram.y"
        {
            (yyval.str) = "-";
        }
#line 45893 "gram.cpp"
        break;

        case 2131: /* MathOp: '*'  */
#line 14966 "gram.y"
        {
            (yyval.str) = "*";
        }
#line 45899 "gram.cpp"
        break;

        case 2132: /* MathOp: '/'  */
#line 14967 "gram.y"
        {
            (yyval.str) = "/";
        }
#line 45905 "gram.cpp"
        break;

        case 2133: /* MathOp: '%'  */
#line 14968 "gram.y"
        {
            (yyval.str) = "%";
        }
#line 45911 "gram.cpp"
        break;

        case 2134: /* MathOp: '^'  */
#line 14969 "gram.y"
        {
            (yyval.str) = "^";
        }
#line 45917 "gram.cpp"
        break;

        case 2135: /* MathOp: '<'  */
#line 14970 "gram.y"
        {
            (yyval.str) = "<";
        }
#line 45923 "gram.cpp"
        break;

        case 2136: /* MathOp: '>'  */
#line 14971 "gram.y"
        {
            (yyval.str) = ">";
        }
#line 45929 "gram.cpp"
        break;

        case 2137: /* MathOp: '='  */
#line 14972 "gram.y"
        {
            (yyval.str) = "=";
        }
#line 45935 "gram.cpp"
        break;

        case 2138: /* qual_Op: Op  */
#line 14976 "gram.y"
        {
            (yyval.list) = list_make1(makeString((yyvsp[0].str)));
        }
#line 45941 "gram.cpp"
        break;

        case 2139: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 14978 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 45947 "gram.cpp"
        break;

        case 2140: /* qual_all_Op: all_Op  */
#line 14983 "gram.y"
        {
            (yyval.list) = list_make1(makeString((yyvsp[0].str)));
        }
#line 45953 "gram.cpp"
        break;

        case 2141: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 14985 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 45959 "gram.cpp"
        break;

        case 2142: /* subquery_Op: all_Op  */
#line 14990 "gram.y"
        {
            (yyval.list) = list_make1(makeString((yyvsp[0].str)));
        }
#line 45965 "gram.cpp"
        break;

        case 2143: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 14992 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 45971 "gram.cpp"
        break;

        case 2144: /* subquery_Op: LIKE  */
#line 14994 "gram.y"
        {
            (yyval.list) = list_make1(makeString("~~"));
        }
#line 45977 "gram.cpp"
        break;

        case 2145: /* subquery_Op: NOT LIKE  */
#line 14996 "gram.y"
        {
            (yyval.list) = list_make1(makeString("!~~"));
        }
#line 45983 "gram.cpp"
        break;

        case 2146: /* subquery_Op: ILIKE  */
#line 14998 "gram.y"
        {
            (yyval.list) = list_make1(makeString("~~*"));
        }
#line 45989 "gram.cpp"
        break;

        case 2147: /* subquery_Op: NOT ILIKE  */
#line 15000 "gram.y"
        {
            (yyval.list) = list_make1(makeString("!~~*"));
        }
#line 45995 "gram.cpp"
        break;

        case 2148: /* expr_list: a_expr  */
#line 15012 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 46003 "gram.cpp"
        break;

        case 2149: /* expr_list: expr_list ',' a_expr  */
#line 15016 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 46011 "gram.cpp"
        break;

        case 2150: /* func_arg_list: func_arg_expr  */
#line 15023 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 46019 "gram.cpp"
        break;

        case 2151: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 15027 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 46027 "gram.cpp"
        break;

        case 2152: /* func_arg_expr: a_expr  */
#line 15033 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 46035 "gram.cpp"
        break;

        case 2153: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 15037 "gram.y"
        {
            NamedArgExpr* na = makeNode(NamedArgExpr);
            na->name = (yyvsp[-2].str);
            na->arg = (Expr*) (yyvsp[0].node);
            na->argnumber = -1; /* until determined */
            na->location = (yylsp[-2]);
            (yyval.node) = (Node*) na;
        }
#line 46048 "gram.cpp"
        break;

        case 2154: /* type_list: Typename  */
#line 15047 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].typnam));
        }
#line 46054 "gram.cpp"
        break;

        case 2155: /* type_list: type_list ',' Typename  */
#line 15048 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam));
        }
#line 46060 "gram.cpp"
        break;

        case 2156: /* array_expr: '[' expr_list ']'  */
#line 15052 "gram.y"
        {
            (yyval.node) = makeAArrayExpr((yyvsp[-1].list), (yylsp[-2]));
        }
#line 46068 "gram.cpp"
        break;

        case 2157: /* array_expr: '[' array_expr_list ']'  */
#line 15056 "gram.y"
        {
            (yyval.node) = makeAArrayExpr((yyvsp[-1].list), (yylsp[-2]));
        }
#line 46076 "gram.cpp"
        break;

        case 2158: /* array_expr: '[' ']'  */
#line 15060 "gram.y"
        {
            (yyval.node) = makeAArrayExpr(NIL, (yylsp[-1]));
        }
#line 46084 "gram.cpp"
        break;

        case 2159: /* array_expr_list: array_expr  */
#line 15065 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 46090 "gram.cpp"
        break;

        case 2160: /* array_expr_list: array_expr_list ',' array_expr  */
#line 15066 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 46096 "gram.cpp"
        break;

        case 2161: /* extract_list: extract_arg FROM a_expr  */
#line 15072 "gram.y"
        {
            (yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
        }
#line 46104 "gram.cpp"
        break;

        case 2162: /* extract_list: %empty  */
#line 15075 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 46110 "gram.cpp"
        break;

        case 2163: /* extract_arg: IDENT  */
#line 15082 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 46116 "gram.cpp"
        break;

        case 2164: /* extract_arg: YEAR_P  */
#line 15083 "gram.y"
        {
            (yyval.str) = "year";
        }
#line 46122 "gram.cpp"
        break;

        case 2165: /* extract_arg: MONTH_P  */
#line 15084 "gram.y"
        {
            (yyval.str) = "month";
        }
#line 46128 "gram.cpp"
        break;

        case 2166: /* extract_arg: DAY_P  */
#line 15085 "gram.y"
        {
            (yyval.str) = "day";
        }
#line 46134 "gram.cpp"
        break;

        case 2167: /* extract_arg: HOUR_P  */
#line 15086 "gram.y"
        {
            (yyval.str) = "hour";
        }
#line 46140 "gram.cpp"
        break;

        case 2168: /* extract_arg: MINUTE_P  */
#line 15087 "gram.y"
        {
            (yyval.str) = "minute";
        }
#line 46146 "gram.cpp"
        break;

        case 2169: /* extract_arg: SECOND_P  */
#line 15088 "gram.y"
        {
            (yyval.str) = "second";
        }
#line 46152 "gram.cpp"
        break;

        case 2170: /* extract_arg: Sconst  */
#line 15089 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 46158 "gram.cpp"
        break;

        case 2171: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 15100 "gram.y"
        {
            (yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
        }
#line 46166 "gram.cpp"
        break;

        case 2172: /* overlay_list: a_expr overlay_placing substr_from  */
#line 15104 "gram.y"
        {
            (yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
        }
#line 46174 "gram.cpp"
        break;

        case 2173: /* overlay_placing: PLACING a_expr  */
#line 15111 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 46180 "gram.cpp"
        break;

        case 2174: /* position_list: b_expr IN_P b_expr  */
#line 15117 "gram.y"
        {
            (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node));
        }
#line 46186 "gram.cpp"
        break;

        case 2175: /* position_list: %empty  */
#line 15118 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 46192 "gram.cpp"
        break;

        case 2176: /* substr_list: a_expr substr_from substr_for  */
#line 15135 "gram.y"
        {
            (yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
        }
#line 46200 "gram.cpp"
        break;

        case 2177: /* substr_list: a_expr substr_for substr_from  */
#line 15139 "gram.y"
        {
            /* not legal per SQL99, but might as well allow it */
            (yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
        }
#line 46209 "gram.cpp"
        break;

        case 2178: /* substr_list: a_expr substr_from  */
#line 15144 "gram.y"
        {
            (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
        }
#line 46217 "gram.cpp"
        break;

        case 2179: /* substr_list: a_expr substr_for  */
#line 15148 "gram.y"
        {
            /*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
            (yyval.list) = list_make3((yyvsp[-1].node),
                                      makeIntConst(1, -1),
                                      makeTypeCast((yyvsp[0].node), SystemTypeName("int4"), -1));
        }
#line 46236 "gram.cpp"
        break;

        case 2180: /* substr_list: expr_list  */
#line 15163 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 46244 "gram.cpp"
        break;

        case 2181: /* substr_list: %empty  */
#line 15167 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 46250 "gram.cpp"
        break;

        case 2182: /* substr_from: FROM a_expr  */
#line 15171 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 46256 "gram.cpp"
        break;

        case 2183: /* substr_for: FOR a_expr  */
#line 15174 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 46262 "gram.cpp"
        break;

        case 2184: /* trim_list: a_expr FROM expr_list  */
#line 15177 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node));
        }
#line 46268 "gram.cpp"
        break;

        case 2185: /* trim_list: FROM expr_list  */
#line 15178 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 46274 "gram.cpp"
        break;

        case 2186: /* trim_list: expr_list  */
#line 15179 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 46280 "gram.cpp"
        break;

        case 2187: /* in_expr: select_with_parens  */
#line 15183 "gram.y"
        {
            SubLink* n = makeNode(SubLink);
            n->subselect = (yyvsp[0].node);
            /* other fields will be filled later */
            (yyval.node) = (Node*) n;
        }
#line 46291 "gram.cpp"
        break;

        case 2188: /* in_expr: '(' expr_list ')'  */
#line 15189 "gram.y"
        {
            (yyval.node) = (Node*) (yyvsp[-1].list);
        }
#line 46297 "gram.cpp"
        break;

        case 2189: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 15200 "gram.y"
        {
            CaseExpr* c = makeNode(CaseExpr);
            c->casetype = InvalidOid; /* not analyzed yet */
            c->arg = (Expr*) (yyvsp[-3].node);
            c->args = (yyvsp[-2].list);
            c->defresult = (Expr*) (yyvsp[-1].node);
            c->location = (yylsp[-4]);
            (yyval.node) = (Node*) c;
        }
#line 46311 "gram.cpp"
        break;

        case 2190: /* when_clause_list: when_clause  */
#line 15213 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 46317 "gram.cpp"
        break;

        case 2191: /* when_clause_list: when_clause_list when_clause  */
#line 15214 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
        }
#line 46323 "gram.cpp"
        break;

        case 2192: /* when_clause: WHEN when_operand THEN a_expr  */
#line 15219 "gram.y"
        {
            CaseWhen* w = makeNode(CaseWhen);
            w->expr = (Expr*) (yyvsp[-2].node);
            w->result = (Expr*) (yyvsp[0].node);
            w->location = (yylsp[-3]);
            (yyval.node) = (Node*) w;
        }
#line 46335 "gram.cpp"
        break;

        case 2193: /* when_operand: a_expr  */
#line 15229 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 46341 "gram.cpp"
        break;

        case 2194: /* when_operand: IS NOT DISTINCT FROM a_expr  */
#line 15230 "gram.y"
        {
            (yyval.node) = makeIsNotDistinctFromNode((yyvsp[0].node), (yylsp[-3]));
        }
#line 46347 "gram.cpp"
        break;

        case 2195: /* case_default: ELSE a_expr  */
#line 15234 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 46353 "gram.cpp"
        break;

        case 2196: /* case_default: %empty  */
#line 15235 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 46359 "gram.cpp"
        break;

        case 2197: /* case_arg: a_expr  */
#line 15238 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 46365 "gram.cpp"
        break;

        case 2198: /* case_arg: %empty  */
#line 15239 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 46371 "gram.cpp"
        break;

        case 2199: /* decode_expr: DECODE '(' a_expr search_result_list decode_default ')'  */
#line 15254 "gram.y"
        {
            CaseExpr* c = makeNode(CaseExpr);
            c->casetype = InvalidOid; /* not analyzed yet */
            c->arg = (Expr*) (yyvsp[-3].node);
            c->args = (yyvsp[-2].list);
            c->defresult = (Expr*) (yyvsp[-1].node);
            (yyval.node) = (Node*) c;
        }
#line 46384 "gram.cpp"
        break;

        case 2200: /* search_result_list: search_result  */
#line 15265 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 46390 "gram.cpp"
        break;

        case 2201: /* search_result_list: search_result_list search_result  */
#line 15266 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
        }
#line 46396 "gram.cpp"
        break;

        case 2202: /* search_result: ',' a_expr ',' a_expr  */
#line 15271 "gram.y"
        {
            Node* n = makeIsNotDistinctFromNode((yyvsp[-2].node), (yylsp[-2]));
            CaseWhen* w = makeNode(CaseWhen);
            w->expr = (Expr*) n;
            w->result = (Expr*) (yyvsp[0].node);
            (yyval.node) = (Node*) w;
        }
#line 46408 "gram.cpp"
        break;

        case 2203: /* decode_default: ',' a_expr  */
#line 15281 "gram.y"
        {
            (yyval.node) = (yyvsp[0].node);
        }
#line 46414 "gram.cpp"
        break;

        case 2204: /* decode_default: %empty  */
#line 15282 "gram.y"
        {
            (yyval.node) = NULL;
        }
#line 46420 "gram.cpp"
        break;

        case 2205: /* columnref: ColId  */
#line 15287 "gram.y"
        {
            (yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
        }
#line 46428 "gram.cpp"
        break;

        case 2206: /* columnref: ColId indirection  */
#line 15291 "gram.y"
        {
            (yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
        }
#line 46436 "gram.cpp"
        break;

        case 2207: /* indirection_el: '.' attr_name  */
#line 15298 "gram.y"
        {
            (yyval.node) = (Node*) makeString((yyvsp[0].str));
        }
#line 46444 "gram.cpp"
        break;

        case 2208: /* indirection_el: '.' '*'  */
#line 15302 "gram.y"
        {
            (yyval.node) = (Node*) makeNode(A_Star);
        }
#line 46452 "gram.cpp"
        break;

        case 2209: /* indirection_el: '[' a_expr ']'  */
#line 15306 "gram.y"
        {
            A_Indices* ai = makeNode(A_Indices);
            ai->lidx = NULL;
            ai->uidx = (yyvsp[-1].node);
            (yyval.node) = (Node*) ai;
        }
#line 46463 "gram.cpp"
        break;

        case 2210: /* indirection_el: '[' a_expr ':' a_expr ']'  */
#line 15313 "gram.y"
        {
            A_Indices* ai = makeNode(A_Indices);
            ai->lidx = (yyvsp[-3].node);
            ai->uidx = (yyvsp[-1].node);
            (yyval.node) = (Node*) ai;
        }
#line 46474 "gram.cpp"
        break;

        case 2211: /* indirection: indirection_el  */
#line 15322 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 46480 "gram.cpp"
        break;

        case 2212: /* indirection: indirection indirection_el  */
#line 15323 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
        }
#line 46486 "gram.cpp"
        break;

        case 2213: /* opt_indirection: %empty  */
#line 15327 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 46492 "gram.cpp"
        break;

        case 2214: /* opt_indirection: opt_indirection indirection_el  */
#line 15328 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
        }
#line 46498 "gram.cpp"
        break;

        case 2217: /* ctext_expr: a_expr  */
#line 15343 "gram.y"
        {
            (yyval.node) = (Node*) (yyvsp[0].node);
        }
#line 46504 "gram.cpp"
        break;

        case 2218: /* ctext_expr: DEFAULT  */
#line 15345 "gram.y"
        {
            SetToDefault* n = makeNode(SetToDefault);
            n->location = (yylsp[0]);
            (yyval.node) = (Node*) n;
        }
#line 46514 "gram.cpp"
        break;

        case 2219: /* ctext_expr_list: ctext_expr  */
#line 15353 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].node));
        }
#line 46520 "gram.cpp"
        break;

        case 2220: /* ctext_expr_list: ctext_expr_list ',' ctext_expr  */
#line 15354 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
        }
#line 46526 "gram.cpp"
        break;

        case 2221: /* ctext_row: '(' ctext_expr_list ')'  */
#line 15362 "gram.y"
        {
            (yyval.list) = (yyvsp[-1].list);
        }
#line 46532 "gram.cpp"
        break;

        case 2222: /* opt_target_list: target_list  */
#line 15372 "gram.y"
        {
            (yyval.list) = (yyvsp[0].list);
        }
#line 46538 "gram.cpp"
        break;

        case 2223: /* opt_target_list: %empty  */
#line 15373 "gram.y"
        {
            (yyval.list) = NIL;
        }
#line 46544 "gram.cpp"
        break;

        case 2224: /* target_list: target_el  */
#line 15377 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].target));
        }
#line 46550 "gram.cpp"
        break;

        case 2225: /* target_list: target_list ',' target_el  */
#line 15378 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target));
        }
#line 46556 "gram.cpp"
        break;

        case 2226: /* target_el: a_expr AS ColLabel  */
#line 15382 "gram.y"
        {
            (yyval.target) = makeNode(ResTarget);
            (yyval.target)->name = (yyvsp[0].str);
            (yyval.target)->indirection = NIL;
            (yyval.target)->val = (Node*) (yyvsp[-2].node);
            (yyval.target)->location = (yylsp[-2]);
        }
#line 46568 "gram.cpp"
        break;

        case 2227: /* target_el: a_expr IDENT  */
#line 15404 "gram.y"
        {
            (yyval.target) = makeNode(ResTarget);
            (yyval.target)->name = (yyvsp[0].str);
            (yyval.target)->indirection = NIL;
            (yyval.target)->val = (Node*) (yyvsp[-1].node);
            (yyval.target)->location = (yylsp[-1]);
        }
#line 46580 "gram.cpp"
        break;

        case 2228: /* target_el: a_expr ColLabelNoAs  */
#line 15412 "gram.y"
        {
            (yyval.target) = makeNode(ResTarget);
            (yyval.target)->name = (yyvsp[0].str);
            (yyval.target)->indirection = NIL;
            (yyval.target)->val = (Node*) (yyvsp[-1].node);
            (yyval.target)->location = (yylsp[-1]);
        }
#line 46592 "gram.cpp"
        break;

        case 2229: /* target_el: a_expr  */
#line 15420 "gram.y"
        {
            (yyval.target) = makeNode(ResTarget);
            (yyval.target)->name = NULL;
            (yyval.target)->indirection = NIL;
            (yyval.target)->val = (Node*) (yyvsp[0].node);
            (yyval.target)->location = (yylsp[0]);
        }
#line 46604 "gram.cpp"
        break;

        case 2230: /* target_el: '*'  */
#line 15428 "gram.y"
        {
            ColumnRef* n = makeNode(ColumnRef);
            n->fields = list_make1(makeNode(A_Star));
            n->location = (yylsp[0]);

            (yyval.target) = makeNode(ResTarget);
            (yyval.target)->name = NULL;
            (yyval.target)->indirection = NIL;
            (yyval.target)->val = (Node*) n;
            (yyval.target)->location = (yylsp[0]);
        }
#line 46620 "gram.cpp"
        break;

        case 2231: /* qualified_name_list: qualified_name  */
#line 15449 "gram.y"
        {
            (yyval.list) = list_make1((yyvsp[0].range));
        }
#line 46626 "gram.cpp"
        break;

        case 2232: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 15450 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range));
        }
#line 46632 "gram.cpp"
        break;

        case 2233: /* qualified_name: ColId  */
#line 15462 "gram.y"
        {
            (yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
        }
#line 46640 "gram.cpp"
        break;

        case 2234: /* qualified_name: ColId indirection  */
#line 15466 "gram.y"
        {
            check_qualified_name((yyvsp[0].list), yyscanner);
            (yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
            switch (list_length((yyvsp[0].list))) {
                case 1:
                    (yyval.range)->catalogname = NULL;
                    (yyval.range)->schemaname = (yyvsp[-1].str);
                    (yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
                    break;
                case 2:
                    (yyval.range)->catalogname = (yyvsp[-1].str);
                    (yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
                    (yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
                    break;
                default:
                    //ereport(ERROR, mdxn: ereport NameListToString
                    //		errcode(ERRCODE_SYNTAX_ERROR),
                    //		 errmsg("improper qualified name (too many dotted names): %s",
                    //				NameListToString(lcons(makeString($1), $2))),
                    //		 parser_errposition(@1));
                    break;
            }
        }
#line 46669 "gram.cpp"
        break;

        case 2235: /* name_list: name  */
#line 15493 "gram.y"
        {
            (yyval.list) = list_make1(makeString((yyvsp[0].str)));
        }
#line 46675 "gram.cpp"
        break;

        case 2236: /* name_list: name_list ',' name  */
#line 15495 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str)));
        }
#line 46681 "gram.cpp"
        break;

        case 2237: /* name: ColId  */
#line 15499 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 46687 "gram.cpp"
        break;

        case 2238: /* database_name: ColId  */
#line 15502 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 46693 "gram.cpp"
        break;

        case 2239: /* access_method: ColId  */
#line 15505 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 46699 "gram.cpp"
        break;

        case 2240: /* attr_name: ColLabel  */
#line 15507 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 46705 "gram.cpp"
        break;

        case 2241: /* index_name: ColId  */
#line 15509 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 46711 "gram.cpp"
        break;

        case 2242: /* file_name: Sconst  */
#line 15511 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 46717 "gram.cpp"
        break;

        case 2243: /* func_name: type_function_name  */
#line 15522 "gram.y"
        {
            (yyval.list) = list_make1(makeString((yyvsp[0].str)));
        }
#line 46723 "gram.cpp"
        break;

        case 2244: /* func_name: ColId indirection  */
#line 15524 "gram.y"
        {
            (yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)), yyscanner);
        }
#line 46732 "gram.cpp"
        break;

        case 2245: /* AexprConst: Iconst  */
#line 15535 "gram.y"
        {
            (yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
        }
#line 46740 "gram.cpp"
        break;

        case 2246: /* AexprConst: FCONST  */
#line 15539 "gram.y"
        {
            (yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
        }
#line 46748 "gram.cpp"
        break;

        case 2247: /* AexprConst: Sconst  */
#line 15543 "gram.y"
        {
            (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
        }
#line 46756 "gram.cpp"
        break;

        case 2248: /* AexprConst: BCONST  */
#line 15547 "gram.y"
        {
            (yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
        }
#line 46764 "gram.cpp"
        break;

        case 2249: /* AexprConst: XCONST  */
#line 15551 "gram.y"
        {
            /* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
            (yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
        }
#line 46777 "gram.cpp"
        break;

        case 2250: /* AexprConst: func_name Sconst  */
#line 15560 "gram.y"
        {
            /* generic type 'literal' syntax */
            TypeName* t = makeTypeNameFromNameList((yyvsp[-1].list));
            t->location = (yylsp[-1]);
            (yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
        }
#line 46788 "gram.cpp"
        break;

        case 2251: /* AexprConst: func_name '(' func_arg_list opt_sort_clause ')' Sconst  */
#line 15567 "gram.y"
        {
            /* generic syntax with a type modifier */
            TypeName* t = makeTypeNameFromNameList((yyvsp[-5].list));
            ListCell* lc;

            /*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow NamedArgExpr in this
					 * context, nor ORDER BY.
					 */
            foreach (lc, (yyvsp[-3].list)) {
                NamedArgExpr* arg = (NamedArgExpr*) lfirst(lc);

                if (IsA(arg, NamedArgExpr))
                    ereport(ERROR,
                            errcode(ERRCODE_SYNTAX_ERROR),
                            errmsg("type modifier cannot have parameter name"),
                            parser_errposition(arg->location));
            }
            if ((yyvsp[-2].list) != NIL)
                ereport(ERROR,
                        errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("type modifier cannot have ORDER BY"),
                        parser_errposition((yylsp[-2])));

            t->typmods = (yyvsp[-3].list);
            t->location = (yylsp[-5]);
            (yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
        }
#line 46824 "gram.cpp"
        break;

        case 2252: /* AexprConst: ConstTypename Sconst  */
#line 15599 "gram.y"
        {
            (yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
        }
#line 46832 "gram.cpp"
        break;

        case 2253: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 15603 "gram.y"
        {
            TypeName* t = (yyvsp[-2].typnam);
            t->typmods = (yyvsp[0].list);
            (yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
        }
#line 46842 "gram.cpp"
        break;

        case 2254: /* AexprConst: ConstInterval '(' Iconst ')' Sconst opt_interval  */
#line 15609 "gram.y"
        {
            TypeName* t = (yyvsp[-5].typnam);
            if ((yyvsp[0].list) != NIL) {
                if (list_length((yyvsp[0].list)) != 1)
                    ereport(ERROR,
                            errcode(ERRCODE_SYNTAX_ERROR),
                            errmsg("interval precision specified twice"),
                            parser_errposition((yylsp[-5])));
                t->typmods = lappend((yyvsp[0].list), makeIntConst((yyvsp[-3].ival), (yylsp[-3])));
            } else
                t->typmods =
                    list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1), makeIntConst((yyvsp[-3].ival), (yylsp[-3])));
            (yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
        }
#line 46863 "gram.cpp"
        break;

        case 2255: /* AexprConst: TRUE_P  */
#line 15626 "gram.y"
        {
            (yyval.node) = makeBoolAConst(TRUE, (yylsp[0]));
        }
#line 46871 "gram.cpp"
        break;

        case 2256: /* AexprConst: FALSE_P  */
#line 15630 "gram.y"
        {
            (yyval.node) = makeBoolAConst(FALSE, (yylsp[0]));
        }
#line 46879 "gram.cpp"
        break;

        case 2257: /* AexprConst: NULL_P  */
#line 15634 "gram.y"
        {
            (yyval.node) = makeNullAConst((yylsp[0]));
        }
#line 46887 "gram.cpp"
        break;

        case 2258: /* Iconst: ICONST  */
#line 15639 "gram.y"
        {
            (yyval.ival) = (yyvsp[0].ival);
        }
#line 46893 "gram.cpp"
        break;

        case 2259: /* Sconst: SCONST  */
#line 15640 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 46899 "gram.cpp"
        break;

        case 2260: /* RoleId: NonReservedWord  */
#line 15641 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 46905 "gram.cpp"
        break;

        case 2261: /* QueueId: NonReservedWord  */
#line 15642 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 46911 "gram.cpp"
        break;

        case 2262: /* role_list: RoleId  */
#line 15645 "gram.y"
        {
            (yyval.list) = list_make1(makeString((yyvsp[0].str)));
        }
#line 46917 "gram.cpp"
        break;

        case 2263: /* role_list: role_list ',' RoleId  */
#line 15647 "gram.y"
        {
            (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str)));
        }
#line 46923 "gram.cpp"
        break;

        case 2264: /* SignedIconst: Iconst  */
#line 15650 "gram.y"
        {
            (yyval.ival) = (yyvsp[0].ival);
        }
#line 46929 "gram.cpp"
        break;

        case 2265: /* SignedIconst: '+' Iconst  */
#line 15651 "gram.y"
        {
            (yyval.ival) = +(yyvsp[0].ival);
        }
#line 46935 "gram.cpp"
        break;

        case 2266: /* SignedIconst: '-' Iconst  */
#line 15652 "gram.y"
        {
            (yyval.ival) = -(yyvsp[0].ival);
        }
#line 46941 "gram.cpp"
        break;

        case 2267: /* ColId: IDENT  */
#line 15668 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 46947 "gram.cpp"
        break;

        case 2268: /* ColId: unreserved_keyword  */
#line 15669 "gram.y"
        {
            (yyval.str) = pstrdup((yyvsp[0].keyword));
        }
#line 46953 "gram.cpp"
        break;

        case 2269: /* ColId: col_name_keyword  */
#line 15670 "gram.y"
        {
            (yyval.str) = pstrdup((yyvsp[0].keyword));
        }
#line 46959 "gram.cpp"
        break;

        case 2270: /* type_function_name: IDENT  */
#line 15675 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 46965 "gram.cpp"
        break;

        case 2271: /* type_function_name: unreserved_keyword  */
#line 15676 "gram.y"
        {
            (yyval.str) = pstrdup((yyvsp[0].keyword));
        }
#line 46971 "gram.cpp"
        break;

        case 2272: /* type_function_name: type_func_name_keyword  */
#line 15677 "gram.y"
        {
            (yyval.str) = pstrdup((yyvsp[0].keyword));
        }
#line 46977 "gram.cpp"
        break;

        case 2273: /* NonReservedWord: IDENT  */
#line 15682 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 46983 "gram.cpp"
        break;

        case 2274: /* NonReservedWord: unreserved_keyword  */
#line 15683 "gram.y"
        {
            (yyval.str) = pstrdup((yyvsp[0].keyword));
        }
#line 46989 "gram.cpp"
        break;

        case 2275: /* NonReservedWord: col_name_keyword  */
#line 15684 "gram.y"
        {
            (yyval.str) = pstrdup((yyvsp[0].keyword));
        }
#line 46995 "gram.cpp"
        break;

        case 2276: /* NonReservedWord: type_func_name_keyword  */
#line 15685 "gram.y"
        {
            (yyval.str) = pstrdup((yyvsp[0].keyword));
        }
#line 47001 "gram.cpp"
        break;

        case 2277: /* ColLabel: IDENT  */
#line 15691 "gram.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 47007 "gram.cpp"
        break;

        case 2278: /* ColLabel: unreserved_keyword  */
#line 15692 "gram.y"
        {
            (yyval.str) = pstrdup((yyvsp[0].keyword));
        }
#line 47013 "gram.cpp"
        break;

        case 2279: /* ColLabel: col_name_keyword  */
#line 15693 "gram.y"
        {
            (yyval.str) = pstrdup((yyvsp[0].keyword));
        }
#line 47019 "gram.cpp"
        break;

        case 2280: /* ColLabel: type_func_name_keyword  */
#line 15694 "gram.y"
        {
            (yyval.str) = pstrdup((yyvsp[0].keyword));
        }
#line 47025 "gram.cpp"
        break;

        case 2281: /* ColLabel: reserved_keyword  */
#line 15695 "gram.y"
        {
            (yyval.str) = pstrdup((yyvsp[0].keyword));
        }
#line 47031 "gram.cpp"
        break;

        case 2598: /* ColLabelNoAs: keywords_ok_in_alias_no_as  */
#line 16044 "gram.y"
        {
            (yyval.str) = pstrdup((yyvsp[0].keyword));
        }
#line 47037 "gram.cpp"
        break;

        case 2604: /* PartitionColId: PartitionIdentKeyword  */
#line 16054 "gram.y"
        {
            (yyval.str) = pstrdup((yyvsp[0].keyword));
        }
#line 47043 "gram.cpp"
        break;

        case 2605: /* PartitionColId: IDENT  */
#line 16055 "gram.y"
        {
            (yyval.str) = pstrdup((yyvsp[0].str));
        }
#line 47049 "gram.cpp"
        break;

#line 47053 "gram.cpp"

        default:
            break;
    }
    /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
    YY_SYMBOL_PRINT("-> $$ =", YY_CAST(yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

    YYPOPSTACK(yylen);
    yylen = 0;

    *++yyvsp = yyval;
    *++yylsp = yyloc;

    /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
    {
        const int yylhs = yyr1[yyn] - YYNTOKENS;
        const int yyi = yypgoto[yylhs] + *yyssp;
        yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp ? yytable[yyi] : yydefgoto[yylhs]);
    }

    goto yynewstate;

/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
    /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
    yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE(yychar);
    /* If not already recovering from an error, report this error.  */
    if (!yyerrstatus) {
        ++yynerrs;
        yyerror(&yylloc, yyscanner, YY_("syntax error"));
    }

    yyerror_range[1] = yylloc;
    if (yyerrstatus == 3) {
        /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

        if (yychar <= YYEOF) {
            /* Return failure if at end of input.  */
            if (yychar == YYEOF)
                YYABORT;
        } else {
            yydestruct("Error: discarding", yytoken, &yylval, &yylloc, yyscanner);
            yychar = YYEMPTY;
        }
    }

    /* Else will try to reuse lookahead token after shifting the error
     token.  */
    goto yyerrlab1;

/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
    /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
    if (0)
        YYERROR;
    ++yynerrs;

    /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
    YYPOPSTACK(yylen);
    yylen = 0;
    YY_STACK_PRINT(yyss, yyssp);
    yystate = *yyssp;
    goto yyerrlab1;

/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
    yyerrstatus = 3; /* Each real token shifted decrements this.  */

    /* Pop stack until we find a state that shifts the error token.  */
    for (;;) {
        yyn = yypact[yystate];
        if (!yypact_value_is_default(yyn)) {
            yyn += YYSYMBOL_YYerror;
            if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror) {
                yyn = yytable[yyn];
                if (0 < yyn)
                    break;
            }
        }

        /* Pop the current state because it cannot handle the error token.  */
        if (yyssp == yyss)
            YYABORT;

        yyerror_range[1] = *yylsp;
        yydestruct("Error: popping", YY_ACCESSING_SYMBOL(yystate), yyvsp, yylsp, yyscanner);
        YYPOPSTACK(1);
        yystate = *yyssp;
        YY_STACK_PRINT(yyss, yyssp);
    }

    YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
    *++yyvsp = yylval;
    YY_IGNORE_MAYBE_UNINITIALIZED_END

    yyerror_range[2] = yylloc;
    ++yylsp;
    YYLLOC_DEFAULT(*yylsp, yyerror_range, 2);

    /* Shift the error token.  */
    YY_SYMBOL_PRINT("Shifting", YY_ACCESSING_SYMBOL(yyn), yyvsp, yylsp);

    yystate = yyn;
    goto yynewstate;

/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
    yyresult = 0;
    goto yyreturnlab;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
    yyresult = 1;
    goto yyreturnlab;

/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
    yyerror(&yylloc, yyscanner, YY_("memory exhausted"));
    yyresult = 2;
    goto yyreturnlab;

/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
    if (yychar != YYEMPTY) {
        /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
        yytoken = YYTRANSLATE(yychar);
        yydestruct("Cleanup: discarding lookahead", yytoken, &yylval, &yylloc, yyscanner);
    }
    /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
    YYPOPSTACK(yylen);
    YY_STACK_PRINT(yyss, yyssp);
    while (yyssp != yyss) {
        yydestruct("Cleanup: popping", YY_ACCESSING_SYMBOL(+*yyssp), yyvsp, yylsp, yyscanner);
        YYPOPSTACK(1);
    }
#ifndef yyoverflow
    if (yyss != yyssa)
        YYSTACK_FREE(yyss);
#endif

    return yyresult;
}

#line 16532 "gram.y"

/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void base_yyerror(YYLTYPE* yylloc, core_yyscan_t yyscanner, const char* msg) { parser_yyerror(msg); }

static Node* makeColumnRef(char* colname, List* indirection, int location, core_yyscan_t yyscanner) {
    /*
	 * Generate a ColumnRef node, with an A_Indirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the ColumnRef node.
	 */
    ColumnRef* c = makeNode(ColumnRef);
    int nfields = 0;
    ListCell* l;

    c->location = location;
    foreach (l, indirection) {
        if (IsA(lfirst(l), A_Indices)) {
            A_Indirection* i = makeNode(A_Indirection);

            if (nfields == 0) {
                /* easy case - all indirection goes to A_Indirection */
                c->fields = list_make1(makeString(colname));
                i->indirection = check_indirection(indirection, yyscanner);
            } else {
                /* got to split the list in two */
                i->indirection = check_indirection(list_copy_tail(indirection, nfields), yyscanner);
                indirection = list_truncate(indirection, nfields);
                c->fields = lcons(makeString(colname), indirection);
            }
            i->arg = reinterpret_cast<Node*>(c);
            return reinterpret_cast<Node*>(i);
        } else if (IsA(lfirst(l), A_Star)) {
            /* We only allow '*' at the end of a ColumnRef */
            if (_it_ != indirection->lst.end())
                parser_yyerror("improper use of \"*\"");
        }
        nfields++;
    }
    /* No subscripting, so all indirection gets added to field list */
    c->fields = lcons(makeString(colname), indirection);
    return reinterpret_cast<Node*>(c);
}

static Node* makeTypeCast(Node* arg, TypeName* type, int location) {
    TypeCast* n = makeNode(TypeCast);
    n->arg = arg;
    n->typeName = type;
    n->location = location;
    return (Node*) n;
}

static Node* makeStringConst(char* str, int location) {
    A_Const* n = makeNode(A_Const);

    n->val.type = T_String;
    n->val.val.str = str;
    n->location = location;

    return (Node*) n;
}

static Node* makeStringConstCast(char* str, int location, TypeName* type) {
    Node* s = makeStringConst(str, location);

    return makeTypeCast(s, type, -1);
}

static Node* makeIntConst(int val, int location) {
    A_Const* n = makeNode(A_Const);

    n->val.type = T_Integer;
    n->val.val.ival = val;
    n->location = location;

    return (Node*) n;
}

static Node* makeFloatConst(char* str, int location) {
    A_Const* n = makeNode(A_Const);

    n->val.type = T_Float;
    n->val.val.str = str;
    n->location = location;

    return reinterpret_cast<Node*>(n);
}

static Node* makeBitStringConst(char* str, int location) {
    A_Const* n = makeNode(A_Const);

    n->val.type = T_BitString;
    n->val.val.str = str;
    n->location = location;

    return reinterpret_cast<Node*>(n);
}

static Node* makeNullAConst(int location) {
    A_Const* n = makeNode(A_Const);

    n->val.type = T_Null;
    n->location = location;

    return reinterpret_cast<Node*>(n);
}

static Node* makeAConst(Value* v, int location) {
    Node* n;

    switch (v->type) {
        case T_Float:
            n = makeFloatConst(v->val.str, location);
            break;

        case T_Integer:
            n = makeIntConst(v->val.ival, location);
            break;

        case T_String:
        default:
            n = makeStringConst(v->val.str, location);
            break;
    }

    return n;
}

/* makeBoolAConst()
 * Create an A_Const string node and put it inside a boolean cast.
 */
static Node* makeBoolAConst(bool state, int location) {
    A_Const* n = makeNode(A_Const);

    n->val.type = T_String;
    n->val.val.str = (state ? pstrdup("t") : pstrdup("f"));
    n->location = location;

    return makeTypeCast(reinterpret_cast<Node*>(n), SystemTypeName("bool"), -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void check_qualified_name(List* names, core_yyscan_t yyscanner) {
    ListCell* i;

    foreach (i, names) {
        if (!IsA(lfirst(i), String))
            parser_yyerror("syntax error");
    }
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static List* check_func_name(List* names, core_yyscan_t yyscanner) {
    ListCell* i;

    foreach (i, names) {
        if (!IsA(lfirst(i), String))
            parser_yyerror("syntax error");
    }
    return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static List* check_indirection(List* indirection, core_yyscan_t yyscanner) {
    ListCell* l;

    foreach (l, indirection) {
        if (IsA(lfirst(l), A_Star)) {
            if (++_it_ != indirection->lst.end())
                parser_yyerror("improper use of \"*\"");
        }
    }
    return indirection;
}

/* extractArgTypes()
 * Given a list of FunctionParameter nodes, extract a list of just the
 * argument types (TypeNames) for input parameters only.  This is what
 * is needed to look up an existing function, which is what is wanted by
 * the productions that use this call.
 */
static List* extractArgTypes(List* parameters) {
    List* result = NIL;
    ListCell* i;

    foreach (i, parameters) {
        FunctionParameter* p = reinterpret_cast<FunctionParameter*>(lfirst(i));

        if (p->mode != FUNC_PARAM_OUT && p->mode != FUNC_PARAM_TABLE)
            result = lappend(result, p->argType);
    }
    return result;
}

/* extractAggrArgTypes()
 * As above, but work from the output of the aggr_args production.
 */
static List* extractAggrArgTypes(List* aggrargs) {
    Assert(list_length(aggrargs) == 2);
    return extractArgTypes(reinterpret_cast<List*>(linitial(aggrargs)));
}

/* makeOrderedSetArgs()
 * Build the result of the aggr_args production (which see the comments for).
 * This handles only the case where both given lists are nonempty, so that
 * we have to deal with multiple VARIADIC arguments.
 */
static List* makeOrderedSetArgs(List* directargs, List* orderedargs, core_yyscan_t yyscanner) {
    FunctionParameter* lastd = reinterpret_cast<FunctionParameter*>(llast(directargs));
    int ndirectargs;

    /* No restriction unless last direct arg is VARIADIC */
    if (lastd->mode == FUNC_PARAM_VARIADIC) {
        FunctionParameter* firsto = reinterpret_cast<FunctionParameter*>(linitial(orderedargs));

        /*
		 * We ignore the names, though the aggr_arg production allows them;
		 * it doesn't allow default values, so those need not be checked.
		 */
        if (list_length(orderedargs) != 1 || firsto->mode != FUNC_PARAM_VARIADIC ||
            !equal(lastd->argType, firsto->argType))
            ereport(ERROR,
                    errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                    errmsg("an ordered-set aggregate with a VARIADIC direct argument must have one VARIADIC aggregated "
                           "argument of the same data type"),
                    parser_errposition(exprLocation(reinterpret_cast<Node*>(firsto))));

        /* OK, drop the duplicate VARIADIC argument from the internal form */
        orderedargs = NIL;
    }

    /* don't merge into the next line, as list_concat changes directargs */
    ndirectargs = list_length(directargs);

    return list_make2(list_concat(directargs, orderedargs), makeInteger(ndirectargs));
}

/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in SelectStmt productions.
 */
static void insertSelectOptions(SelectStmt* stmt,
                                List* sortClause,
                                List* lockingClause,
                                Node* limitOffset,
                                Node* limitCount,
                                WithClause* withClause,
                                core_yyscan_t yyscanner) {
    Assert(IsA(stmt, SelectStmt));

    /*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
    if (sortClause) {
        if (stmt->sortClause)
            ereport(ERROR,
                    errcode(ERRCODE_SYNTAX_ERROR),
                    errmsg("multiple ORDER BY clauses not allowed"),
                    parser_errposition(exprLocation(reinterpret_cast<Node*>(sortClause))));
        stmt->sortClause = sortClause;
    }
    /* We can handle multiple locking clauses, though */
    stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
    if (limitOffset) {
        if (stmt->limitOffset)
            ereport(ERROR,
                    errcode(ERRCODE_SYNTAX_ERROR),
                    errmsg("multiple OFFSET clauses not allowed"),
                    parser_errposition(exprLocation(limitOffset)));
        stmt->limitOffset = limitOffset;
    }
    if (limitCount) {
        if (stmt->limitCount)
            ereport(ERROR,
                    errcode(ERRCODE_SYNTAX_ERROR),
                    errmsg("multiple LIMIT clauses not allowed"),
                    parser_errposition(exprLocation(limitCount)));
        stmt->limitCount = limitCount;
    }
    if (withClause) {
        if (stmt->withClause)
            ereport(ERROR,
                    errcode(ERRCODE_SYNTAX_ERROR),
                    errmsg("multiple WITH clauses not allowed"),
                    parser_errposition(exprLocation(reinterpret_cast<Node*>(withClause))));
        stmt->withClause = withClause;
    }
}

static Node* makeSetOp(SetOperation op, bool all, Node* larg, Node* rarg) {
    SelectStmt* n = makeNode(SelectStmt);

    n->op = op;
    n->all = all;
    n->larg = reinterpret_cast<SelectStmt*>(larg);
    n->rarg = reinterpret_cast<SelectStmt*>(rarg);
    return (Node*) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
List* SystemFuncName(char* name) { return list_make2(makeString("pg_catalog"), makeString(name)); }

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
TypeName* SystemTypeName(char* name) {
    return makeTypeNameFromNameList(list_make2(makeString("pg_catalog"), makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static Node* doNegate(Node* n, int location) {
    if (IsA(n, A_Const)) {
        A_Const* con = reinterpret_cast<A_Const*>(n);

        /* report the constant's location as that of the '-' sign */
        con->location = location;

        if (con->val.type == T_Integer) {
            con->val.val.ival = -con->val.val.ival;
            return n;
        }
        if (con->val.type == T_Float) {
            doNegateFloat(&con->val);
            return n;
        }
    }

    return (Node*) makeSimpleA_Expr(AEXPR_OP, "-", NULL, n, location);
}

static void doNegateFloat(Value* v) {
    char* oldval = v->val.str;

    Assert(IsA(v, Float));
    if (*oldval == '+')
        oldval++;
    if (*oldval == '-')
        v->val.str = oldval + 1; /* just strip the '-' */
    else
        v->val.str = psprintf("-%s", oldval);
}

static Node* makeAArrayExpr(List* elements, int location) {
    A_ArrayExpr* n = makeNode(A_ArrayExpr);

    n->elements = elements;
    n->location = location;
    return (Node*) n;
}

static Node* makeXmlExpr(XmlExprOp op, char* name, List* named_args, List* args, int location) {
    XmlExpr* x = makeNode(XmlExpr);

    x->op = op;
    x->name = name;
    /*
	 * named_args is a list of ResTarget; it'll be split apart into separate
	 * expression and name lists in transformXmlExpr().
	 */
    x->named_args = named_args;
    x->arg_names = NIL;
    x->args = args;
    /* xmloption, if relevant, must be filled in by caller */
    /* type and typmod will be filled in during parse analysis */
    x->type = InvalidOid; /* marks the node as not analyzed */
    x->location = location;
    return reinterpret_cast<Node*>(x);
}

/*
 * Merge the input and output parameters of a table function.
 */
static List* mergeTableFuncParameters(List* func_args, List* columns) {
    ListCell* lc;

    /* Explicit OUT and INOUT parameters shouldn't be used in this syntax */
    foreach (lc, func_args) {
        FunctionParameter* p = reinterpret_cast<FunctionParameter*>(lfirst(lc));

        switch (p->mode) {
            /* Input modes */
            case FUNC_PARAM_IN:
            case FUNC_PARAM_VARIADIC:
                break;

            /* Output modes */
            case FUNC_PARAM_TABLE:
                Insist(false); /* not feasible */
                break;
            case FUNC_PARAM_OUT:
                ereport(ERROR,
                        errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("OUT arguments aren't allowed in TABLE functions"));
                break;
            case FUNC_PARAM_INOUT:
                ereport(ERROR,
                        errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("INOUT arguments aren't allowed in TABLE functions"));
                break;
        }
    }

    return list_concat(func_args, columns);
}

/*
 * Determine return type of a TABLE function.  A single result column
 * returns setof that column's type; otherwise return setof record.
 */
static TypeName* TableFuncTypeName(List* columns) {
    TypeName* result;

    if (list_length(columns) == 1) {
        FunctionParameter* p = reinterpret_cast<FunctionParameter*>(linitial(columns));

        result = reinterpret_cast<TypeName*>(copyObject(p->argType));
    } else
        result = SystemTypeName("record");

    result->setof = true;

    return result;
}

static void checkWindowExclude(void) {
    /*
	 * because the syntax has historically existed without doing anything
	 * we have chosen to add a guc to allow simply ignoring the exclude clause
	 * rather than raising an error.
	 */
    if (gp_ignore_window_exclude)
        return;

    /* MPP-13628 */
    ereport(ERROR, errcode(ERRCODE_FEATURE_NOT_SUPPORTED), errmsg("window EXCLUDE clause not yet implemented"));
}

/*
 * Create the IS_NOT_DISTINCT_FROM expression node
 *     used by CASE x WHEN IS NOT DISTINCT FROM and DECODE()
 */
static Node* makeIsNotDistinctFromNode(Node* expr, int position) {
    Node* n = reinterpret_cast<Node*>(
        makeA_Expr(AEXPR_NOT,
                   NIL,
                   NULL,
                   reinterpret_cast<Node*>(makeSimpleA_Expr(AEXPR_DISTINCT, "=", NULL, expr, position)),
                   position));
    return n;
}

/*
 * Convert a list of (dotted) names to a RangeVar (like
 * makeRangeVarFromNameList, but with position support).  The
 * "AnyName" refers to the any_name production in the grammar.
 */
static RangeVar* makeRangeVarFromAnyName(List* names, int position, core_yyscan_t yyscanner) {
    RangeVar* r = makeNode(RangeVar);

    switch (list_length(names)) {
        case 1:
            r->catalogname = NULL;
            r->schemaname = NULL;
            r->relname = strVal(linitial(names));
            break;
        case 2:
            r->catalogname = NULL;
            r->schemaname = strVal(linitial(names));
            r->relname = strVal(lsecond(names));
            break;
        case 3:
            r->catalogname = strVal(linitial(names));
            r->schemaname = strVal(lsecond(names));
            r->relname = strVal(lthird(names));
            break;
        default:
            //ereport(ERROR, mdxn: ereport NameListToString
            //		errcode(ERRCODE_SYNTAX_ERROR),
            //		 errmsg("improper qualified name (too many dotted names): %s",
            //				NameListToString(names)),
            //		 parser_errposition(position));
            break;
    }

    r->relpersistence = RELPERSISTENCE_PERMANENT;
    r->location = position;

    return r;
}

/* Separate Constraint nodes from COLLATE clauses in a ColQualList */
static void
SplitColQualList(List* qualList, List** constraintList, CollateClause** collClause, core_yyscan_t yyscanner) {
    *collClause = NULL;
    for (auto cell = qualList->lst.begin(); cell != qualList->lst.end();) {
        Node* n = reinterpret_cast<Node*>(lfirst(cell));
        if (IsA(n, Constraint)) {
            /* keep it in list */
            ++cell;
            continue;
        }
        if (IsA(n, CollateClause)) {
            CollateClause* c = reinterpret_cast<CollateClause*>(n);

            if (*collClause)
                ereport(ERROR,
                        errcode(ERRCODE_SYNTAX_ERROR),
                        errmsg("multiple COLLATE clauses not allowed"),
                        parser_errposition(c->location));
            *collClause = c;
        } else
            elog(ERROR, "unexpected node type %d", (int) n->type);
        /* remove non-Constraint nodes from qualList */
        cell = qualList->lst.erase(cell);
    }
    *constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void processCASbits(int cas_bits,
                           int location,
                           const char* constrType,
                           bool* deferrable,
                           bool* initdeferred,
                           bool* not_valid,
                           bool* no_inherit,
                           core_yyscan_t yyscanner) {
    /* defaults */
    if (deferrable)
        *deferrable = false;
    if (initdeferred)
        *initdeferred = false;
    if (not_valid)
        *not_valid = false;

    if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED)) {
        if (deferrable)
            *deferrable = true;
        else
            ereport(ERROR,
                    errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                    /* translator: %s is CHECK, UNIQUE, or similar */
                    errmsg("%s constraints cannot be marked DEFERRABLE", constrType),
                    parser_errposition(location));
    }

    if (cas_bits & CAS_INITIALLY_DEFERRED) {
        if (initdeferred)
            *initdeferred = true;
        else
            ereport(ERROR,
                    errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                    /* translator: %s is CHECK, UNIQUE, or similar */
                    errmsg("%s constraints cannot be marked DEFERRABLE", constrType),
                    parser_errposition(location));
    }

    if (cas_bits & CAS_NOT_VALID) {
        if (not_valid)
            *not_valid = true;
        else
            ereport(ERROR,
                    errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                    /* translator: %s is CHECK, UNIQUE, or similar */
                    errmsg("%s constraints cannot be marked NOT VALID", constrType),
                    parser_errposition(location));
    }

    if (cas_bits & CAS_NO_INHERIT) {
        if (no_inherit)
            *no_inherit = true;
        else
            ereport(ERROR,
                    errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                    /* translator: %s is CHECK, UNIQUE, or similar */
                    errmsg("%s constraints cannot be marked NO INHERIT", constrType),
                    parser_errposition(location));
    }
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view definition as the query.
 * ----------
 */
static Node* makeRecursiveViewSelect(char* relname, List* aliases, Node* query) {
    SelectStmt* s = makeNode(SelectStmt);
    WithClause* w = makeNode(WithClause);
    CommonTableExpr* cte = makeNode(CommonTableExpr);
    List* tl = NIL;
    ListCell* lc;

    /* create common table expression */
    cte->ctename = relname;
    cte->aliascolnames = aliases;
    cte->ctequery = query;
    cte->location = -1;

    /* create WITH clause and attach CTE */
    w->recursive = true;
    w->ctes = list_make1(cte);
    w->location = -1;

    /* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
    foreach (lc, aliases) {
        ResTarget* rt = makeNode(ResTarget);

        rt->name = NULL;
        rt->indirection = NIL;
        rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
        rt->location = -1;

        tl = lappend(tl, rt);
    }

    /* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
    s->withClause = w;
    s->targetList = tl;
    s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

    return reinterpret_cast<Node*>(s);
}

/* parser_init()
 * Initialize to parse one query string
 */
void parser_init(base_yy_extra_type* yyext) { yyext->parsetree = NIL; /* in case grammar forgets to set it */ }
