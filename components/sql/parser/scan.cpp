#line 1 "scan.cpp"
/*-------------------------------------------------------------------------
 *
 * scan.l
 *	  lexical scanner for PostgreSQL
 *
 * NOTE NOTE NOTE:
 *
 * The rules in this file must be kept in sync with psql's psqlscan.l!
 *
 * The rules are designed so that the scanner never has to backtrack,
 * in the sense that there is always a rule that can match the input
 * consumed so far (the rule action may internally throw back some input
 * with yyless(), however).  As explained in the flex manual, this makes
 * for a useful speed increase --- about a third faster than a plain -CF
 * lexer, in simple testing.  The extra complexity is mostly in the rules
 * for handling float numbers and continued string literals.  If you change
 * the lexical rules, verify that you haven't broken the no-backtrack
 * property by running flex with the "-b" option and checking that the
 * resulting "lex.backup" file says that no backing up is needed.  (As of
 * Postgres 9.2, this check is made automatically by the Makefile.)
 *
 *
 * Portions Copyright (c) 1996-2014, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/parser/scan.l
 *
 *-------------------------------------------------------------------------
 */
#include <ctype.h>
#include <unistd.h>

#include "gramparse.h"
#include "guc.h" /* only needed for GUC variables */
#include "pg_functions.h"
#include "pg_wchar.h"
#include "scansup.h"

#line 41 "scan.cpp"

#define YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define core_yy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer core_yy_create_buffer
#endif

#ifdef yy_delete_buffer
#define core_yy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer core_yy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define core_yy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer core_yy_scan_buffer
#endif

#ifdef yy_scan_string
#define core_yy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string core_yy_scan_string
#endif

#ifdef yy_scan_bytes
#define core_yy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes core_yy_scan_bytes
#endif

#ifdef yy_init_buffer
#define core_yy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer core_yy_init_buffer
#endif

#ifdef yy_flush_buffer
#define core_yy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer core_yy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define core_yy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state core_yy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define core_yy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer core_yy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define core_yypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state core_yypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define core_yypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state core_yypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define core_yyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack core_yyensure_buffer_stack
#endif

#ifdef yylex
#define core_yylex_ALREADY_DEFINED
#else
#define yylex core_yylex
#endif

#ifdef yyrestart
#define core_yyrestart_ALREADY_DEFINED
#else
#define yyrestart core_yyrestart
#endif

#ifdef yylex_init
#define core_yylex_init_ALREADY_DEFINED
#else
#define yylex_init core_yylex_init
#endif

#ifdef yylex_init_extra
#define core_yylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra core_yylex_init_extra
#endif

#ifdef yylex_destroy
#define core_yylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy core_yylex_destroy
#endif

#ifdef yyget_debug
#define core_yyget_debug_ALREADY_DEFINED
#else
#define yyget_debug core_yyget_debug
#endif

#ifdef yyset_debug
#define core_yyset_debug_ALREADY_DEFINED
#else
#define yyset_debug core_yyset_debug
#endif

#ifdef yyget_extra
#define core_yyget_extra_ALREADY_DEFINED
#else
#define yyget_extra core_yyget_extra
#endif

#ifdef yyset_extra
#define core_yyset_extra_ALREADY_DEFINED
#else
#define yyset_extra core_yyset_extra
#endif

#ifdef yyget_in
#define core_yyget_in_ALREADY_DEFINED
#else
#define yyget_in core_yyget_in
#endif

#ifdef yyset_in
#define core_yyset_in_ALREADY_DEFINED
#else
#define yyset_in core_yyset_in
#endif

#ifdef yyget_out
#define core_yyget_out_ALREADY_DEFINED
#else
#define yyget_out core_yyget_out
#endif

#ifdef yyset_out
#define core_yyset_out_ALREADY_DEFINED
#else
#define yyset_out core_yyset_out
#endif

#ifdef yyget_leng
#define core_yyget_leng_ALREADY_DEFINED
#else
#define yyget_leng core_yyget_leng
#endif

#ifdef yyget_text
#define core_yyget_text_ALREADY_DEFINED
#else
#define yyget_text core_yyget_text
#endif

#ifdef yyget_lineno
#define core_yyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno core_yyget_lineno
#endif

#ifdef yyset_lineno
#define core_yyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno core_yyset_lineno
#endif

#ifdef yyget_column
#define core_yyget_column_ALREADY_DEFINED
#else
#define yyget_column core_yyget_column
#endif

#ifdef yyset_column
#define core_yyset_column_ALREADY_DEFINED
#else
#define yyset_column core_yyset_column
#endif

#ifdef yywrap
#define core_yywrap_ALREADY_DEFINED
#else
#define yywrap core_yywrap
#endif

#ifdef yyget_lval
#define core_yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval core_yyget_lval
#endif

#ifdef yyset_lval
#define core_yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval core_yyset_lval
#endif

#ifdef yyget_lloc
#define core_yyget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc core_yyget_lloc
#endif

#ifdef yyset_lloc
#define core_yyset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc core_yyset_lloc
#endif

#ifdef yyalloc
#define core_yyalloc_ALREADY_DEFINED
#else
#define yyalloc core_yyalloc
#endif

#ifdef yyrealloc
#define core_yyrealloc_ALREADY_DEFINED
#else
#define yyrealloc core_yyrealloc
#endif

#ifdef yyfree
#define core_yyfree_ALREADY_DEFINED
#else
#define yyfree core_yyfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN (-32767 - 1)
#endif
#ifndef INT32_MIN
#define INT32_MIN (-2147483647 - 1)
#endif
#ifndef INT8_MAX
#define INT8_MAX (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX (~(size_t) 0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR)(c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin, yyscanner)
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state* YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)
#define YY_LINENO_REWIND_TO(ptr)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n)                                                                                                      \
    do {                                                                                                               \
        /* Undo effects of setting up yytext. */                                                                       \
        int yyless_macro_arg = (n);                                                                                    \
        YY_LESS_LINENO(yyless_macro_arg);                                                                              \
        *yy_cp = yyg->yy_hold_char;                                                                                    \
        YY_RESTORE_YY_MORE_OFFSET                                                                                      \
        yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ;                                              \
        YY_DO_BEFORE_ACTION; /* set up yytext again */                                                                 \
    } while (0)
#define unput(c) yyunput(c, yyg->yytext_ptr, yyscanner)

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state {
    FILE* yy_input_file;

    char* yy_ch_buf;  /* input buffer */
    char* yy_buf_pos; /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
    int yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
    int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

    /* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
    int yy_fill_buffer;

    int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER (yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart(FILE* input_file, yyscan_t yyscanner);
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner);
YY_BUFFER_STATE yy_create_buffer(FILE* file, int size, yyscan_t yyscanner);
void yy_delete_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner);
void yy_flush_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner);
void yypush_buffer_state(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner);
void yypop_buffer_state(yyscan_t yyscanner);

static void yyensure_buffer_stack(yyscan_t yyscanner);
static void yy_load_buffer_state(yyscan_t yyscanner);
static void yy_init_buffer(YY_BUFFER_STATE b, FILE* file, yyscan_t yyscanner);
#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER, yyscanner)

YY_BUFFER_STATE yy_scan_buffer(char* base, yy_size_t size, yyscan_t yyscanner);
YY_BUFFER_STATE yy_scan_string(const char* yy_str, yyscan_t yyscanner);
YY_BUFFER_STATE yy_scan_bytes(const char* bytes, int len, yyscan_t yyscanner);

void* yyalloc(yy_size_t, yyscan_t yyscanner);
void* yyrealloc(void*, yy_size_t, yyscan_t yyscanner);
void yyfree(void*, yyscan_t yyscanner);

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive)                                                                             \
    {                                                                                                                  \
        if (!YY_CURRENT_BUFFER) {                                                                                      \
            yyensure_buffer_stack(yyscanner);                                                                          \
            YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner);                                 \
        }                                                                                                              \
        YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive;                                                  \
    }
#define yy_set_bol(at_bol)                                                                                             \
    {                                                                                                                  \
        if (!YY_CURRENT_BUFFER) {                                                                                      \
            yyensure_buffer_stack(yyscanner);                                                                          \
            YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner);                                 \
        }                                                                                                              \
        YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol;                                                                  \
    }
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define core_yywrap(yyscanner) (/*CONSTCOND*/ 1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state(yyscan_t yyscanner);
static yy_state_type yy_try_NUL_trans(yy_state_type current_state, yyscan_t yyscanner);
static int yy_get_next_buffer(yyscan_t yyscanner);
static void yynoreturn yy_fatal_error(const char* msg, yyscan_t yyscanner);

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION                                                                                            \
    yyg->yytext_ptr = yy_bp;                                                                                           \
    yyleng = (int) (yy_cp - yy_bp);                                                                                    \
    yyg->yy_hold_char = *yy_cp;                                                                                        \
    *yy_cp = '\0';                                                                                                     \
    yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 74
#define YY_END_OF_BUFFER 75
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info {
    flex_int32_t yy_verify;
    flex_int32_t yy_nxt;
};
static const flex_int16_t yy_accept[281] = {
    0,  0,  0,  12, 12, 0,  0,  0,  0,  11, 11, 0,  0,  0,  0,  0,  0,  0,  0,  55, 55, 0,  0,  28, 28, 0,  0,
    75, 73, 1,  1,  64, 49, 73, 63, 19, 63, 63, 63, 63, 66, 63, 72, 72, 72, 72, 72, 72, 12, 9,  5,  5,  6,  6,
    58, 51, 11, 16, 32, 32, 22, 42, 31, 22, 46, 46, 48, 52, 54, 53, 53, 54, 54, 24, 27, 26, 26, 27, 27, 35, 36,
    35, 1,  64, 43, 65, 44, 1,  61, 67, 2,  67, 66, 70, 60, 62, 72, 8,  20, 18, 59,

    15, 12, 9,  9,  10, 5,  7,  4,  3,  58, 57, 11, 16, 16, 17, 32, 22, 22, 30, 23, 38, 39, 37, 37, 38, 31, 46,
    45, 47, 53, 53, 55, 24, 24, 25, 26, 26, 28, 37, 37, 44, 1,  1,  2,  68, 67, 71, 69, 50, 21, 9,  14, 10, 9,
    3,  16, 13, 17, 16, 22, 41, 23, 22, 39, 37, 37, 40, 47, 53, 55, 24, 25, 24, 26, 28, 37, 37, 9,  9,  9,  9,
    16, 16, 16, 16, 22, 22, 22, 22, 39, 37, 37, 40, 55, 24, 24, 24, 24, 28, 37,

    37, 9,  9,  9,  9,  9,  16, 16, 16, 16, 16, 22, 22, 22, 22, 22, 37, 37, 55, 24, 24, 24, 24, 24, 28, 37, 37,
    9,  16, 22, 37, 33, 55, 24, 28, 37, 34, 37, 55, 28, 37, 37, 55, 55, 55, 28, 28, 28, 37, 37, 55, 55, 28, 28,
    37, 56, 55, 55, 55, 55, 29, 28, 28, 28, 28, 55, 55, 55, 55, 55, 28, 28, 28, 28, 28, 55, 55, 28, 28, 0};

static const YY_CHAR yy_ec[256] = {
    0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  3,  1,  2,  4,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  2,  5,  6,  5,  7,  8,  9,  10, 11, 11, 12, 13, 11, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17,
    18, 18, 19, 11, 8,  20, 8,  5,  5,  21, 22, 23, 24, 25, 24, 26, 26, 26, 26, 26, 26, 26, 27, 26, 28, 26, 26, 29,
    26, 30, 26, 26, 31, 26, 26, 11, 32, 11, 8,  26, 5,  21, 22, 23, 24,

    25, 24, 26, 26, 26, 26, 26, 26, 26, 27, 26, 28, 26, 26, 29, 26, 33, 26, 26, 34, 26, 26, 1,  5,  1,  5,  1,  26,
    26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
    26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
    26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,

    26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
    26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26};

static const YY_CHAR yy_meta[35] = {0, 1, 1, 2, 2, 3, 4, 5, 3,  3,  6,  1,  7,  3,  3,  1,  7, 8,
                                    8, 1, 3, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 10, 10};

static const flex_int16_t yy_base[348] = {
    0,    0,    0,    526,  525,  30,   46,   524,  517,  512,  511,  37,   38,   506,  499,  42,   49,
    502,  501,  69,   101,  492,  485,  133,  165,  33,   50,   494,  1142, 72,   75,   0,    1142, 50,
    0,    1142, 1142, 479,  46,   476,  69,   61,   0,    471,  470,  469,  465,  454,  0,    86,   0,
    0,    79,   430,  0,    414,  0,    94,   0,    0,    107,  89,   0,    110,  0,    0,    391,  370,
    1142, 123,  126,  349,  325,  136,  1142, 139,  149,  323,  299,  1142, 1142, 115,  152,  0,    1142,
    75,   304,  194,  1142, 140,  0,    155,  159,  168,  1142, 1142, 0,    1142, 1142, 1142, 154,

    1142, 0,    186,  209,  257,  0,    159,  1142, 0,    0,    1142, 0,    190,  214,  248,  0,    218,
    223,  1142, 244,  1142, 237,  0,    0,    0,    0,    0,    1142, 246,  227,  0,    219,  232,  237,
    231,  240,  0,    209,  0,    0,    208,  0,    247,  0,    1142, 232,  115,  144,  1142, 1142, 262,
    1142, 195,  266,  0,    271,  1142, 191,  275,  280,  1142, 187,  284,  180,  0,    0,    0,    189,
    0,    168,  289,  173,  293,  0,    160,  0,    0,    298,  302,  306,  311,  315,  319,  324,  328,
    332,  337,  341,  345,  1142, 0,    0,    1142, 157,  350,  354,  358,  363,  138,  0,

    0,    367,  371,  376,  380,  385,  389,  393,  398,  402,  407,  411,  415,  420,  424,  429,  0,
    0,    121,  433,  437,  442,  446,  451,  116,  0,    0,    455,  459,  464,  0,    1142, 93,   468,
    91,   0,    1142, 0,    473,  482,  0,    0,    487,  0,    93,   496,  0,    87,   0,    0,    75,
    501,  27,   510,  0,    1142, 515,  524,  529,  538,  1142, 543,  552,  557,  566,  571,  580,  585,
    594,  599,  608,  613,  622,  627,  636,  641,  0,    650,  0,    1142, 664,  675,  686,  697,  708,
    719,  730,  741,  752,  763,  772,  775,  781,  791,  802,  813,  824,  835,  845,  856,

    867,  874,  880,  890,  899,  904,  904,  906,  908,  913,  923,  934,  938,  940,  949,  960,  971,
    975,  977,  979,  988,  992,  994,  1003, 1014, 1025, 1029, 1031, 1040, 1044, 1046, 1048, 1050, 1052,
    1054, 1056, 1058, 1060, 1062, 1064, 1073, 1084, 1088, 1097, 1108, 1119, 1130};

static const flex_int16_t yy_def[348] = {
    0,   280, 1,   281, 281, 282, 282, 283, 283, 284, 284, 285, 285, 286, 286, 287, 287, 283, 283, 288, 288,
    286, 286, 289, 289, 290, 290, 280, 280, 280, 280, 291, 280, 292, 291, 280, 280, 291, 280, 291, 280, 280,
    293, 293, 293, 293, 293, 293, 294, 280, 295, 295, 280, 280, 296, 280, 297, 280, 298, 298, 280, 299, 300,
    280, 301, 301, 302, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 291,
    280, 280, 303, 304, 280, 280, 305, 280, 280, 280, 280, 280, 293, 280, 280, 280, 280,

    280, 294, 280, 280, 280, 295, 280, 280, 306, 296, 280, 297, 280, 280, 280, 298, 280, 280, 280, 280, 280,
    280, 307, 308, 309, 300, 301, 280, 310, 280, 311, 280, 280, 280, 280, 280, 312, 280, 313, 314, 303, 304,
    304, 305, 280, 280, 280, 280, 280, 280, 280, 280, 280, 315, 306, 280, 280, 280, 316, 280, 280, 280, 317,
    280, 318, 319, 320, 310, 311, 280, 280, 280, 321, 312, 280, 322, 323, 324, 315, 315, 315, 325, 316, 316,
    316, 326, 317, 317, 317, 280, 327, 328, 280, 280, 329, 321, 321, 321, 280, 330,

    331, 324, 324, 280, 324, 315, 325, 325, 280, 325, 316, 326, 326, 280, 326, 317, 332, 333, 280, 329, 329,
    280, 329, 321, 280, 334, 335, 324, 325, 326, 336, 280, 280, 329, 280, 337, 280, 338, 280, 280, 339, 340,
    280, 341, 280, 280, 342, 280, 343, 333, 280, 344, 280, 345, 335, 280, 344, 344, 346, 344, 280, 345, 345,
    347, 345, 344, 344, 280, 344, 344, 345, 345, 280, 345, 345, 346, 341, 347, 342, 0,   280, 280, 280, 280,
    280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280,

    280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
    280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
    280, 280, 280, 280, 280};

static const flex_int16_t yy_nxt[1177] = {
    0,   28,  29,  30,  29,  31,  32,  33,  34,  31,  35,  36,  34,  34,  37,  38,  39,  40,  40,  41,  34,
    42,  43,  42,  42,  44,  42,  45,  42,  42,  46,  47,  28,  46,  47,  51,  80,  261, 51,  51,  59,  59,
    52,  51,  51,  65,  53,  60,  60,  66,  51,  51,  65,  80,  51,  51,  66,  84,  52,  51,  51,  88,  53,
    89,  89,  81,  51,  85,  85,  61,  61,  69,  70,  69,  82,  82,  82,  82,  82,  82,  94,  95,  81,  71,
    91,  256, 92,  92,  103, 104, 104, 107, 85,  85,  93,  108, 113, 114, 114, 72,  105,

    254, 72,  69,  70,  69,  122, 252, 115, 117, 118, 118, 117, 118, 118, 71,  240, 119, 239, 123, 119, 120,
    124, 125, 120, 130, 130, 130, 130, 130, 130, 72,  148, 148, 72,  75,  76,  75,  133, 134, 134, 136, 136,
    136, 235, 139, 119, 77,  140, 233, 135, 136, 136, 136, 82,  82,  82,  89,  89,  225, 149, 148, 148, 78,
    150, 93,  78,  75,  76,  75,  145, 107, 146, 146, 91,  108, 92,  92,  219, 77,  93,  147, 147, 199, 93,
    148, 148, 195, 103, 104, 104, 194, 113, 114, 114, 78,  128, 190, 78,  143, 105,

    186, 143, 143, 115, 182, 143, 143, 143, 178, 143, 151, 151, 151, 143, 84,  156, 156, 156, 152, 117, 118,
    118, 153, 157, 160, 160, 160, 158, 130, 130, 130, 120, 161, 133, 134, 134, 162, 175, 171, 171, 171, 136,
    136, 136, 173, 135, 161, 170, 146, 146, 172, 143, 128, 164, 143, 143, 93,  163, 143, 143, 143, 159, 143,
    151, 151, 151, 143, 180, 104, 104, 154, 152, 156, 156, 156, 153, 184, 114, 114, 181, 157, 160, 160, 160,
    158, 188, 118, 118, 185, 161, 171, 171, 171, 162, 197, 134, 134, 189, 161, 203,

    204, 204, 172, 180, 104, 104, 198, 180, 104, 104, 84,  205, 180, 104, 104, 181, 208, 209, 209, 181, 184,
    114, 114, 138, 206, 184, 114, 114, 210, 184, 114, 114, 185, 213, 214, 214, 137, 185, 188, 118, 118, 211,
    188, 118, 118, 215, 188, 118, 118, 132, 189, 221, 222, 222, 189, 197, 134, 134, 216, 197, 134, 134, 131,
    223, 197, 134, 134, 198, 203, 204, 204, 198, 203, 204, 204, 111, 224, 151, 151, 151, 205, 203, 204, 204,
    205, 152, 180, 104, 104, 153, 208, 209, 209, 228, 208, 209, 209, 128, 206, 156,

    156, 156, 210, 208, 209, 209, 210, 157, 184, 114, 114, 158, 213, 214, 214, 229, 213, 214, 214, 111, 211,
    160, 160, 160, 215, 213, 214, 214, 215, 161, 188, 118, 118, 162, 221, 222, 222, 230, 221, 222, 222, 109,
    216, 171, 171, 171, 223, 221, 222, 222, 223, 161, 197, 134, 134, 172, 203, 204, 204, 234, 208, 209, 209,
    101, 224, 213, 214, 214, 228, 221, 222, 222, 229, 100, 243, 243, 243, 230, 99,  98,  97,  234, 244, 246,
    246, 246, 245, 90,  243, 243, 243, 247, 87,  280, 73,  248, 244, 246, 246, 246,

    245, 73,  258, 243, 243, 247, 67,  67,  63,  248, 259, 263, 246, 246, 260, 63,  258, 243, 243, 264, 57,
    57,  55,  265, 259, 258, 243, 243, 260, 55,  267, 268, 268, 259, 49,  49,  280, 260, 259, 258, 243, 243,
    269, 280, 263, 246, 246, 259, 280, 280, 280, 270, 264, 263, 246, 246, 265, 280, 272, 273, 273, 264, 280,
    280, 280, 265, 264, 263, 246, 246, 274, 280, 258, 243, 243, 264, 280, 280, 280, 275, 276, 258, 243, 243,
    260, 280, 243, 243, 243, 276, 280, 280, 280, 260, 277, 258, 243, 243, 245, 280,

    258, 243, 243, 276, 280, 280, 280, 270, 259, 263, 246, 246, 270, 280, 263, 246, 246, 278, 280, 280, 280,
    265, 278, 246, 246, 246, 265, 280, 263, 246, 246, 279, 280, 280, 280, 248, 278, 263, 246, 246, 275, 280,
    267, 268, 268, 264, 280, 280, 280, 275, 259, 272, 273, 273, 269, 280, 280, 280, 280, 264, 280, 280, 280,
    274, 48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  50,  50,  50,  50,  50,  50,  50,  50,  50,
    50,  50,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  56,  56,  56,

    56,  56,  56,  56,  56,  56,  56,  56,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  62,  62,
    62,  62,  62,  62,  62,  62,  62,  62,  62,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  68,
    68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  74,  74,  74,  74,  74,  74,  74,  74,  74,  74,  74,
    79,  79,  79,  79,  79,  79,  79,  79,  79,  79,  79,  83,  280, 280, 280, 83,  86,  280, 280, 86,  86,
    86,  96,  280, 280, 96,  96,  96,  102, 102, 102, 102, 102, 280, 102, 102, 102,

    102, 102, 106, 106, 106, 106, 106, 106, 280, 106, 106, 106, 106, 110, 110, 110, 280, 110, 110, 110, 110,
    110, 110, 110, 112, 112, 112, 112, 112, 280, 112, 112, 112, 112, 112, 116, 116, 116, 116, 116, 280, 116,
    116, 116, 116, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 126, 126, 126, 126, 126, 280, 126,
    126, 126, 126, 126, 127, 127, 127, 127, 280, 127, 127, 127, 127, 127, 127, 129, 280, 280, 280, 129, 129,
    141, 280, 280, 141, 141, 141, 142, 280, 142, 142, 142, 142, 142, 142, 142, 142,

    142, 144, 280, 280, 280, 144, 155, 280, 280, 280, 155, 165, 165, 166, 166, 167, 167, 168, 280, 280, 168,
    168, 168, 169, 280, 169, 169, 169, 169, 169, 169, 169, 169, 169, 174, 280, 174, 174, 174, 174, 174, 174,
    174, 174, 174, 176, 176, 177, 177, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 183, 183, 183,
    183, 183, 183, 183, 183, 183, 183, 183, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 191, 191,
    192, 192, 193, 193, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 200,

    200, 201, 201, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 207, 207, 207, 207, 207, 207, 207,
    207, 207, 207, 207, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 217, 217, 218, 218, 220, 220,
    220, 220, 220, 220, 220, 220, 220, 220, 220, 226, 226, 227, 227, 231, 231, 232, 232, 236, 236, 237, 237,
    238, 238, 241, 241, 242, 242, 249, 249, 250, 250, 251, 251, 251, 251, 251, 280, 251, 251, 251, 251, 251,
    253, 253, 253, 253, 253, 280, 253, 253, 253, 253, 253, 255, 255, 257, 257, 257,

    257, 257, 257, 257, 257, 257, 257, 257, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 266, 266,
    266, 266, 266, 266, 266, 266, 266, 266, 266, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 27,
    280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
    280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280};

static const flex_int16_t yy_chk[1177] = {
    0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   5,   25,  253, 5,   5,   11,  12,
    5,   5,   5,   15,  5,   11,  12,  15,  5,   6,   16,  26,  6,   6,   16,  33,  6,   6,   6,   38,  6,
    38,  38,  25,  6,   33,  33,  11,  12,  19,  19,  19,  29,  29,  29,  30,  30,  30,  41,  41,  26,  19,
    40,  251, 40,  40,  49,  49,  49,  52,  85,  85,  40,  52,  57,  57,  57,  19,  49,

    248, 19,  20,  20,  20,  61,  245, 57,  60,  60,  60,  63,  63,  63,  20,  235, 60,  233, 61,  63,  60,
    61,  61,  63,  69,  69,  69,  70,  70,  70,  20,  147, 147, 20,  23,  23,  23,  73,  73,  73,  75,  75,
    75,  225, 81,  73,  23,  81,  219, 73,  76,  76,  76,  82,  82,  82,  89,  89,  199, 100, 148, 148, 23,
    100, 89,  23,  24,  24,  24,  91,  107, 91,  91,  92,  107, 92,  92,  194, 24,  91,  93,  93,  175, 92,
    93,  93,  172, 103, 103, 103, 170, 113, 113, 113, 24,  168, 164, 24,  87,  103,

    162, 87,  87,  113, 158, 87,  87,  87,  153, 87,  104, 104, 104, 87,  141, 114, 114, 114, 104, 117, 117,
    117, 104, 114, 118, 118, 118, 114, 130, 130, 130, 117, 118, 133, 133, 133, 118, 138, 134, 134, 134, 136,
    136, 136, 135, 133, 134, 132, 146, 146, 134, 143, 129, 122, 143, 143, 146, 120, 143, 143, 143, 115, 143,
    151, 151, 151, 143, 154, 154, 154, 105, 151, 156, 156, 156, 151, 159, 159, 159, 154, 156, 160, 160, 160,
    156, 163, 163, 163, 159, 160, 171, 171, 171, 160, 173, 173, 173, 163, 171, 178,

    178, 178, 171, 179, 179, 179, 173, 180, 180, 180, 86,  178, 181, 181, 181, 179, 182, 182, 182, 180, 183,
    183, 183, 78,  181, 184, 184, 184, 182, 185, 185, 185, 183, 186, 186, 186, 77,  184, 187, 187, 187, 185,
    188, 188, 188, 186, 189, 189, 189, 72,  187, 195, 195, 195, 188, 196, 196, 196, 189, 197, 197, 197, 71,
    195, 198, 198, 198, 196, 202, 202, 202, 197, 203, 203, 203, 67,  198, 204, 204, 204, 202, 205, 205, 205,
    203, 204, 206, 206, 206, 204, 207, 207, 207, 205, 208, 208, 208, 66,  206, 209,

    209, 209, 207, 210, 210, 210, 208, 209, 211, 211, 211, 209, 212, 212, 212, 210, 213, 213, 213, 55,  211,
    214, 214, 214, 212, 215, 215, 215, 213, 214, 216, 216, 216, 214, 220, 220, 220, 215, 221, 221, 221, 53,
    216, 222, 222, 222, 220, 223, 223, 223, 221, 222, 224, 224, 224, 222, 228, 228, 228, 223, 229, 229, 229,
    47,  224, 230, 230, 230, 228, 234, 234, 234, 229, 46,  239, 239, 239, 230, 45,  44,  43,  234, 239, 240,
    240, 240, 239, 39,  243, 243, 243, 240, 37,  27,  22,  240, 243, 246, 246, 246,

    243, 21,  252, 252, 252, 246, 18,  17,  14,  246, 252, 254, 254, 254, 252, 13,  257, 257, 257, 254, 10,
    9,   8,   254, 257, 258, 258, 258, 257, 7,   259, 259, 259, 258, 4,   3,   0,   258, 259, 260, 260, 260,
    259, 0,   262, 262, 262, 260, 0,   0,   0,   260, 262, 263, 263, 263, 262, 0,   264, 264, 264, 263, 0,
    0,   0,   263, 264, 265, 265, 265, 264, 0,   266, 266, 266, 265, 0,   0,   0,   265, 266, 267, 267, 267,
    266, 0,   268, 268, 268, 267, 0,   0,   0,   267, 268, 269, 269, 269, 268, 0,

    270, 270, 270, 269, 0,   0,   0,   269, 270, 271, 271, 271, 270, 0,   272, 272, 272, 271, 0,   0,   0,
    271, 272, 273, 273, 273, 272, 0,   274, 274, 274, 273, 0,   0,   0,   273, 274, 275, 275, 275, 274, 0,
    276, 276, 276, 275, 0,   0,   0,   275, 276, 278, 278, 278, 276, 0,   0,   0,   0,   278, 0,   0,   0,
    278, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 282, 282, 282, 282, 282, 282, 282, 282, 282,
    282, 282, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 284, 284, 284,

    284, 284, 284, 284, 284, 284, 284, 284, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 286, 286,
    286, 286, 286, 286, 286, 286, 286, 286, 286, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 288,
    288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
    290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 291, 0,   0,   0,   291, 292, 0,   0,   292, 292,
    292, 293, 0,   0,   293, 293, 293, 294, 294, 294, 294, 294, 0,   294, 294, 294,

    294, 294, 295, 295, 295, 295, 295, 295, 0,   295, 295, 295, 295, 296, 296, 296, 0,   296, 296, 296, 296,
    296, 296, 296, 297, 297, 297, 297, 297, 0,   297, 297, 297, 297, 297, 298, 298, 298, 298, 298, 0,   298,
    298, 298, 298, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 300, 300, 300, 300, 300, 0,   300,
    300, 300, 300, 300, 301, 301, 301, 301, 0,   301, 301, 301, 301, 301, 301, 302, 0,   0,   0,   302, 302,
    303, 0,   0,   303, 303, 303, 304, 0,   304, 304, 304, 304, 304, 304, 304, 304,

    304, 305, 0,   0,   0,   305, 306, 0,   0,   0,   306, 307, 307, 308, 308, 309, 309, 310, 0,   0,   310,
    310, 310, 311, 0,   311, 311, 311, 311, 311, 311, 311, 311, 311, 312, 0,   312, 312, 312, 312, 312, 312,
    312, 312, 312, 313, 313, 314, 314, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 316, 316, 316,
    316, 316, 316, 316, 316, 316, 316, 316, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 318, 318,
    319, 319, 320, 320, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 322,

    322, 323, 323, 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 325, 325, 325, 325, 325, 325, 325,
    325, 325, 325, 325, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 327, 327, 328, 328, 329, 329,
    329, 329, 329, 329, 329, 329, 329, 329, 329, 330, 330, 331, 331, 332, 332, 333, 333, 334, 334, 335, 335,
    336, 336, 337, 337, 338, 338, 339, 339, 340, 340, 341, 341, 341, 341, 341, 0,   341, 341, 341, 341, 341,
    342, 342, 342, 342, 342, 0,   342, 342, 342, 342, 342, 343, 343, 344, 344, 344,

    344, 344, 344, 344, 344, 344, 344, 344, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 345, 346, 346,
    346, 346, 346, 346, 346, 346, 346, 346, 346, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 280,
    280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
    280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280};

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "scan.l"

#line 43 "scan.l"
/* Avoid exit() on fatal scanner errors (a bit ugly -- see yy_fatal_error) */
#undef fprintf
#define fprintf(file, fmt, msg) fprintf_to_ereport(fmt, msg)

static void fprintf_to_ereport(const char* fmt, const char* msg) { ereport(ERROR, (errmsg_internal("%s", msg))); }

/*
 * GUC variables.  This is a DIRECT violation of the warning given at the
 * head of gram.y, ie flex/bison code must not depend on any GUC variables;
 * as such, changing their values can induce very unintuitive behavior.
 * But we shall have to live with it as a short-term thing until the switch
 * to SQL-standard string syntax is complete.
 */
int backslash_quote = BACKSLASH_QUOTE_SAFE_ENCODING;
bool escape_string_warning = true;
bool standard_conforming_strings = true;

/*
 * Set the type of YYSTYPE.
 */
#define YYSTYPE core_YYSTYPE

/*
 * Set the type of yyextra.  All state variables used by the scanner should
 * be in yyextra, *not* statically allocated.
 */
#define YY_EXTRA_TYPE core_yy_extra_type*

/*
 * Each call to yylex must set yylloc to the location of the found token
 * (expressed as a byte offset from the start of the input text).
 * When we parse a token that requires multiple lexer rules to process,
 * this should be done in the first such rule, else yylloc will point
 * into the middle of the token.
 */
#define SET_YYLLOC() (*(yylloc) = yytext - yyextra->scanbuf)

/*
 * Advance yylloc by the given number of bytes.
 */
#define ADVANCE_YYLLOC(delta) (*(yylloc) += (delta))

#define startlit() (yyextra->literallen = 0)
static void addlit(char* ytext, int yleng, core_yyscan_t yyscanner);
static void addlitchar(unsigned char ychar, core_yyscan_t yyscanner);
static char* litbufdup(core_yyscan_t yyscanner);
static char* litbuf_udeescape(unsigned char escape, core_yyscan_t yyscanner);
static unsigned char unescape_single_char(unsigned char c, core_yyscan_t yyscanner);
static int process_integer_literal(const char* token, YYSTYPE* lval);
static bool is_utf16_surrogate_first(pg_wchar c);
static bool is_utf16_surrogate_second(pg_wchar c);
static pg_wchar surrogate_pair_to_codepoint(pg_wchar first, pg_wchar second);
static void addunicode(pg_wchar c, yyscan_t yyscanner);
static bool check_uescapechar(unsigned char escape);

#define yyerror(msg) scanner_yyerror(msg, yyscanner)

#define lexer_errposition() scanner_errposition(*(yylloc), yyscanner)

static void check_string_escape_warning(unsigned char ychar, core_yyscan_t yyscanner);
static void check_escape_warning(core_yyscan_t yyscanner);

/*
 * Work around a bug in flex 2.5.35: it emits a couple of functions that
 * it forgets to emit declarations for.  Since we use -Wmissing-prototypes,
 * this would cause warnings.  Providing our own declarations should be
 * harmless even when the bug gets fixed.
 */
extern int core_yyget_column(yyscan_t yyscanner);
extern void core_yyset_column(int column_no, yyscan_t yyscanner);

#line 1132 "scan.cpp"
#define YY_NO_INPUT 1
/*
 * OK, here is a short description of lex/flex rules behavior.
 * The longest pattern which matches an input string is always chosen.
 * For equal-length patterns, the first occurring in the rules list is chosen.
 * INITIAL is the starting state, to which all non-conditional rules apply.
 * Exclusive states change parsing rules while the state is active.  When in
 * an exclusive state, only those rules defined for that state apply.
 *
 * We use exclusive states for quoted strings, extended comments,
 * and to eliminate parsing troubles for numeric strings.
 * Exclusive states:
 *  <xb> bit string literal
 *  <xc> extended C-style comments
 *  <xd> delimited identifiers (double-quoted identifiers)
 *  <xh> hexadecimal numeric string
 *  <xq> standard quoted strings
 *  <xe> extended quoted strings (support backslash escape sequences)
 *  <xdolq> $foo$ quoted strings
 *  <xui> quoted identifier with Unicode escapes
 *  <xuiend> end of a quoted identifier with Unicode escapes, UESCAPE can follow
 *  <xus> quoted string with Unicode escapes
 *  <xusend> end of a quoted string with Unicode escapes, UESCAPE can follow
 *  <xeu> Unicode surrogate pair in extended quoted string
 *
 * Remember to add an <<EOF>> case whenever you add a new exclusive state!
 * The default one is probably not the right thing.
 */

/*
 * In order to make the world safe for Windows and Mac clients as well as
 * Unix ones, we accept either \n or \r as a newline.  A DOS-style \r\n
 * sequence will be seen as two successive newlines, but that doesn't cause
 * any problems.  Comments that start with -- and extend to the next
 * newline are treated as equivalent to a single whitespace character.
 *
 * NOTE a fine point: if there is no newline following --, we will absorb
 * everything to the end of the input as a comment.  This is correct.  Older
 * versions of Postgres failed to recognize -- as a comment if the input
 * did not end with a newline.
 *
 * XXX perhaps \f (formfeed) should be treated as a newline as well?
 *
 * XXX if you change the set of whitespace characters, fix scanner_isspace()
 * to agree, and see also the plpgsql lexer.
 */
/*
 * SQL requires at least one newline in the whitespace separating
 * string literals that are to be concatenated.  Silly, but who are we
 * to argue?  Note that {whitespace_with_newline} should not have * after
 * it, whereas {whitespace} should generally have a * after it...
 */
/*
 * To ensure that {quotecontinue} can be scanned without having to back up
 * if the full pattern isn't matched, we include trailing whitespace in
 * {quotestop}.  This matches all cases where {quotecontinue} fails to match,
 * except for {quote} followed by whitespace and just one "-" (not two,
 * which would start a {comment}).  To cover that we have {quotefail}.
 * The actions for {quotestop} and {quotefail} must throw back characters
 * beyond the quote proper.
 */
/* Bit string
 * It is tempting to scan the string for only those characters
 * which are allowed. However, this leads to silently swallowed
 * characters if illegal characters are included in the string.
 * For example, if xbinside is [01] then B'ABCD' is interpreted
 * as a zero-length string, and the ABCD' is lost!
 * Better to pass the string forward and let the input routines
 * validate the contents.
 */
/* Hexadecimal number */
/* National character */
/* Quoted string that allows backslash escapes */
/* Extended quote
 * xqdouble implements embedded quote, ''''
 */
/* $foo$ style quotes ("dollar quoting")
 * The quoted string starts with $foo$ where "foo" is an optional string
 * in the form of an identifier, except that it may not contain "$",
 * and extends to the first occurrence of an identical string.
 * There is *no* processing of the quoted text.
 *
 * {dolqfailed} is an error rule to avoid scanner backup when {dolqdelim}
 * fails to match its trailing "$".
 */
/* Double quote
 * Allows embedded spaces and other special characters into identifiers.
 */
/* Unicode escapes */
/* error rule to avoid backup */
/* Quoted identifier with Unicode escapes */
/* Quoted string with Unicode escapes */
/* Optional UESCAPE after a quoted string or identifier with Unicode escapes. */
/* error rule to avoid backup */
/* C-style comments
 *
 * The "extended comment" syntax closely resembles allowable operator syntax.
 * The tricky part here is to get lex to recognize a string starting with
 * slash-star as a comment, when interpreting it as an operator would produce
 * a longer match --- remember lex will prefer a longer match!  Also, if we
 * have something like plus-slash-star, lex will think this is a 3-character
 * operator whereas we want to see it as a + operator and a comment start.
 * The solution is two-fold:
 * 1. append {op_chars}* to xcstart so that it matches as much text as
 *    {operator} would. Then the tie-breaker (first matching rule of same
 *    length) ensures xcstart wins.  We put back the extra stuff with yyless()
 *    in case it contains a star-slash that should terminate the comment.
 * 2. In the operator rule, check for slash-star within the operator, and
 *    if found throw it back with yyless().  This handles the plus-slash-star
 *    problem.
 * Dash-dash comments have similar interactions with the operator rule.
 */
/*
 * "self" is the set of chars that should be returned as single-character
 * tokens.  "op_chars" is the set of chars that can make up "Op" tokens,
 * which can be one or more characters long (but if a single-char token
 * appears in the "self" set, it is not to be returned as an Op).  Note
 * that the sets overlap, but each has some chars that are not in the other.
 *
 * If you change either set, adjust the character lists appearing in the
 * rule for "operator"!
 */
/* we no longer allow unary minus in numbers.
 * instead we pass it separately to parser. there it gets
 * coerced via doNegate() -- Leon aug 20 1999
 *
* {decimalfail} is used because we would like "1..10" to lex as 1, dot_dot, 10.
*
 * {realfail1} and {realfail2} are added to prevent the need for scanner
 * backup when the {real} rule fails to match completely.
 */
/*
 * Dollar quoted strings are totally opaque, and no escaping is done on them.
 * Other quoted strings must allow some special characters such as single-quote
 *  and newline.
 * Embedded single-quotes are implemented both in the SQL standard
 *  style of two adjacent single quotes "''" and in the Postgres/Java style
 *  of escaped-quote "\'".
 * Other embedded escaped characters are matched explicitly and the leading
 *  backslash is dropped from the string.
 * Note that xcstart must appear before operator, as explained above!
 *  Also whitespace (comment) must appear before operator.
 */
#line 1276 "scan.cpp"

#define INITIAL 0
#define xb 1
#define xc 2
#define xd 3
#define xh 4
#define xe 5
#define xq 6
#define xdolq 7
#define xui 8
#define xuiend 9
#define xus 10
#define xusend 11
#define xeu 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void*
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t {
    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top;       /**< index of top of stack. */
    size_t yy_buffer_stack_max;       /**< capacity of stack. */
    YY_BUFFER_STATE* yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char* yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int* yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char* yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE* yylval_r;

    YYLTYPE* yylloc_r;

}; /* end struct yyguts_t */

static int yy_init_globals(yyscan_t yyscanner);

/* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
#define yylval yyg->yylval_r

#define yylloc yyg->yylloc_r

int yylex_init(yyscan_t* scanner);

int yylex_init_extra(YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy(yyscan_t yyscanner);

int yyget_debug(yyscan_t yyscanner);

void yyset_debug(int debug_flag, yyscan_t yyscanner);

YY_EXTRA_TYPE yyget_extra(yyscan_t yyscanner);

void yyset_extra(YY_EXTRA_TYPE user_defined, yyscan_t yyscanner);

FILE* yyget_in(yyscan_t yyscanner);

void yyset_in(FILE* _in_str, yyscan_t yyscanner);

FILE* yyget_out(yyscan_t yyscanner);

void yyset_out(FILE* _out_str, yyscan_t yyscanner);

int yyget_leng(yyscan_t yyscanner);

char* yyget_text(yyscan_t yyscanner);

int yyget_lineno(yyscan_t yyscanner);

void yyset_lineno(int _line_number, yyscan_t yyscanner);

int yyget_column(yyscan_t yyscanner);

void yyset_column(int _column_no, yyscan_t yyscanner);

YYSTYPE* yyget_lval(yyscan_t yyscanner);

void yyset_lval(YYSTYPE* yylval_param, yyscan_t yyscanner);

YYLTYPE* yyget_lloc(yyscan_t yyscanner);

void yyset_lloc(YYLTYPE* yylloc_param, yyscan_t yyscanner);

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap(yyscan_t yyscanner);
#else
extern int yywrap(yyscan_t yyscanner);
#endif
#endif

#ifndef YY_NO_UNPUT

#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char*, const char*, int, yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(const char*, yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(yyscan_t yyscanner);
#else
static int input(yyscan_t yyscanner);
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO                                                                                                           \
    do {                                                                                                               \
        if (fwrite(yytext, (size_t) yyleng, 1, yyout)) {                                                               \
        }                                                                                                              \
    } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                                                                                \
    if (YY_CURRENT_BUFFER_LVALUE->yy_is_interactive) {                                                                 \
        int c = '*';                                                                                                   \
        int n;                                                                                                         \
        for (n = 0; n < max_size && (c = getc(yyin)) != EOF && c != '\n'; ++n) buf[n] = (char) c;                      \
        if (c == '\n')                                                                                                 \
            buf[n++] = (char) c;                                                                                       \
        if (c == EOF && ferror(yyin))                                                                                  \
            YY_FATAL_ERROR("input in flex scanner failed");                                                            \
        result = n;                                                                                                    \
    } else {                                                                                                           \
        errno = 0;                                                                                                     \
        while ((result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) {                      \
            if (errno != EINTR) {                                                                                      \
                YY_FATAL_ERROR("input in flex scanner failed");                                                        \
                break;                                                                                                 \
            }                                                                                                          \
            errno = 0;                                                                                                 \
            clearerr(yyin);                                                                                            \
        }                                                                                                              \
    }

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error(msg, yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex(YYSTYPE* yylval_param, YYLTYPE* yylloc_param, yyscan_t yyscanner);

#define YY_DECL int yylex(YYSTYPE* yylval_param, YYLTYPE* yylloc_param, yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/ break;
#endif

#define YY_RULE_SETUP YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL {
    yy_state_type yy_current_state;
    char *yy_cp, *yy_bp;
    int yy_act;
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

    if (!yyg->yy_init) {
        yyg->yy_init = 1;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if (!yyg->yy_start)
            yyg->yy_start = 1; /* first start state */

        if (!yyin)
            yyin = stdin;

        if (!yyout)
            yyout = stdout;

        if (!YY_CURRENT_BUFFER) {
            yyensure_buffer_stack(yyscanner);
            YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner);
        }

        yy_load_buffer_state(yyscanner);
    }

    {
#line 386 "scan.l"

#line 1573 "scan.cpp"

        while (/*CONSTCOND*/ 1) /* loops until end-of-file is reached */
        {
            yy_cp = yyg->yy_c_buf_p;

            /* Support of yytext. */
            *yy_cp = yyg->yy_hold_char;

            /* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
            yy_bp = yy_cp;

            yy_current_state = yyg->yy_start;
        yy_match:
            do {
                YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
                if (yy_accept[yy_current_state]) {
                    yyg->yy_last_accepting_state = yy_current_state;
                    yyg->yy_last_accepting_cpos = yy_cp;
                }
                while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
                    yy_current_state = (int) yy_def[yy_current_state];
                    if (yy_current_state >= 281)
                        yy_c = yy_meta[yy_c];
                }
                yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
                ++yy_cp;
            } while (yy_current_state != 280);
            yy_cp = yyg->yy_last_accepting_cpos;
            yy_current_state = yyg->yy_last_accepting_state;

        yy_find_action:
            yy_act = yy_accept[yy_current_state];

            YY_DO_BEFORE_ACTION;

        do_action: /* This label is used only to access EOF actions. */

            switch (yy_act) { /* beginning of action switch */
                case 0:       /* must back up */
                    /* undo the effects of YY_DO_BEFORE_ACTION */
                    *yy_cp = yyg->yy_hold_char;
                    yy_cp = yyg->yy_last_accepting_cpos;
                    yy_current_state = yyg->yy_last_accepting_state;
                    goto yy_find_action;

                case 1:
                    /* rule 1 can match eol */
                    YY_RULE_SETUP
#line 388 "scan.l"
                    {
                        /* ignore */
                    }
                    YY_BREAK
                case 2:
                    YY_RULE_SETUP
#line 392 "scan.l"
                    {
                        /* Set location in case of syntax error in comment */
                        SET_YYLLOC();
                        yyextra->xcdepth = 0;
                        BEGIN(xc);
                        /* Put back any characters past slash-star; see above */
                        yyless(2);
                    }
                    YY_BREAK
                case 3:
                    YY_RULE_SETUP
#line 401 "scan.l"
                    {
                        (yyextra->xcdepth)++;
                        /* Put back any characters past slash-star; see above */
                        yyless(2);
                    }
                    YY_BREAK
                case 4:
                    YY_RULE_SETUP
#line 407 "scan.l"
                    {
                        if (yyextra->xcdepth <= 0)
                            BEGIN(INITIAL);
                        else
                            (yyextra->xcdepth)--;
                    }
                    YY_BREAK
                case 5:
                    /* rule 5 can match eol */
                    YY_RULE_SETUP
#line 414 "scan.l"
                    {
                        /* ignore */
                    }
                    YY_BREAK
                case 6:
                    YY_RULE_SETUP
#line 418 "scan.l"
                    {
                        /* ignore */
                    }
                    YY_BREAK
                case 7:
                    YY_RULE_SETUP
#line 422 "scan.l"
                    {
                        /* ignore */
                    }
                    YY_BREAK
                case YY_STATE_EOF(xc):
#line 426 "scan.l"
                {
                    yyerror("unterminated /* comment");
                }
                    YY_BREAK
                case 8:
                    YY_RULE_SETUP
#line 428 "scan.l"
                    {
                        /* Binary bit type.
					 * At some point we should simply pass the string
					 * forward to the parser and label it there.
					 * In the meantime, place a leading "b" on the string
					 * to mark it for the input routine as a binary string.
					 */
                        SET_YYLLOC();
                        BEGIN(xb);
                        startlit();
                        addlitchar('b', yyscanner);
                    }
                    YY_BREAK
                case 9:
/* rule 9 can match eol */
#line 441 "scan.l"
                case 10:
                    /* rule 10 can match eol */
                    YY_RULE_SETUP
#line 441 "scan.l"
                    {
                        yyless(1);
                        BEGIN(INITIAL);
                        yylval->str = litbufdup(yyscanner);
                        return BCONST;
                    }
                    YY_BREAK
                case 11:
/* rule 11 can match eol */
#line 448 "scan.l"
                case 12:
                    /* rule 12 can match eol */
                    YY_RULE_SETUP
#line 448 "scan.l"
                    {
                        addlit(yytext, yyleng, yyscanner);
                    }
                    YY_BREAK
                case 13:
/* rule 13 can match eol */
#line 452 "scan.l"
                case 14:
                    /* rule 14 can match eol */
                    YY_RULE_SETUP
#line 452 "scan.l"
                    {
                        /* ignore */
                    }
                    YY_BREAK
                case YY_STATE_EOF(xb):
#line 455 "scan.l"
                {
                    yyerror("unterminated bit string literal");
                }
                    YY_BREAK
                case 15:
                    YY_RULE_SETUP
#line 457 "scan.l"
                    {
                        /* Hexadecimal bit type.
					 * At some point we should simply pass the string
					 * forward to the parser and label it there.
					 * In the meantime, place a leading "x" on the string
					 * to mark it for the input routine as a hex string.
					 */
                        SET_YYLLOC();
                        BEGIN(xh);
                        startlit();
                        addlitchar('x', yyscanner);
                    }
                    YY_BREAK
                case 16:
/* rule 16 can match eol */
#line 470 "scan.l"
                case 17:
                    /* rule 17 can match eol */
                    YY_RULE_SETUP
#line 470 "scan.l"
                    {
                        yyless(1);
                        BEGIN(INITIAL);
                        yylval->str = litbufdup(yyscanner);
                        return XCONST;
                    }
                    YY_BREAK
                case YY_STATE_EOF(xh):
#line 476 "scan.l"
                {
                    yyerror("unterminated hexadecimal string literal");
                }
                    YY_BREAK
                case 18:
                    YY_RULE_SETUP
#line 478 "scan.l"
                    {
                        /* National character.
					 * We will pass this along as a normal character string,
					 * but preceded with an internally-generated "NCHAR".
					 */
                        const ScanKeyword* keyword;

                        SET_YYLLOC();
                        yyless(1); /* eat only 'n' this time */

                        keyword = ScanKeywordLookup("nchar", yyextra->keywords, yyextra->num_keywords);
                        if (keyword != NULL) {
                            yylval->keyword = keyword->name;
                            return keyword->value;
                        } else {
                            /* If NCHAR isn't a keyword, just return "n" */
                            yylval->str = pstrdup("n");
                            return IDENT;
                        }
                    }
                    YY_BREAK
                case 19:
                    YY_RULE_SETUP
#line 504 "scan.l"
                    {
                        yyextra->warn_on_first_escape = true;
                        yyextra->saw_non_ascii = false;
                        SET_YYLLOC();
                        if (standard_conforming_strings)
                            BEGIN(xq);
                        else
                            BEGIN(xe);
                        startlit();
                    }
                    YY_BREAK
                case 20:
                    YY_RULE_SETUP
#line 514 "scan.l"
                    {
                        yyextra->warn_on_first_escape = false;
                        yyextra->saw_non_ascii = false;
                        SET_YYLLOC();
                        BEGIN(xe);
                        startlit();
                    }
                    YY_BREAK
                case 21:
                    YY_RULE_SETUP
#line 521 "scan.l"
                    {
                        SET_YYLLOC();
                        if (!standard_conforming_strings)
                            ereport(ERROR,
                                    errcode(ERRCODE_FEATURE_NOT_SUPPORTED),
                                    errmsg("unsafe use of string constant with Unicode escapes"),
                                    errdetail("String constants with Unicode escapes cannot be used when "
                                              "standard_conforming_strings is off."),
                                    lexer_errposition());
                        BEGIN(xus);
                        startlit();
                    }
                    YY_BREAK
                case 22:
/* rule 22 can match eol */
#line 533 "scan.l"
                case 23:
                    /* rule 23 can match eol */
                    YY_RULE_SETUP
#line 533 "scan.l"
                    {
                        yyless(1);
                        BEGIN(INITIAL);
                        /*
					 * check that the data remains valid if it might have been
					 * made invalid by unescaping any chars.
					 */
                        if (yyextra->saw_non_ascii)
                            pg_verifymbstr(yyextra->literalbuf, yyextra->literallen, false);
                        yylval->str = litbufdup(yyscanner);
                        return SCONST;
                    }
                    YY_BREAK
                case 24:
/* rule 24 can match eol */
#line 548 "scan.l"
                case 25:
                    /* rule 25 can match eol */
                    YY_RULE_SETUP
#line 548 "scan.l"
                    {
                        /* throw back all but the quote */
                        yyless(1);
                        /* xusend state looks for possible UESCAPE */
                        BEGIN(xusend);
                    }
                    YY_BREAK
                case 26:
                    /* rule 26 can match eol */
                    YY_RULE_SETUP
#line 554 "scan.l"
                    { /* stay in xusend state over whitespace */
                    }
                    YY_BREAK
                case 27:
#line 556 "scan.l"
                case 28:
/* rule 28 can match eol */
#line 557 "scan.l"
                    YY_RULE_SETUP
                case YY_STATE_EOF(xusend):
#line 557 "scan.l"
                {
                    /* no UESCAPE after the quote, throw back everything */
                    yyless(0);
                    BEGIN(INITIAL);
                    yylval->str = litbuf_udeescape('\\', yyscanner);
                    return SCONST;
                }
                    YY_BREAK
                case 29:
                    /* rule 29 can match eol */
                    YY_RULE_SETUP
#line 564 "scan.l"
                    {
                        /* found UESCAPE after the end quote */
                        BEGIN(INITIAL);
                        if (!check_uescapechar(yytext[yyleng - 2])) {
                            SET_YYLLOC();
                            ADVANCE_YYLLOC(yyleng - 2);
                            yyerror("invalid Unicode escape character");
                        }
                        yylval->str = litbuf_udeescape(yytext[yyleng - 2], yyscanner);
                        return SCONST;
                    }
                    YY_BREAK
                case 30:
                    YY_RULE_SETUP
#line 576 "scan.l"
                    {
                        addlitchar('\'', yyscanner);
                    }
                    YY_BREAK
                case 31:
                    /* rule 31 can match eol */
                    YY_RULE_SETUP
#line 579 "scan.l"
                    {
                        addlit(yytext, yyleng, yyscanner);
                    }
                    YY_BREAK
                case 32:
                    /* rule 32 can match eol */
                    YY_RULE_SETUP
#line 582 "scan.l"
                    {
                        addlit(yytext, yyleng, yyscanner);
                    }
                    YY_BREAK
                case 33:
                    YY_RULE_SETUP
#line 585 "scan.l"
                    {
                        pg_wchar c = strtoul(yytext + 2, NULL, 16);

                        check_escape_warning(yyscanner);

                        if (is_utf16_surrogate_first(c)) {
                            yyextra->utf16_first_part = c;
                            BEGIN(xeu);
                        } else if (is_utf16_surrogate_second(c))
                            yyerror("invalid Unicode surrogate pair");
                        else
                            addunicode(c, yyscanner);
                    }
                    YY_BREAK
                case 34:
                    YY_RULE_SETUP
#line 600 "scan.l"
                    {
                        pg_wchar c = strtoul(yytext + 2, NULL, 16);

                        if (!is_utf16_surrogate_second(c))
                            yyerror("invalid Unicode surrogate pair");

                        c = surrogate_pair_to_codepoint(yyextra->utf16_first_part, c);

                        addunicode(c, yyscanner);

                        BEGIN(xe);
                    }
                    YY_BREAK
                case 35:
                    YY_RULE_SETUP
#line 612 "scan.l"
                    {
                        yyerror("invalid Unicode surrogate pair");
                    }
                    YY_BREAK
                case 36:
                    /* rule 36 can match eol */
                    YY_RULE_SETUP
#line 613 "scan.l"
                    {
                        yyerror("invalid Unicode surrogate pair");
                    }
                    YY_BREAK
                case YY_STATE_EOF(xeu):
#line 614 "scan.l"
                {
                    yyerror("invalid Unicode surrogate pair");
                }
                    YY_BREAK
                case 37:
                    YY_RULE_SETUP
#line 615 "scan.l"
                    {
                        ereport(ERROR,
                                errcode(ERRCODE_INVALID_ESCAPE_SEQUENCE),
                                errmsg("invalid Unicode escape"),
                                errhint("Unicode escapes must be \\uXXXX or \\UXXXXXXXX."),
                                lexer_errposition());
                    }
                    YY_BREAK
                case 38:
                    /* rule 38 can match eol */
                    YY_RULE_SETUP
#line 622 "scan.l"
                    {
                        if (yytext[1] == '\'') {
                            if (backslash_quote == BACKSLASH_QUOTE_OFF ||
                                (backslash_quote == BACKSLASH_QUOTE_SAFE_ENCODING &&
                                 PG_ENCODING_IS_CLIENT_ONLY(pg_get_client_encoding())))
                                ereport(ERROR,
                                        errcode(ERRCODE_NONSTANDARD_USE_OF_ESCAPE_CHARACTER),
                                        errmsg("unsafe use of \\' in a string literal"),
                                        errhint("Use '' to write quotes in strings. \\' is insecure in client-only "
                                                "encodings."),
                                        lexer_errposition());
                        }
                        check_string_escape_warning(yytext[1], yyscanner);
                        addlitchar(unescape_single_char(yytext[1], yyscanner), yyscanner);
                    }
                    YY_BREAK
                case 39:
                    YY_RULE_SETUP
#line 638 "scan.l"
                    {
                        unsigned char c = strtoul(yytext + 1, NULL, 8);

                        check_escape_warning(yyscanner);
                        addlitchar(c, yyscanner);
                        if (c == '\0' || IS_HIGHBIT_SET(c))
                            yyextra->saw_non_ascii = true;
                    }
                    YY_BREAK
                case 40:
                    YY_RULE_SETUP
#line 646 "scan.l"
                    {
                        unsigned char c = strtoul(yytext + 2, NULL, 16);

                        check_escape_warning(yyscanner);
                        addlitchar(c, yyscanner);
                        if (c == '\0' || IS_HIGHBIT_SET(c))
                            yyextra->saw_non_ascii = true;
                    }
                    YY_BREAK
                case 41:
                    /* rule 41 can match eol */
                    YY_RULE_SETUP
#line 654 "scan.l"
                    {
                        /* ignore */
                    }
                    YY_BREAK
                case 42:
                    YY_RULE_SETUP
#line 657 "scan.l"
                    {
                        /* This is only needed for \ just before EOF */
                        addlitchar(yytext[0], yyscanner);
                    }
                    YY_BREAK
                case YY_STATE_EOF(xq):
                case YY_STATE_EOF(xe):
                case YY_STATE_EOF(xus):
#line 661 "scan.l"
                {
                    yyerror("unterminated quoted string");
                }
                    YY_BREAK
                case 43:
                    YY_RULE_SETUP
#line 663 "scan.l"
                    {
                        SET_YYLLOC();
                        yyextra->dolqstart = pstrdup(yytext);
                        BEGIN(xdolq);
                        startlit();
                    }
                    YY_BREAK
                case 44:
                    YY_RULE_SETUP
#line 669 "scan.l"
                    {
                        SET_YYLLOC();
                        /* throw back all but the initial "$" */
                        yyless(1);
                        /* and treat it as {other} */
                        return yytext[0];
                    }
                    YY_BREAK
                case 45:
                    YY_RULE_SETUP
#line 676 "scan.l"
                    {
                        if (strcmp(yytext, yyextra->dolqstart) == 0) {
                            pfree(yyextra->dolqstart);
                            yyextra->dolqstart = NULL;
                            BEGIN(INITIAL);
                            yylval->str = litbufdup(yyscanner);
                            return SCONST;
                        } else {
                            /*
						 * When we fail to match $...$ to dolqstart, transfer
						 * the $... part to the output, but put back the final
						 * $ for rescanning.  Consider $delim$...$junk$delim$
						 */
                            addlit(yytext, yyleng - 1, yyscanner);
                            yyless(yyleng - 1);
                        }
                    }
                    YY_BREAK
                case 46:
                    /* rule 46 can match eol */
                    YY_RULE_SETUP
#line 696 "scan.l"
                    {
                        addlit(yytext, yyleng, yyscanner);
                    }
                    YY_BREAK
                case 47:
                    YY_RULE_SETUP
#line 699 "scan.l"
                    {
                        addlit(yytext, yyleng, yyscanner);
                    }
                    YY_BREAK
                case 48:
                    YY_RULE_SETUP
#line 702 "scan.l"
                    {
                        /* This is only needed for $ inside the quoted text */
                        addlitchar(yytext[0], yyscanner);
                    }
                    YY_BREAK
                case YY_STATE_EOF(xdolq):
#line 706 "scan.l"
                {
                    yyerror("unterminated dollar-quoted string");
                }
                    YY_BREAK
                case 49:
                    YY_RULE_SETUP
#line 708 "scan.l"
                    {
                        SET_YYLLOC();
                        BEGIN(xd);
                        startlit();
                    }
                    YY_BREAK
                case 50:
                    YY_RULE_SETUP
#line 713 "scan.l"
                    {
                        SET_YYLLOC();
                        BEGIN(xui);
                        startlit();
                    }
                    YY_BREAK
                case 51:
                    YY_RULE_SETUP
#line 718 "scan.l"
                    {
                        char* ident;

                        BEGIN(INITIAL);
                        if (yyextra->literallen == 0)
                            yyerror("zero-length delimited identifier");
                        ident = litbufdup(yyscanner);
                        if (yyextra->literallen >= NAMEDATALEN)
                            truncate_identifier(ident, yyextra->literallen, true);
                        yylval->str = ident;
                        return IDENT;
                    }
                    YY_BREAK
                case 52:
                    YY_RULE_SETUP
#line 730 "scan.l"
                    {
                        yyless(1);
                        /* xuiend state looks for possible UESCAPE */
                        BEGIN(xuiend);
                    }
                    YY_BREAK
                case 53:
                    /* rule 53 can match eol */
                    YY_RULE_SETUP
#line 735 "scan.l"
                    { /* stay in xuiend state over whitespace */
                    }
                    YY_BREAK
                case 54:
#line 737 "scan.l"
                case 55:
/* rule 55 can match eol */
#line 738 "scan.l"
                    YY_RULE_SETUP
                case YY_STATE_EOF(xuiend):
#line 738 "scan.l"
                {
                    /* no UESCAPE after the quote, throw back everything */
                    char* ident;
                    int identlen;

                    yyless(0);

                    BEGIN(INITIAL);
                    if (yyextra->literallen == 0)
                        yyerror("zero-length delimited identifier");
                    ident = litbuf_udeescape('\\', yyscanner);
                    identlen = strlen(ident);
                    if (identlen >= NAMEDATALEN)
                        truncate_identifier(ident, identlen, true);
                    yylval->str = ident;
                    return IDENT;
                }
                    YY_BREAK
                case 56:
                    /* rule 56 can match eol */
                    YY_RULE_SETUP
#line 755 "scan.l"
                    {
                        /* found UESCAPE after the end quote */
                        char* ident;
                        int identlen;

                        BEGIN(INITIAL);
                        if (yyextra->literallen == 0)
                            yyerror("zero-length delimited identifier");
                        if (!check_uescapechar(yytext[yyleng - 2])) {
                            SET_YYLLOC();
                            ADVANCE_YYLLOC(yyleng - 2);
                            yyerror("invalid Unicode escape character");
                        }
                        ident = litbuf_udeescape(yytext[yyleng - 2], yyscanner);
                        identlen = strlen(ident);
                        if (identlen >= NAMEDATALEN)
                            truncate_identifier(ident, identlen, true);
                        yylval->str = ident;
                        return IDENT;
                    }
                    YY_BREAK
                case 57:
                    YY_RULE_SETUP
#line 776 "scan.l"
                    {
                        addlitchar('"', yyscanner);
                    }
                    YY_BREAK
                case 58:
                    /* rule 58 can match eol */
                    YY_RULE_SETUP
#line 779 "scan.l"
                    {
                        addlit(yytext, yyleng, yyscanner);
                    }
                    YY_BREAK
                case YY_STATE_EOF(xd):
                case YY_STATE_EOF(xui):
#line 782 "scan.l"
                {
                    yyerror("unterminated quoted identifier");
                }
                    YY_BREAK
                case 59:
                    YY_RULE_SETUP
#line 784 "scan.l"
                    {
                        char* ident;

                        SET_YYLLOC();
                        /* throw back all but the initial u/U */
                        yyless(1);
                        /* and treat it as {identifier} */
                        ident = downcase_truncate_identifier(yytext, yyleng, true);
                        yylval->str = ident;
                        return IDENT;
                    }
                    YY_BREAK
                case 60:
                    YY_RULE_SETUP
#line 796 "scan.l"
                    {
                        SET_YYLLOC();
                        return TYPECAST;
                    }
                    YY_BREAK
                case 61:
                    YY_RULE_SETUP
#line 801 "scan.l"
                    {
                        SET_YYLLOC();
                        return DOT_DOT;
                    }
                    YY_BREAK
                case 62:
                    YY_RULE_SETUP
#line 806 "scan.l"
                    {
                        SET_YYLLOC();
                        return COLON_EQUALS;
                    }
                    YY_BREAK
                case 63:
                    YY_RULE_SETUP
#line 811 "scan.l"
                    {
                        SET_YYLLOC();
                        return yytext[0];
                    }
                    YY_BREAK
                case 64:
                    YY_RULE_SETUP
#line 816 "scan.l"
                    {
                        /*
					 * Check for embedded slash-star or dash-dash; those
					 * are comment starts, so operator must stop there.
					 * Note that slash-star or dash-dash at the first
					 * character will match a prior rule, not this one.
					 */
                        int nchars = yyleng;
                        char* slashstar = strstr(yytext, "/*");
                        char* dashdash = strstr(yytext, "--");

                        if (slashstar && dashdash) {
                            /* if both appear, take the first one */
                            if (slashstar > dashdash)
                                slashstar = dashdash;
                        } else if (!slashstar)
                            slashstar = dashdash;
                        if (slashstar)
                            nchars = slashstar - yytext;

                        /*
					 * For SQL compatibility, '+' and '-' cannot be the
					 * last char of a multi-char operator unless the operator
					 * contains chars that are not in SQL operators.
					 * The idea is to lex '=-' as two operators, but not
					 * to forbid operator names like '?-' that could not be
					 * sequences of SQL operators.
					 */
                        if (nchars > 1 && (yytext[nchars - 1] == '+' || yytext[nchars - 1] == '-')) {
                            int ic;

                            for (ic = nchars - 2; ic >= 0; ic--) {
                                char c = yytext[ic];
                                if (c == '~' || c == '!' || c == '@' || c == '#' || c == '^' || c == '&' || c == '|' ||
                                    c == '`' || c == '?' || c == '%')
                                    break;
                            }
                            if (ic < 0) {
                                /*
							 * didn't find a qualifying character, so remove
							 * all trailing [+-]
							 */
                                do {
                                    nchars--;
                                } while (nchars > 1 && (yytext[nchars - 1] == '+' || yytext[nchars - 1] == '-'));
                            }
                        }

                        SET_YYLLOC();

                        if (nchars < yyleng) {
                            /* Strip the unwanted chars from the token */
                            yyless(nchars);
                            /*
						 * If what we have left is only one char, and it's
						 * one of the characters matching "self", then
						 * return it as a character token the same way
						 * that the "self" rule would have.
						 */
                            if (nchars == 1 && strchr(",()[].;:+-*/%^<>=", yytext[0]))
                                return yytext[0];
                        }

                        /*
					 * Complain if operator is too long.  Unlike the case
					 * for identifiers, we make this an error not a notice-
					 * and-truncate, because the odds are we are looking at
					 * a syntactic mistake anyway.
					 */
                        if (nchars >= NAMEDATALEN)
                            yyerror("operator too long");

                        /* Convert "!=" operator to "<>" for compatibility */
                        if (strcmp(yytext, "!=") == 0)
                            yylval->str = pstrdup("<>");
                        else
                            yylval->str = pstrdup(yytext);
                        return Op;
                    }
                    YY_BREAK
                case 65:
                    YY_RULE_SETUP
#line 909 "scan.l"
                    {
                        SET_YYLLOC();
                        yylval->ival = atol(yytext + 1);
                        return PARAM;
                    }
                    YY_BREAK
                case 66:
                    YY_RULE_SETUP
#line 915 "scan.l"
                    {
                        SET_YYLLOC();
                        return process_integer_literal(yytext, yylval);
                    }
                    YY_BREAK
                case 67:
                    YY_RULE_SETUP
#line 919 "scan.l"
                    {
                        SET_YYLLOC();
                        yylval->str = pstrdup(yytext);
                        return FCONST;
                    }
                    YY_BREAK
                case 68:
                    YY_RULE_SETUP
#line 924 "scan.l"
                    {
                        /* throw back the .., and treat as integer */
                        yyless(yyleng - 2);
                        SET_YYLLOC();
                        return process_integer_literal(yytext, yylval);
                    }
                    YY_BREAK
                case 69:
                    YY_RULE_SETUP
#line 930 "scan.l"
                    {
                        SET_YYLLOC();
                        yylval->str = pstrdup(yytext);
                        return FCONST;
                    }
                    YY_BREAK
                case 70:
                    YY_RULE_SETUP
#line 935 "scan.l"
                    {
                        /*
					 * throw back the [Ee], and treat as {decimal}.  Note
					 * that it is possible the input is actually {integer},
					 * but since this case will almost certainly lead to a
					 * syntax error anyway, we don't bother to distinguish.
					 */
                        yyless(yyleng - 1);
                        SET_YYLLOC();
                        yylval->str = pstrdup(yytext);
                        return FCONST;
                    }
                    YY_BREAK
                case 71:
                    YY_RULE_SETUP
#line 947 "scan.l"
                    {
                        /* throw back the [Ee][+-], and proceed as above */
                        yyless(yyleng - 2);
                        SET_YYLLOC();
                        yylval->str = pstrdup(yytext);
                        return FCONST;
                    }
                    YY_BREAK
                case 72:
                    YY_RULE_SETUP
#line 956 "scan.l"
                    {
                        const ScanKeyword* keyword;
                        char* ident;

                        SET_YYLLOC();

                        /* Is it a keyword? */
                        keyword = ScanKeywordLookup(yytext, yyextra->keywords, yyextra->num_keywords);
                        if (keyword != NULL) {
                            yylval->keyword = keyword->name;
                            return keyword->value;
                        }

                        /*
					 * No.  Convert the identifier to lower case, and truncate
					 * if necessary.
					 */
                        ident = downcase_truncate_identifier(yytext, yyleng, true);
                        yylval->str = ident;
                        return IDENT;
                    }
                    YY_BREAK
                case 73:
                    YY_RULE_SETUP
#line 981 "scan.l"
                    {
                        SET_YYLLOC();
                        return yytext[0];
                    }
                    YY_BREAK
                case YY_STATE_EOF(INITIAL):
#line 986 "scan.l"
                {
                    SET_YYLLOC();
                    yyterminate();
                }
                    YY_BREAK
                case 74:
                    YY_RULE_SETUP
#line 991 "scan.l"
                    YY_FATAL_ERROR("flex scanner jammed");
                    YY_BREAK
#line 2532 "scan.cpp"

                case YY_END_OF_BUFFER: {
                    /* Amount of text matched not including the EOB char. */
                    int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

                    /* Undo the effects of YY_DO_BEFORE_ACTION. */
                    *yy_cp = yyg->yy_hold_char;
                    YY_RESTORE_YY_MORE_OFFSET

                    if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW) {
                        /* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
                        yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                        YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
                        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
                    }

                    /* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
                    if (yyg->yy_c_buf_p <=
                        &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars]) { /* This was really a NUL. */
                        yy_state_type yy_next_state;

                        yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

                        yy_current_state = yy_get_previous_state(yyscanner);

                        /* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

                        yy_next_state = yy_try_NUL_trans(yy_current_state, yyscanner);

                        yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

                        if (yy_next_state) {
                            /* Consume the NUL. */
                            yy_cp = ++yyg->yy_c_buf_p;
                            yy_current_state = yy_next_state;
                            goto yy_match;
                        }

                        else {
                            yy_cp = yyg->yy_last_accepting_cpos;
                            yy_current_state = yyg->yy_last_accepting_state;
                            goto yy_find_action;
                        }
                    }

                    else
                        switch (yy_get_next_buffer(yyscanner)) {
                            case EOB_ACT_END_OF_FILE: {
                                yyg->yy_did_buffer_switch_on_eof = 0;

                                if (yywrap(yyscanner)) {
                                    /* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
                                    yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

                                    yy_act = YY_STATE_EOF(YY_START);
                                    goto do_action;
                                }

                                else {
                                    if (!yyg->yy_did_buffer_switch_on_eof)
                                        YY_NEW_FILE;
                                }
                                break;
                            }

                            case EOB_ACT_CONTINUE_SCAN:
                                yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

                                yy_current_state = yy_get_previous_state(yyscanner);

                                yy_cp = yyg->yy_c_buf_p;
                                yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
                                goto yy_match;

                            case EOB_ACT_LAST_MATCH:
                                yyg->yy_c_buf_p = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

                                yy_current_state = yy_get_previous_state(yyscanner);

                                yy_cp = yyg->yy_c_buf_p;
                                yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
                                goto yy_find_action;
                        }
                    break;
                }

                default:
                    YY_FATAL_ERROR("fatal flex scanner internal error--no action found");
            } /* end of action switch */
        }     /* end of scanning one token */
    }         /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    char* dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
    char* source = yyg->yytext_ptr;
    int number_to_move, i;
    int ret_val;

    if (yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1])
        YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed");

    if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0) { /* Don't try to fill the buffer, so this is an EOF. */
        if (yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1) {
            /* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
            return EOB_ACT_END_OF_FILE;
        }

        else {
            /* We matched some text prior to the EOB, first
			 * process it.
			 */
            return EOB_ACT_LAST_MATCH;
        }
    }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

    for (i = 0; i < number_to_move; ++i) *(dest++) = *(source++);

    if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
        /* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

    else {
        int num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

        while (num_to_read <= 0) { /* Not enough room in the buffer - grow it. */

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

            int yy_c_buf_p_offset = (int) (yyg->yy_c_buf_p - b->yy_ch_buf);

            if (b->yy_is_our_buffer) {
                int new_size = b->yy_buf_size * 2;

                if (new_size <= 0)
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char*)
                    /* Include room in for 2 EOB chars. */
                    yyrealloc((void*) b->yy_ch_buf, (yy_size_t)(b->yy_buf_size + 2), yyscanner);
            } else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = NULL;

            if (!b->yy_ch_buf)
                YY_FATAL_ERROR("fatal error - scanner input buffer overflow");

            yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
        }

        if (num_to_read > YY_READ_BUF_SIZE)
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]), yyg->yy_n_chars, num_to_read);

        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
    }

    if (yyg->yy_n_chars == 0) {
        if (number_to_move == YY_MORE_ADJ) {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart(yyin, yyscanner);
        }

        else {
            ret_val = EOB_ACT_LAST_MATCH;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_EOF_PENDING;
        }
    }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
        /* Extend the array by 50%, plus the number we really need. */
        int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf =
            (char*) yyrealloc((void*) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size, yyscanner);
        if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
            YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
        /* "- 2" to take care of EOB's */
        YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
    }

    yyg->yy_n_chars += number_to_move;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

    return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state(yyscan_t yyscanner) {
    yy_state_type yy_current_state;
    char* yy_cp;
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;

    yy_current_state = yyg->yy_start;

    for (yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp) {
        YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        if (yy_accept[yy_current_state]) {
            yyg->yy_last_accepting_state = yy_current_state;
            yyg->yy_last_accepting_cpos = yy_cp;
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
            yy_current_state = (int) yy_def[yy_current_state];
            if (yy_current_state >= 281)
                yy_c = yy_meta[yy_c];
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    }

    return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state, yyscan_t yyscanner) {
    int yy_is_jam;
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner; /* This var may be unused depending upon options. */
    char* yy_cp = yyg->yy_c_buf_p;

    YY_CHAR yy_c = 1;
    if (yy_accept[yy_current_state]) {
        yyg->yy_last_accepting_state = yy_current_state;
        yyg->yy_last_accepting_cpos = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
        yy_current_state = (int) yy_def[yy_current_state];
        if (yy_current_state >= 281)
            yy_c = yy_meta[yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 280);

    (void) yyg;
    return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(yyscan_t yyscanner)
#else
static int input(yyscan_t yyscanner)
#endif

{
    int c;
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;

    *yyg->yy_c_buf_p = yyg->yy_hold_char;

    if (*yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR) {
        /* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
        if (yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars])
            /* This was really a NUL. */
            *yyg->yy_c_buf_p = '\0';

        else { /* need more input */
            int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
            ++yyg->yy_c_buf_p;

            switch (yy_get_next_buffer(yyscanner)) {
                case EOB_ACT_LAST_MATCH:
                    /* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

                    /* Reset buffer status. */
                    yyrestart(yyin, yyscanner);

                    /*FALLTHROUGH*/

                case EOB_ACT_END_OF_FILE: {
                    if (yywrap(yyscanner))
                        return 0;

                    if (!yyg->yy_did_buffer_switch_on_eof)
                        YY_NEW_FILE;
#ifdef __cplusplus
                    return yyinput(yyscanner);
#else
                    return input(yyscanner);
#endif
                }

                case EOB_ACT_CONTINUE_SCAN:
                    yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
                    break;
            }
        }
    }

    c = *(unsigned char*) yyg->yy_c_buf_p; /* cast for 8-bit char's */
    *yyg->yy_c_buf_p = '\0';               /* preserve yytext */
    yyg->yy_hold_char = *++yyg->yy_c_buf_p;

    return c;
}
#endif /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart(FILE* input_file, yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;

    if (!YY_CURRENT_BUFFER) {
        yyensure_buffer_stack(yyscanner);
        YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner);
    }

    yy_init_buffer(YY_CURRENT_BUFFER, input_file, yyscanner);
    yy_load_buffer_state(yyscanner);
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;

    /* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
    yyensure_buffer_stack(yyscanner);
    if (YY_CURRENT_BUFFER == new_buffer)
        return;

    if (YY_CURRENT_BUFFER) {
        /* Flush out information for old buffer. */
        *yyg->yy_c_buf_p = yyg->yy_hold_char;
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
    }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    yy_load_buffer_state(yyscanner);

    /* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
    yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer(FILE* file, int size, yyscan_t yyscanner) {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yyalloc(sizeof(struct yy_buffer_state), yyscanner);
    if (!b)
        YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
    b->yy_ch_buf = (char*) yyalloc((yy_size_t)(b->yy_buf_size + 2), yyscanner);
    if (!b->yy_ch_buf)
        YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

    b->yy_is_our_buffer = 1;

    yy_init_buffer(b, file, yyscanner);

    return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
void yy_delete_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;

    if (!b)
        return;

    if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

    if (b->yy_is_our_buffer)
        yyfree((void*) b->yy_ch_buf, yyscanner);

    yyfree((void*) b, yyscanner);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer(YY_BUFFER_STATE b, FILE* file, yyscan_t yyscanner)

{
    int oerrno = errno;
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;

    yy_flush_buffer(b, yyscanner);

    b->yy_input_file = file;
    b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER) {
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

    b->yy_is_interactive = 0;

    errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
void yy_flush_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    if (!b)
        return;

    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if (b == YY_CURRENT_BUFFER)
        yy_load_buffer_state(yyscanner);
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    if (new_buffer == NULL)
        return;

    yyensure_buffer_stack(yyscanner);

    /* This block is copied from yy_switch_to_buffer. */
    if (YY_CURRENT_BUFFER) {
        /* Flush out information for old buffer. */
        *yyg->yy_c_buf_p = yyg->yy_hold_char;
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
    }

    /* Only push if top exists. Otherwise, replace top. */
    if (YY_CURRENT_BUFFER)
        yyg->yy_buffer_stack_top++;
    YY_CURRENT_BUFFER_LVALUE = new_buffer;

    /* copied from yy_switch_to_buffer. */
    yy_load_buffer_state(yyscanner);
    yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    if (!YY_CURRENT_BUFFER)
        return;

    yy_delete_buffer(YY_CURRENT_BUFFER, yyscanner);
    YY_CURRENT_BUFFER_LVALUE = NULL;
    if (yyg->yy_buffer_stack_top > 0)
        --yyg->yy_buffer_stack_top;

    if (YY_CURRENT_BUFFER) {
        yy_load_buffer_state(yyscanner);
        yyg->yy_did_buffer_switch_on_eof = 1;
    }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack(yyscan_t yyscanner) {
    yy_size_t num_to_alloc;
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;

    if (!yyg->yy_buffer_stack) {
        /* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
        num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
        yyg->yy_buffer_stack =
            (struct yy_buffer_state**) yyalloc(num_to_alloc * sizeof(struct yy_buffer_state*), yyscanner);
        if (!yyg->yy_buffer_stack)
            YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

        memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

        yyg->yy_buffer_stack_max = num_to_alloc;
        yyg->yy_buffer_stack_top = 0;
        return;
    }

    if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1) {
        /* Increase the buffer to prepare for a possible push. */
        yy_size_t grow_size = 8 /* arbitrary grow size */;

        num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
        yyg->yy_buffer_stack = (struct yy_buffer_state**) yyrealloc(yyg->yy_buffer_stack,
                                                                    num_to_alloc * sizeof(struct yy_buffer_state*),
                                                                    yyscanner);
        if (!yyg->yy_buffer_stack)
            YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

        /* zero only the new slots.*/
        memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
        yyg->yy_buffer_stack_max = num_to_alloc;
    }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer(char* base, yy_size_t size, yyscan_t yyscanner) {
    YY_BUFFER_STATE b;

    if (size < 2 || base[size - 2] != YY_END_OF_BUFFER_CHAR || base[size - 1] != YY_END_OF_BUFFER_CHAR)
        /* They forgot to leave room for the EOB's. */
        return NULL;

    b = (YY_BUFFER_STATE) yyalloc(sizeof(struct yy_buffer_state), yyscanner);
    if (!b)
        YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");

    b->yy_buf_size = (int) (size - 2); /* "- 2" to take care of EOB's */
    b->yy_buf_pos = b->yy_ch_buf = base;
    b->yy_is_our_buffer = 0;
    b->yy_input_file = NULL;
    b->yy_n_chars = b->yy_buf_size;
    b->yy_is_interactive = 0;
    b->yy_at_bol = 1;
    b->yy_fill_buffer = 0;
    b->yy_buffer_status = YY_BUFFER_NEW;

    yy_switch_to_buffer(b, yyscanner);

    return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string(const char* yystr, yyscan_t yyscanner) {
    return yy_scan_bytes(yystr, (int) strlen(yystr), yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes(const char* yybytes, int _yybytes_len, yyscan_t yyscanner) {
    YY_BUFFER_STATE b;
    char* buf;
    yy_size_t n;
    int i;

    /* Get memory for full buffer, including space for trailing EOB's. */
    n = (yy_size_t)(_yybytes_len + 2);
    buf = (char*) yyalloc(n, yyscanner);
    if (!buf)
        YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");

    for (i = 0; i < _yybytes_len; ++i) buf[i] = yybytes[i];

    buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

    b = yy_scan_buffer(buf, n, yyscanner);
    if (!b)
        YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

    /* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
    b->yy_is_our_buffer = 1;

    return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error(const char* msg, yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    (void) yyg;
    fprintf(stderr, "%s\n", msg);
    exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                                                                                                      \
    do {                                                                                                               \
        /* Undo effects of setting up yytext. */                                                                       \
        int yyless_macro_arg = (n);                                                                                    \
        YY_LESS_LINENO(yyless_macro_arg);                                                                              \
        yytext[yyleng] = yyg->yy_hold_char;                                                                            \
        yyg->yy_c_buf_p = yytext + yyless_macro_arg;                                                                   \
        yyg->yy_hold_char = *yyg->yy_c_buf_p;                                                                          \
        *yyg->yy_c_buf_p = '\0';                                                                                       \
        yyleng = yyless_macro_arg;                                                                                     \
    } while (0)

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;

    if (!YY_CURRENT_BUFFER)
        return 0;

    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;

    if (!YY_CURRENT_BUFFER)
        return 0;

    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE* yyget_in(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE* yyget_out(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char* yyget_text(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra(YY_EXTRA_TYPE user_defined, yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    yyextra = user_defined;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno(int _line_number, yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;

    /* lineno is only valid if an input buffer exists. */
    if (!YY_CURRENT_BUFFER)
        YY_FATAL_ERROR("yyset_lineno called with no buffer");

    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column(int _column_no, yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;

    /* column is only valid if an input buffer exists. */
    if (!YY_CURRENT_BUFFER)
        YY_FATAL_ERROR("yyset_column called with no buffer");

    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in(FILE* _in_str, yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    yyin = _in_str;
}

void yyset_out(FILE* _out_str, yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    yyout = _out_str;
}

int yyget_debug(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    return yy_flex_debug;
}

void yyset_debug(int _bdebug, yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    yy_flex_debug = _bdebug;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE* yyget_lval(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    return yylval;
}

void yyset_lval(YYSTYPE* yylval_param, yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    yylval = yylval_param;
}

YYLTYPE* yyget_lloc(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    return yylloc;
}

void yyset_lloc(YYLTYPE* yylloc_param, yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    yylloc = yylloc_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals) {
    if (ptr_yy_globals == NULL) {
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc(sizeof(struct yyguts_t), NULL);

    if (*ptr_yy_globals == NULL) {
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals, 0x00, sizeof(struct yyguts_t));

    return yy_init_globals(*ptr_yy_globals);
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals) {
    struct yyguts_t dummy_yyguts;

    yyset_extra(yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL) {
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc(sizeof(struct yyguts_t), &dummy_yyguts);

    if (*ptr_yy_globals == NULL) {
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals, 0x00, sizeof(struct yyguts_t));

    yyset_extra(yy_user_defined, *ptr_yy_globals);

    return yy_init_globals(*ptr_yy_globals);
}

static int yy_init_globals(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack = NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy(yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;

    /* Pop the buffer stack, destroying each element. */
    while (YY_CURRENT_BUFFER) {
        yy_delete_buffer(YY_CURRENT_BUFFER, yyscanner);
        YY_CURRENT_BUFFER_LVALUE = NULL;
        yypop_buffer_state(yyscanner);
    }

    /* Destroy the stack itself. */
    yyfree(yyg->yy_buffer_stack, yyscanner);
    yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
    yyfree(yyg->yy_start_stack, yyscanner);
    yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals(yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree(yyscanner, yyscanner);
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char* s1, const char* s2, int n, yyscan_t yyscanner) {
    struct yyguts_t* yyg = (struct yyguts_t*) yyscanner;
    (void) yyg;

    int i;
    for (i = 0; i < n; ++i) s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(const char* s, yyscan_t yyscanner) {
    int n;
    for (n = 0; s[n]; ++n)
        ;

    return n;
}
#endif

#define YYTABLES_NAME "yytables"

#line 991 "scan.l"

/*
 * Arrange access to yyextra for subroutines of the main yylex() function.
 * We expect each subroutine to have a yyscanner parameter.  Rather than
 * use the yyget_xxx functions, which might or might not get inlined by the
 * compiler, we cheat just a bit and cast yyscanner to the right type.
 */
#undef yyextra
#define yyextra (((struct yyguts_t*) yyscanner)->yyextra_r)

/* Likewise for a couple of other things we need. */
#undef yylloc
#define yylloc (((struct yyguts_t*) yyscanner)->yylloc_r)
#undef yyleng
#define yyleng (((struct yyguts_t*) yyscanner)->yyleng_r)

/*
 * scanner_errposition
 *		Report a lexer or grammar error cursor position, if possible.
 *
 * This is expected to be used within an ereport() call.  The return value
 * is a dummy (always 0, in fact).
 *
 * Note that this can only be used for messages emitted during raw parsing
 * (essentially, scan.l and gram.y), since it requires the yyscanner struct
 * to still be available.
 */
int scanner_errposition(int location, core_yyscan_t yyscanner) {
    int pos;

    if (location < 0)
        return 0; /* no-op if location is unknown */

    /* Convert byte offset to character number */
    pos = pg_mbstrlen_with_len(yyextra->scanbuf, location) + 1;
    /* And pass it to the ereport mechanism */
    return errposition(pos);
}

/*
 * scanner_yyerror
 *		Report a lexer or grammar error.
 *
 * The message's cursor position is whatever YYLLOC was last set to,
 * ie, the start of the current token if called within yylex(), or the
 * most recently lexed token if called from the grammar.
 * This is OK for syntax error messages from the Bison parser, because Bison
 * parsers report error as soon as the first unparsable token is reached.
 * Beware of using yyerror for other purposes, as the cursor position might
 * be misleading!
 */
void scanner_yyerror(const char* message, core_yyscan_t yyscanner) {
    const char* loc = yyextra->scanbuf + *yylloc;

    if (*loc == YY_END_OF_BUFFER_CHAR) {
        ereport(ERROR,
                errcode(ERRCODE_SYNTAX_ERROR),
                /* translator: %s is typically the translation of "syntax error" */
                errmsg("%s at end of input", message),
                lexer_errposition());
    } else {
        ereport(ERROR,
                errcode(ERRCODE_SYNTAX_ERROR),
                /* translator: first %s is typically the translation of "syntax error" */
                errmsg("%s at or near \"%s\"", message, loc),
                lexer_errposition());
    }
}

/*
 * Called before any actual parsing is done
 */
core_yyscan_t scanner_init(const char* str, core_yy_extra_type* yyext, const ScanKeyword* keywords, int num_keywords) {
    Size slen = strlen(str);
    yyscan_t scanner;

    if (yylex_init(&scanner) != 0)
        elog(ERROR, "yylex_init() failed: %m");

    core_yyset_extra(yyext, scanner);

    yyext->keywords = keywords;
    yyext->num_keywords = num_keywords;

    /*
	 * Make a scan buffer with special termination needed by flex.
	 */
    yyext->scanbuf = (char*) palloc(slen + 2);
    yyext->scanbuflen = slen;
    memcpy(yyext->scanbuf, str, slen);
    yyext->scanbuf[slen] = yyext->scanbuf[slen + 1] = YY_END_OF_BUFFER_CHAR;
    yy_scan_buffer(yyext->scanbuf, slen + 2, scanner);

    /* initialize literal buffer to a reasonable but expansible size */
    yyext->literalalloc = 1024;
    yyext->literalbuf = (char*) palloc(yyext->literalalloc);
    yyext->literallen = 0;

    return scanner;
}

/*
 * Called after parsing is done to clean up after scanner_init()
 */
void scanner_finish(core_yyscan_t yyscanner) {
    /*
	 * We don't bother to call yylex_destroy(), because all it would do
	 * is pfree a small amount of control storage.  It's cheaper to leak
	 * the storage until the parsing context is destroyed.  The amount of
	 * space involved is usually negligible compared to the output parse
	 * tree anyway.
	 *
	 * We do bother to pfree the scanbuf and literal buffer, but only if they
	 * represent a nontrivial amount of space.  The 8K cutoff is arbitrary.
	 */
    if (yyextra->scanbuflen >= 8192)
        pfree(yyextra->scanbuf);
    if (yyextra->literalalloc >= 8192)
        pfree(yyextra->literalbuf);
}

static void addlit(char* ytext, int yleng, core_yyscan_t yyscanner) {
    /* enlarge buffer if needed */
    if ((yyextra->literallen + yleng) >= yyextra->literalalloc) {
        do {
            yyextra->literalalloc *= 2;
        } while ((yyextra->literallen + yleng) >= yyextra->literalalloc);
        yyextra->literalbuf = (char*) repalloc(yyextra->literalbuf, yyextra->literalalloc);
    }
    /* append new data */
    memcpy(yyextra->literalbuf + yyextra->literallen, ytext, yleng);
    yyextra->literallen += yleng;
}

static void addlitchar(unsigned char ychar, core_yyscan_t yyscanner) {
    /* enlarge buffer if needed */
    if ((yyextra->literallen + 1) >= yyextra->literalalloc) {
        yyextra->literalalloc *= 2;
        yyextra->literalbuf = (char*) repalloc(yyextra->literalbuf, yyextra->literalalloc);
    }
    /* append new data */
    yyextra->literalbuf[yyextra->literallen] = ychar;
    yyextra->literallen += 1;
}

/*
 * Create a palloc'd copy of literalbuf, adding a trailing null.
 */
static char* litbufdup(core_yyscan_t yyscanner) {
    int llen = yyextra->literallen;
    char* new_c;

    new_c = reinterpret_cast<char*>(palloc(llen + 1));
    memcpy(new_c, yyextra->literalbuf, llen);
    new_c[llen] = '\0';
    return new_c;
}

static int process_integer_literal(const char* token, YYSTYPE* lval) {
    long val;
    char* endptr;

    errno = 0;
    val = strtol(token, &endptr, 10);
    if (*endptr != '\0' ||
        errno == ERANGE
#ifdef HAVE_LONG_INT_64
        /* if long > 32 bits, check for overflow of int4 */
        || val != (long) ((int32_t) val)
#endif
    ) {
        /* integer too large, treat it as a float */
        lval->str = pstrdup(token);
        return FCONST;
    }
    lval->ival = val;
    return ICONST;
}

static unsigned int hexval(unsigned char c) {
    if (c >= '0' && c <= '9')
        return c - '0';
    if (c >= 'a' && c <= 'f')
        return c - 'a' + 0xA;
    if (c >= 'A' && c <= 'F')
        return c - 'A' + 0xA;
    elog(ERROR, "invalid hexadecimal digit");
    return 0; /* not reached */
}

static void check_unicode_value(pg_wchar c, char* loc, core_yyscan_t yyscanner) {
    if (GetDatabaseEncoding() == PG_UTF8)
        return;

    if (c > 0x7F) {
        ADVANCE_YYLLOC(loc - yyextra->literalbuf + 3); /* 3 for U&" */
        yyerror("Unicode escape values cannot be used for code point values above 007F when the server encoding is not "
                "UTF8");
    }
}

static bool is_utf16_surrogate_first(pg_wchar c) { return (c >= 0xD800 && c <= 0xDBFF); }

static bool is_utf16_surrogate_second(pg_wchar c) { return (c >= 0xDC00 && c <= 0xDFFF); }

static pg_wchar surrogate_pair_to_codepoint(pg_wchar first, pg_wchar second) {
    return ((first & 0x3FF) << 10) + 0x10000 + (second & 0x3FF);
}

static void addunicode(pg_wchar c, core_yyscan_t yyscanner) {
    char buf[8];

    if (c == 0 || c > 0x10FFFF)
        yyerror("invalid Unicode escape value");
    if (c > 0x7F) {
        if (GetDatabaseEncoding() != PG_UTF8)
            yyerror("Unicode escape values cannot be used for code point values above 007F when the server encoding is "
                    "not UTF8");
        yyextra->saw_non_ascii = true;
    }
    unicode_to_utf8(c, (unsigned char*) buf);
    addlit(buf, pg_mblen(buf), yyscanner);
}

/* is 'escape' acceptable as Unicode escape character (UESCAPE syntax) ? */
static bool check_uescapechar(unsigned char escape) {
    if (isxdigit(escape) || escape == '+' || escape == '\'' || escape == '"' || scanner_isspace(escape)) {
        return false;
    } else
        return true;
}

/* like litbufdup, but handle unicode escapes */
static char* litbuf_udeescape(unsigned char escape, core_yyscan_t yyscanner) {
    char* new_c;
    char *litbuf, *in, *out;
    pg_wchar pair_first = 0;

    /* Make literalbuf null-terminated to simplify the scanning loop */
    litbuf = yyextra->literalbuf;
    litbuf[yyextra->literallen] = '\0';

    /*
	 * This relies on the subtle assumption that a UTF-8 expansion
	 * cannot be longer than its escaped representation.
	 */
    new_c = reinterpret_cast<char*>(palloc(yyextra->literallen + 1));

    in = litbuf;
    out = new_c;
    while (*in) {
        if (in[0] == escape) {
            if (in[1] == escape) {
                if (pair_first) {
                    ADVANCE_YYLLOC(in - litbuf + 3); /* 3 for U&" */
                    yyerror("invalid Unicode surrogate pair");
                }
                *out++ = escape;
                in += 2;
            } else if (isxdigit((unsigned char) in[1]) && isxdigit((unsigned char) in[2]) &&
                       isxdigit((unsigned char) in[3]) && isxdigit((unsigned char) in[4])) {
                pg_wchar unicode;

                unicode = (hexval(in[1]) << 12) + (hexval(in[2]) << 8) + (hexval(in[3]) << 4) + hexval(in[4]);
                check_unicode_value(unicode, in, yyscanner);
                if (pair_first) {
                    if (is_utf16_surrogate_second(unicode)) {
                        unicode = surrogate_pair_to_codepoint(pair_first, unicode);
                        pair_first = 0;
                    } else {
                        ADVANCE_YYLLOC(in - litbuf + 3); /* 3 for U&" */
                        yyerror("invalid Unicode surrogate pair");
                    }
                } else if (is_utf16_surrogate_second(unicode))
                    yyerror("invalid Unicode surrogate pair");

                if (is_utf16_surrogate_first(unicode))
                    pair_first = unicode;
                else {
                    unicode_to_utf8(unicode, (unsigned char*) out);
                    out += pg_mblen(out);
                }
                in += 5;
            } else if (in[1] == '+' && isxdigit((unsigned char) in[2]) && isxdigit((unsigned char) in[3]) &&
                       isxdigit((unsigned char) in[4]) && isxdigit((unsigned char) in[5]) &&
                       isxdigit((unsigned char) in[6]) && isxdigit((unsigned char) in[7])) {
                pg_wchar unicode;

                unicode = (hexval(in[2]) << 20) + (hexval(in[3]) << 16) + (hexval(in[4]) << 12) + (hexval(in[5]) << 8) +
                          (hexval(in[6]) << 4) + hexval(in[7]);
                check_unicode_value(unicode, in, yyscanner);
                if (pair_first) {
                    if (is_utf16_surrogate_second(unicode)) {
                        unicode = surrogate_pair_to_codepoint(pair_first, unicode);
                        pair_first = 0;
                    } else {
                        ADVANCE_YYLLOC(in - litbuf + 3); /* 3 for U&" */
                        yyerror("invalid Unicode surrogate pair");
                    }
                } else if (is_utf16_surrogate_second(unicode))
                    yyerror("invalid Unicode surrogate pair");

                if (is_utf16_surrogate_first(unicode))
                    pair_first = unicode;
                else {
                    unicode_to_utf8(unicode, (unsigned char*) out);
                    out += pg_mblen(out);
                }
                in += 8;
            } else {
                ADVANCE_YYLLOC(in - litbuf + 3); /* 3 for U&" */
                yyerror("invalid Unicode escape value");
            }
        } else {
            if (pair_first) {
                ADVANCE_YYLLOC(in - litbuf + 3); /* 3 for U&" */
                yyerror("invalid Unicode surrogate pair");
            }
            *out++ = *in++;
        }
    }

    /* unfinished surrogate pair? */
    if (pair_first) {
        ADVANCE_YYLLOC(in - litbuf + 3); /* 3 for U&" */
        yyerror("invalid Unicode surrogate pair");
    }

    *out = '\0';

    /*
	 * We could skip pg_verifymbstr if we didn't process any non-7-bit-ASCII
	 * codes; but it's probably not worth the trouble, since this isn't
	 * likely to be a performance-critical path.
	 */
    pg_verifymbstr(new_c, out - new_c, false);
    return new_c;
}

static unsigned char unescape_single_char(unsigned char c, core_yyscan_t yyscanner) {
    switch (c) {
        case 'b':
            return '\b';
        case 'f':
            return '\f';
        case 'n':
            return '\n';
        case 'r':
            return '\r';
        case 't':
            return '\t';
        default:
            /* check for backslash followed by non-7-bit-ASCII */
            if (c == '\0' || IS_HIGHBIT_SET(c))
                yyextra->saw_non_ascii = true;

            return c;
    }
}

static void check_string_escape_warning(unsigned char ychar, core_yyscan_t yyscanner) {
    if (ychar == '\'') {
        if (yyextra->warn_on_first_escape && escape_string_warning)
            ereport(WARNING,
                    errcode(ERRCODE_NONSTANDARD_USE_OF_ESCAPE_CHARACTER),
                    errmsg("nonstandard use of \\' in a string literal"),
                    errhint("Use '' to write quotes in strings, or use the escape string syntax (E'...')."),
                    lexer_errposition());
        yyextra->warn_on_first_escape = false; /* warn only once per string */
    } else if (ychar == '\\') {
        if (yyextra->warn_on_first_escape && escape_string_warning)
            ereport(WARNING,
                    errcode(ERRCODE_NONSTANDARD_USE_OF_ESCAPE_CHARACTER),
                    errmsg("nonstandard use of \\\\ in a string literal"),
                    errhint("Use the escape string syntax for backslashes, e.g., E'\\\\'."),
                    lexer_errposition());
        yyextra->warn_on_first_escape = false; /* warn only once per string */
    } else
        check_escape_warning(yyscanner);
}

static void check_escape_warning(core_yyscan_t yyscanner) {
    if (yyextra->warn_on_first_escape && escape_string_warning)
        ereport(WARNING,
                errcode(ERRCODE_NONSTANDARD_USE_OF_ESCAPE_CHARACTER),
                errmsg("nonstandard use of escape in a string literal"),
                errhint("Use the escape string syntax for escapes, e.g., E'\\r\\n'."),
                lexer_errposition());
    yyextra->warn_on_first_escape = false; /* warn only once per string */
}

/*
 * Interface functions to make flex use palloc() instead of malloc().
 * It'd be better to make these static, but flex insists otherwise.
 */

void* core_yyalloc(yy_size_t bytes, core_yyscan_t yyscanner) { return palloc(bytes); }

void* core_yyrealloc(void* ptr, yy_size_t bytes, core_yyscan_t yyscanner) {
    if (ptr)
        return repalloc(ptr, bytes);
    else
        return palloc(bytes);
}

void core_yyfree(void* ptr, core_yyscan_t yyscanner) {
    if (ptr)
        pfree(ptr);
}
